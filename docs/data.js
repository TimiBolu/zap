zigAnalysis={"typeKinds": ["Type","Void","Bool","NoReturn","Int","Float","Pointer","Array","Struct","ComptimeFloat","ComptimeInt","Undefined","Null","Optional","ErrorUnion","ErrorSet","Enum","Union","Fn","BoundFn","ArgTuple","Opaque","Frame","AnyFrame","Vector","EnumLiteral"],"params": {"zigId": "Vd29PldjNxICnUTR9JSmq7JVKnOCWAcl4SG-_x6aH4-or5iRx9YExhGVdTgSOK5b","zigVersion": "0.5.0+cb8dacab","builds": [{"target": "x86_64-windows-msvc"}],"rootName": "test"},"rootPkg": 0,"calls": [{"fn": 1169,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1170,"result": {"type": 778,"value": 782},"args": [{"type": 778,"value": 783}]},{"fn": 1171,"result": {"type": 264,"value": 377},"args": [{"type": 778,"value": 785}]},{"fn": 1172,"result": {"type": 778,"value": 787},"args": [{"type": 778,"value": 788}]},{"fn": 1173,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 615,"result": {"type": 790,"value": null},"args": [{"type": 791,"value": null}]},{"fn": 1174,"result": {"type": 778,"value": 793},"args": [{"type": 794,"value": null},{"type": 778,"value": 795}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 797,"value": null}]},{"fn": 1170,"result": {"type": 778,"value": 798},"args": [{"type": 778,"value": 799}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 800,"value": null}]},{"fn": 1176,"result": {"type": 778,"value": 802},"args": [{"type": 778,"value": 803}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 799,"value": null}]},{"fn": 1170,"result": {"type": 778,"value": 804},"args": [{"type": 778,"value": 779}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 805,"value": null}]},{"fn": 1170,"result": {"type": 778,"value": 806},"args": [{"type": 778,"value": 807}]},{"fn": 1170,"result": {"type": 778,"value": 808},"args": [{"type": 778,"value": 809}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 809,"value": null}]},{"fn": 1177,"result": {"type": 778,"value": 807},"args": [{"type": 778,"value": 807}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 783,"value": null}]},{"fn": 1170,"result": {"type": 778,"value": 811},"args": [{"type": 778,"value": 812}]},{"fn": 1170,"result": {"type": 778,"value": 813},"args": [{"type": 778,"value": 814}]},{"fn": 1170,"result": {"type": 778,"value": 815},"args": [{"type": 778,"value": 816}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 816,"value": null}]},{"fn": 1170,"result": {"type": 778,"value": 817},"args": [{"type": 778,"value": 818}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 818,"value": null}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 819,"value": null}]},{"fn": 1175,"result": {"type": 779,"value": null},"args": [{"type": 778,"value": 779},{"type": 820,"value": null}]},{"fn": 1170,"result": {"type": 778,"value": 821},"args": [{"type": 778,"value": 797}]},{"fn": 1178,"result": {"type": 823,"value": 1179},"args": [{"type": 825,"value": null}]},{"fn": 236,"result": {"type": 812,"value": null},"args": [{"type": 812,"value": null},{"type": 812,"value": null}]},{"fn": 236,"result": {"type": 812,"value": null},"args": [{"type": 812,"value": null},{"type": 812,"value": null}]},{"fn": 236,"result": {"type": 812,"value": null},"args": [{"type": 812,"value": null},{"type": 812,"value": null}]},{"fn": 1180,"result": {"type": 778,"value": 827},"args": [{"type": 570,"value": 893}]},{"fn": 1181,"result": {"type": 778,"value": 829},"args": [{"type": 778,"value": 830}]},{"fn": 1182,"result": {"type": 778,"value": 832},"args": [{"type": 778,"value": 833}]},{"fn": 1183,"result": {"type": 778,"value": 802},"args": [{"type": 778,"value": 812}]},{"fn": 1184,"result": {"type": 778,"value": 836},"args": [{"type": 778,"value": 837}]},{"fn": 1185,"result": {"type": 778,"value": 839},"args": [{"type": 778,"value": 840}]},{"fn": 1186,"result": {"type": 778,"value": 807},"args": [{"type": 842,"value": null},{"type": 843,"value": null}]},{"fn": 1186,"result": {"type": 778,"value": 844},"args": [{"type": 842,"value": null},{"type": 843,"value": null}]},{"fn": 1186,"result": {"type": 778,"value": 802},"args": [{"type": 842,"value": null},{"type": 843,"value": null}]},{"fn": 1186,"result": {"type": 778,"value": 836},"args": [{"type": 842,"value": null},{"type": 802,"value": null}]},{"fn": 1186,"result": {"type": 778,"value": 845},"args": [{"type": 842,"value": null},{"type": 802,"value": null}]},{"fn": 1186,"result": {"type": 778,"value": 837},"args": [{"type": 842,"value": null},{"type": 802,"value": null}]},{"fn": 1186,"result": {"type": 778,"value": 846},"args": [{"type": 842,"value": null},{"type": 802,"value": null}]},{"fn": 161,"result": {"type": 812,"value": null},"args": [{"type": 812,"value": null},{"type": 812,"value": null}]},{"fn": 161,"result": {"type": 812,"value": null},"args": [{"type": 812,"value": null},{"type": 812,"value": null}]},{"fn": 161,"result": {"type": 812,"value": null},"args": [{"type": 812,"value": null},{"type": 812,"value": null}]},{"fn": 1186,"result": {"type": 778,"value": 779},"args": [{"type": 842,"value": null},{"type": 843,"value": null}]},{"fn": 1187,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 848}]},{"fn": 1188,"result": {"type": 850,"value": null},"args": [{"type": 778,"value": 851}]},{"fn": 1189,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 820}]},{"fn": 1190,"result": {"type": 778,"value": 854},"args": [{"type": 778,"value": 855}]},{"fn": 1191,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1191,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1191,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1191,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1191,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1191,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1191,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1191,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1180,"result": {"type": 778,"value": 857},"args": [{"type": 858,"value": 1192}]},{"fn": 1186,"result": {"type": 778,"value": 859},"args": [{"type": 842,"value": null},{"type": 843,"value": null}]},{"fn": 1186,"result": {"type": 778,"value": 860},"args": [{"type": 842,"value": null},{"type": 843,"value": null}]},{"fn": 1193,"result": {"type": 778,"value": 812},"args": [{"type": 778,"value": 802},{"type": 778,"value": 812}]},{"fn": 1194,"result": {"type": 778,"value": 846},"args": [{"type": 778,"value": 802}]},{"fn": 1195,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 860}]},{"fn": 1195,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 864}]},{"fn": 1195,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 812}]},{"fn": 1195,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 807}]},{"fn": 1196,"result": {"type": 778,"value": 866},"args": [{"type": 778,"value": 850}]},{"fn": 1196,"result": {"type": 778,"value": 867},"args": [{"type": 778,"value": 868}]},{"fn": 1197,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1198,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 848}]},{"fn": 1199,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 802}]},{"fn": 1193,"result": {"type": 778,"value": 843},"args": [{"type": 778,"value": 843},{"type": 778,"value": 843}]},{"fn": 1184,"result": {"type": 778,"value": 837},"args": [{"type": 778,"value": 860}]},{"fn": 1200,"result": {"type": 778,"value": 802},"args": [{"type": 778,"value": 802}]},{"fn": 1184,"result": {"type": 778,"value": 836},"args": [{"type": 778,"value": 846}]},{"fn": 1180,"result": {"type": 778,"value": 873},"args": [{"type": 352,"value": 667}]},{"fn": 1201,"result": {"type": 778,"value": 832},"args": [{"type": 778,"value": 833},{"type": 875,"value": null}]},{"fn": 1202,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1202,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 818}]},{"fn": 11,"result": {"type": 850,"value": null},"args": [{"type": 842,"value": null}]},{"fn": 1203,"result": {"type": 778,"value": 878},"args": [{"type": 778,"value": 830}]},{"fn": 1170,"result": {"type": 778,"value": 879},"args": [{"type": 778,"value": 880}]},{"fn": 1170,"result": {"type": 778,"value": 881},"args": [{"type": 778,"value": 882}]},{"fn": 1170,"result": {"type": 778,"value": 883},"args": [{"type": 778,"value": 884}]},{"fn": 1204,"result": {"type": 778,"value": 807},"args": [{"type": 778,"value": 807}]},{"fn": 1205,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1205,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 797}]},{"fn": 1206,"result": {"type": 778,"value": 888},"args": [{"type": 778,"value": 848}]},{"fn": 615,"result": {"type": 790,"value": null},"args": [{"type": 791,"value": null}]},{"fn": 615,"result": {"type": 790,"value": null},"args": [{"type": 791,"value": null}]},{"fn": 1182,"result": {"type": 778,"value": 889},"args": [{"type": 778,"value": 890}]},{"fn": 1207,"result": {"type": 778,"value": 892},"args": [{"type": 778,"value": 802}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1208,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1209,"result": {"type": 778,"value": 895},"args": [{"type": 842,"value": null}]},{"fn": 1169,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 805}]},{"fn": 1170,"result": {"type": 778,"value": 896},"args": [{"type": 778,"value": 802}]},{"fn": 1170,"result": {"type": 778,"value": 897},"args": [{"type": 778,"value": 842}]},{"fn": 1170,"result": {"type": 778,"value": 898},"args": [{"type": 778,"value": 819}]},{"fn": 1170,"result": {"type": 778,"value": 899},"args": [{"type": 778,"value": 820}]},{"fn": 1170,"result": {"type": 778,"value": 900},"args": [{"type": 778,"value": 805}]},{"fn": 1210,"result": {"type": 778,"value": 902},"args": [{"type": 778,"value": 785},{"type": 778,"value": 903},{"type": 264,"value": 377},{"type": 265,"value": 378}]},{"fn": 1180,"result": {"type": 778,"value": 904},"args": [{"type": 858,"value": 1211}]},{"fn": 1182,"result": {"type": 778,"value": 905},"args": [{"type": 778,"value": 906}]},{"fn": 1182,"result": {"type": 778,"value": 907},"args": [{"type": 778,"value": 779}]},{"fn": 1182,"result": {"type": 778,"value": 908},"args": [{"type": 778,"value": 909}]},{"fn": 1182,"result": {"type": 778,"value": 910},"args": [{"type": 778,"value": 812}]},{"fn": 1199,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 837}]},{"fn": 1181,"result": {"type": 778,"value": 911},"args": [{"type": 778,"value": 814}]},{"fn": 1212,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1212,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1212,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1212,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1212,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1212,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1212,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null}]},{"fn": 1213,"result": {"type": 778,"value": 807},"args": [{"type": 778,"value": 814}]},{"fn": 1214,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 882}]},{"fn": 1215,"result": {"type": 778,"value": 807},"args": [{"type": 778,"value": 807}]},{"fn": 1216,"result": {"type": 265,"value": 378},"args": [{"type": 778,"value": 785}]},{"fn": 1217,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1217,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 816}]},{"fn": 1189,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1218,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1218,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 809}]},{"fn": 1219,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 779}]},{"fn": 1210,"result": {"type": 778,"value": 866},"args": [{"type": 778,"value": 868},{"type": 778,"value": 850},{"type": 266,"value": 379},{"type": 28,"value": 380}]},{"fn": 1210,"result": {"type": 778,"value": 867},"args": [{"type": 778,"value": 868},{"type": 778,"value": 868},{"type": 266,"value": 379},{"type": 28,"value": 380}]},{"fn": 1193,"result": {"type": 778,"value": 812},"args": [{"type": 778,"value": 812},{"type": 778,"value": 812}]},{"fn": 1193,"result": {"type": 778,"value": 807},"args": [{"type": 778,"value": 807},{"type": 778,"value": 812}]},{"fn": 1214,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 836}]},{"fn": 1184,"result": {"type": 778,"value": 846},"args": [{"type": 778,"value": 920}]},{"fn": 1201,"result": {"type": 778,"value": 889},"args": [{"type": 778,"value": 890},{"type": 875,"value": null}]},{"fn": 1194,"result": {"type": 778,"value": 836},"args": [{"type": 778,"value": 779}]},{"fn": 1194,"result": {"type": 778,"value": 845},"args": [{"type": 778,"value": 909}]},{"fn": 1194,"result": {"type": 778,"value": 837},"args": [{"type": 778,"value": 807}]},{"fn": 1220,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 800}]},{"fn": 1204,"result": {"type": 778,"value": 807},"args": [{"type": 778,"value": 884}]},{"fn": 1221,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 842}]},{"fn": 1194,"result": {"type": 778,"value": 846},"args": [{"type": 778,"value": 812}]},{"fn": 1222,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 783}]},{"fn": 1180,"result": {"type": 778,"value": 924},"args": [{"type": 473,"value": 677}]},{"fn": 1199,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 812}]},{"fn": 1199,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 807}]},{"fn": 1197,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 819}]},{"fn": 1199,"result": {"type": 843,"value": null},"args": [{"type": 778,"value": 860}]},{"fn": 1179,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 812}]},{"fn": 1222,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1179,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 848}]},{"fn": 1174,"result": {"type": 778,"value": 925},"args": [{"type": 794,"value": null},{"type": 778,"value": 926}]},{"fn": 1223,"result": {"type": 812,"value": null},"args": [{"type": 778,"value": 812},{"type": 812,"value": null}]},{"fn": 1207,"result": {"type": 778,"value": 928},"args": [{"type": 778,"value": 929}]},{"fn": 1207,"result": {"type": 778,"value": 930},"args": [{"type": 778,"value": 931}]},{"fn": 1224,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 933}]},{"fn": 1184,"result": {"type": 778,"value": 846},"args": [{"type": 778,"value": 802}]},{"fn": 1225,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1225,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1225,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1225,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1225,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1225,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1225,"result": {"type": 843,"value": null},"args": [{"type": 843,"value": null},{"type": 843,"value": null}]},{"fn": 1180,"result": {"type": 778,"value": 935},"args": [{"type": 352,"value": 663}]},{"fn": 1180,"result": {"type": 778,"value": 936},"args": [{"type": 529,"value": 848}]},{"fn": 1180,"result": {"type": 778,"value": 937},"args": [{"type": 525,"value": 743}]},{"fn": 1201,"result": {"type": 778,"value": 908},"args": [{"type": 778,"value": 909},{"type": 875,"value": null}]},{"fn": 1201,"result": {"type": 778,"value": 910},"args": [{"type": 778,"value": 812},{"type": 875,"value": null}]},{"fn": 1201,"result": {"type": 778,"value": 905},"args": [{"type": 778,"value": 906},{"type": 875,"value": null}]},{"fn": 1201,"result": {"type": 778,"value": 907},"args": [{"type": 778,"value": 779},{"type": 875,"value": null}]},{"fn": 1226,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 848}]},{"fn": 1188,"result": {"type": 850,"value": null},"args": [{"type": 778,"value": 939}]},{"fn": 1203,"result": {"type": 778,"value": 940},"args": [{"type": 778,"value": 814}]},{"fn": 1170,"result": {"type": 778,"value": 941},"args": [{"type": 778,"value": 800}]},{"fn": 1220,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1227,"result": {"type": 778,"value": 802},"args": [{"type": 778,"value": 880}]},{"fn": 1170,"result": {"type": 778,"value": 943},"args": [{"type": 778,"value": 933}]},{"fn": 1170,"result": {"type": 778,"value": 944},"args": [{"type": 778,"value": 803}]},{"fn": 1170,"result": {"type": 778,"value": 945},"args": [{"type": 778,"value": 946}]},{"fn": 1177,"result": {"type": 778,"value": 807},"args": [{"type": 778,"value": 946}]},{"fn": 1180,"result": {"type": 778,"value": 947},"args": [{"type": 564,"value": 807}]},{"fn": 1228,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 812}]},{"fn": 1229,"result": {"type": 778,"value": 812},"args": [{"type": 778,"value": 848}]},{"fn": 1180,"result": {"type": 778,"value": 950},"args": [{"type": 311,"value": 455}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1230,"result": {"type": 842,"value": null},"args": [{"type": 778,"value": 779},{"type": 868,"value": null},{"type": 868,"value": null}]},{"fn": 1172,"result": {"type": 778,"value": 952},"args": [{"type": 778,"value": 953}]},{"fn": 1185,"result": {"type": 778,"value": 954},"args": [{"type": 778,"value": 955}]},{"fn": 1224,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 780}]},{"fn": 1173,"result": {"type": 778,"value": 779},"args": [{"type": 778,"value": 799}]}],"packages": [{"name": "","file": 0,"main": 956,"table": {"builtin": 1,"std": 2,"root": 0}},{"name": "builtin","file": 1,"main": 957,"table": {}},{"name": "std","file": 2,"main": 851,"table": {"builtin": 1,"std": 2,"root": 3}},{"name": "std.special","file": 3,"main": 958,"table": {"builtin": 1,"std": 2}}],"types": [{"kind": 18,"name": "fn([]const u8, ?*builtin.StackTrace) noreturn","generic": false,"ret": 959,"args": [868,960]},{"kind": 18,"name": "fn() anyerror!void","generic": false,"ret": 961},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, []const u8) noreturn","generic": false,"ret": 959,"args": [962,963,868]},{"kind": 18,"name": "fn() void","generic": false,"ret": 850},{"kind": 18,"name": "fn() noreturn","generic": false,"ret": 959},{"kind": 18,"name": "fn() @typeOf(std.debug.getStderrStream).ReturnType.ErrorSet!*std.io.OutStream(std.os.WriteError)","generic": false,"ret": 964},{"kind": 18,"name": "fn() std.os.windows.GetStdHandleError!std.fs.file.File","generic": false,"ret": 965},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.OutStream","generic": false,"ret": 966,"args": [967]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868]},{"kind": 18,"name": "fn(builtin.StackTrace) void","generic": false,"ret": 850,"args": [970]},{"kind": 18,"name": "fn(?usize) void","generic": false,"ret": 850,"args": [963]},{"kind": 18,"name": "fn(bool) void","generic": false,"ret": 850,"args": [842]},{"kind": 18,"name": "fn(u32) std.os.windows.GetStdHandleError!*c_void","generic": false,"ret": 971,"args": [807]},{"kind": 18,"name": "fn(*c_void) std.fs.file.File","generic": false,"ret": 967,"args": [972]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868]},{"kind": 18,"name": "fn(*std.pdb.MsfStream, []u8) @typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet!usize","generic": false,"ret": 973,"args": [974,855]},{"kind": 18,"name": "fn() @typeOf(std.debug.getSelfDebugInfo).ReturnType.ErrorSet!*std.debug.DebugInfo","generic": false,"ret": 975},{"kind": 18,"name": "fn(*std.mem.Allocator) @typeOf(std.debug.openSelfDebugInfo).ReturnType.ErrorSet!std.debug.DebugInfo","generic": false,"ret": 976,"args": [977]},{"kind": 18,"name": "fn() *std.mem.Allocator","generic": false,"ret": 977},{"kind": 18,"name": "fn(*std.mem.Allocator) @typeOf(std.debug.openSelfDebugInfoWindows).ReturnType.ErrorSet!std.debug.DebugInfo","generic": false,"ret": 978,"args": [977]},{"kind": 18,"name": "fn() std.fs.OpenSelfExeError!std.fs.file.File","generic": false,"ret": 979},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*std.coff.Coff","generic": false,"ret": 980,"args": [977]},{"kind": 18,"name": "fn(std.fs.file.File) void","generic": false,"ret": 850,"args": [967]},{"kind": 18,"name": "fn(*std.mem.Allocator, std.fs.file.File) std.coff.Coff","generic": false,"ret": 981,"args": [977,967]},{"kind": 18,"name": "fn(*std.coff.Coff) @typeOf(std.coff.Coff.loadHeader).ReturnType.ErrorSet!void","generic": false,"ret": 982,"args": [983]},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.InStream","generic": false,"ret": 984,"args": [967]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError), []u8) @typeOf(std.io.in_stream.InStream(std.os.ReadError).readNoEof).ReturnType.ErrorSet!void","generic": false,"ret": 985,"args": [986,855]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError), []u8) std.os.ReadError!usize","generic": false,"ret": 987,"args": [986,855]},{"kind": 18,"name": "fn([]const u8, []const u8) bool","generic": false,"ret": 842,"args": [868,868]},{"kind": 18,"name": "fn(std.fs.file.File, u64) std.os.SeekError!void","generic": false,"ret": 988,"args": [967,802]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) @typeOf(std.io.in_stream.InStream(std.os.ReadError).readIntLittle).ReturnType.ErrorSet!u32","generic": false,"ret": 989,"args": [986]},{"kind": 18,"name": "fn(*const [4]u8) u32","generic": false,"ret": 807,"args": [990]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) @typeOf(std.io.in_stream.InStream(std.os.ReadError).readIntLittle).ReturnType.ErrorSet!u16","generic": false,"ret": 991,"args": [986]},{"kind": 18,"name": "fn(*const [2]u8) u16","generic": false,"ret": 909,"args": [992]},{"kind": 18,"name": "fn(*std.coff.Coff, *std.fs.file.InStream) @typeOf(std.coff.Coff.loadOptionalHeader).ReturnType.ErrorSet!void","generic": false,"ret": 993,"args": [983,994]},{"kind": 18,"name": "fn(std.fs.file.File, i64) std.os.SeekError!void","generic": false,"ret": 988,"args": [967,995]},{"kind": 18,"name": "fn(*std.coff.Coff, []u8) @typeOf(std.coff.Coff.getPdbPath).ReturnType.ErrorSet!usize","generic": false,"ret": 996,"args": [983,855]},{"kind": 18,"name": "fn(*std.coff.Coff) @typeOf(std.coff.Coff.loadSections).ReturnType.ErrorSet!void","generic": false,"ret": 997,"args": [983]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.coff.Section,null), usize) @typeOf(std.array_list.AlignedArrayList(std.coff.Section,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 998,"args": [999,812]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.coff.Section,null)) usize","generic": false,"ret": 812,"args": [889]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.coff.Section, usize) std.mem.Error![]std.coff.Section","generic": false,"ret": 1000,"args": [977,1001,812]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.coff.Section,null), std.coff.Section) @typeOf(std.array_list.AlignedArrayList(std.coff.Section,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 1002,"args": [999,890]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.coff.Section,null)) @typeOf(std.array_list.AlignedArrayList(std.coff.Section,null).addOne).ReturnType.ErrorSet!*std.coff.Section","generic": false,"ret": 1003,"args": [999]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.coff.Section,null)) *std.coff.Section","generic": false,"ret": 1004,"args": [999]},{"kind": 18,"name": "fn(*std.coff.Coff) ?*std.coff.Section","generic": false,"ret": 1005,"args": [983]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) @typeOf(std.io.in_stream.InStream(std.os.ReadError).readStruct).ReturnType.ErrorSet!std.coff.DebugDirectoryEntry","generic": false,"ret": 1006,"args": [986]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.coff.Section,null)) []std.coff.Section","generic": false,"ret": 1001,"args": [889]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) @typeOf(std.io.in_stream.InStream(std.os.ReadError).readByte).ReturnType.ErrorSet!u8","generic": false,"ret": 1007,"args": [986]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const []const u8) @typeOf(std.fs.path.resolve).ReturnType.ErrorSet![]u8","generic": false,"ret": 1008,"args": [977,1009]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const []const u8) @typeOf(std.fs.path.resolveWindows).ReturnType.ErrorSet![]u8","generic": false,"ret": 1010,"args": [977,1009]},{"kind": 18,"name": "fn(*std.mem.Allocator) @typeOf(std.process.getCwdAlloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 1011,"args": [977]},{"kind": 18,"name": "fn([]const u8) std.fs.path.WindowsPath","generic": false,"ret": 1012,"args": [868]},{"kind": 18,"name": "fn(u8) u8","generic": false,"ret": 779,"args": [779]},{"kind": 18,"name": "fn(std.fs.path.Kind, []const u8, []const u8) bool","generic": false,"ret": 842,"args": [1013,868,868]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]u8","generic": false,"ret": 1014,"args": [977,812]},{"kind": 18,"name": "fn([]u8, []const u8) void","generic": false,"ret": 850,"args": [855,868]},{"kind": 18,"name": "fn([]const u8, []const u8) std.mem.TokenIterator","generic": false,"ret": 1015,"args": [868,868]},{"kind": 18,"name": "fn(*std.mem.TokenIterator) ?[]const u8","generic": false,"ret": 1016,"args": [1017]},{"kind": 18,"name": "fn([]u8) std.os.GetCwdError![]u8","generic": false,"ret": 1018,"args": [855]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) @typeOf(std.mem.dupe).ReturnType.ErrorSet![]u8","generic": false,"ret": 1019,"args": [977,868]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8) void","generic": false,"ret": 850,"args": [977,855]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, usize) []u8","generic": false,"ret": 855,"args": [977,855,812]},{"kind": 18,"name": "fn(*std.pdb.Pdb, *std.coff.Coff, []u8) @typeOf(std.pdb.Pdb.openFile).ReturnType.ErrorSet!void","generic": false,"ret": 1020,"args": [1021,983,855]},{"kind": 18,"name": "fn([]const u8) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 1022,"args": [868]},{"kind": 18,"name": "fn(*std.pdb.Msf, *std.mem.Allocator, std.fs.file.File) @typeOf(std.pdb.Msf.openFile).ReturnType.ErrorSet!void","generic": false,"ret": 1023,"args": [1024,977,967]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError)) @typeOf(std.io.in_stream.InStream(std.os.ReadError).readStruct).ReturnType.ErrorSet!std.pdb.SuperBlock","generic": false,"ret": 1025,"args": [986]},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.GetPosError!u64","generic": false,"ret": 1026,"args": [967]},{"kind": 18,"name": "fn(u32, u32) u32","generic": false,"ret": 807,"args": [807,807]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]u32","generic": false,"ret": 1027,"args": [977,812]},{"kind": 18,"name": "fn(u32, std.fs.file.File, []u32) std.pdb.MsfStream","generic": false,"ret": 1028,"args": [807,967,1029]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)) @typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readIntLittle).ReturnType.ErrorSet!u32","generic": false,"ret": 1030,"args": [1031]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet), []u8) @typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readNoEof).ReturnType.ErrorSet!void","generic": false,"ret": 1032,"args": [1031,855]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet), []u8) @typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet!usize","generic": false,"ret": 973,"args": [1031,855]},{"kind": 18,"name": "fn(u64, usize) usize","generic": false,"ret": 812,"args": [802,812]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u32) void","generic": false,"ret": 850,"args": [977,1029]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.pdb.MsfStream","generic": false,"ret": 1033,"args": [977,812]},{"kind": 18,"name": "fn(*std.pdb.Pdb, std.pdb.StreamType) ?*std.pdb.MsfStream","generic": false,"ret": 1034,"args": [1021,1035]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)) @typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readStruct).ReturnType.ErrorSet!std.debug.HashTableHeader","generic": false,"ret": 1036,"args": [1031]},{"kind": 18,"name": "fn(u32) u32","generic": false,"ret": 807,"args": [807]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet), *std.mem.Allocator) @typeOf(std.debug.readSparseBitVector).ReturnType.ErrorSet![]usize","generic": false,"ret": 1037,"args": [1031,977]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(usize,null)","generic": false,"ret": 910,"args": [977]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(usize,null), usize) @typeOf(std.array_list.AlignedArrayList(usize,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 1038,"args": [1039,812]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(usize,null)) @typeOf(std.array_list.AlignedArrayList(usize,null).addOne).ReturnType.ErrorSet!*usize","generic": false,"ret": 1040,"args": [1039]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(usize,null), usize) @typeOf(std.array_list.AlignedArrayList(usize,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 1041,"args": [1039,812]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(usize,null)) usize","generic": false,"ret": 812,"args": [910]},{"kind": 18,"name": "fn(*std.mem.Allocator, []usize, usize) std.mem.Error![]usize","generic": false,"ret": 1042,"args": [977,1043,812]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(usize,null)) *usize","generic": false,"ret": 1044,"args": [1039]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(usize,null)) []usize","generic": false,"ret": 1043,"args": [1039]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.Bucket","generic": false,"ret": 1045,"args": [977,812]},{"kind": 18,"name": "fn([*]u8) []u8","generic": false,"ret": 855,"args": [1046]},{"kind": 18,"name": "fn(*std.pdb.Pdb, u32) ?*std.pdb.MsfStream","generic": false,"ret": 1034,"args": [1021,807]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)) @typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readStruct).ReturnType.ErrorSet!std.pdb.DbiStreamHeader","generic": false,"ret": 1047,"args": [1031]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.Module,null)","generic": false,"ret": 905,"args": [977]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)) @typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readStruct).ReturnType.ErrorSet!std.pdb.ModInfo","generic": false,"ret": 1048,"args": [1031]},{"kind": 18,"name": "fn(*std.pdb.MsfStream, *std.mem.Allocator) @typeOf(std.pdb.MsfStream.readNullTermString).ReturnType.ErrorSet![]u8","generic": false,"ret": 1049,"args": [974,977]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(u8,null)","generic": false,"ret": 907,"args": [977]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)) @typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readByte).ReturnType.ErrorSet!u8","generic": false,"ret": 1050,"args": [1031]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(u8,null)) []u8","generic": false,"ret": 855,"args": [907]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null), u8) @typeOf(std.array_list.AlignedArrayList(u8,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 1051,"args": [1052,779]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null)) @typeOf(std.array_list.AlignedArrayList(u8,null).addOne).ReturnType.ErrorSet!*u8","generic": false,"ret": 1053,"args": [1052]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null), usize) @typeOf(std.array_list.AlignedArrayList(u8,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 1054,"args": [1052,812]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(u8,null)) usize","generic": false,"ret": 812,"args": [907]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, usize) std.mem.Error![]u8","generic": false,"ret": 1014,"args": [977,855,812]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null)) *u8","generic": false,"ret": 1055,"args": [1052]},{"kind": 18,"name": "fn(*std.pdb.MsfStream, i64) @typeOf(std.pdb.MsfStream.seekBy).ReturnType.ErrorSet!void","generic": false,"ret": 1056,"args": [974,995]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Module,null), std.debug.Module) @typeOf(std.array_list.AlignedArrayList(std.debug.Module,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 1057,"args": [1058,906]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Module,null)) @typeOf(std.array_list.AlignedArrayList(std.debug.Module,null).addOne).ReturnType.ErrorSet!*std.debug.Module","generic": false,"ret": 1059,"args": [1058]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Module,null), usize) @typeOf(std.array_list.AlignedArrayList(std.debug.Module,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 1060,"args": [1058,812]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.Module,null)) usize","generic": false,"ret": 812,"args": [905]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.Module, usize) std.mem.Error![]std.debug.Module","generic": false,"ret": 1061,"args": [977,1062,812]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Module,null)) *std.debug.Module","generic": false,"ret": 1063,"args": [1058]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.Module,null)) []std.debug.Module","generic": false,"ret": 1062,"args": [1058]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null)","generic": false,"ret": 832,"args": [977]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null)) @typeOf(std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null).addOne).ReturnType.ErrorSet!*std.pdb.SectionContribEntry","generic": false,"ret": 1064,"args": [1065]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null), usize) @typeOf(std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 1066,"args": [1065,812]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null)) usize","generic": false,"ret": 812,"args": [832]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.pdb.SectionContribEntry, usize) std.mem.Error![]std.pdb.SectionContribEntry","generic": false,"ret": 1067,"args": [977,1068,812]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null)) *std.pdb.SectionContribEntry","generic": false,"ret": 1069,"args": [1065]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)) @typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readStruct).ReturnType.ErrorSet!std.pdb.SectionContribEntry","generic": false,"ret": 1070,"args": [1031]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null)) []std.pdb.SectionContribEntry","generic": false,"ret": 1068,"args": [1065]},{"kind": 18,"name": "fn() bool","generic": false,"ret": 842},{"kind": 18,"name": "fn(builtin.StackTrace, *std.io.OutStream(std.os.WriteError), *std.mem.Allocator, *std.debug.DebugInfo, bool) @typeOf(std.debug.writeStackTrace).ReturnType.ErrorSet!void","generic": false,"ret": 1071,"args": [970,969,977,1072,842]},{"kind": 18,"name": "fn(usize, usize) usize","generic": false,"ret": 812,"args": [812,812]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, *std.io.OutStream(std.os.WriteError), usize, bool) @typeOf(std.debug.printSourceAtAddress).ReturnType.ErrorSet!void","generic": false,"ret": 1073,"args": [1072,969,812,842]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, *std.io.OutStream(std.os.WriteError), usize, bool) @typeOf(std.debug.printSourceAtAddressWindows).ReturnType.ErrorSet!void","generic": false,"ret": 1074,"args": [1072,969,812,842]},{"kind": 18,"name": "fn() usize","generic": false,"ret": 812},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError)) std.os.WriteError!void","generic": false,"ret": 968,"args": [969]},{"kind": 18,"name": "fn(std.debug.TtyColor) void","generic": false,"ret": 850,"args": [1075]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,812]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, *std.debug.Module) @typeOf(std.debug.populateModule).ReturnType.ErrorSet!void","generic": false,"ret": 1076,"args": [1072,1063]},{"kind": 18,"name": "fn([]const u8) []const u8","generic": false,"ret": 868,"args": [868]},{"kind": 18,"name": "fn([*]const u8) []const u8","generic": false,"ret": 868,"args": [1077]},{"kind": 18,"name": "fn(*std.pdb.MsfStream, u64) @typeOf(std.pdb.MsfStream.seekTo).ReturnType.ErrorSet!void","generic": false,"ret": 1078,"args": [974,802]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8, u64, u64) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868,802,802]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), usize, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,812,868,868]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), std.debug.LineInfo) @typeOf(std.debug.printLineFromFileAnyOs).ReturnType.ErrorSet!void","generic": false,"ret": 1079,"args": [969,1080]},{"kind": 18,"name": "fn(std.fs.file.File, []u8) std.os.ReadError!usize","generic": false,"ret": 987,"args": [967,855]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,779]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8, u64, u64, usize, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868,802,802,812,868,868]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), *std.debug.DebugInfo, bool, ?usize) @typeOf(std.debug.writeCurrentStackTrace).ReturnType.ErrorSet!void","generic": false,"ret": 1081,"args": [969,1072,842,963]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), *std.debug.DebugInfo, bool, ?usize) @typeOf(std.debug.writeCurrentStackTraceWindows).ReturnType.ErrorSet!void","generic": false,"ret": 1082,"args": [969,1072,842,963]},{"kind": 18,"name": "fn(u32) std.os.UnexpectedError","generic": false,"ret": 1083,"args": [807]},{"kind": 18,"name": "fn(std.fs.file.File, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [967,868]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [868,1084,969,8,812]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.heap.ArenaAllocator","generic": false,"ret": 1085,"args": [977]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @typeOf(std.heap.DirectAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 1086,"args": [977,855,1087,812,1087]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) std.heap.error:43:63![]u8","generic": false,"ret": 1088,"args": [977,812,1087]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) []u8","generic": false,"ret": 855,"args": [977,855,1087,812,1087]},{"kind": 18,"name": "fn(?*c_void, usize, u32) void","generic": false,"ret": 850,"args": [1089,812,807]},{"kind": 18,"name": "fn(*[32767]u16) std.fs.SelfExePathError![]u16","generic": false,"ret": 1090,"args": [1091]},{"kind": 18,"name": "fn([*]const u16) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 1022,"args": [1092]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.coff.Coff","generic": false,"ret": 1093,"args": [977,812]},{"kind": 18,"name": "fn(*c_void) void","generic": false,"ret": 850,"args": [972]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.coff.Section,null)","generic": false,"ret": 889,"args": [977]},{"kind": 18,"name": "fn(*c_void, u64) std.os.SeekError!void","generic": false,"ret": 988,"args": [972,802]},{"kind": 18,"name": "fn(*c_void, i64) std.os.SeekError!void","generic": false,"ret": 988,"args": [972,995]},{"kind": 18,"name": "fn([]const u8) bool","generic": false,"ret": 842,"args": [868]},{"kind": 18,"name": "fn(std.mem.TokenIterator, u8) bool","generic": false,"ret": 842,"args": [1015,779]},{"kind": 18,"name": "fn([]u8) std.os.windows.GetCurrentDirectoryError![]u8","generic": false,"ret": 1094,"args": [855]},{"kind": 18,"name": "fn([]const u8) @typeOf(std.os.windows.sliceToPrefixedFileW).ReturnType.ErrorSet![32768]u16","generic": false,"ret": 1095,"args": [868]},{"kind": 18,"name": "fn([]const u8) @typeOf(std.os.windows.sliceToPrefixedSuffixedFileW).ReturnType.ErrorSet![32768]u16","generic": false,"ret": 1096,"args": [868]},{"kind": 18,"name": "fn([]u16, []const u16) void","generic": false,"ret": 850,"args": [1097,1098]},{"kind": 18,"name": "fn([]u16, []const u8) @typeOf(std.unicode.utf8ToUtf16Le).ReturnType.ErrorSet!usize","generic": false,"ret": 1099,"args": [1097,868]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8DecodeError!u32","generic": false,"ret": 1100,"args": [868]},{"kind": 18,"name": "fn(*c_void) std.os.windows.GetFileSizeError!u64","generic": false,"ret": 1101,"args": [972]},{"kind": 18,"name": "fn(*std.mem.Allocator, []usize, usize) []usize","generic": false,"ret": 1043,"args": [977,1043,812]},{"kind": 18,"name": "fn([*]const u8) usize","generic": false,"ret": 812,"args": [1077]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.Module, usize) []std.debug.Module","generic": false,"ret": 1062,"args": [977,1062,812]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.pdb.SectionContribEntry, usize) []std.pdb.SectionContribEntry","generic": false,"ret": 1068,"args": [977,1068,812]},{"kind": 18,"name": "fn([]u8) std.heap.FixedBufferAllocator","generic": false,"ret": 1102,"args": [855]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) std.process.GetEnvVarOwnedError![]u8","generic": false,"ret": 1103,"args": [977,868]},{"kind": 18,"name": "fn(std.fs.file.File) bool","generic": false,"ret": 842,"args": [967]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8]},{"kind": 18,"name": "fn(*c_void, u16) std.os.windows.SetConsoleTextAttributeError!void","generic": false,"ret": 1104,"args": [972,909]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,812]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, u64, u64) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868,802,802]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,812,868,868]},{"kind": 18,"name": "fn(*c_void, []u8) std.os.ReadError!usize","generic": false,"ret": 987,"args": [972,855]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, u64, u64, usize, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868,802,802,812,868,868]},{"kind": 18,"name": "fn(c_ushort, c_ushort) c_ushort","generic": false,"ret": 1105,"args": [1105,1105]},{"kind": 18,"name": "fn([]u8, []const u16) @typeOf(std.unicode.utf16leToUtf8).ReturnType.ErrorSet!usize","generic": false,"ret": 1106,"args": [855,1098]},{"kind": 18,"name": "fn(u32, []u8) void","generic": false,"ret": 850,"args": [807,855]},{"kind": 18,"name": "fn(*c_void, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [972,868]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [868,1084,969,8]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @typeOf(std.heap.ArenaAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 1107,"args": [977,855,1087,812,1087]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) @typeOf(std.heap.ArenaAllocator.alloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 1108,"args": [977,812,1087]},{"kind": 18,"name": "fn(*std.heap.ArenaAllocator, usize, usize) @typeOf(std.heap.ArenaAllocator.createNode).ReturnType.ErrorSet!*std.linked_list.Node","generic": false,"ret": 1109,"args": [1110,812,812]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]align(8) u8","generic": false,"ret": 1111,"args": [977,812]},{"kind": 18,"name": "fn(*std.linked_list.SinglyLinkedList([]u8), *std.linked_list.Node) void","generic": false,"ret": 850,"args": [1112,1113]},{"kind": 18,"name": "fn() std.linked_list.SinglyLinkedList([]u8)","generic": false,"ret": 854},{"kind": 18,"name": "fn(?*c_void, usize, u32, u32) std.os.windows.VirtualAllocError!*c_void","generic": false,"ret": 1114,"args": [1089,812,807,807]},{"kind": 18,"name": "fn(?*std.os.windows.bits.HMODULE, [*]u16, u32) std.os.windows.GetModuleFileNameError![]u16","generic": false,"ret": 1115,"args": [1116,1117,807]},{"kind": 18,"name": "fn([*]const u16, u32, u32, ?*std.os.windows.bits.SECURITY_ATTRIBUTES, u32, u32, ?*c_void) std.os.windows.CreateFileError!*c_void","generic": false,"ret": 1118,"args": [1092,807,807,1119,807,807,1089]},{"kind": 18,"name": "fn(*c_void, u64) std.os.windows.SetFilePointerError!void","generic": false,"ret": 1120,"args": [972,802]},{"kind": 18,"name": "fn(*c_void, i64) std.os.windows.SetFilePointerError!void","generic": false,"ret": 1120,"args": [972,995]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.coff.Section","generic": false,"ret": 1000,"args": [977,812]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.coff.Section) void","generic": false,"ret": 850,"args": [977,1001]},{"kind": 18,"name": "fn(usize, usize) std.math.error:315:43!usize","generic": false,"ret": 1121,"args": [812,812]},{"kind": 18,"name": "fn([]const u16) std.unicode.Utf16LeIterator","generic": false,"ret": 1122,"args": [1098]},{"kind": 18,"name": "fn(*std.unicode.Utf16LeIterator) @typeOf(std.unicode.Utf16LeIterator.nextCodepoint).ReturnType.ErrorSet!?u32","generic": false,"ret": 1123,"args": [1124]},{"kind": 18,"name": "fn(u32) @typeOf(std.unicode.utf8CodepointSequenceLength).ReturnType.ErrorSet!u3","generic": false,"ret": 1125,"args": [807]},{"kind": 18,"name": "fn(u32, []u8) @typeOf(std.unicode.utf8Encode).ReturnType.ErrorSet!u3","generic": false,"ret": 1126,"args": [807,855]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode2Error!u32","generic": false,"ret": 1127,"args": [868]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode3Error!u32","generic": false,"ret": 1128,"args": [868]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode4Error!u32","generic": false,"ret": 1129,"args": [868]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]usize","generic": false,"ret": 1042,"args": [977,812]},{"kind": 18,"name": "fn(*std.mem.Allocator, []usize) void","generic": false,"ret": 850,"args": [977,1043]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.Module","generic": false,"ret": 1061,"args": [977,812]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.Module) void","generic": false,"ret": 850,"args": [977,1062]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.pdb.SectionContribEntry","generic": false,"ret": 1067,"args": [977,812]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.pdb.SectionContribEntry) void","generic": false,"ret": 850,"args": [977,1068]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @typeOf(std.heap.FixedBufferAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 1130,"args": [977,855,1087,812,1087]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) @typeOf(std.heap.FixedBufferAllocator.alloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 1131,"args": [977,812,1087]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) @typeOf(std.unicode.utf8ToUtf16LeWithNull).ReturnType.ErrorSet![]u16","generic": false,"ret": 1132,"args": [977,868]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(u16,null)","generic": false,"ret": 908,"args": [977]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u16,null), usize) @typeOf(std.array_list.AlignedArrayList(u16,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 1133,"args": [1134,812]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(u16,null)) usize","generic": false,"ret": 812,"args": [908]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u16, usize) std.mem.Error![]u16","generic": false,"ret": 1135,"args": [977,1097,812]},{"kind": 18,"name": "fn([]const u8) @typeOf(std.unicode.Utf8View.init).ReturnType.ErrorSet!std.unicode.Utf8View","generic": false,"ret": 1136,"args": [868]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8View","generic": false,"ret": 1137,"args": [868]},{"kind": 18,"name": "fn(std.unicode.Utf8View) std.unicode.Utf8Iterator","generic": false,"ret": 1138,"args": [1137]},{"kind": 18,"name": "fn(*std.unicode.Utf8Iterator) ?u32","generic": false,"ret": 1139,"args": [1140]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u16,null), u16) @typeOf(std.array_list.AlignedArrayList(u16,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 1141,"args": [1134,909]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u16,null)) @typeOf(std.array_list.AlignedArrayList(u16,null).addOne).ReturnType.ErrorSet!*u16","generic": false,"ret": 1142,"args": [1134]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u16,null)) *u16","generic": false,"ret": 1143,"args": [1134]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u16,null)) []u16","generic": false,"ret": 1097,"args": [1134]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]u16","generic": false,"ret": 1135,"args": [977,812]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u16) void","generic": false,"ret": 850,"args": [977,1097]},{"kind": 18,"name": "fn(usize) std.math.error:719:40!u32","generic": false,"ret": 1144,"args": [812]},{"kind": 18,"name": "fn([*]u16, [*]u16, u32) std.os.windows.GetEnvironmentVariableError!u32","generic": false,"ret": 1145,"args": [1117,1117,807]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u16) @typeOf(std.unicode.utf16leToUtf8Alloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 1146,"args": [977,1098]},{"kind": 18,"name": "fn([]const u8) u16","generic": false,"ret": 909,"args": [868]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null), usize) @typeOf(std.array_list.AlignedArrayList(u8,null).resize).ReturnType.ErrorSet!void","generic": false,"ret": 1147,"args": [1052,812]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(u8,null)) []u8","generic": false,"ret": 855,"args": [1052]},{"kind": 18,"name": "fn(*c_void) bool","generic": false,"ret": 842,"args": [972]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [812,1084,969,8,812]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [802,1084,969,8,812]},{"kind": 18,"name": "fn(*c_void, []u8) std.os.windows.ReadFileError!usize","generic": false,"ret": 1148,"args": [972,855]},{"kind": 18,"name": "fn() std.statically_initialized_mutex.StaticallyInitializedMutex","generic": false,"ret": 1149},{"kind": 18,"name": "fn(*std.statically_initialized_mutex.StaticallyInitializedMutex) std.statically_initialized_mutex.Held","generic": false,"ret": 1150,"args": [1151]},{"kind": 18,"name": "fn(std.statically_initialized_mutex.Held) void","generic": false,"ret": 850,"args": [1150]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), u32, []u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,807,855]},{"kind": 18,"name": "fn(*c_void, []const u8) std.os.windows.WriteFileError!void","generic": false,"ret": 1152,"args": [972,868]},{"kind": 18,"name": "fn(u8) @typeOf(std.unicode.utf8ByteSequenceLength).ReturnType.ErrorSet!u3","generic": false,"ret": 1153,"args": [779]},{"kind": 18,"name": "fn(*std.unicode.Utf8Iterator) ?[]const u8","generic": false,"ret": 1016,"args": [1140]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u16, usize) []u16","generic": false,"ret": 1097,"args": [977,1097,812]},{"kind": 18,"name": "fn([]const u16, []const u16) ?usize","generic": false,"ret": 963,"args": [1098,1098]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [812,1084,969,8]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [802,1084,969,8]},{"kind": 18,"name": "fn(u32, usize) u32","generic": false,"ret": 807,"args": [807,812]},{"kind": 18,"name": "fn(*std.os.windows.bits.RTL_RUN_ONCE, extern fn(*std.os.windows.bits.RTL_RUN_ONCE, ?*c_void, ?*c_void) c_int, ?*c_void, ?*c_void) void","generic": false,"ret": 850,"args": [1154,251,1089,1089]},{"kind": 18,"name": "extern fn(*std.os.windows.bits.RTL_RUN_ONCE, ?*c_void, ?*c_void) c_int","generic": false,"ret": 1155,"args": [1154,1089,1089]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, u32, []u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,807,855]},{"kind": 18,"name": "fn([]const u16, usize, []const u16) ?usize","generic": false,"ret": 963,"args": [1098,812,1098]},{"kind": 18,"name": "fn(u32, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [807,1084,969,8,812]},{"kind": 18,"name": "fn([]u8, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [855,1084,969,8,812]},{"kind": 18,"name": "fn([]const u16, []const u16) bool","generic": false,"ret": 842,"args": [1098,1098]},{"kind": 18,"name": "fn(usize, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [812,779,842,1084,969,8]},{"kind": 18,"name": "fn(u64, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [802,779,842,1084,969,8]},{"kind": 18,"name": "fn(u32, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [807,1084,969,8]},{"kind": 18,"name": "fn(u8, bool) u8","generic": false,"ret": 779,"args": [779,842]},{"kind": 18,"name": "fn([]u8, u8) void","generic": false,"ret": 850,"args": [855,779]},{"kind": 18,"name": "fn(u32, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [807,779,842,1084,969,8]},{"kind": 18,"name": "fn() @typeOf(std.math.testCeilPowerOfTwo).ReturnType.ErrorSet!void","generic": false,"ret": 1156},{"kind": 18,"name": "fn(*std.macho.nlist_64) u32","generic": false,"ret": 807,"args": [785]},{"kind": 18,"name": "fn(*std.macho.nlist_64, *std.macho.nlist_64) bool","generic": false,"ret": 842,"args": [785,785]},{"kind": 18,"name": "fn([]const u8) u32","generic": false,"ret": 807,"args": [868]},{"kind": 18,"name": "fn(f32) f32","generic": false,"ret": 814,"args": [814]},{"kind": 18,"name": "fn(i32, i32) @typeOf(std.math.divFloor).ReturnType.ErrorSet!i32","generic": false,"ret": 1157,"args": [860,860]},{"kind": 18,"name": "fn(i8, i8) @typeOf(std.math.divFloor).ReturnType.ErrorSet!i8","generic": false,"ret": 1158,"args": [864,864]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.divFloor).ReturnType.ErrorSet!i8) void","generic": false,"ret": 850,"args": [1159,1158]},{"kind": 18,"name": "fn(f32, f32) @typeOf(std.math.divFloor).ReturnType.ErrorSet!f32","generic": false,"ret": 1160,"args": [814,814]},{"kind": 18,"name": "fn(u32) std.math.error:797:52!u32","generic": false,"ret": 1161,"args": [807]},{"kind": 18,"name": "fn(u32, u32) void","generic": false,"ret": 850,"args": [807,807]},{"kind": 18,"name": "fn(u5) std.math.error:797:52!u5","generic": false,"ret": 1162,"args": [837]},{"kind": 18,"name": "fn(u5, u5) void","generic": false,"ret": 850,"args": [837,837]},{"kind": 18,"name": "fn(u4) std.math.error:797:52!u4","generic": false,"ret": 1163,"args": [845]},{"kind": 18,"name": "fn(anyerror, std.math.error:797:52!u4) void","generic": false,"ret": 850,"args": [1159,1163]},{"kind": 18,"name": "fn(i32, i32) @typeOf(std.math.mod).ReturnType.ErrorSet!i32","generic": false,"ret": 1164,"args": [860,860]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.mod).ReturnType.ErrorSet!i32) void","generic": false,"ret": 850,"args": [1159,1164]},{"kind": 18,"name": "fn(f32, f32) @typeOf(std.math.mod).ReturnType.ErrorSet!f32","generic": false,"ret": 1165,"args": [814,814]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.mod).ReturnType.ErrorSet!f32) void","generic": false,"ret": 850,"args": [1159,1165]},{"kind": 18,"name": "fn(u32) u33","generic": false,"ret": 920,"args": [807]},{"kind": 18,"name": "fn(u33, u33) void","generic": false,"ret": 850,"args": [920,920]},{"kind": 18,"name": "fn(u5) u6","generic": false,"ret": 846,"args": [837]},{"kind": 18,"name": "fn(u6, u6) void","generic": false,"ret": 850,"args": [846,846]},{"kind": 18,"name": "fn(u4) u5","generic": false,"ret": 837,"args": [845]},{"kind": 18,"name": "fn(i32, i32) @typeOf(std.math.rem).ReturnType.ErrorSet!i32","generic": false,"ret": 1166,"args": [860,860]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.rem).ReturnType.ErrorSet!i32) void","generic": false,"ret": 850,"args": [1159,1166]},{"kind": 18,"name": "fn(f32, f32) @typeOf(std.math.rem).ReturnType.ErrorSet!f32","generic": false,"ret": 1167,"args": [814,814]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.rem).ReturnType.ErrorSet!f32) void","generic": false,"ret": 850,"args": [1159,1167]},{"kind": 18,"name": "fn(u4) u4","generic": false,"ret": 845,"args": [845]},{"kind": 18,"name": "fn(i32, i32) std.math.error:315:43!i32","generic": false,"ret": 1168,"args": [860,860]},{"kind": 18,"name": "fn(i32, i32) std.math.error:320:43!i32","generic": false,"ret": 1169,"args": [860,860]},{"kind": 18,"name": "fn(i32, i32) std.math.error:325:43!i32","generic": false,"ret": 1170,"args": [860,860]},{"kind": 18,"name": "fn(i32, u5) @typeOf(std.math.shlExact).ReturnType.ErrorSet!i32","generic": false,"ret": 1171,"args": [860,837]},{"kind": 18,"name": "fn(i32, i32) @typeOf(std.math.divExact).ReturnType.ErrorSet!i32","generic": false,"ret": 1172,"args": [860,860]},{"kind": 18,"name": "fn(i8, i8) @typeOf(std.math.divExact).ReturnType.ErrorSet!i8","generic": false,"ret": 1173,"args": [864,864]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.divExact).ReturnType.ErrorSet!i8) void","generic": false,"ret": 850,"args": [1159,1173]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.divExact).ReturnType.ErrorSet!i32) void","generic": false,"ret": 850,"args": [1159,1172]},{"kind": 18,"name": "fn(f32, f32) @typeOf(std.math.divExact).ReturnType.ErrorSet!f32","generic": false,"ret": 1174,"args": [814,814]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.divExact).ReturnType.ErrorSet!f32) void","generic": false,"ret": 850,"args": [1159,1174]},{"kind": 18,"name": "fn(i32) @typeOf(std.math.absInt).ReturnType.ErrorSet!i32","generic": false,"ret": 1175,"args": [860]},{"kind": 18,"name": "fn(i32, i32) @typeOf(std.math.divTrunc).ReturnType.ErrorSet!i32","generic": false,"ret": 1176,"args": [860,860]},{"kind": 18,"name": "fn(i8, i8) @typeOf(std.math.divTrunc).ReturnType.ErrorSet!i8","generic": false,"ret": 1177,"args": [864,864]},{"kind": 18,"name": "fn(anyerror, @typeOf(std.math.divTrunc).ReturnType.ErrorSet!i8) void","generic": false,"ret": 850,"args": [1159,1177]},{"kind": 18,"name": "fn(f32, f32) @typeOf(std.math.divTrunc).ReturnType.ErrorSet!f32","generic": false,"ret": 1178,"args": [814,814]},{"kind": 18,"name": "fn() fn(usize) u32","generic": false,"ret": 436},{"kind": 18,"name": "fn(u64, []const u8) u64","generic": false,"ret": 802,"args": [802,868]},{"kind": 18,"name": "fn(usize) usize","generic": false,"ret": 812,"args": [812]},{"kind": 18,"name": "fn(u64) u64","generic": false,"ret": 802,"args": [802]},{"kind": 18,"name": "fn() f32","generic": false,"ret": 814},{"kind": 18,"name": "fn() zync.src.utils.Lazy(zync.src.utils.Pi.create)","generic": false,"ret": 950},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 941,"args": [800]},{"kind": 18,"name": "fn(zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 800,"args": [941]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zync.src.utils.Pi.create)) f32","generic": false,"ret": 814,"args": [1179]},{"kind": 18,"name": "fn(usize) void","generic": false,"ret": 850,"args": [812]},{"kind": 18,"name": "fn(f32) zync.src.atomic.Atomic(f32)","generic": false,"ret": 813,"args": [814]},{"kind": 18,"name": "fn(zync.src.atomic.Atomic(f32)) f32","generic": false,"ret": 814,"args": [813]},{"kind": 18,"name": "fn(zync.src.atomic.e) zync.src.atomic.Atomic(zync.src.atomic.e)","generic": false,"ret": 881,"args": [882]},{"kind": 18,"name": "fn(zync.src.atomic.Atomic(zync.src.atomic.e)) zync.src.atomic.e","generic": false,"ret": 882,"args": [881]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.atomic.e), zync.src.atomic.e) void","generic": false,"ret": 850,"args": [1180,882]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.atomic.e)) zync.src.atomic.e","generic": false,"ret": 882,"args": [1181]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.atomic.e), zync.src.atomic.e) zync.src.atomic.e","generic": false,"ret": 882,"args": [1180,882]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.atomic.e), zync.src.atomic.e, zync.src.atomic.e) ?zync.src.atomic.e","generic": false,"ret": 1182,"args": [1180,882,882]},{"kind": 18,"name": "fn(u8) zync.src.atomic.Atomic(u8)","generic": false,"ret": 804,"args": [779]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8), u8) u8","generic": false,"ret": 779,"args": [1183,779]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(u8)) u8","generic": false,"ret": 779,"args": [1184]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u32), u32) void","generic": false,"ret": 850,"args": [1185,807]},{"kind": 18,"name": "fn(*zync.src.futex.Futex) void","generic": false,"ret": 850,"args": [1186]},{"kind": 18,"name": "fn(zync.src.atomic.Atomic(u32)) u32","generic": false,"ret": 807,"args": [806]},{"kind": 18,"name": "fn(zuma.src.thread.ClockType) u64","generic": false,"ret": 802,"args": [1187]},{"kind": 18,"name": "fn(*zync.src.futex.Futex, *const u32, u32, ?u32) zync.src.futex.WaitError!void","generic": false,"ret": 1188,"args": [1186,1189,807,1139]},{"kind": 18,"name": "fn(anyerror, zync.src.futex.WaitError!void) void","generic": false,"ret": 850,"args": [1159,1188]},{"kind": 18,"name": "fn(usize) zuma.src.thread.CreateError!zuma.src.thread.JoinHandle","generic": false,"ret": 1190,"args": [812]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(u32)) u32","generic": false,"ret": 807,"args": [1191]},{"kind": 18,"name": "fn(*zuma.src.thread.JoinHandle, ?u32) zuma.src.thread.JoinError!void","generic": false,"ret": 1192,"args": [1193,1139]},{"kind": 18,"name": "fn(*zync.src.lock.Event.EventImpl(true)) void","generic": false,"ret": 850,"args": [1194]},{"kind": 18,"name": "fn(*const zync.src.lock.Event.EventImpl(true)) bool","generic": false,"ret": 842,"args": [1195]},{"kind": 18,"name": "fn(*zync.src.lock.Event.EventImpl(true), u32) @typeOf(zync.src.lock.Event.EventImpl(true).wait).ReturnType.ErrorSet!void","generic": false,"ret": 1196,"args": [1194,807]},{"kind": 18,"name": "fn(anyerror, @typeOf(zync.src.lock.Event.EventImpl(true).wait).ReturnType.ErrorSet!void) void","generic": false,"ret": 850,"args": [1159,1196]},{"kind": 18,"name": "fn(*zync.src.lock.Event.EventImpl(true)) zuma.src.thread.CreateError!zuma.src.thread.JoinHandle","generic": false,"ret": 1190,"args": [1194]},{"kind": 18,"name": "fn() @typeOf(zync.src.lock.testLockImplementation).ReturnType.ErrorSet!void","generic": false,"ret": 1197},{"kind": 18,"name": "fn(*zync.src.lock.LockState) void","generic": false,"ret": 850,"args": [1198]},{"kind": 18,"name": "fn(*zync.src.lock.Spinlock) bool","generic": false,"ret": 842,"args": [1199]},{"kind": 18,"name": "fn(*zync.src.lock.Spinlock) void","generic": false,"ret": 850,"args": [1199]},{"kind": 18,"name": "fn(*zync.src.lock.LockState) zuma.src.thread.CreateError!zuma.src.thread.JoinHandle","generic": false,"ret": 1190,"args": [1198]},{"kind": 18,"name": "fn() @typeOf(zync.src.lock.testLockImplementation).ReturnType.ErrorSet!void","generic": false,"ret": 1200},{"kind": 18,"name": "fn(*zync.src.lock.LockState) void","generic": false,"ret": 850,"args": [1201]},{"kind": 18,"name": "fn(*zync.src.lock.Mutex) bool","generic": false,"ret": 842,"args": [1202]},{"kind": 18,"name": "fn(*zync.src.lock.Mutex) void","generic": false,"ret": 850,"args": [1202]},{"kind": 18,"name": "fn(*zync.src.lock.LockState) zuma.src.thread.CreateError!zuma.src.thread.JoinHandle","generic": false,"ret": 1190,"args": [1201]},{"kind": 18,"name": "fn() ?usize","generic": false,"ret": 963},{"kind": 18,"name": "fn(?[*]u8, usize, u32, ?usize) zuma.src.memory.MemoryError![]align(4096) u8","generic": false,"ret": 1203,"args": [1204,812,807,963]},{"kind": 18,"name": "fn([]u8, u32, ?usize) zuma.src.memory.MemoryError!void","generic": false,"ret": 1205,"args": [855,807,963]},{"kind": 18,"name": "fn([]u8, ?usize) void","generic": false,"ret": 850,"args": [855,963]},{"kind": 18,"name": "fn(*zuma.src.affinity.CpuAffinity) void","generic": false,"ret": 850,"args": [1206]},{"kind": 18,"name": "fn(zuma.src.affinity.CpuAffinity) usize","generic": false,"ret": 812,"args": [1207]},{"kind": 18,"name": "fn(*zuma.src.affinity.CpuAffinity, u6, bool) void","generic": false,"ret": 850,"args": [1206,846,842]},{"kind": 18,"name": "fn(zuma.src.affinity.CpuAffinity, u6) bool","generic": false,"ret": 842,"args": [1207,846]},{"kind": 18,"name": "fn(?usize, zuma.src.affinity.CpuType) zuma.src.memory.NumaError!usize","generic": false,"ret": 1208,"args": [963,1209]},{"kind": 18,"name": "fn(*zuma.src.affinity.CpuAffinity, ?usize, zuma.src.affinity.CpuType) zuma.src.memory.NumaError!void","generic": false,"ret": 1210,"args": [1206,963,1209]},{"kind": 18,"name": "fn() *std.rand.Random","generic": false,"ret": 1211},{"kind": 18,"name": "fn(*std.rand.Random, usize) usize","generic": false,"ret": 812,"args": [1211,812]},{"kind": 18,"name": "fn(u32) void","generic": false,"ret": 850,"args": [807]},{"kind": 18,"name": "fn(*zuma.src.affinity.CpuAffinity) zuma.src.thread.AffinityError!void","generic": false,"ret": 1212,"args": [1206]},{"kind": 18,"name": "fn(zuma.src.affinity.CpuAffinity) zuma.src.thread.AffinityError!void","generic": false,"ret": 1212,"args": [1207]},{"kind": 18,"name": "fn(usize) zync.src.atomic.Atomic(usize)","generic": false,"ret": 811,"args": [812]},{"kind": 18,"name": "fn(zync.src.atomic.Atomic(usize)) usize","generic": false,"ret": 812,"args": [811]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(usize)) void","generic": false,"ret": 850,"args": [1213]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(usize)) zuma.src.thread.CreateError!zuma.src.thread.JoinHandle","generic": false,"ret": 1190,"args": [1213]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(usize)) usize","generic": false,"ret": 812,"args": [1214]},{"kind": 18,"name": "fn(anyerror, zuma.src.thread.JoinError!void) void","generic": false,"ret": 850,"args": [1159,1192]},{"kind": 18,"name": "fn([]const u8) zio.src.io.Buffer","generic": false,"ret": 1215,"args": [868]},{"kind": 18,"name": "fn(zio.src.io.Buffer) []u8","generic": false,"ret": 855,"args": [1215]},{"kind": 18,"name": "fn() zio.src.event.Error!zio.src.event.Poller","generic": false,"ret": 1216},{"kind": 18,"name": "fn(*zio.src.event.Poller, []zio.src.event.Event, ?u32) zio.src.event.PollError![]zio.src.event.Event","generic": false,"ret": 1217,"args": [1218,1219,1139]},{"kind": 18,"name": "fn(*zio.src.event.Poller) void","generic": false,"ret": 850,"args": [1218]},{"kind": 18,"name": "fn(*zio.src.event.Poller, usize) zio.src.event.NotifyError!void","generic": false,"ret": 1220,"args": [1218,812]},{"kind": 18,"name": "fn(zio.src.event.Event, *zio.src.event.Poller) usize","generic": false,"ret": 812,"args": [1221,1218]},{"kind": 18,"name": "fn(*std.rand.Random, u16, u16) u16","generic": false,"ret": 909,"args": [1211,909,909]},{"kind": 18,"name": "fn(u16) @typeOf(zio.src.socket.testBlockingTcp).ReturnType.ErrorSet!void","generic": false,"ret": 1222,"args": [909]},{"kind": 18,"name": "fn(u32) zio.src.socket.Error!zio.src.socket.Socket","generic": false,"ret": 1223,"args": [807]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, zio.src.socket.Option) zio.src.socket.OptionError!void","generic": false,"ret": 1224,"args": [1225,1226]},{"kind": 18,"name": "fn(*zio.src.socket.Socket) void","generic": false,"ret": 850,"args": [1225]},{"kind": 18,"name": "fn(zio.src.socket.Socket, *zio.src.socket.Option) zio.src.socket.OptionError!void","generic": false,"ret": 1224,"args": [1227,1228]},{"kind": 18,"name": "fn(u16) @typeOf(zio.src.socket.Ipv4Address.new).ReturnType.ErrorSet!zio.src.address.Address","generic": false,"ret": 1229,"args": [909]},{"kind": 18,"name": "fn([]const u8) @typeOf(zio.src.address.Address.parseIpv4).ReturnType.ErrorSet!u32","generic": false,"ret": 1230,"args": [868]},{"kind": 18,"name": "fn([]const u8) @typeOf(std.net.parseIp4).ReturnType.ErrorSet!u32","generic": false,"ret": 1231,"args": [868]},{"kind": 18,"name": "fn(u32, u16) zio.src.address.Address","generic": false,"ret": 1232,"args": [807,909]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, *const zio.src.address.Address) zio.src.socket.BindError!void","generic": false,"ret": 1233,"args": [1225,1234]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, c_uint) zio.src.socket.ListenError!void","generic": false,"ret": 1235,"args": [1225,1236]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, *const zio.src.address.Address, usize) zio.src.socket.ConnectError!void","generic": false,"ret": 1237,"args": [1225,1234,812]},{"kind": 18,"name": "fn(zio.src.address.Address) zio.src.address.Incoming","generic": false,"ret": 1238,"args": [1232]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, u32, *zio.src.address.Incoming, usize) zio.src.socket.AcceptError!void","generic": false,"ret": 1239,"args": [1225,807,1240,812]},{"kind": 18,"name": "fn(zio.src.address.Address) bool","generic": false,"ret": 842,"args": [1232]},{"kind": 18,"name": "fn(zio.src.address.Incoming, u32) zio.src.socket.Socket","generic": false,"ret": 1227,"args": [1238,807]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, *zio.src.address.Address, []const u8, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1225,1242,868,812]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, *zio.src.address.Address, []u8, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1225,1242,855,812]},{"kind": 18,"name": "fn(u16) @typeOf(zio.src.socket.testBlockingTcp).ReturnType.ErrorSet!void","generic": false,"ret": 1243,"args": [909]},{"kind": 18,"name": "fn(u16) @typeOf(zio.src.socket.Ipv6Address.new).ReturnType.ErrorSet!zio.src.address.Address","generic": false,"ret": 1244,"args": [909]},{"kind": 18,"name": "fn([]const u8) @typeOf(zio.src.address.Address.parseIpv6).ReturnType.ErrorSet!std.net.Ip6Addr","generic": false,"ret": 1245,"args": [868]},{"kind": 18,"name": "fn([]const u8) @typeOf(std.net.parseIp6).ReturnType.ErrorSet!std.net.Ip6Addr","generic": false,"ret": 1246,"args": [868]},{"kind": 18,"name": "fn(u8, u8) std.fmt.error:1071:39!u8","generic": false,"ret": 1247,"args": [779,779]},{"kind": 18,"name": "fn(std.net.Ip6Addr, u16, u32) zio.src.address.Address","generic": false,"ret": 1232,"args": [1248,909,807]},{"kind": 18,"name": "fn(u16) @typeOf(zio.src.socket.testNonBlockingTcp).ReturnType.ErrorSet!void","generic": false,"ret": 1249,"args": [909]},{"kind": 18,"name": "fn(*zio.src.socket.Server, *zio.src.event.Poller, u16) @typeOf(zio.src.socket.Server.init).ReturnType.ErrorSet!void","generic": false,"ret": 1250,"args": [1251,1218,909]},{"kind": 18,"name": "fn(*zio.src.socket.Server) void","generic": false,"ret": 850,"args": [1251]},{"kind": 18,"name": "fn(*zio.src.event.Poller, *c_void, u8, usize) zio.src.event.RegisterError!void","generic": false,"ret": 1252,"args": [1218,972,779,812]},{"kind": 18,"name": "fn(zio.src.socket.Socket) *c_void","generic": false,"ret": 972,"args": [1227]},{"kind": 18,"name": "fn(*zio.src.socket.Server, usize, *zio.src.event.Poller) @typeOf(zio.src.socket.Server.handle_server).ReturnType.ErrorSet!void","generic": false,"ret": 1253,"args": [1251,812,1218]},{"kind": 18,"name": "fn(*const zio.src.socket.Socket) usize","generic": false,"ret": 812,"args": [1254]},{"kind": 18,"name": "fn(*zio.src.socket.Server, usize, *zio.src.event.Poller) @typeOf(zio.src.socket.Server.handle_client).ReturnType.ErrorSet!void","generic": false,"ret": 1255,"args": [1251,812,1218]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, []const u8, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1225,868,812]},{"kind": 18,"name": "fn(*zio.src.socket.Client, *zio.src.event.Poller, u16) @typeOf(zio.src.socket.Client.new).ReturnType.ErrorSet!void","generic": false,"ret": 1256,"args": [1257,1218,909]},{"kind": 18,"name": "fn(*zio.src.socket.Client) void","generic": false,"ret": 850,"args": [1257]},{"kind": 18,"name": "fn(*zio.src.socket.Client, usize, *zio.src.event.Poller, u16) @typeOf(zio.src.socket.Client.handle).ReturnType.ErrorSet!void","generic": false,"ret": 1258,"args": [1257,812,1218,909]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, []u8, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1225,855,812]},{"kind": 18,"name": "fn(zio.src.event.Event) usize","generic": false,"ret": 812,"args": [1221]},{"kind": 18,"name": "fn(u16) @typeOf(zio.src.socket.testNonBlockingTcp).ReturnType.ErrorSet!void","generic": false,"ret": 1259,"args": [909]},{"kind": 18,"name": "fn(*zio.src.socket.Server, *zio.src.event.Poller, u16) @typeOf(zio.src.socket.Server.init).ReturnType.ErrorSet!void","generic": false,"ret": 1260,"args": [1261,1218,909]},{"kind": 18,"name": "fn(*zio.src.socket.Server) void","generic": false,"ret": 850,"args": [1261]},{"kind": 18,"name": "fn(*zio.src.socket.Server, usize, *zio.src.event.Poller) @typeOf(zio.src.socket.Server.handle_server).ReturnType.ErrorSet!void","generic": false,"ret": 1262,"args": [1261,812,1218]},{"kind": 18,"name": "fn(*zio.src.socket.Server, usize, *zio.src.event.Poller) @typeOf(zio.src.socket.Server.handle_client).ReturnType.ErrorSet!void","generic": false,"ret": 1263,"args": [1261,812,1218]},{"kind": 18,"name": "fn(*zio.src.socket.Client, *zio.src.event.Poller, u16) @typeOf(zio.src.socket.Client.new).ReturnType.ErrorSet!void","generic": false,"ret": 1264,"args": [1265,1218,909]},{"kind": 18,"name": "fn(*zio.src.socket.Client) void","generic": false,"ret": 850,"args": [1265]},{"kind": 18,"name": "fn(*zio.src.socket.Client, usize, *zio.src.event.Poller, u16) @typeOf(zio.src.socket.Client.handle).ReturnType.ErrorSet!void","generic": false,"ret": 1266,"args": [1265,812,1218,909]},{"kind": 18,"name": "fn([]const u8, i8) noreturn","generic": false,"ret": 959,"args": [868,864]},{"kind": 18,"name": "fn([]const u8, []const u8) noreturn","generic": false,"ret": 959,"args": [868,868]},{"kind": 18,"name": "fn(u32, u32) noreturn","generic": false,"ret": 959,"args": [807,807]},{"kind": 18,"name": "fn(u5, u5) noreturn","generic": false,"ret": 959,"args": [837,837]},{"kind": 18,"name": "fn([]const u8, u4) noreturn","generic": false,"ret": 959,"args": [868,845]},{"kind": 18,"name": "fn([]const u8, i32) noreturn","generic": false,"ret": 959,"args": [868,860]},{"kind": 18,"name": "fn([]const u8, f32) noreturn","generic": false,"ret": 959,"args": [868,814]},{"kind": 18,"name": "fn(u33, u33) noreturn","generic": false,"ret": 959,"args": [920,920]},{"kind": 18,"name": "fn(u6, u6) noreturn","generic": false,"ret": 959,"args": [846,846]},{"kind": 18,"name": "fn(usize) u32","generic": false,"ret": 807,"args": [812]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [800]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 800,"args": [779]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zync.src.utils.Pi.create)) *f32","generic": false,"ret": 1267,"args": [1179]},{"kind": 18,"name": "fn(zync.src.atomic.AtomicOrder) builtin.AtomicOrder","generic": false,"ret": 790,"args": [791]},{"kind": 18,"name": "fn(f32) u32","generic": false,"ret": 807,"args": [814]},{"kind": 18,"name": "fn(u32) f32","generic": false,"ret": 814,"args": [807]},{"kind": 18,"name": "fn(zync.src.atomic.e) u8","generic": false,"ret": 779,"args": [882]},{"kind": 18,"name": "fn(u8) zync.src.atomic.e","generic": false,"ret": 882,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.atomic.e","generic": false,"ret": 1182,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.futex.Windows) void","generic": false,"ret": 850,"args": [1269]},{"kind": 18,"name": "fn(bool) u64","generic": false,"ret": 802,"args": [842]},{"kind": 18,"name": "fn(*zync.src.futex.Windows, *const u32, u32, ?u32) zync.src.futex.WaitError!void","generic": false,"ret": 1188,"args": [1269,1189,807,1139]},{"kind": 18,"name": "fn([]const u8, [4]u8) noreturn","generic": false,"ret": 959,"args": [868,1270]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u32), u32) u32","generic": false,"ret": 807,"args": [1185,807]},{"kind": 18,"name": "fn(*zync.src.futex.Futex, *const u32) void","generic": false,"ret": 850,"args": [1186,1189]},{"kind": 18,"name": "fn(?[]align(4096) u8, usize) zuma.src.thread.CreateError!*c_void","generic": false,"ret": 1271,"args": [1272,812]},{"kind": 18,"name": "fn(*c_void, ?u32) zuma.src.thread.JoinError!void","generic": false,"ret": 1192,"args": [972,1139]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.EventState), zync.src.lock.EventState) void","generic": false,"ret": 850,"args": [1273,884]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.lock.EventState)) zync.src.lock.EventState","generic": false,"ret": 884,"args": [1274]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.EventState), zync.src.lock.EventState) zync.src.lock.EventState","generic": false,"ret": 884,"args": [1273,884]},{"kind": 18,"name": "fn(?[]align(4096) u8, *zync.src.lock.Event.EventImpl(true)) zuma.src.thread.CreateError!*c_void","generic": false,"ret": 1271,"args": [1272,1194]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(bool), bool) bool","generic": false,"ret": 842,"args": [1275,842]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(bool), bool) void","generic": false,"ret": 850,"args": [1275,842]},{"kind": 18,"name": "fn(?[]align(4096) u8, *zync.src.lock.LockState) zuma.src.thread.CreateError!*c_void","generic": false,"ret": 1271,"args": [1272,1198]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.MutexState), zync.src.lock.MutexState, zync.src.lock.MutexState) ?zync.src.lock.MutexState","generic": false,"ret": 1276,"args": [1277,946,946]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.MutexState), zync.src.lock.MutexState) zync.src.lock.MutexState","generic": false,"ret": 946,"args": [1277,946]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.lock.MutexState)) zync.src.lock.MutexState","generic": false,"ret": 946,"args": [1278]},{"kind": 18,"name": "fn(?[]align(4096) u8, *zync.src.lock.LockState) zuma.src.thread.CreateError!*c_void","generic": false,"ret": 1271,"args": [1272,1201]},{"kind": 18,"name": "fn() zync.src.utils.Lazy(zuma.src.backend.windows.getPageSize)","generic": false,"ret": 935},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 815,"args": [816]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.getPageSize)) ?usize","generic": false,"ret": 963,"args": [1279]},{"kind": 18,"name": "fn() zync.src.utils.Lazy(zuma.src.backend.windows.getHugePageSize)","generic": false,"ret": 873},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 817,"args": [818]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.getHugePageSize)) ?usize","generic": false,"ret": 963,"args": [1280]},{"kind": 18,"name": "fn(?usize, bool) zuma.src.memory.NumaError!usize","generic": false,"ret": 1208,"args": [963,842]},{"kind": 18,"name": "fn(*zuma.src.affinity.CpuAffinity, ?usize, bool) zuma.src.memory.NumaError!void","generic": false,"ret": 1210,"args": [1206,963,842]},{"kind": 18,"name": "fn() std.rand.Xoroshiro128","generic": false,"ret": 1281},{"kind": 18,"name": "fn() zync.src.utils.Lazy(zuma.src.thread.Thread.createThreadLocalRandom)","generic": false,"ret": 924},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 898,"args": [819]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.thread.Thread.createThreadLocalRandom)) *std.rand.Xoroshiro128","generic": false,"ret": 1282,"args": [1283]},{"kind": 18,"name": "fn(*std.rand.Random) usize","generic": false,"ret": 812,"args": [1211]},{"kind": 18,"name": "fn(usize) u64","generic": false,"ret": 802,"args": [812]},{"kind": 18,"name": "fn(u64) usize","generic": false,"ret": 812,"args": [802]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(usize), usize) usize","generic": false,"ret": 812,"args": [1213,812]},{"kind": 18,"name": "fn(?[]align(4096) u8, *zync.src.atomic.Atomic(usize)) zuma.src.thread.CreateError!*c_void","generic": false,"ret": 1271,"args": [1272,1213]},{"kind": 18,"name": "fn([]const u8) zio.src.backend.windows.Buffer","generic": false,"ret": 1284,"args": [868]},{"kind": 18,"name": "fn(zio.src.backend.windows.Buffer) []u8","generic": false,"ret": 855,"args": [1284]},{"kind": 18,"name": "fn() zio.src.event.Error!zio.src.backend.windows.Poller","generic": false,"ret": 1285},{"kind": 18,"name": "fn(*zio.src.backend.windows.Poller, []zio.src.backend.windows.Event, ?u32) zio.src.event.PollError![]zio.src.backend.windows.Event","generic": false,"ret": 1286,"args": [1287,1288,1139]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Poller) void","generic": false,"ret": 850,"args": [1287]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Poller, usize) zio.src.event.NotifyError!void","generic": false,"ret": 1220,"args": [1287,812]},{"kind": 18,"name": "fn(zio.src.backend.windows.Event, *zio.src.backend.windows.Poller) usize","generic": false,"ret": 812,"args": [1289,1287]},{"kind": 18,"name": "fn(*std.rand.Random, u16) u16","generic": false,"ret": 909,"args": [1211,909]},{"kind": 18,"name": "fn(u32) zio.src.socket.Error!zio.src.backend.windows.Socket","generic": false,"ret": 1290,"args": [807]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket, zio.src.socket.Option) zio.src.socket.OptionError!void","generic": false,"ret": 1224,"args": [1291,1226]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket) void","generic": false,"ret": 850,"args": [1291]},{"kind": 18,"name": "fn(zio.src.backend.windows.Socket, *zio.src.socket.Option) zio.src.socket.OptionError!void","generic": false,"ret": 1224,"args": [1292,1228]},{"kind": 18,"name": "fn(u32, u16) zio.src.backend.windows.SockAddr","generic": false,"ret": 1293,"args": [807,909]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket, *const zio.src.address.Address) zio.src.socket.BindError!void","generic": false,"ret": 1233,"args": [1291,1234]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket, c_uint) zio.src.socket.ListenError!void","generic": false,"ret": 1235,"args": [1291,1236]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket, *const zio.src.address.Address, usize) zio.src.socket.ConnectError!void","generic": false,"ret": 1237,"args": [1291,1234,812]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket, u32, *zio.src.address.Incoming, usize) zio.src.socket.AcceptError!void","generic": false,"ret": 1239,"args": [1291,807,1240,812]},{"kind": 18,"name": "fn(*c_void, u32) zio.src.socket.Socket","generic": false,"ret": 1227,"args": [972,807]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, ?*zio.src.address.Address, []const []const u8, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1225,1294,1009,812]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, ?*zio.src.address.Address, []const []u8, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1225,1294,1295,812]},{"kind": 18,"name": "fn(u128, u16, u32, u32) zio.src.backend.windows.SockAddr","generic": false,"ret": 1293,"args": [1296,909,807,807]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Poller, *c_void, u8, usize) zio.src.event.RegisterError!void","generic": false,"ret": 1252,"args": [1287,972,779,812]},{"kind": 18,"name": "fn(zio.src.backend.windows.Socket) *c_void","generic": false,"ret": 972,"args": [1292]},{"kind": 18,"name": "fn(*const zio.src.backend.windows.Socket) usize","generic": false,"ret": 812,"args": [1297]},{"kind": 18,"name": "fn(zio.src.backend.windows.Event) usize","generic": false,"ret": 812,"args": [1289]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, []const u8, i8) noreturn","generic": false,"ret": 959,"args": [962,963,868,864]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, []const u8, []const u8) noreturn","generic": false,"ret": 959,"args": [962,963,868,868]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, u32, u32) noreturn","generic": false,"ret": 959,"args": [962,963,807,807]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, u5, u5) noreturn","generic": false,"ret": 959,"args": [962,963,837,837]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, []const u8, u4) noreturn","generic": false,"ret": 959,"args": [962,963,868,845]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, []const u8, i32) noreturn","generic": false,"ret": 959,"args": [962,963,868,860]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, []const u8, f32) noreturn","generic": false,"ret": 959,"args": [962,963,868,814]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, u33, u33) noreturn","generic": false,"ret": 959,"args": [962,963,920,920]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, u6, u6) noreturn","generic": false,"ret": 959,"args": [962,963,846,846]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.Wyhash","generic": false,"ret": 1298,"args": [802]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, usize) void","generic": false,"ret": 850,"args": [1299,812]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash) u64","generic": false,"ret": 802,"args": [1299]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.WyhashStateless","generic": false,"ret": 1300,"args": [802]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) void","generic": false,"ret": 850,"args": [1301,868]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) u64","generic": false,"ret": 802,"args": [1301,868]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 800,"args": [1302]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1303,"args": [1304,800,800]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1304,800]},{"kind": 18,"name": "fn() u64","generic": false,"ret": 802},{"kind": 18,"name": "fn() zync.src.utils.Lazy(zuma.src.backend.windows.Thread.getQPCFrequency)","generic": false,"ret": 937},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 899,"args": [820]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.Thread.getQPCFrequency)) u64","generic": false,"ret": 802,"args": [1305]},{"kind": 18,"name": "fn() ?zync.src.futex.Synchronization","generic": false,"ret": 1306},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, []const u8, [4]u8) noreturn","generic": false,"ret": 959,"args": [962,963,868,1270]},{"kind": 18,"name": "fn(*zync.src.futex.Windows, *const u32, i32) void","generic": false,"ret": 850,"args": [1269,1189,860]},{"kind": 18,"name": "fn(zync.src.lock.EventState) u32","generic": false,"ret": 807,"args": [884]},{"kind": 18,"name": "fn(u32) zync.src.lock.EventState","generic": false,"ret": 884,"args": [807]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.MutexState), zync.src.lock.MutexState) void","generic": false,"ret": 850,"args": [1277,946]},{"kind": 18,"name": "fn(zync.src.lock.MutexState) u32","generic": false,"ret": 807,"args": [946]},{"kind": 18,"name": "fn(?u32) ?zync.src.lock.MutexState","generic": false,"ret": 1276,"args": [1139]},{"kind": 18,"name": "fn(u32) zync.src.lock.MutexState","generic": false,"ret": 946,"args": [807]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [816]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.getPageSize)) *?usize","generic": false,"ret": 1307,"args": [1279]},{"kind": 18,"name": "fn() zync.src.utils.Lazy(GetCurrentProcess)","generic": false,"ret": 904},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 821,"args": [797]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(GetCurrentProcess)) *c_void","generic": false,"ret": 972,"args": [1308]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [818]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.getHugePageSize)) *?usize","generic": false,"ret": 1307,"args": [1280]},{"kind": 18,"name": "fn(*zuma.src.backend.windows.GROUP_AFFINITY, usize, bool) zuma.src.memory.NumaError!void","generic": false,"ret": 1210,"args": [1309,812,842]},{"kind": 18,"name": "fn(*zuma.src.backend.windows.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *usize, bool) bool","generic": false,"ret": 842,"args": [1310,1044,842]},{"kind": 18,"name": "fn(*usize, bool) zuma.src.memory.NumaError!void","generic": false,"ret": 1210,"args": [1044,842]},{"kind": 18,"name": "fn(*zuma.src.backend.windows.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *zuma.src.backend.windows.GROUP_AFFINITY, bool) bool","generic": false,"ret": 842,"args": [1310,1309,842]},{"kind": 18,"name": "fn(*zuma.src.backend.windows.GROUP_AFFINITY, bool) zuma.src.memory.NumaError!void","generic": false,"ret": 1210,"args": [1309,842]},{"kind": 18,"name": "fn(u64) std.rand.Xoroshiro128","generic": false,"ret": 1281,"args": [802]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [819]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 819,"args": [1311]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1312,"args": [1313,819,819]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1313,819]},{"kind": 18,"name": "fn(*std.rand.Random, []u8) void","generic": false,"ret": 850,"args": [1211,855]},{"kind": 18,"name": "fn([]const u8) u64","generic": false,"ret": 802,"args": [868]},{"kind": 18,"name": "fn(*std.rand.Random) u64","generic": false,"ret": 802,"args": [1211]},{"kind": 18,"name": "fn(u64, u64) u64","generic": false,"ret": 802,"args": [802,802]},{"kind": 18,"name": "fn() zync.src.utils.Lazy(GetCurrentThread)","generic": false,"ret": 857},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 798,"args": [799]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(GetCurrentThread)) *c_void","generic": false,"ret": 972,"args": [1314]},{"kind": 18,"name": "fn([]u16, u16) void","generic": false,"ret": 850,"args": [1097,909]},{"kind": 18,"name": "fn(*std.rand.Random) u32","generic": false,"ret": 807,"args": [1211]},{"kind": 18,"name": "fn() zio.src.socket.Error!void","generic": false,"ret": 1315},{"kind": 18,"name": "fn() zync.src.utils.Lazy(zio.src.backend.windows.Socket.WSAInitialize)","generic": false,"ret": 947},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 900,"args": [805]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zio.src.backend.windows.Socket.WSAInitialize)) zio.src.socket.Error!void","generic": false,"ret": 1315,"args": [1316]},{"kind": 18,"name": "fn(u32) *c_void","generic": false,"ret": 972,"args": [807]},{"kind": 18,"name": "fn(*c_void, u32) zio.src.backend.windows.Socket","generic": false,"ret": 1292,"args": [972,807]},{"kind": 18,"name": "fn() ?zio.src.backend.windows.Winsock2","generic": false,"ret": 1317},{"kind": 18,"name": "fn(*c_void, *zio.src.socket.Option, extern fn(*c_void, c_int, c_int, usize, c_int) c_int) c_int","generic": false,"ret": 1155,"args": [972,1228,1318]},{"kind": 18,"name": "fn(*c_void, *zio.src.socket.Option, extern fn(*c_void, c_int, c_int, usize, *c_int) c_int) c_int","generic": false,"ret": 1155,"args": [972,1228,1319]},{"kind": 18,"name": "fn(u16) u16","generic": false,"ret": 909,"args": [909]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket, *std.os.windows.bits.OVERLAPPED, usize) zio.src.io.Set!zio.src.backend.windows.OverlappedResult","generic": false,"ret": 1320,"args": [1291,1321,812]},{"kind": 18,"name": "fn(*c_void) zio.src.socket.ConnectError!void","generic": false,"ret": 1237,"args": [972]},{"kind": 18,"name": "fn(**c_void, *zio.src.address.Incoming) zio.src.socket.AcceptError!void","generic": false,"ret": 1239,"args": [1322,1240]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket, ?*const zio.src.address.Address, []const zio.src.backend.windows.Buffer, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1291,1323,1324,812]},{"kind": 18,"name": "fn([]const []const u8) []zio.src.backend.windows.Buffer","generic": false,"ret": 1325,"args": [1009]},{"kind": 18,"name": "fn(*zio.src.backend.windows.Socket, ?*zio.src.address.Address, []zio.src.backend.windows.Buffer, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1291,1294,1325,812]},{"kind": 18,"name": "fn([]const []u8) []zio.src.backend.windows.Buffer","generic": false,"ret": 1325,"args": [1295]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, []const []const u8, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1225,1009,812]},{"kind": 18,"name": "fn(*zio.src.socket.Socket, []const []u8, usize) zio.src.socket.DataError!usize","generic": false,"ret": 1241,"args": [1225,1295,812]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8, i8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868,864]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868,868]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), u32, u32) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,807,807]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), u5, u5) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,837,837]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8, u4) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868,845]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8, i32) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868,860]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8, f32) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868,814]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), u33, u33) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,920,920]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), u6, u6) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,846,846]},{"kind": 18,"name": "fn(u64, u64, u64) u64","generic": false,"ret": 802,"args": [802,802,802]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1303,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 800,"args": [1304,800]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [820]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.Thread.getQPCFrequency)) *u64","generic": false,"ret": 1326,"args": [1305]},{"kind": 18,"name": "fn() zync.src.utils.Lazy(zuma.src.backend.windows.DynamicLibrary(*(c str lit),zync.src.futex.Synchronization).loadImports)","generic": false,"ret": 936},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 808,"args": [809]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.DynamicLibrary(*(c str lit),zync.src.futex.Synchronization).loadImports)) ?zync.src.futex.Synchronization","generic": false,"ret": 1306,"args": [1327]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), []const u8, [4]u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,868,1270]},{"kind": 18,"name": "fn(usize) *c_void","generic": false,"ret": 972,"args": [812]},{"kind": 18,"name": "extern fn(*c_void) u32","generic": false,"ret": 807,"args": [972]},{"kind": 18,"name": "fn(*zync.src.lock.Event.EventImpl(true)) *c_void","generic": false,"ret": 972,"args": [1194]},{"kind": 18,"name": "fn(bool) u8","generic": false,"ret": 779,"args": [842]},{"kind": 18,"name": "fn(u8) bool","generic": false,"ret": 842,"args": [779]},{"kind": 18,"name": "fn(*zync.src.lock.LockState) *c_void","generic": false,"ret": 972,"args": [1198]},{"kind": 18,"name": "fn(*zync.src.lock.LockState) *c_void","generic": false,"ret": 972,"args": [1201]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 816,"args": [1328]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1329,"args": [1330,816,816]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1330,816]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [797]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(GetCurrentProcess)) **c_void","generic": false,"ret": 1322,"args": [1308]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 818,"args": [1331]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1332,"args": [1333,818,818]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1333,818]},{"kind": 18,"name": "fn(*zuma.src.backend.windows.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, usize, *zuma.src.backend.windows.GROUP_AFFINITY) bool","generic": false,"ret": 842,"args": [1310,812,1309]},{"kind": 18,"name": "fn(usize, *zuma.src.backend.windows.GROUP_AFFINITY) zuma.src.memory.NumaError!void","generic": false,"ret": 1210,"args": [812,1309]},{"kind": 18,"name": "fn(*std.rand.Xoroshiro128, u64) void","generic": false,"ret": 850,"args": [1282,802]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 819,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1312,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 819,"args": [1313,819]},{"kind": 18,"name": "fn(*const [8]u8) u64","generic": false,"ret": 802,"args": [1334]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [799]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(GetCurrentThread)) **c_void","generic": false,"ret": 1322,"args": [1314]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(usize)) *c_void","generic": false,"ret": 972,"args": [1213]},{"kind": 18,"name": "fn(*c_void, std.os.windows.bits.GUID, *?extern fn(*c_void, *c_void, ?*c_void, u32, u32, u32, *u32, ?*std.os.windows.bits.OVERLAPPED) c_int) zio.src.socket.Error!void","generic": false,"ret": 1315,"args": [972,1335,1336]},{"kind": 18,"name": "fn(*c_void, std.os.windows.bits.GUID, *?extern fn(*c_void, *const zio.src.backend.windows.SOCKADDR, c_uint, ?*c_void, u32, ?*u32, ?*std.os.windows.bits.OVERLAPPED) c_int) zio.src.socket.Error!void","generic": false,"ret": 1315,"args": [972,1335,1337]},{"kind": 18,"name": "fn(*c_void, std.os.windows.bits.GUID, *?extern fn(*c_void, u32, u32, u32, **zio.src.backend.windows.SOCKADDR, *u32, **zio.src.backend.windows.SOCKADDR, *u32) void) zio.src.socket.Error!void","generic": false,"ret": 1315,"args": [972,1335,1338]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [805]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zio.src.backend.windows.Socket.WSAInitialize)) *zio.src.socket.Error!void","generic": false,"ret": 1339,"args": [1316]},{"kind": 18,"name": "fn() zync.src.utils.Lazy(zuma.src.backend.windows.DynamicLibrary(*(c str lit),zio.src.backend.windows.Winsock2).loadImports)","generic": false,"ret": 827},{"kind": 18,"name": "fn(zync.src.utils.State) zync.src.atomic.Atomic(zync.src.utils.State)","generic": false,"ret": 782,"args": [783]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.DynamicLibrary(*(c str lit),zio.src.backend.windows.Winsock2).loadImports)) ?zio.src.backend.windows.Winsock2","generic": false,"ret": 1317,"args": [1340]},{"kind": 18,"name": "fn(c_int, *c_void, usize, c_int) c_int","generic": false,"ret": 1155,"args": [1155,972,812,1155]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, i8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868,864]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868,868]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, u32, u32) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,807,807]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, u5, u5) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,837,837]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, u4) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868,845]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, i32) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868,860]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, f32) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868,814]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, u33, u33) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,920,920]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, u6, u6) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,846,846]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, []const u8) void","generic": false,"ret": 850,"args": [1299,868]},{"kind": 18,"name": "fn(*const usize) *align(8) const [8]u8","generic": false,"ret": 888,"args": [848]},{"kind": 18,"name": "fn([]const u8) u8","generic": false,"ret": 779,"args": [868]},{"kind": 18,"name": "fn(u64, u64) u128","generic": false,"ret": 1296,"args": [802,802]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 820,"args": [1341]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1342,"args": [1343,820,820]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1343,820]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [809]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.DynamicLibrary(*(c str lit),zync.src.futex.Synchronization).loadImports)) *?zync.src.futex.Synchronization","generic": false,"ret": 1344,"args": [1327]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, [4]u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,868,1270]},{"kind": 18,"name": "fn(*c_void) usize","generic": false,"ret": 812,"args": [972]},{"kind": 18,"name": "fn(*c_void) *zync.src.lock.Event.EventImpl(true)","generic": false,"ret": 1194,"args": [972]},{"kind": 18,"name": "fn(*c_void) *zync.src.lock.LockState","generic": false,"ret": 1198,"args": [972]},{"kind": 18,"name": "fn(*c_void) *zync.src.lock.LockState","generic": false,"ret": 1201,"args": [972]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 816,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1329,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 816,"args": [1330,816]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 797,"args": [1345]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1346,"args": [1347,797,797]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1347,797]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 818,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1332,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 818,"args": [1333,818]},{"kind": 18,"name": "fn(*std.rand.Xoroshiro128) u64","generic": false,"ret": 802,"args": [1282]},{"kind": 18,"name": "fn(u64) std.rand.SplitMix64","generic": false,"ret": 1348,"args": [802]},{"kind": 18,"name": "fn(*std.rand.SplitMix64) u64","generic": false,"ret": 802,"args": [1349]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 799,"args": [1350]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1351,"args": [1352,799,799]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1352,799]},{"kind": 18,"name": "fn(*c_void) *zync.src.atomic.Atomic(usize)","generic": false,"ret": 1213,"args": [972]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 805,"args": [1353]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1354,"args": [1355,805,805]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1355,805]},{"kind": 18,"name": "fn(zync.src.utils.State) u8","generic": false,"ret": 779,"args": [783]},{"kind": 18,"name": "fn(*zync.src.utils.Lazy(zuma.src.backend.windows.DynamicLibrary(*(c str lit),zio.src.backend.windows.Winsock2).loadImports)) *?zio.src.backend.windows.Winsock2","generic": false,"ret": 1356,"args": [1340]},{"kind": 18,"name": "fn(i8, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [864,1084,969,8,812]},{"kind": 18,"name": "fn(u5, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [837,1084,969,8,812]},{"kind": 18,"name": "fn(u4, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [845,1084,969,8,812]},{"kind": 18,"name": "fn(i32, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [860,1084,969,8,812]},{"kind": 18,"name": "fn(f32, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [814,1084,969,8,812]},{"kind": 18,"name": "fn(u33, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [920,1084,969,8,812]},{"kind": 18,"name": "fn(u6, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [846,1084,969,8,812]},{"kind": 18,"name": "fn(*const [1]u8) u8","generic": false,"ret": 779,"args": [1357]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 820,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1342,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 820,"args": [1343,820]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 809,"args": [1358]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1359,"args": [1360,809,809]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1360,809]},{"kind": 18,"name": "fn([4]u8, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [1270,1084,969,8,812]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 797,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1346,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 797,"args": [1347,797]},{"kind": 18,"name": "fn(u64, u8) u64","generic": false,"ret": 802,"args": [802,779]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 799,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1351,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 799,"args": [1352,799]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 805,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1354,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 805,"args": [1355,805]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State)) zync.src.utils.State","generic": false,"ret": 783,"args": [1361]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State, zync.src.utils.State) ?zync.src.utils.State","generic": false,"ret": 1362,"args": [1363,783,783]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) void","generic": false,"ret": 850,"args": [1363,783]},{"kind": 18,"name": "fn(i8, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [864,1084,969,8]},{"kind": 18,"name": "fn(u5, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [837,1084,969,8]},{"kind": 18,"name": "fn(u4, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [845,1084,969,8]},{"kind": 18,"name": "fn(i32, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [860,1084,969,8]},{"kind": 18,"name": "fn(f32, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [814,1084,969,8]},{"kind": 18,"name": "fn(u33, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [920,1084,969,8]},{"kind": 18,"name": "fn(u6, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [846,1084,969,8]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 809,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1359,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 809,"args": [1360,809]},{"kind": 18,"name": "fn(u8) zync.src.utils.State","generic": false,"ret": 783,"args": [779]},{"kind": 18,"name": "fn(?u8) ?zync.src.utils.State","generic": false,"ret": 1362,"args": [1268]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State), zync.src.utils.State) zync.src.utils.State","generic": false,"ret": 783,"args": [1363,783]},{"kind": 18,"name": "fn(i8, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [864,779,842,1084,969,8]},{"kind": 18,"name": "fn(u5, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [837,779,842,1084,969,8]},{"kind": 18,"name": "fn(u4, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [845,779,842,1084,969,8]},{"kind": 18,"name": "fn(i32, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [860,779,842,1084,969,8]},{"kind": 18,"name": "fn(u33, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [920,779,842,1084,969,8]},{"kind": 18,"name": "fn(u6, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [846,779,842,1084,969,8]},{"kind": 18,"name": "fn(f64) bool","generic": false,"ret": 842,"args": [830]},{"kind": 18,"name": "fn(f64, []u8) std.fmt.errol.FloatDecimal","generic": false,"ret": 1364,"args": [830,855]},{"kind": 18,"name": "fn(*std.fmt.errol.FloatDecimal, usize, std.fmt.errol.RoundMode) void","generic": false,"ret": 850,"args": [1365,812,1366]},{"kind": 18,"name": "fn(u8, u8, bool, std.fmt.FormatOptions, *std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 968,"args": [779,779,842,1084,969,8]},{"kind": 18,"name": "fn([]const u8, i32) std.fmt.errol.enum3.Slab","generic": false,"ret": 1367,"args": [868,860]},{"kind": 18,"name": "fn(f64) std.math.frexp.frexp_result(f64)","generic": false,"ret": 878,"args": [830]},{"kind": 18,"name": "fn(f64) f64","generic": false,"ret": 830,"args": [830]},{"kind": 18,"name": "fn(std.fmt.errol.lookup.HP, f64) std.fmt.errol.lookup.HP","generic": false,"ret": 1368,"args": [1368,830]},{"kind": 18,"name": "fn(*std.fmt.errol.lookup.HP) void","generic": false,"ret": 850,"args": [1369]},{"kind": 18,"name": "fn(f64) u128","generic": false,"ret": 1296,"args": [830]},{"kind": 18,"name": "fn(u64, u64) i32","generic": false,"ret": 860,"args": [802,802]},{"kind": 18,"name": "fn(u64, []u8) usize","generic": false,"ret": 812,"args": [802,855]},{"kind": 18,"name": "fn(f64, *f64, *f64) void","generic": false,"ret": 850,"args": [830,1370,1370]},{"kind": 18,"name": "fn(f64) void","generic": false,"ret": 850,"args": [830]},{"kind": 18,"name": "extern fn() noreturn","generic": false,"ret": 959},{"kind": 18,"name": "fn() u8","generic": false,"ret": 779},{"kind": 18,"name": "fn([]const u8) void","generic": false,"ret": 850,"args": [868]},{"kind": 18,"name": "stdcallcc fn(*std.os.windows.bits.EXCEPTION_POINTERS) c_long","generic": false,"ret": 1371,"args": [1372]},{"kind": 18,"name": "fn(*std.progress.Progress, []const u8, ?usize) @typeOf(std.progress.Progress.start).ReturnType.ErrorSet!*std.progress.Node","generic": false,"ret": 1373,"args": [1374,868,963]},{"kind": 18,"name": "fn() std.time.Error!std.time.Timer","generic": false,"ret": 1375},{"kind": 18,"name": "fn(*std.progress.Node, []const u8, ?usize) std.progress.Node","generic": false,"ret": 1376,"args": [1377,868,963]},{"kind": 18,"name": "fn(*std.progress.Node) void","generic": false,"ret": 850,"args": [1377]},{"kind": 18,"name": "fn(*std.progress.Progress) void","generic": false,"ret": 850,"args": [1374]},{"kind": 18,"name": "fn(usize, usize, []const u8) void","generic": false,"ret": 850,"args": [812,812,868]},{"kind": 18,"name": "fn(*std.progress.Progress, []const u8) void","generic": false,"ret": 850,"args": [1374,868]},{"kind": 18,"name": "fn(usize, usize) void","generic": false,"ret": 850,"args": [812,812]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize) noreturn","generic": false,"ret": 959,"args": [962,963]},{"kind": 18,"name": "fn(?*const builtin.StackTrace, ?usize, usize) noreturn","generic": false,"ret": 959,"args": [962,963,812]},{"kind": 18,"name": "fn([]u8, usize) std.fmt.BufPrintError![]u8","generic": false,"ret": 1378,"args": [855,812]},{"kind": 18,"name": "fn([]u8) std.fmt.BufPrintError![]u8","generic": false,"ret": 1378,"args": [855]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize) void","generic": false,"ret": 850,"args": [1374,1044]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, []const u8) void","generic": false,"ret": 850,"args": [1374,1044,868]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, usize, usize) void","generic": false,"ret": 850,"args": [1374,1044,812,812]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, usize) void","generic": false,"ret": 850,"args": [1374,1044,812]},{"kind": 18,"name": "fn(*std.time.Timer) u64","generic": false,"ret": 802,"args": [1379]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), usize, usize, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,812,812,868]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), usize, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,812,812]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, []const u8) @typeOf(std.fmt.bufPrintWrite).ReturnType.ErrorSet!void","generic": false,"ret": 1380,"args": [1381,868]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [1381,1383,812]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [1381,1383]},{"kind": 18,"name": "fn([]u8, []const u8) std.fmt.BufPrintError![]u8","generic": false,"ret": 1378,"args": [855,868]},{"kind": 18,"name": "fn([]u8, usize, usize) std.fmt.BufPrintError![]u8","generic": false,"ret": 1378,"args": [855,812,812]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize, usize, []const u8) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,812,812,868]},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError), fn(*std.io.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize, usize) std.os.WriteError!void","generic": false,"ret": 968,"args": [969,8,812,812]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [812,1084,1381,1383,812]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, []const u8) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [1381,1383,868]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize, usize) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [1381,1383,812,812]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [812,1084,1381,1383]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [868,1084,1381,1383,812]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [868,1084,1381,1383]},{"kind": 18,"name": "fn(usize, u8, bool, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [812,779,842,1084,1381,1383]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 0},{"kind": 4,"u": 8},{"kind": 4,"u": 2},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"privDecls": [18,19],"fields": [779]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 6,"elem": 1390},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)","src": 581,"pubDecls": [20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"privDecls": [39],"fields": [72]},{"kind": 15,"name": "@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet","fn": 16,"errors": [0,1,2,3,4,5,6,7]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 16,"name": "builtin.AtomicOrder","src": 582,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5]},{"kind": 16,"name": "zync.src.atomic.AtomicOrder","src": 583,"pubDecls": [40],"privDecls": [],"fields": [0,1,2,3,4,5]},{"kind": 18,"name": "fn([*c]const u8,var)var","generic": true,"args": [794,null]},{"kind": 8,"name": "zuma.src.backend.windows.DynamicLibrary(*(c str lit),zio.src.backend.windows.Winsock2)","src": 584,"pubDecls": [41],"privDecls": [42,43]},{"kind": 6,"len": 3,"const": true,"allowZero": true,"elem": 779},{"kind": 8,"name": "zio.src.backend.windows.Winsock2","src": 585,"pubDecls": [],"privDecls": [],"fields": [1395,1396,1397,1318,1319,1398,1398,1399,1400,1401,1402,1403,1404,1405]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"privDecls": [62,63],"fields": [779]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 4,"u": 64},{"kind": 4,"u": 42},{"kind": 8,"name": "zync.src.atomic.Atomic(u8)","src": 579,"pubDecls": [64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"privDecls": [82,83],"fields": [779]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "zync.src.atomic.Atomic(u32)","src": 579,"pubDecls": [84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"privDecls": [102,103],"fields": [807]},{"kind": 4,"u": 32},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"privDecls": [122,123],"fields": [779]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "zync.src.atomic.Atomic(usize)","src": 579,"pubDecls": [124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141],"privDecls": [142,143],"fields": [802]},{"kind": 4,"u": 64},{"kind": 8,"name": "zync.src.atomic.Atomic(f32)","src": 579,"pubDecls": [144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161],"privDecls": [162,163],"fields": [807]},{"kind": 5,"bits": 32},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181],"privDecls": [182,183],"fields": [779]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201],"privDecls": [202,203],"fields": [779]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "zync.src.utils.State","src": 580,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221],"privDecls": [222,223],"fields": [779]},{"kind": 18,"name": "fn(builtin.TypeId)var","generic": true,"args": [825]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 16,"name": "builtin.TypeId","src": 586,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 8,"name": "zync.src.utils.Lazy(zuma.src.backend.windows.DynamicLibrary(*(c str lit),zio.src.backend.windows.Winsock2).loadImports)","src": 587,"pubDecls": [224,225,226,227,228],"privDecls": [],"fields": [1317,782]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.math.modf.modf_result(f64)","src": 588,"pubDecls": [],"privDecls": [],"fields": [830,830]},{"kind": 5,"bits": 64},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null)","src": 589,"pubDecls": [229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"privDecls": [259],"fields": [1068,812,977]},{"kind": 8,"name": "std.pdb.SectionContribEntry","src": 590,"pubDecls": [],"privDecls": [],"fields": [909,1449,807,807,807,909,1449,807,807]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 4,"u": 3},{"kind": 4,"u": 5},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.io.OutStream(std.os.WriteError)","src": 591,"pubDecls": [260,261,262,263,264,265,266,267,268,269],"privDecls": [270],"fields": [8]},{"kind": 15,"name": "std.os.WriteError","errors": [8,9,10,11,12,13,14,15,6]},{"kind": 18,"name": "fn(bool,var)var","generic": true,"args": [842,null]},{"kind": 2},{"kind": 10,"name": "comptime_int"},{"kind": 4,"u": 7},{"kind": 4,"u": 4},{"kind": 4,"u": 6},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 6,"const": true,"elem": 812},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 1,"name": "void"},{"kind": 8,"name": "std","src": 592,"pubDecls": [271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333],"privDecls": [],"file": 2},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.linked_list.SinglyLinkedList([]u8)","src": 593,"pubDecls": [334,335,336,337,338,339,340,341,342],"privDecls": [343],"fields": [1508]},{"kind": 6,"len": 2,"elem": 779},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 8,"name": "zync.src.utils.Lazy(GetCurrentThread)","src": 587,"pubDecls": [344,345,346,347,348],"privDecls": [],"fields": [972,798]},{"kind": 18,"name": "stdcallcc fn() *c_void","generic": false,"ret": 972},{"kind": 4,"i": 9},{"kind": 4,"i": 32},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 4,"i": 8},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.hash_map.HashMap([]const u8,void,std.hash_map.hashString,std.hash_map.eqlString)","src": 594,"pubDecls": [349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368],"privDecls": [369,370,371,372,373,374,375,376,377,378,379,380],"fields": [1511,812,812,977,807]},{"kind": 8,"name": "std.hash_map.HashMap([]const u8,[]const u8,std.hash_map.hashString,std.hash_map.eqlString)","src": 594,"pubDecls": [381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400],"privDecls": [401,402,403,404,405,406,407,408,409,410,411,412],"fields": [1514,812,812,977,807]},{"kind": 6,"len": 2,"const": true,"elem": 779},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "zync.src.utils.Lazy(zuma.src.backend.windows.getHugePageSize)","src": 587,"pubDecls": [413,414,415,416,417],"privDecls": [],"fields": [963,817]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 13,"child": 1087},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.math.frexp.frexp_result(f64)","src": 595,"pubDecls": [],"privDecls": [],"fields": [830,860]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.atomic.struct:148:19)","src": 579,"pubDecls": [418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435],"privDecls": [436,437],"fields": [802]},{"kind": 8,"name": "zync.src.atomic.struct:148:19","src": 596,"pubDecls": [],"privDecls": [],"fields": [812]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.atomic.e)","src": 579,"pubDecls": [438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455],"privDecls": [456,457],"fields": [779]},{"kind": 16,"name": "zync.src.atomic.e","src": 597,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.lock.EventState)","src": 579,"pubDecls": [458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475],"privDecls": [476,477],"fields": [807]},{"kind": 16,"name": "zync.src.lock.EventState","src": 598,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 6,"align": 8,"const": true,"elem": 1523},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.coff.Section,null)","src": 589,"pubDecls": [478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507],"privDecls": [508],"fields": [1001,812,977]},{"kind": 8,"name": "std.coff.Section","src": 599,"pubDecls": [],"privDecls": [],"fields": [1524]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "zync.src.utils.CachePadded(u64)","src": 600,"pubDecls": [],"privDecls": [],"fields": [802,1525]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(bool)var","generic": true,"args": [842]},{"kind": 8,"name": "zync.src.lock.Event.EventImpl(true)","src": 601,"pubDecls": [509,510,511,512,513,514],"privDecls": [515],"fields": [1527,883]},{"kind": 8,"name": "zync.src.atomic.Atomic(u64)","src": 579,"pubDecls": [516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533],"privDecls": [534,535],"fields": [802]},{"kind": 8,"name": "zync.src.atomic.Atomic(bool)","src": 579,"pubDecls": [536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553],"privDecls": [554,555],"fields": [779]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573],"privDecls": [574,575],"fields": [779]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593],"privDecls": [594,595],"fields": [779]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613],"privDecls": [614,615],"fields": [779]},{"kind": 18,"name": "fn(type,var,var,var)var","generic": true,"args": [778,null,null,null]},{"kind": 8,"name": "std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql)","src": 594,"pubDecls": [616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635],"privDecls": [636,637,638,639,640,641,642,643,644,645,646,647],"fields": [1548,812,812,977,807]},{"kind": 8,"name": "std.debug.MachOFile","src": 602,"pubDecls": [],"privDecls": [],"fields": [1549,1550,1550]},{"kind": 8,"name": "zync.src.utils.Lazy(GetCurrentProcess)","src": 587,"pubDecls": [648,649,650,651,652],"privDecls": [],"fields": [972,821]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.Module,null)","src": 589,"pubDecls": [653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682],"privDecls": [683],"fields": [1062,812,977]},{"kind": 8,"name": "std.debug.Module","src": 603,"pubDecls": [],"privDecls": [],"fields": [1551,855,855,842,855,855,963]},{"kind": 8,"name": "std.array_list.AlignedArrayList(u8,null)","src": 589,"pubDecls": [684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713],"privDecls": [714],"fields": [855,812,977]},{"kind": 8,"name": "std.array_list.AlignedArrayList(u16,null)","src": 589,"pubDecls": [715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744],"privDecls": [745],"fields": [1097,812,977]},{"kind": 4,"u": 16},{"kind": 8,"name": "std.array_list.AlignedArrayList(usize,null)","src": 589,"pubDecls": [746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775],"privDecls": [776],"fields": [1043,812,977]},{"kind": 8,"name": "std.math.modf.modf_result(f32)","src": 588,"pubDecls": [],"privDecls": [],"fields": [814,814]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 4,"u": 33},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "zync.src.utils.Lazy(zuma.src.thread.Thread.createThreadLocalRandom)","src": 587,"pubDecls": [777,778,779,780,781],"privDecls": [],"fields": [1281,898]},{"kind": 8,"name": "zuma.src.backend.windows.DynamicLibrary(*(c str lit),zync.src.futex.Synchronization)","src": 584,"pubDecls": [782],"privDecls": [783,784]},{"kind": 8,"name": "zync.src.futex.Synchronization","src": 604,"pubDecls": [],"privDecls": [],"fields": [1552,1552,1553]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 8,"name": "zync.src.utils.CachePadded(u9)","src": 600,"pubDecls": [],"privDecls": [],"fields": [929,1554]},{"kind": 4,"u": 9},{"kind": 8,"name": "zync.src.utils.CachePadded([64]u8)","src": 600,"pubDecls": [],"privDecls": [],"fields": [931,1555]},{"kind": 7,"len": 64,"elem": 779},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 16,"name": "zync.src.atomic.enum:151:19","src": 605,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 8,"name": "zync.src.utils.Lazy(zuma.src.backend.windows.getPageSize)","src": 587,"pubDecls": [785,786,787,788,789],"privDecls": [],"fields": [963,815]},{"kind": 8,"name": "zync.src.utils.Lazy(zuma.src.backend.windows.DynamicLibrary(*(c str lit),zync.src.futex.Synchronization).loadImports)","src": 587,"pubDecls": [790,791,792,793,794],"privDecls": [],"fields": [1306,808]},{"kind": 8,"name": "zync.src.utils.Lazy(zuma.src.backend.windows.Thread.getQPCFrequency)","src": 587,"pubDecls": [795,796,797,798,799],"privDecls": [],"fields": [802,899]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.math","src": 606,"pubDecls": [800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948],"privDecls": [949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964],"file": 4},{"kind": 8,"name": "std.math.frexp.frexp_result(f32)","src": 595,"pubDecls": [],"privDecls": [],"fields": [814,860]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.utils.State)","src": 579,"pubDecls": [965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982],"privDecls": [983,984],"fields": [779]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.atomic.enum:151:19)","src": 579,"pubDecls": [985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002],"privDecls": [1003,1004],"fields": [779]},{"kind": 8,"name": "zync.src.atomic.Atomic(u42)","src": 579,"pubDecls": [1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022],"privDecls": [1023,1024],"fields": [802]},{"kind": 8,"name": "zync.src.atomic.Atomic(zync.src.lock.MutexState)","src": 579,"pubDecls": [1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042],"privDecls": [1043,1044],"fields": [807]},{"kind": 16,"name": "zync.src.lock.MutexState","src": 607,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "zync.src.utils.Lazy(zio.src.backend.windows.Socket.WSAInitialize)","src": 587,"pubDecls": [1045,1046,1047,1048,1049],"privDecls": [],"fields": [1315,900]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "zync.src.utils.Lazy(zync.src.utils.Pi.create)","src": 587,"pubDecls": [1050,1051,1052,1053,1054],"privDecls": [],"fields": [814,941]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 8,"name": "std.io.in_stream.InStream(std.os.ReadError)","src": 581,"pubDecls": [1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073],"privDecls": [1074],"fields": [27]},{"kind": 15,"name": "std.os.ReadError","errors": [0,1,2,3,4,5,6]},{"kind": 8,"name": "std.io.OutStream(std.io.Error)","src": 591,"pubDecls": [1075,1076,1077,1078,1079,1080,1081,1082,1083,1084],"privDecls": [1085],"fields": [1653]},{"kind": 15,"name": "std.io.Error","errors": [16]},{"kind": 8,"name": "(root)","src": 608,"pubDecls": [1086,1087,1088,1089],"privDecls": [1090,1091],"file": 0},{"kind": 8,"name": "builtin","src": 609,"pubDecls": [1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123],"privDecls": [1124],"file": 1},{"kind": 8,"name": "std.special","src": 610,"pubDecls": [1125],"privDecls": [1126,1127,1128,1129],"file": 3},{"kind": 3,"name": "noreturn"},{"kind": 13,"child": 1667},{"kind": 14,"err": 1159,"payload": 850},{"kind": 13,"child": 1668},{"kind": 13,"child": 812},{"kind": 14,"err": 1669,"payload": 969},{"kind": 14,"err": 1670,"payload": 967},{"kind": 8,"name": "std.fs.file.OutStream","src": 611,"pubDecls": [1130,1131],"privDecls": [1132],"fields": [967,839]},{"kind": 8,"name": "std.fs.file.File","src": 612,"pubDecls": [1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177],"privDecls": [],"fields": [972]},{"kind": 14,"err": 840,"payload": 850},{"kind": 6,"elem": 839},{"kind": 8,"name": "builtin.StackTrace","src": 613,"pubDecls": [],"privDecls": [],"fields": [812,1043]},{"kind": 14,"err": 1670,"payload": 972},{"kind": 6,"elem": 1675},{"kind": 14,"err": 788,"payload": 812},{"kind": 6,"elem": 1028},{"kind": 14,"err": 1676,"payload": 1072},{"kind": 14,"err": 1677,"payload": 1678},{"kind": 6,"elem": 1679},{"kind": 14,"err": 1680,"payload": 1678},{"kind": 14,"err": 1681,"payload": 967},{"kind": 14,"err": 1682,"payload": 983},{"kind": 8,"name": "std.coff.Coff","src": 614,"pubDecls": [1178,1179,1180,1181,1182],"privDecls": [1183],"fields": [967,977,1684,1685,889,1686,807]},{"kind": 14,"err": 1687,"payload": 850},{"kind": 6,"elem": 981},{"kind": 8,"name": "std.fs.file.InStream","src": 615,"pubDecls": [1184,1185],"privDecls": [1186],"fields": [967,952]},{"kind": 14,"err": 1688,"payload": 850},{"kind": 6,"elem": 952},{"kind": 14,"err": 953,"payload": 812},{"kind": 14,"err": 1673,"payload": 850},{"kind": 14,"err": 1689,"payload": 807},{"kind": 6,"const": true,"elem": 1270},{"kind": 14,"err": 1690,"payload": 909},{"kind": 6,"const": true,"elem": 1449},{"kind": 14,"err": 1691,"payload": 850},{"kind": 6,"elem": 984},{"kind": 4,"i": 64},{"kind": 14,"err": 1692,"payload": 812},{"kind": 14,"err": 1693,"payload": 850},{"kind": 14,"err": 1694,"payload": 850},{"kind": 6,"elem": 889},{"kind": 14,"err": 1682,"payload": 1001},{"kind": 6,"len": 2,"elem": 890},{"kind": 14,"err": 1695,"payload": 850},{"kind": 14,"err": 1696,"payload": 1004},{"kind": 6,"elem": 890},{"kind": 13,"child": 1004},{"kind": 14,"err": 1697,"payload": 1698},{"kind": 14,"err": 1699,"payload": 779},{"kind": 14,"err": 1700,"payload": 855},{"kind": 6,"len": 2,"const": true,"elem": 868},{"kind": 14,"err": 1701,"payload": 855},{"kind": 14,"err": 1702,"payload": 855},{"kind": 8,"name": "std.fs.path.WindowsPath","src": 616,"pubDecls": [1187],"privDecls": [],"fields": [842,1013,868]},{"kind": 16,"name": "std.fs.path.Kind","src": 617,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 14,"err": 1682,"payload": 855},{"kind": 8,"name": "std.mem.TokenIterator","src": 618,"pubDecls": [1188,1189],"privDecls": [1190],"fields": [868,868,812]},{"kind": 13,"child": 868},{"kind": 6,"elem": 1015},{"kind": 14,"err": 1704,"payload": 855},{"kind": 14,"err": 1705,"payload": 855},{"kind": 14,"err": 1706,"payload": 850},{"kind": 6,"elem": 1707},{"kind": 14,"err": 1672,"payload": 967},{"kind": 14,"err": 1708,"payload": 850},{"kind": 6,"elem": 1709},{"kind": 14,"err": 1710,"payload": 1711},{"kind": 14,"err": 1674,"payload": 802},{"kind": 14,"err": 1682,"payload": 1029},{"kind": 8,"name": "std.pdb.MsfStream","src": 619,"pubDecls": [1191,1192],"privDecls": [1193,1194,1195,1196,1197,1198,1199,1200],"fields": [967,802,1029,807,787]},{"kind": 6,"len": 2,"elem": 807},{"kind": 14,"err": 1712,"payload": 807},{"kind": 6,"elem": 787},{"kind": 14,"err": 1713,"payload": 850},{"kind": 14,"err": 1682,"payload": 1714},{"kind": 13,"child": 974},{"kind": 16,"name": "std.pdb.StreamType","src": 620,"pubDecls": [],"privDecls": [],"fields": [1,2,3,4]},{"kind": 14,"err": 1715,"payload": 1716},{"kind": 14,"err": 1717,"payload": 1043},{"kind": 14,"err": 1718,"payload": 850},{"kind": 6,"elem": 910},{"kind": 14,"err": 1719,"payload": 1044},{"kind": 14,"err": 1720,"payload": 850},{"kind": 14,"err": 1682,"payload": 1043},{"kind": 6,"len": 2,"elem": 812},{"kind": 6,"elem": 812},{"kind": 14,"err": 1682,"payload": 1721},{"kind": 6,"len": 1,"elem": 779},{"kind": 14,"err": 1722,"payload": 1723},{"kind": 14,"err": 1724,"payload": 1551},{"kind": 14,"err": 1725,"payload": 855},{"kind": 14,"err": 1726,"payload": 779},{"kind": 14,"err": 1727,"payload": 850},{"kind": 6,"elem": 907},{"kind": 14,"err": 1728,"payload": 1055},{"kind": 14,"err": 1729,"payload": 850},{"kind": 6,"elem": 779},{"kind": 14,"err": 1730,"payload": 850},{"kind": 14,"err": 1731,"payload": 850},{"kind": 6,"elem": 905},{"kind": 14,"err": 1732,"payload": 1063},{"kind": 14,"err": 1733,"payload": 850},{"kind": 14,"err": 1682,"payload": 1062},{"kind": 6,"len": 2,"elem": 906},{"kind": 6,"elem": 906},{"kind": 14,"err": 1734,"payload": 1069},{"kind": 6,"elem": 832},{"kind": 14,"err": 1735,"payload": 850},{"kind": 14,"err": 1682,"payload": 1068},{"kind": 6,"len": 2,"elem": 833},{"kind": 6,"elem": 833},{"kind": 14,"err": 1736,"payload": 833},{"kind": 14,"err": 1737,"payload": 850},{"kind": 6,"elem": 1678},{"kind": 14,"err": 1738,"payload": 850},{"kind": 14,"err": 1739,"payload": 850},{"kind": 16,"name": "std.debug.TtyColor","src": 621,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6]},{"kind": 14,"err": 1740,"payload": 850},{"kind": 6,"len": 1,"const": true,"elem": 779},{"kind": 14,"err": 1741,"payload": 850},{"kind": 14,"err": 1742,"payload": 850},{"kind": 8,"name": "std.debug.LineInfo","src": 622,"pubDecls": [],"privDecls": [1201],"fields": [802,802,868,1743]},{"kind": 14,"err": 1744,"payload": 850},{"kind": 14,"err": 1745,"payload": 850},{"kind": 15,"name": "std.os.UnexpectedError","errors": [6]},{"kind": 8,"name": "std.fmt.FormatOptions","src": 623,"pubDecls": [],"privDecls": [],"fields": [963,963,1746,779]},{"kind": 8,"name": "std.heap.ArenaAllocator","src": 624,"pubDecls": [1202,1203],"privDecls": [1204,1205,1206,1207,1208],"fields": [1679,977,854,812]},{"kind": 14,"err": 1747,"payload": 855},{"kind": 4,"u": 29},{"kind": 14,"err": 1748,"payload": 855},{"kind": 13,"child": 972},{"kind": 14,"err": 1749,"payload": 1097},{"kind": 6,"elem": 1750},{"kind": 6,"len": 1,"const": true,"elem": 909},{"kind": 14,"err": 1682,"payload": 1751},{"kind": 14,"err": 1752,"payload": 855},{"kind": 14,"err": 1753,"payload": 1754},{"kind": 14,"err": 1755,"payload": 1754},{"kind": 6,"len": 2,"elem": 909},{"kind": 6,"len": 2,"const": true,"elem": 909},{"kind": 14,"err": 1756,"payload": 812},{"kind": 14,"err": 1757,"payload": 807},{"kind": 14,"err": 1758,"payload": 802},{"kind": 8,"name": "std.heap.FixedBufferAllocator","src": 625,"pubDecls": [1209,1210],"privDecls": [1211,1212,1213],"fields": [1679,812,855]},{"kind": 14,"err": 1759,"payload": 855},{"kind": 14,"err": 1760,"payload": 850},{"kind": 4,"u": 16},{"kind": 14,"err": 1761,"payload": 812},{"kind": 14,"err": 1762,"payload": 855},{"kind": 14,"err": 1763,"payload": 855},{"kind": 14,"err": 1764,"payload": 1113},{"kind": 6,"elem": 1085},{"kind": 14,"err": 1682,"payload": 1765},{"kind": 6,"elem": 854},{"kind": 6,"elem": 1507},{"kind": 14,"err": 1766,"payload": 972},{"kind": 14,"err": 1767,"payload": 1097},{"kind": 13,"child": 1768},{"kind": 6,"len": 1,"elem": 909},{"kind": 14,"err": 1769,"payload": 972},{"kind": 13,"child": 1770},{"kind": 14,"err": 1771,"payload": 850},{"kind": 14,"err": 1772,"payload": 812},{"kind": 8,"name": "std.unicode.Utf16LeIterator","src": 626,"pubDecls": [1214,1215],"privDecls": [],"fields": [868,812]},{"kind": 14,"err": 1773,"payload": 1139},{"kind": 6,"elem": 1122},{"kind": 14,"err": 1774,"payload": 836},{"kind": 14,"err": 1775,"payload": 836},{"kind": 14,"err": 1776,"payload": 807},{"kind": 14,"err": 1777,"payload": 807},{"kind": 14,"err": 1778,"payload": 807},{"kind": 14,"err": 1779,"payload": 855},{"kind": 14,"err": 1780,"payload": 855},{"kind": 14,"err": 1781,"payload": 1097},{"kind": 14,"err": 1782,"payload": 850},{"kind": 6,"elem": 908},{"kind": 14,"err": 1682,"payload": 1097},{"kind": 14,"err": 1783,"payload": 1137},{"kind": 8,"name": "std.unicode.Utf8View","src": 627,"pubDecls": [1216,1217,1218,1219],"privDecls": [],"fields": [868]},{"kind": 8,"name": "std.unicode.Utf8Iterator","src": 628,"pubDecls": [1220,1221],"privDecls": [],"fields": [868,812]},{"kind": 13,"child": 807},{"kind": 6,"elem": 1138},{"kind": 14,"err": 1784,"payload": 850},{"kind": 14,"err": 1785,"payload": 1143},{"kind": 6,"elem": 909},{"kind": 14,"err": 1786,"payload": 807},{"kind": 14,"err": 1787,"payload": 807},{"kind": 14,"err": 1788,"payload": 855},{"kind": 14,"err": 1789,"payload": 850},{"kind": 14,"err": 1790,"payload": 812},{"kind": 8,"name": "std.statically_initialized_mutex.StaticallyInitializedMutex","src": 629,"pubDecls": [1222,1223,1224,1225],"privDecls": [1226],"fields": [1792,1793]},{"kind": 8,"name": "std.statically_initialized_mutex.Held","src": 630,"pubDecls": [1227],"privDecls": [],"fields": [1151]},{"kind": 6,"elem": 1149},{"kind": 14,"err": 1794,"payload": 850},{"kind": 14,"err": 1795,"payload": 836},{"kind": 6,"elem": 1793},{"kind": 4,"i": 32},{"kind": 14,"err": 1796,"payload": 850},{"kind": 14,"err": 1797,"payload": 860},{"kind": 14,"err": 1798,"payload": 864},{"kind": 15},{"kind": 14,"err": 1799,"payload": 814},{"kind": 14,"err": 1800,"payload": 807},{"kind": 14,"err": 1801,"payload": 837},{"kind": 14,"err": 1802,"payload": 845},{"kind": 14,"err": 1803,"payload": 860},{"kind": 14,"err": 1804,"payload": 814},{"kind": 14,"err": 1805,"payload": 860},{"kind": 14,"err": 1806,"payload": 814},{"kind": 14,"err": 1807,"payload": 860},{"kind": 14,"err": 1808,"payload": 860},{"kind": 14,"err": 1809,"payload": 860},{"kind": 14,"err": 1810,"payload": 860},{"kind": 14,"err": 1811,"payload": 860},{"kind": 14,"err": 1812,"payload": 864},{"kind": 14,"err": 1813,"payload": 814},{"kind": 14,"err": 1814,"payload": 860},{"kind": 14,"err": 1815,"payload": 860},{"kind": 14,"err": 1816,"payload": 864},{"kind": 14,"err": 1817,"payload": 814},{"kind": 6,"elem": 950},{"kind": 6,"elem": 881},{"kind": 6,"const": true,"elem": 881},{"kind": 13,"child": 882},{"kind": 6,"elem": 804},{"kind": 6,"const": true,"elem": 804},{"kind": 6,"elem": 806},{"kind": 6,"elem": 1527},{"kind": 16,"name": "zuma.src.thread.ClockType","src": 631,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 14,"err": 1818,"payload": 850},{"kind": 6,"const": true,"elem": 807},{"kind": 14,"err": 1819,"payload": 1820},{"kind": 6,"const": true,"elem": 806},{"kind": 14,"err": 1821,"payload": 850},{"kind": 6,"elem": 1820},{"kind": 6,"elem": 895},{"kind": 6,"const": true,"elem": 895},{"kind": 14,"err": 1822,"payload": 850},{"kind": 14,"err": 1823,"payload": 850},{"kind": 6,"elem": 1824},{"kind": 6,"elem": 1825},{"kind": 14,"err": 1826,"payload": 850},{"kind": 6,"elem": 1827},{"kind": 6,"elem": 1828},{"kind": 14,"err": 1829,"payload": 1830},{"kind": 13,"child": 1046},{"kind": 14,"err": 1829,"payload": 850},{"kind": 6,"elem": 1207},{"kind": 8,"name": "zuma.src.affinity.CpuAffinity","src": 632,"pubDecls": [1228,1229,1230,1231,1232,1233,1234,1235],"privDecls": [1236],"fields": [812,812]},{"kind": 14,"err": 1832,"payload": 812},{"kind": 16,"name": "zuma.src.affinity.CpuType","src": 633,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 14,"err": 1832,"payload": 850},{"kind": 6,"elem": 1833},{"kind": 14,"err": 1834,"payload": 850},{"kind": 6,"elem": 811},{"kind": 6,"const": true,"elem": 811},{"kind": 8,"name": "zio.src.io.Buffer","src": 634,"pubDecls": [1237,1238],"privDecls": [],"fields": [1284]},{"kind": 14,"err": 1836,"payload": 1837},{"kind": 14,"err": 1838,"payload": 1219},{"kind": 6,"elem": 1837},{"kind": 6,"len": 2,"elem": 1221},{"kind": 14,"err": 1839,"payload": 850},{"kind": 8,"name": "zio.src.event.Event","src": 635,"pubDecls": [1239,1240,1241,1242,1243,1244,1245,1246,1247],"privDecls": [],"fields": [1289]},{"kind": 14,"err": 1841,"payload": 850},{"kind": 14,"err": 1842,"payload": 1227},{"kind": 14,"err": 1843,"payload": 850},{"kind": 6,"elem": 1227},{"kind": 17,"name": "zio.src.socket.Option","src": 636,"pubDecls": [],"privDecls": [],"fields": [842,1844,842,842,842,842,842,1155,1155,1155,1155,1155,1155]},{"kind": 8,"name": "zio.src.socket.Socket","src": 637,"pubDecls": [1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286],"privDecls": [1287,1288,1289],"fields": [1292]},{"kind": 6,"elem": 1226},{"kind": 14,"err": 1857,"payload": 1232},{"kind": 14,"err": 1858,"payload": 807},{"kind": 14,"err": 1859,"payload": 807},{"kind": 8,"name": "zio.src.address.Address","src": 638,"pubDecls": [1290,1291,1292,1293,1294,1295,1296],"privDecls": [],"fields": [1236,1293]},{"kind": 14,"err": 1851,"payload": 850},{"kind": 6,"const": true,"elem": 1232},{"kind": 14,"err": 1850,"payload": 850},{"kind": 4,"u": 32},{"kind": 14,"err": 1849,"payload": 850},{"kind": 8,"name": "zio.src.address.Incoming","src": 639,"pubDecls": [1297,1298],"privDecls": [],"fields": [972,1232,1686]},{"kind": 14,"err": 1848,"payload": 850},{"kind": 6,"elem": 1238},{"kind": 14,"err": 1853,"payload": 812},{"kind": 6,"elem": 1232},{"kind": 14,"err": 1861,"payload": 850},{"kind": 14,"err": 1862,"payload": 1232},{"kind": 14,"err": 1863,"payload": 1248},{"kind": 14,"err": 1864,"payload": 1248},{"kind": 14,"err": 1865,"payload": 779},{"kind": 8,"name": "std.net.Ip6Addr","src": 640,"pubDecls": [],"privDecls": [],"fields": [807,1686]},{"kind": 14,"err": 1866,"payload": 850},{"kind": 14,"err": 1867,"payload": 850},{"kind": 6,"elem": 1868},{"kind": 14,"err": 1869,"payload": 850},{"kind": 14,"err": 1870,"payload": 850},{"kind": 6,"const": true,"elem": 1227},{"kind": 14,"err": 1871,"payload": 850},{"kind": 14,"err": 1872,"payload": 850},{"kind": 6,"elem": 1873},{"kind": 14,"err": 1874,"payload": 850},{"kind": 14,"err": 1875,"payload": 850},{"kind": 14,"err": 1876,"payload": 850},{"kind": 6,"elem": 1877},{"kind": 14,"err": 1878,"payload": 850},{"kind": 14,"err": 1879,"payload": 850},{"kind": 14,"err": 1880,"payload": 850},{"kind": 6,"elem": 1881},{"kind": 14,"err": 1882,"payload": 850},{"kind": 6,"elem": 814},{"kind": 13,"child": 779},{"kind": 6,"elem": 1883},{"kind": 7,"len": 4,"elem": 779},{"kind": 14,"err": 1819,"payload": 972},{"kind": 13,"child": 1830},{"kind": 6,"elem": 883},{"kind": 6,"const": true,"elem": 883},{"kind": 6,"elem": 897},{"kind": 13,"child": 946},{"kind": 6,"elem": 945},{"kind": 6,"const": true,"elem": 945},{"kind": 6,"elem": 935},{"kind": 6,"elem": 873},{"kind": 8,"name": "std.rand.Xoroshiro128","src": 641,"pubDecls": [1299],"privDecls": [1300,1301,1302,1303],"fields": [1833,1884]},{"kind": 6,"elem": 1281},{"kind": 6,"elem": 924},{"kind": 8,"name": "zio.src.backend.windows.Buffer","src": 642,"pubDecls": [1304,1305],"privDecls": [],"fields": [1886]},{"kind": 14,"err": 1836,"payload": 1887},{"kind": 14,"err": 1838,"payload": 1288},{"kind": 6,"elem": 1887},{"kind": 6,"len": 2,"elem": 1289},{"kind": 8,"name": "zio.src.backend.windows.Event","src": 643,"pubDecls": [1306,1307,1308],"privDecls": [],"fields": [1888]},{"kind": 14,"err": 1842,"payload": 1292},{"kind": 6,"elem": 1292},{"kind": 8,"name": "zio.src.backend.windows.Socket","src": 644,"pubDecls": [1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322],"privDecls": [1323,1324,1325,1326,1327,1328,1329,1330,1331,1332],"fields": [972,807,1892,1892]},{"kind": 8,"name": "zio.src.backend.windows.SockAddr","src": 645,"pubDecls": [1333,1334,1335,1336],"privDecls": [],"fields": [1895]},{"kind": 13,"child": 1242},{"kind": 6,"len": 2,"const": true,"elem": 855},{"kind": 4,"u": 128},{"kind": 6,"const": true,"elem": 1292},{"kind": 8,"name": "std.hash.wyhash.Wyhash","src": 646,"pubDecls": [1337,1338,1339,1340],"privDecls": [],"fields": [1300,1897,812]},{"kind": 6,"elem": 1298},{"kind": 8,"name": "std.hash.wyhash.WyhashStateless","src": 647,"pubDecls": [1341,1342,1343,1344],"privDecls": [1345],"fields": [802,812]},{"kind": 6,"elem": 1300},{"kind": 6,"const": true,"elem": 941},{"kind": 13,"child": 800},{"kind": 6,"elem": 941},{"kind": 6,"elem": 937},{"kind": 13,"child": 926},{"kind": 6,"elem": 963},{"kind": 6,"elem": 904},{"kind": 6,"elem": 1898},{"kind": 6,"elem": 1899},{"kind": 6,"const": true,"elem": 898},{"kind": 13,"child": 819},{"kind": 6,"elem": 898},{"kind": 6,"elem": 857},{"kind": 14,"err": 1842,"payload": 850},{"kind": 6,"elem": 947},{"kind": 13,"child": 795},{"kind": 18,"name": "extern fn(*c_void, c_int, c_int, usize, c_int) c_int","generic": false,"ret": 1155,"args": [972,1155,1155,812,1155]},{"kind": 18,"name": "extern fn(*c_void, c_int, c_int, usize, *c_int) c_int","generic": false,"ret": 1155,"args": [972,1155,1155,812,1900]},{"kind": 14,"err": 1901,"payload": 1890},{"kind": 6,"elem": 1892},{"kind": 6,"elem": 972},{"kind": 13,"child": 1234},{"kind": 6,"len": 2,"const": true,"elem": 1284},{"kind": 6,"len": 2,"elem": 1284},{"kind": 6,"elem": 802},{"kind": 6,"elem": 936},{"kind": 6,"const": true,"elem": 815},{"kind": 13,"child": 816},{"kind": 6,"elem": 815},{"kind": 6,"const": true,"elem": 817},{"kind": 13,"child": 818},{"kind": 6,"elem": 817},{"kind": 6,"const": true,"elem": 1523},{"kind": 8,"name": "std.os.windows.bits.GUID","src": 648,"pubDecls": [1346],"privDecls": [],"fields": [1903,1105,1105,1523]},{"kind": 6,"elem": 1904},{"kind": 6,"elem": 1905},{"kind": 6,"elem": 1906},{"kind": 6,"elem": 1315},{"kind": 6,"elem": 827},{"kind": 6,"const": true,"elem": 899},{"kind": 13,"child": 820},{"kind": 6,"elem": 899},{"kind": 6,"elem": 1306},{"kind": 6,"const": true,"elem": 821},{"kind": 13,"child": 797},{"kind": 6,"elem": 821},{"kind": 8,"name": "std.rand.SplitMix64","src": 649,"pubDecls": [1347,1348],"privDecls": [],"fields": [802]},{"kind": 6,"elem": 1348},{"kind": 6,"const": true,"elem": 798},{"kind": 13,"child": 799},{"kind": 6,"elem": 798},{"kind": 6,"const": true,"elem": 900},{"kind": 13,"child": 805},{"kind": 6,"elem": 900},{"kind": 6,"elem": 1317},{"kind": 6,"const": true,"elem": 1907},{"kind": 6,"const": true,"elem": 808},{"kind": 13,"child": 809},{"kind": 6,"elem": 808},{"kind": 6,"const": true,"elem": 782},{"kind": 13,"child": 783},{"kind": 6,"elem": 782},{"kind": 8,"name": "std.fmt.errol.FloatDecimal","src": 650,"pubDecls": [],"privDecls": [],"fields": [855,860]},{"kind": 6,"elem": 1364},{"kind": 16,"name": "std.fmt.errol.RoundMode","src": 651,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.fmt.errol.enum3.Slab","src": 652,"pubDecls": [],"privDecls": [],"fields": [868,860]},{"kind": 8,"name": "std.fmt.errol.lookup.HP","src": 653,"pubDecls": [],"privDecls": [],"fields": [830,830]},{"kind": 6,"elem": 1368},{"kind": 6,"elem": 830},{"kind": 4,"i": 32},{"kind": 6,"elem": 1908},{"kind": 14,"err": 1909,"payload": 1377},{"kind": 6,"elem": 1496},{"kind": 14,"err": 1910,"payload": 1911},{"kind": 8,"name": "std.progress.Node","src": 654,"pubDecls": [1349,1350,1351,1352],"privDecls": [],"fields": [1374,1913,812,868,1913,963]},{"kind": 6,"elem": 1376},{"kind": 14,"err": 1914,"payload": 855},{"kind": 6,"elem": 1911},{"kind": 14,"err": 1915,"payload": 850},{"kind": 6,"elem": 1916},{"kind": 14,"err": 1914,"payload": 850},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void","generic": false,"ret": 1382,"args": [1381,868]},{"kind": 8,"name": "zync.src.atomic","src": 655,"pubDecls": [1353,1354,1355,1356],"privDecls": [1357,1358,1359,1360,1361],"file": 5},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1363,783,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1361,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1363,783,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1363,783,783,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1363,783,1658,null]},{"kind": 8,"name": "std.macho.nlist_64","src": 656,"pubDecls": [],"privDecls": [],"fields": [807,779,779,909,802]},{"kind": 8,"name": "std.io.in_stream","src": 657,"pubDecls": [1362,1363,1364,1365],"privDecls": [1366,1367,1368,1369,1370,1371,1372],"file": 6},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet),type)var","generic": true,"args": [1031,778]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet),type)var","generic": true,"args": [1031,778]},{"kind": 8,"name": "zuma.src.backend.windows","src": 658,"pubDecls": [1373,1374,1375,1376,1377,1378,1379,1380,1381],"privDecls": [1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444],"file": 7},{"kind": 18,"name": "extern fn(*c_void) c_int","generic": false,"ret": 1155,"args": [972]},{"kind": 18,"name": "extern fn(*c_void, c_uint) c_int","generic": false,"ret": 1155,"args": [972,1236]},{"kind": 18,"name": "extern fn(*c_void, *const zio.src.backend.windows.SOCKADDR, c_uint) c_int","generic": false,"ret": 1155,"args": [972,1947,1236]},{"kind": 18,"name": "extern fn() c_int","generic": false,"ret": 1155},{"kind": 18,"name": "extern fn(u16, *zio.src.backend.windows.WSAData) c_int","generic": false,"ret": 1155,"args": [909,1948]},{"kind": 18,"name": "extern fn(*c_void, u32, *c_void, u32, *c_void, u32, *u32, ?*std.os.windows.bits.OVERLAPPED, ?extern fn(*std.os.windows.bits.OVERLAPPED) usize) c_int","generic": false,"ret": 1155,"args": [972,807,972,807,972,807,1949,1950,1951]},{"kind": 18,"name": "extern fn(u32, u32, u32, usize, usize, u32) *c_void","generic": false,"ret": 972,"args": [807,807,807,812,812,807]},{"kind": 18,"name": "extern fn(*c_void, *zio.src.backend.windows.SOCKADDR, *c_uint, ?extern fn() void, ?*u32) *c_void","generic": false,"ret": 972,"args": [972,1952,1953,1954,1955]},{"kind": 18,"name": "extern fn(*c_void, *const zio.src.backend.windows.SOCKADDR, c_uint, ?[*]const zio.src.backend.windows.WSABUF, ?[*]const zio.src.backend.windows.WSABUF, ?*c_void, ?*c_void) c_int","generic": false,"ret": 1155,"args": [972,1947,1236,1956,1956,1089,1089]},{"kind": 18,"name": "extern fn(*c_void, [*]const zio.src.backend.windows.WSABUF, u32, ?*u32, u32, ?*const zio.src.backend.windows.SOCKADDR, c_uint, ?*std.os.windows.bits.OVERLAPPED, ?extern fn(u32, u32, *std.os.windows.bits.OVERLAPPED) void) c_int","generic": false,"ret": 1155,"args": [972,1957,807,1955,807,1958,1236,1950,1959]},{"kind": 18,"name": "extern fn(*c_void, [*]zio.src.backend.windows.WSABUF, u32, ?*u32, *u32, ?*zio.src.backend.windows.SOCKADDR, ?*c_uint, ?*std.os.windows.bits.OVERLAPPED, ?extern fn(u32, u32, *std.os.windows.bits.OVERLAPPED) void) c_int","generic": false,"ret": 1155,"args": [972,1960,807,1955,1949,1961,1962,1950,1959]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1352,799,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1350,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1352,799,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1352,799,799,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1352,799,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1183,779,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1183,779,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1183,779,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1183,779,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1183,779,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1183,779,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1183,779,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1183,779,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(u8),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1184,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u8),u8,builtin.AtomicRmwOp,var)var","generic": true,"args": [1183,779,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u32),u32,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1185,807,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(u32),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1191,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(u32),u32,builtin.AtomicRmwOp,var)var","generic": true,"args": [1185,807,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1360,809,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1358,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1360,809,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1360,809,809,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1360,809,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(usize),usize,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1213,812,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(usize),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1214,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(usize),usize,builtin.AtomicRmwOp,var)var","generic": true,"args": [1213,812,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1330,816,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1328,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1330,816,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1330,816,816,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1330,816,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1333,818,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1331,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1333,818,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1333,818,818,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1333,818,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1347,797,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1345,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1347,797,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1347,797,797,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1347,797,1658,null]},{"kind": 8,"name": "zync.src.utils","src": 659,"pubDecls": [1445,1446,1447,1448,1449,1450,1451],"privDecls": [1452,1453,1454,1455],"file": 8},{"kind": 8,"name": "std.array_list","src": 660,"pubDecls": [1456,1457],"privDecls": [1458,1459,1460,1461,1462,1463,1464],"file": 9},{"kind": 7,"len": 2,"elem": 779},{"kind": 8,"name": "std.io","src": 661,"pubDecls": [1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500],"privDecls": [1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517],"file": 10},{"kind": 18,"name": "fn(*std.io.OutStream(std.os.WriteError),[]const u8,var)var","generic": true,"args": [969,868,null]},{"kind": 8,"name": "std.mem","src": 662,"pubDecls": [1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592],"privDecls": [1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606],"file": 11},{"kind": 8,"name": "std.dynamic_library.WindowsDynLib","src": 663,"pubDecls": [1607,1608,1609],"privDecls": [],"fields": [1768]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 8,"name": "std.thread.Thread","src": 664,"pubDecls": [1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620],"privDecls": [],"fields": [1981]},{"kind": 8,"name": "std.buf_set.BufSet","src": 665,"pubDecls": [1621,1622,1623,1624,1625,1626,1627,1628],"privDecls": [1629,1630,1631],"fields": [866]},{"kind": 8,"name": "std.os","src": 666,"pubDecls": [1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900],"privDecls": [1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911],"file": 12},{"kind": 8,"name": "std.debug","src": 667,"pubDecls": [1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946],"privDecls": [1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041],"file": 13},{"kind": 8,"name": "std.buffer.Buffer","src": 668,"pubDecls": [2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062],"privDecls": [],"fields": [907]},{"kind": 8,"name": "std.dwarf","src": 669,"pubDecls": [2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644],"privDecls": [],"file": 14},{"kind": 8,"name": "std.testing","src": 670,"pubDecls": [2645,2646,2647,2648],"privDecls": [2649,2650,2651],"file": 15},{"kind": 8,"name": "std.io.BufferOutStream","src": 671,"pubDecls": [2652,2653,2654],"privDecls": [2655],"fields": [2010,954]},{"kind": 8,"name": "std.event","src": 672,"pubDecls": [2656,2657,2658,2659,2660,2661,2662,2663,2664,2665],"privDecls": [],"file": 16},{"kind": 8,"name": "std.unicode","src": 673,"pubDecls": [2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680],"privDecls": [2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703],"file": 17},{"kind": 8,"name": "std.build","src": 674,"pubDecls": [2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719],"privDecls": [2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741],"file": 18},{"kind": 8,"name": "std.http","src": 675,"pubDecls": [2742],"privDecls": [],"file": 19},{"kind": 8,"name": "std.elf","src": 676,"pubDecls": [2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073,3074,3075,3076,3077],"privDecls": [3078,3079,3080,3081,3082,3083,3084,3085,3086],"file": 20},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 8,"name": "std.ascii","src": 677,"pubDecls": [3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105],"privDecls": [3106,3107,3108,3109],"file": 21},{"kind": 8,"name": "std.child_process.ChildProcess","src": 678,"pubDecls": [3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123],"privDecls": [3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134],"fields": [850,972,972,977,2015,2015,2015,2016,1009,2017,2012,2012,2012,850,850,1016,850,850]},{"kind": 8,"name": "std.hash_map","src": 679,"pubDecls": [3135,3136,3137,3138,3139,3140,3141,3142,3143,3144],"privDecls": [3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157],"file": 22},{"kind": 8,"name": "std.fmt","src": 680,"pubDecls": [3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182],"privDecls": [3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206],"file": 23},{"kind": 8,"name": "std.base64","src": 681,"pubDecls": [3207,3208,3209,3210,3211,3212,3213,3214,3215],"privDecls": [3216,3217,3218,3219,3220,3221,3222,3223,3224,3225],"file": 24},{"kind": 8,"name": "std.atomic","src": 682,"pubDecls": [3226,3227,3228],"privDecls": [],"file": 25},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.json","src": 683,"pubDecls": [3229,3230,3231,3232,3233,3234,3235,3236,3237,3238],"privDecls": [3239,3240,3241,3242,3243,3244,3245,3246,3247,3248],"file": 26},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.pdb","src": 684,"pubDecls": [3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270],"privDecls": [3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284],"file": 27},{"kind": 8,"name": "std.buf_map.BufMap","src": 685,"pubDecls": [3285,3286,3287,3288,3289,3290,3291,3292],"privDecls": [3293,3294,3295],"fields": [867]},{"kind": 8,"name": "std.coff","src": 686,"pubDecls": [3296,3297,3298],"privDecls": [3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317],"file": 28},{"kind": 8,"name": "std.crypto","src": 687,"pubDecls": [3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341],"privDecls": [3342,3343,3344,3345,3346,3347],"file": 29},{"kind": 8,"name": "std.hash","src": 688,"pubDecls": [3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366],"privDecls": [3367,3368,3369,3370,3371],"file": 30},{"kind": 8,"name": "std.sort","src": 689,"pubDecls": [3372,3373,3374,3375,3376,3377],"privDecls": [3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403],"file": 31},{"kind": 8,"name": "std.c","src": 690,"pubDecls": [1634,1636,3404,3405,1639,1640,3406,1642,1644,3407,1646,3408,3409,1649,1650,1654,3410,3411,1659,1661,1662,1663,3412,1668,1669,3413,1671,3414,3415,3416,1674,3417,1676,3418,3419,1679,1680,1684,3420,3421,1688,1689,3422,3423,1692,3424,3425,3426,1696,1695,1699,1700,3427,1705,1706,1707,3428,1709,1710,3429,3430,1715,3431,1717,3432,1719,1720,1723,3433,3434,1725,3435,3436,3437,3438,1731,3439,3440,3441,1739,3442,1740,3443,3444,3445,3446,3447,1750,1751,1752,1753,3448,3449,3450,1756,1758,1760,1761,1765,1766,1767,1768,1771,3451,3452,1774,1775,1777,3453,3454,3455,3456,3457,1785,1786,1787,3458,1790,3459,1792,3460,1794,1796,1797,1799,1801,3461,1802,3462,3463,3464,1806,3465,3466,1813,3467,1816,1815,3468,3469,3470,1822,1826,3471,1831,3472,3473,3474,1836,1837,1838,1839,1840,1842,1845,1846,1848,1850,1849,3475,3476,3477,1854,3478,3479,1857,3480,1860,1861,1863,3481,1865,3482,3483,3484,1871,1872,1873,3485,1876,1877,3486,3487,1881,1882,3488,3489,3490,1886,1889,1890,1892,1894,1896,1895,1897,3491,1899,1632,1635],"privDecls": [3492,3493,3494],"file": 32},{"kind": 8,"name": "std.cstr","src": 691,"pubDecls": [3495,3496,3497,3498],"privDecls": [3499,3500,3501,3502,3503,3504],"file": 33},{"kind": 8,"name": "std.rb","src": 692,"pubDecls": [3505,3506],"privDecls": [3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520],"file": 34},{"kind": 8,"name": "std.rand","src": 693,"pubDecls": [3521,3522,3523,3524,3525,3526,3527,3528],"privDecls": [3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546],"file": 35},{"kind": 8,"name": "std.meta","src": 694,"pubDecls": [3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565],"privDecls": [3566,3567,3568,3569,3570,3571,3572,3573],"file": 36},{"kind": 8,"name": "std.net","src": 695,"pubDecls": [3574,3575,3576,3577,3578,3579,3580],"privDecls": [3581,3582,3583,3584,3585,3586,3587],"file": 37},{"kind": 8,"name": "std.fs","src": 696,"pubDecls": [3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629],"privDecls": [3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640],"file": 38},{"kind": 8,"name": "std.heap","src": 697,"pubDecls": [3641,3642,3643,3644,3645,3646,3647,3648,3649,3650],"privDecls": [3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674],"file": 39},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.time","src": 698,"pubDecls": [3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693],"privDecls": [3694,3695,3696,3697,3698,3699],"file": 40},{"kind": 8,"name": "std.progress.Progress","src": 699,"pubDecls": [3700,3701,3702,3703,3704],"privDecls": [3705],"fields": [2015,1376,1911,802,2056,802,802,842,812]},{"kind": 8,"name": "std.packed_int_array","src": 700,"pubDecls": [3706,3707,3708,3709,3710],"privDecls": [3711,3712,3713,3714],"file": 41},{"kind": 8,"name": "std.valgrind","src": 701,"pubDecls": [3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747],"privDecls": [3748,3749,3750,3751],"file": 42},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 8,"name": "std.zig","src": 702,"pubDecls": [3752,3753,3754,3755,3756,3757],"privDecls": [3758],"file": 43},{"kind": 8,"name": "std.spinlock.SpinLock","src": 703,"pubDecls": [3759,3760,3761],"privDecls": [],"fields": [779]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.process","src": 704,"pubDecls": [3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780],"privDecls": [3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792],"file": 44},{"kind": 8,"name": "std.macho","src": 705,"pubDecls": [3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943],"privDecls": [3944],"file": 45},{"kind": 18,"name": "fn(usize,var,var,var,var)var","generic": true,"args": [812,null,null,null,null]},{"kind": 8,"name": "std.linked_list","src": 706,"pubDecls": [3945,3946],"privDecls": [3947,3948,3949,3950,3951,3952],"file": 46},{"kind": 8,"name": "std.linked_list.Node","src": 707,"pubDecls": [3953,3954,3955],"privDecls": [],"fields": [1508,855]},{"kind": 13,"child": 1113},{"kind": 8,"name": "std.hash_map.KV","src": 708,"pubDecls": [],"privDecls": [],"fields": [868,850]},{"kind": 8,"name": "std.hash_map.Entry","src": 709,"pubDecls": [],"privDecls": [],"fields": [842,812,1509]},{"kind": 6,"len": 2,"elem": 1510},{"kind": 8,"name": "std.hash_map.KV","src": 708,"pubDecls": [],"privDecls": [],"fields": [868,868]},{"kind": 8,"name": "std.hash_map.Entry","src": 709,"pubDecls": [],"privDecls": [],"fields": [842,812,1512]},{"kind": 6,"len": 2,"elem": 1513},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.atomic.e),zync.src.atomic.e,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1180,882,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.atomic.e),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1181,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.atomic.e),zync.src.atomic.e,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1180,882,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.atomic.e),zync.src.atomic.e,zync.src.atomic.e,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1180,882,882,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.atomic.e),zync.src.atomic.e,builtin.AtomicRmwOp,var)var","generic": true,"args": [1180,882,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.EventState),zync.src.lock.EventState,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1273,884,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.lock.EventState),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1274,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.EventState),zync.src.lock.EventState,builtin.AtomicRmwOp,var)var","generic": true,"args": [1273,884,1658,null]},{"kind": 7,"len": 8,"elem": 779},{"kind": 8,"name": "std.coff.SectionHeader","src": 710,"pubDecls": [],"privDecls": [3956],"fields": [1523,2060,807,807,807,807,807,909,909,807]},{"kind": 7,"len": 56,"elem": 779},{"kind": 8,"name": "zync.src.lock","src": 711,"pubDecls": [3957,3958,3959],"privDecls": [3960,3961,3962,3963,3964,3965,3966,3967],"file": 47},{"kind": 8,"name": "zync.src.futex.Futex","src": 712,"pubDecls": [3968,3969,3970,3971,3972,3973],"privDecls": [],"fields": [1883]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(bool),bool,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1275,842,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(bool),bool,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1275,842,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(bool),bool,builtin.AtomicRmwOp,var)var","generic": true,"args": [1275,842,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1313,819,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1311,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1313,819,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1313,819,819,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1313,819,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1343,820,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1341,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1343,820,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1343,820,820,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1343,820,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1355,805,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1353,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1355,805,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1355,805,805,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1355,805,1658,null]},{"kind": 8,"name": "std.hash_map.KV","src": 708,"pubDecls": [],"privDecls": [],"fields": [785,903]},{"kind": 8,"name": "std.hash_map.Entry","src": 709,"pubDecls": [],"privDecls": [],"fields": [842,812,1546]},{"kind": 6,"len": 2,"elem": 1547},{"kind": 6,"len": 2,"align": 4,"const": true,"elem": 779},{"kind": 13,"child": 2064},{"kind": 8,"name": "std.pdb.ModInfo","src": 713,"pubDecls": [],"privDecls": [],"fields": [807,833,909,909,807,807,807,909,1449,807,807,807]},{"kind": 18,"name": "extern fn(*const c_void) void","generic": false,"ret": 850,"args": [2065]},{"kind": 18,"name": "extern fn(*const c_void, *const c_void, usize, u32) c_int","generic": false,"ret": 1155,"args": [2065,2065,812,807]},{"kind": 7,"len": 62,"elem": 779},{"kind": 7,"len": 0,"elem": 779},{"kind": 9,"name": "comptime_float"},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 5,"bits": 128},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 8,"name": "std.math.complex","src": 714,"pubDecls": [3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994],"privDecls": [3995,3996,3997,3998],"file": 48},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 5,"bits": 16},{"kind": 18,"name": "fn(comptime_int,var)var","generic": true,"args": [843,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(u29,var)var","generic": true,"args": [1087,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 8,"name": "std.math.big","src": 715,"pubDecls": [3999,4000,4001,4002,4003],"privDecls": [],"file": 49},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var,var,var)var","generic": true,"args": [778,null,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var,var)var","generic": true,"args": [778,null,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 15,"name": "std.math.AlignCastError","errors": [17]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1304,800,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.utils.State),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1302,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1304,800,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,zync.src.utils.State,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1304,800,800,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.utils.State),zync.src.utils.State,builtin.AtomicRmwOp,var)var","generic": true,"args": [1304,800,1658,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.MutexState),zync.src.lock.MutexState,zync.src.atomic.AtomicOrder)var","generic": true,"args": [1277,946,791]},{"kind": 18,"name": "fn(*const zync.src.atomic.Atomic(zync.src.lock.MutexState),zync.src.atomic.AtomicOrder)var","generic": true,"args": [1278,791]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.MutexState),zync.src.lock.MutexState,zync.src.lock.MutexState,zync.src.atomic.AtomicOrder,var)var","generic": true,"args": [1277,946,946,791,null]},{"kind": 18,"name": "fn(*zync.src.atomic.Atomic(zync.src.lock.MutexState),zync.src.lock.MutexState,builtin.AtomicRmwOp,var)var","generic": true,"args": [1277,946,1658,null]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError),type)var","generic": true,"args": [986,778]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError),type)var","generic": true,"args": [986,778]},{"kind": 18,"name": "fn(*std.io.OutStream(std.io.Error), []const u8) std.io.Error!void","generic": false,"ret": 2068,"args": [2069,868]},{"kind": 8,"name": "zio","src": 716,"pubDecls": [4004,4005,4006,4007,4008,4009,4010,4011,4012],"privDecls": []},{"kind": 8,"name": "zuma","src": 717,"pubDecls": [4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035],"privDecls": []},{"kind": 8,"name": "zync","src": 718,"pubDecls": [1445,3959,1353,1446,3957,1447,1356,1448,4036,1354,3958,1355,1449,1450,1451],"privDecls": []},{"kind": 6,"len": 2,"const": true,"elem": 1666},{"kind": 16,"name": "builtin.AtomicRmwOp","src": 719,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 16,"name": "@TagType(builtin.Arch)","src": 720,"pubDecls": [4037,4038,4039,4040],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]},{"kind": 16,"name": "builtin.Endian","src": 721,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 16,"name": "builtin.Mode","src": 722,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 16,"name": "builtin.Os","src": 723,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]},{"kind": 17,"name": "builtin.Arch","src": 720,"pubDecls": [4037,4038,4039,4040],"privDecls": [],"fields": [2075,2075,2077,2077,2077,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,850,2075,2075,850,850,850,850,850,850,850,850,850,850,850,850,850,2076,850,850,850,850,850,850]},{"kind": 16,"name": "builtin.GlobalLinkage","src": 724,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 17,"name": "builtin.TypeInfo","src": 725,"pubDecls": [4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061],"privDecls": [],"fields": [850,850,850,850,2098,2091,2081,2079,2078,850,850,850,850,2087,2080,2086,2088,2085,2096,2096,850,850,850,2094,2090,850]},{"kind": 8,"name": "builtin.TestFn","src": 726,"pubDecls": [],"privDecls": [],"fields": [868,1]},{"kind": 6,"elem": 970},{"kind": 6,"const": true,"elem": 970},{"kind": 15,"name": "@typeOf(std.debug.getStderrStream).ReturnType.ErrorSet","fn": 5,"errors": [18,19]},{"kind": 15,"name": "std.os.windows.GetStdHandleError","errors": [18,19]},{"kind": 8,"name": "std.fs.file","src": 727,"pubDecls": [4062],"privDecls": [4063,4064,4065,4066,4067,4068,4069,4070,4071,4072],"file": 50},{"kind": 15,"name": "std.fs.file.OpenError","errors": [20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]},{"kind": 15,"name": "std.os.SeekError","errors": [7,6]},{"kind": 15,"name": "std.fs.file.GetPosError","errors": [7,6,39]},{"kind": 21,"name": "c_void"},{"kind": 15,"name": "@typeOf(std.debug.getSelfDebugInfo).ReturnType.ErrorSet","fn": 17,"errors": [40,41,42,43,44,45,46,47,48,7,6,39,49,50,0,2,3,4,5,20,21,22,23,24,25,26,27,29,30,31,32,34,36,37,38,51,52,53,54,55,56,57]},{"kind": 15,"name": "@typeOf(std.debug.openSelfDebugInfo).ReturnType.ErrorSet","fn": 18,"errors": [40,41,42,43,44,45,46,47,48,7,6,39,49,50,0,2,3,4,5,20,21,22,23,24,25,26,27,29,30,31,32,34,36,37,38,51,52,53,54,55,56,57]},{"kind": 8,"name": "std.debug.DebugInfo","src": 728,"pubDecls": [],"privDecls": [],"fields": [1707,983,1068,1062]},{"kind": 8,"name": "std.mem.Allocator","src": 729,"pubDecls": [4073,4074,4075,4076,4077,4078,4079,4080,4081,4082],"privDecls": [],"fields": [2107,147]},{"kind": 15,"name": "@typeOf(std.debug.openSelfDebugInfoWindows).ReturnType.ErrorSet","fn": 20,"errors": [40,41,42,43,44,45,46,47,48,7,6,39,49,50,0,2,3,4,5,20,21,22,23,24,25,26,27,29,30,31,32,34,36,37,38,51,52,53,54,55,56,57]},{"kind": 15,"name": "std.fs.OpenSelfExeError","errors": [58,29,30,31,32,59,60,33,34,35,36,37,61,38,6,20,24,26,27,56,57]},{"kind": 15,"name": "std.mem.Error","errors": [47]},{"kind": 18,"name": "fn(*std.coff.Coff,[]const u8)var","generic": true,"args": [983,868]},{"kind": 8,"name": "std.coff.CoffHeader","src": 730,"pubDecls": [],"privDecls": [],"fields": [909,909,807,807,807,909,909]},{"kind": 8,"name": "std.coff.OptionalHeader","src": 731,"pubDecls": [],"privDecls": [4083],"fields": [909,2109]},{"kind": 7,"len": 16,"elem": 779},{"kind": 15,"name": "@typeOf(std.coff.Coff.loadHeader).ReturnType.ErrorSet","fn": 25,"errors": [54,55,7,6,52,50,0,1,2,3,4,5]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(std.os.ReadError).readNoEof).ReturnType.ErrorSet","fn": 27,"errors": [50,0,1,2,3,4,5,6]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(std.os.ReadError).readIntLittle).ReturnType.ErrorSet","fn": 31,"errors": [50,0,1,2,3,4,5,6]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(std.os.ReadError).readIntLittle).ReturnType.ErrorSet","fn": 33,"errors": [50,0,1,2,3,4,5,6]},{"kind": 15,"name": "@typeOf(std.coff.Coff.loadOptionalHeader).ReturnType.ErrorSet","fn": 35,"errors": [55,7,6,52,50,0,1,2,3,4,5]},{"kind": 15,"name": "@typeOf(std.coff.Coff.getPdbPath).ReturnType.ErrorSet","fn": 37,"errors": [60,52,7,6,53,47,50,0,1,2,3,4,5]},{"kind": 15,"name": "@typeOf(std.coff.Coff.loadSections).ReturnType.ErrorSet","fn": 38,"errors": [47,50,0,1,2,3,4,5,6]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.coff.Section,null).ensureCapacity).ReturnType.ErrorSet","fn": 39,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.coff.Section,null).append).ReturnType.ErrorSet","fn": 42,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.coff.Section,null).addOne).ReturnType.ErrorSet","fn": 43,"errors": [47]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(std.os.ReadError).readStruct).ReturnType.ErrorSet","fn": 47,"errors": [50,0,1,2,3,4,5,6]},{"kind": 8,"name": "std.coff.DebugDirectoryEntry","src": 732,"pubDecls": [],"privDecls": [],"fields": [807,807,909,909,807,807,807,807]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(std.os.ReadError).readByte).ReturnType.ErrorSet","fn": 49,"errors": [50,0,1,2,3,4,5,6]},{"kind": 15,"name": "@typeOf(std.fs.path.resolve).ReturnType.ErrorSet","fn": 50,"errors": [47,62,51,6]},{"kind": 15,"name": "@typeOf(std.fs.path.resolveWindows).ReturnType.ErrorSet","fn": 51,"errors": [47,62,51,6]},{"kind": 15,"name": "@typeOf(std.process.getCwdAlloc).ReturnType.ErrorSet","fn": 52,"errors": [47,62,51,6]},{"kind": 8,"name": "std.fs.path","src": 733,"pubDecls": [4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114],"privDecls": [4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144],"file": 51},{"kind": 15,"name": "std.os.GetCwdError","errors": [62,51,6]},{"kind": 15,"name": "@typeOf(std.mem.dupe).ReturnType.ErrorSet","fn": 61,"errors": [47]},{"kind": 15,"name": "@typeOf(std.pdb.Pdb.openFile).ReturnType.ErrorSet","fn": 64,"errors": [45,46,47,48,7,6,39,49,50,0,2,3,4,5,20,21,22,23,24,25,26,27,29,30,31,32,34,36,37,38]},{"kind": 8,"name": "std.pdb.Pdb","src": 734,"pubDecls": [4145,4146,4147],"privDecls": [],"fields": [967,977,983,974,974,1709]},{"kind": 15,"name": "@typeOf(std.pdb.Msf.openFile).ReturnType.ErrorSet","fn": 66,"errors": [45,46,47,48,7,6,39,49,50,0,2,3,4,5]},{"kind": 8,"name": "std.pdb.Msf","src": 735,"pubDecls": [],"privDecls": [4148],"fields": [1028,1714]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(std.os.ReadError).readStruct).ReturnType.ErrorSet","fn": 67,"errors": [50,0,1,2,3,4,5,6]},{"kind": 8,"name": "std.pdb.SuperBlock","src": 736,"pubDecls": [],"privDecls": [4149],"fields": [1897,807,807,807,807,807,807]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readIntLittle).ReturnType.ErrorSet","fn": 72,"errors": [50,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readNoEof).ReturnType.ErrorSet","fn": 73,"errors": [50,0,1,2,3,4,5,6,7]},{"kind": 6,"len": 2,"elem": 1028},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readStruct).ReturnType.ErrorSet","fn": 80,"errors": [50,0,1,2,3,4,5,6,7]},{"kind": 8,"name": "std.debug.HashTableHeader","src": 737,"pubDecls": [],"privDecls": [4150],"fields": [807,807]},{"kind": 15,"name": "@typeOf(std.debug.readSparseBitVector).ReturnType.ErrorSet","fn": 82,"errors": [47,50,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(usize,null).append).ReturnType.ErrorSet","fn": 84,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(usize,null).addOne).ReturnType.ErrorSet","fn": 85,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(usize,null).ensureCapacity).ReturnType.ErrorSet","fn": 86,"errors": [47]},{"kind": 6,"len": 2,"elem": 2110},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readStruct).ReturnType.ErrorSet","fn": 94,"errors": [50,0,1,2,3,4,5,6,7]},{"kind": 8,"name": "std.pdb.DbiStreamHeader","src": 738,"pubDecls": [],"privDecls": [],"fields": [860,807,807,909,909,909,909,909,909,807,807,807,860,860,807,860,860,909,909,807]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readStruct).ReturnType.ErrorSet","fn": 96,"errors": [50,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@typeOf(std.pdb.MsfStream.readNullTermString).ReturnType.ErrorSet","fn": 97,"errors": [50,0,1,2,3,4,5,6,7,47]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readByte).ReturnType.ErrorSet","fn": 99,"errors": [50,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(u8,null).append).ReturnType.ErrorSet","fn": 101,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(u8,null).addOne).ReturnType.ErrorSet","fn": 102,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(u8,null).ensureCapacity).ReturnType.ErrorSet","fn": 103,"errors": [47]},{"kind": 15,"name": "@typeOf(std.pdb.MsfStream.seekBy).ReturnType.ErrorSet","fn": 107,"errors": [40]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.debug.Module,null).append).ReturnType.ErrorSet","fn": 108,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.debug.Module,null).addOne).ReturnType.ErrorSet","fn": 109,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.debug.Module,null).ensureCapacity).ReturnType.ErrorSet","fn": 110,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null).addOne).ReturnType.ErrorSet","fn": 116,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.pdb.SectionContribEntry,null).ensureCapacity).ReturnType.ErrorSet","fn": 117,"errors": [47]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet).readStruct).ReturnType.ErrorSet","fn": 121,"errors": [50,0,1,2,3,4,5,6,7]},{"kind": 15,"name": "@typeOf(std.debug.writeStackTrace).ReturnType.ErrorSet","fn": 125,"errors": [8,9,10,11,12,13,14,15,6,49,42,50,2,5,7,47,40,20,21,22,24,25,26,27,29,30,31,32,37,38,63]},{"kind": 15,"name": "@typeOf(std.debug.printSourceAtAddress).ReturnType.ErrorSet","fn": 127,"errors": [8,9,10,11,12,13,14,15,6,49,42,50,2,5,7,47,40,20,21,22,24,25,26,27,29,30,31,32,37,38,63]},{"kind": 15,"name": "@typeOf(std.debug.printSourceAtAddressWindows).ReturnType.ErrorSet","fn": 128,"errors": [8,9,10,11,12,13,14,15,6,49,42,50,2,5,7,47,40,20,21,22,24,25,26,27,29,30,31,32,37,38,63]},{"kind": 15,"name": "@typeOf(std.debug.populateModule).ReturnType.ErrorSet","fn": 135,"errors": [49,42,50,0,1,2,3,4,5,6,7,47]},{"kind": 15,"name": "@typeOf(std.pdb.MsfStream.seekTo).ReturnType.ErrorSet","fn": 138,"errors": [40]},{"kind": 15,"name": "@typeOf(std.debug.printLineFromFileAnyOs).ReturnType.ErrorSet","fn": 144,"errors": [8,9,10,11,12,13,14,15,6,2,5,20,21,22,24,25,26,27,29,30,31,32,37,38,63]},{"kind": 13,"child": 977},{"kind": 15,"name": "@typeOf(std.debug.writeCurrentStackTrace).ReturnType.ErrorSet","fn": 151,"errors": [8,9,10,11,12,13,14,15,6,49,42,50,2,5,7,47,40,20,21,22,24,25,26,27,29,30,31,32,37,38,63]},{"kind": 15,"name": "@typeOf(std.debug.writeCurrentStackTraceWindows).ReturnType.ErrorSet","fn": 152,"errors": [8,9,10,11,12,13,14,15,6,49,42,50,2,5,7,47,40,20,21,22,24,25,26,27,29,30,31,32,37,38,63]},{"kind": 13,"child": 2027},{"kind": 15,"name": "@typeOf(std.heap.DirectAllocator.realloc).ReturnType.ErrorSet","fn": 157,"errors": [64]},{"kind": 15,"name": "std.heap.error:43:63","errors": [64]},{"kind": 15,"name": "std.fs.SelfExePathError","errors": [65,56,66,67,68,69,70,6,57]},{"kind": 7,"len": 32767,"elem": 909},{"kind": 6,"len": 2,"elem": 981},{"kind": 15,"name": "std.os.windows.GetCurrentDirectoryError","errors": [71,72]},{"kind": 15,"name": "@typeOf(std.os.windows.sliceToPrefixedFileW).ReturnType.ErrorSet","fn": 179,"errors": [60,26,27]},{"kind": 7,"len": 32768,"elem": 909},{"kind": 15,"name": "@typeOf(std.os.windows.sliceToPrefixedSuffixedFileW).ReturnType.ErrorSet","fn": 180,"errors": [60,26,27]},{"kind": 15,"name": "@typeOf(std.unicode.utf8ToUtf16Le).ReturnType.ErrorSet","fn": 183,"errors": [26]},{"kind": 15,"name": "std.unicode.Utf8DecodeError","errors": [73,74,75,76]},{"kind": 15,"name": "std.os.windows.GetFileSizeError","errors": [77]},{"kind": 15,"name": "std.process.GetEnvVarOwnedError","errors": [78,79,80]},{"kind": 15,"name": "std.os.windows.SetConsoleTextAttributeError","errors": [81]},{"kind": 15,"name": "@typeOf(std.unicode.utf16leToUtf8).ReturnType.ErrorSet","fn": 224,"errors": [82,83,84,85,86]},{"kind": 15,"name": "@typeOf(std.heap.ArenaAllocator.realloc).ReturnType.ErrorSet","fn": 228,"errors": [47]},{"kind": 15,"name": "@typeOf(std.heap.ArenaAllocator.alloc).ReturnType.ErrorSet","fn": 229,"errors": [47]},{"kind": 15,"name": "@typeOf(std.heap.ArenaAllocator.createNode).ReturnType.ErrorSet","fn": 230,"errors": [47]},{"kind": 6,"len": 2,"align": 8,"elem": 779},{"kind": 15,"name": "std.os.windows.VirtualAllocError","errors": [87]},{"kind": 15,"name": "std.os.windows.GetModuleFileNameError","errors": [88]},{"kind": 6,"elem": 2111},{"kind": 15,"name": "std.os.windows.CreateFileError","errors": [20,21,22,23,24,25,26,27,28]},{"kind": 6,"elem": 2112},{"kind": 15,"name": "std.os.windows.SetFilePointerError","errors": [89]},{"kind": 15,"name": "std.math.error:315:43","errors": [90]},{"kind": 15,"name": "@typeOf(std.unicode.Utf16LeIterator.nextCodepoint).ReturnType.ErrorSet","fn": 247,"errors": [84,85,86]},{"kind": 15,"name": "@typeOf(std.unicode.utf8CodepointSequenceLength).ReturnType.ErrorSet","fn": 248,"errors": [83]},{"kind": 15,"name": "@typeOf(std.unicode.utf8Encode).ReturnType.ErrorSet","fn": 249,"errors": [82,83]},{"kind": 15,"name": "std.unicode.Utf8Decode2Error","errors": [73,74]},{"kind": 15,"name": "std.unicode.Utf8Decode3Error","errors": [91,92,75]},{"kind": 15,"name": "std.unicode.Utf8Decode4Error","errors": [93,94,76]},{"kind": 15,"name": "@typeOf(std.heap.FixedBufferAllocator.realloc).ReturnType.ErrorSet","fn": 264,"errors": [47]},{"kind": 15,"name": "@typeOf(std.heap.FixedBufferAllocator.alloc).ReturnType.ErrorSet","fn": 265,"errors": [47]},{"kind": 15,"name": "@typeOf(std.unicode.utf8ToUtf16LeWithNull).ReturnType.ErrorSet","fn": 267,"errors": [26,47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(u16,null).ensureCapacity).ReturnType.ErrorSet","fn": 269,"errors": [47]},{"kind": 15,"name": "@typeOf(std.unicode.Utf8View.init).ReturnType.ErrorSet","fn": 272,"errors": [26]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(u16,null).append).ReturnType.ErrorSet","fn": 277,"errors": [47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(u16,null).addOne).ReturnType.ErrorSet","fn": 278,"errors": [47]},{"kind": 15,"name": "std.math.error:719:40","errors": [95]},{"kind": 15,"name": "std.os.windows.GetEnvironmentVariableError","errors": [96,97]},{"kind": 15,"name": "@typeOf(std.unicode.utf16leToUtf8Alloc).ReturnType.ErrorSet","fn": 285,"errors": [84,85,86,47]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(u8,null).resize).ReturnType.ErrorSet","fn": 287,"errors": [47]},{"kind": 15,"name": "std.os.windows.ReadFileError","errors": [98]},{"kind": 8,"name": "std.statically_initialized_mutex","src": 739,"pubDecls": [4151],"privDecls": [4152,4153,4154,4155,4156,4157,4158],"file": 52},{"kind": 8,"name": "std.os.windows.bits.RTL_CRITICAL_SECTION","src": 740,"pubDecls": [],"privDecls": [],"fields": [2113,860,860,972,972,812]},{"kind": 8,"name": "std.os.windows.bits.RTL_RUN_ONCE","src": 741,"pubDecls": [],"privDecls": [],"fields": [1089]},{"kind": 15,"name": "std.os.windows.WriteFileError","errors": [99,100,101,102]},{"kind": 15,"name": "@typeOf(std.unicode.utf8ByteSequenceLength).ReturnType.ErrorSet","fn": 315,"errors": [103]},{"kind": 15,"name": "@typeOf(std.math.testCeilPowerOfTwo).ReturnType.ErrorSet","fn": 363,"errors": [104]},{"kind": 15,"name": "@typeOf(std.math.divFloor).ReturnType.ErrorSet","fn": 409,"errors": [90,105]},{"kind": 15,"name": "@typeOf(std.math.divFloor).ReturnType.ErrorSet","fn": 410,"errors": [90,105]},{"kind": 15,"name": "@typeOf(std.math.divFloor).ReturnType.ErrorSet","fn": 412,"errors": [105]},{"kind": 15,"name": "std.math.error:797:52","errors": [104]},{"kind": 15,"name": "std.math.error:797:52","errors": [106]},{"kind": 15,"name": "std.math.error:797:52","errors": [107]},{"kind": 15,"name": "@typeOf(std.math.mod).ReturnType.ErrorSet","fn": 419,"errors": [108,105]},{"kind": 15,"name": "@typeOf(std.math.mod).ReturnType.ErrorSet","fn": 421,"errors": [108,105]},{"kind": 15,"name": "@typeOf(std.math.rem).ReturnType.ErrorSet","fn": 428,"errors": [108,105]},{"kind": 15,"name": "@typeOf(std.math.rem).ReturnType.ErrorSet","fn": 430,"errors": [108,105]},{"kind": 15,"name": "std.math.error:315:43","errors": [109]},{"kind": 15,"name": "std.math.error:320:43","errors": [110]},{"kind": 15,"name": "std.math.error:325:43","errors": [111]},{"kind": 15,"name": "@typeOf(std.math.shlExact).ReturnType.ErrorSet","fn": 437,"errors": [90]},{"kind": 15,"name": "@typeOf(std.math.divExact).ReturnType.ErrorSet","fn": 438,"errors": [112,90,105]},{"kind": 15,"name": "@typeOf(std.math.divExact).ReturnType.ErrorSet","fn": 439,"errors": [112,90,105]},{"kind": 15,"name": "@typeOf(std.math.divExact).ReturnType.ErrorSet","fn": 442,"errors": [112,105]},{"kind": 15,"name": "@typeOf(std.math.absInt).ReturnType.ErrorSet","fn": 444,"errors": [90]},{"kind": 15,"name": "@typeOf(std.math.divTrunc).ReturnType.ErrorSet","fn": 445,"errors": [90,105]},{"kind": 15,"name": "@typeOf(std.math.divTrunc).ReturnType.ErrorSet","fn": 446,"errors": [90,105]},{"kind": 15,"name": "@typeOf(std.math.divTrunc).ReturnType.ErrorSet","fn": 448,"errors": [105]},{"kind": 15,"name": "zync.src.futex.WaitError","errors": [113]},{"kind": 15,"name": "zuma.src.thread.CreateError","errors": [6,114,115,116]},{"kind": 8,"name": "zuma.src.thread.JoinHandle","src": 742,"pubDecls": [4159],"privDecls": [],"fields": [1089,1272]},{"kind": 15,"name": "zuma.src.thread.JoinError","errors": [117]},{"kind": 15,"name": "@typeOf(zync.src.lock.Event.EventImpl(true).wait).ReturnType.ErrorSet","fn": 497,"errors": [113]},{"kind": 15,"name": "@typeOf(zync.src.lock.testLockImplementation).ReturnType.ErrorSet","fn": 502,"errors": [6,114,115,116]},{"kind": 8,"name": "zync.src.lock.LockState","src": 743,"pubDecls": [4160,4161,4162],"privDecls": [],"fields": [1825,812]},{"kind": 8,"name": "zync.src.lock.Spinlock","src": 744,"pubDecls": [4163,4164,4165,4166,4167],"privDecls": [],"fields": [897]},{"kind": 15,"name": "@typeOf(zync.src.lock.testLockImplementation).ReturnType.ErrorSet","fn": 510,"errors": [6,114,115,116]},{"kind": 8,"name": "zync.src.lock.LockState","src": 743,"pubDecls": [4168,4169,4170],"privDecls": [],"fields": [1828,812]},{"kind": 8,"name": "zync.src.lock.Mutex","src": 745,"pubDecls": [4171,4172,4173,4174,4175],"privDecls": [4176,4177,4178,4179],"fields": [1527,945]},{"kind": 15,"name": "zuma.src.memory.MemoryError","errors": [6,118,119,120,121,122,123]},{"kind": 6,"len": 2,"align": 4096,"elem": 779},{"kind": 8,"name": "zuma.src.affinity","src": 746,"pubDecls": [4027,4023],"privDecls": [4180,4181,4182,4183],"file": 53},{"kind": 15,"name": "zuma.src.memory.NumaError","errors": [118,119]},{"kind": 8,"name": "std.rand.Random","src": 747,"pubDecls": [4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200],"privDecls": [],"fields": [555]},{"kind": 15,"name": "zuma.src.thread.AffinityError","errors": [6,124,125]},{"kind": 8,"name": "zio.src.io","src": 748,"pubDecls": [4005,4006,4008,4009,4010],"privDecls": [4201,4202,4203],"file": 54},{"kind": 15,"name": "zio.src.event.Error","errors": [6,126]},{"kind": 8,"name": "zio.src.event.Poller","src": 749,"pubDecls": [4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215],"privDecls": [],"fields": [1887]},{"kind": 15,"name": "zio.src.event.PollError","errors": [6,127,128]},{"kind": 15,"name": "zio.src.event.NotifyError","errors": [6,129,130,131]},{"kind": 8,"name": "zio.src.event","src": 750,"pubDecls": [4004],"privDecls": [4216,4217,4218,4219],"file": 55},{"kind": 15,"name": "@typeOf(zio.src.socket.testBlockingTcp).ReturnType.ErrorSet","fn": 551,"errors": [132,133,134,135,136,137,138,139,140,141,142,143,90,144,145,146]},{"kind": 15,"name": "zio.src.socket.Error","errors": [147,148,149]},{"kind": 15,"name": "zio.src.socket.OptionError","errors": [150,151,152]},{"kind": 8,"name": "zio.src.backend.windows.Linger","src": 751,"pubDecls": [],"privDecls": [],"fields": [1105,1105]},{"kind": 8,"name": "zio.src.socket","src": 752,"pubDecls": [4011],"privDecls": [4220,4221,4222,4223,4224,4225,4226,4227],"file": 56},{"kind": 15,"name": "zio.src.socket.RawDataError","errors": [135,136,137,138,139]},{"kind": 15,"name": "zio.src.socket.RawConnectError","errors": [140,153,154,141,142]},{"kind": 15,"name": "zio.src.socket.AcceptError","errors": [132,133,134,155,156,157,158]},{"kind": 15,"name": "zio.src.socket.ConnectError","errors": [132,133,134,140,153,154,141,142]},{"kind": 15,"name": "zio.src.socket.ListenError","errors": [159,160,161]},{"kind": 15,"name": "zio.src.socket.BindError","errors": [143,162,163,164]},{"kind": 15,"name": "zio.src.socket.RawAcceptError","errors": [155,156,157,158]},{"kind": 15,"name": "zio.src.socket.DataError","errors": [132,133,134,135,136,137,138,139]},{"kind": 18,"name": "fn(*const zio.src.socket.Socket,u8)var","generic": true,"args": [1254,779]},{"kind": 7,"len": 256,"elem": 1215},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 15,"name": "@typeOf(zio.src.socket.Ipv4Address.new).ReturnType.ErrorSet","fn": 556,"errors": [90,144,145,146]},{"kind": 15,"name": "@typeOf(zio.src.address.Address.parseIpv4).ReturnType.ErrorSet","fn": 557,"errors": [90,144,145,146]},{"kind": 15,"name": "@typeOf(std.net.parseIp4).ReturnType.ErrorSet","fn": 558,"errors": [90,144,145,146]},{"kind": 8,"name": "zio.src.address","src": 753,"pubDecls": [4007],"privDecls": [4228,4229,4230],"file": 57},{"kind": 15,"name": "@typeOf(zio.src.socket.testBlockingTcp).ReturnType.ErrorSet","fn": 569,"errors": [132,133,134,135,136,137,138,139,140,141,142,143,146,144,145,90]},{"kind": 15,"name": "@typeOf(zio.src.socket.Ipv6Address.new).ReturnType.ErrorSet","fn": 570,"errors": [146,144,145,90]},{"kind": 15,"name": "@typeOf(zio.src.address.Address.parseIpv6).ReturnType.ErrorSet","fn": 571,"errors": [146,144,145,90]},{"kind": 15,"name": "@typeOf(std.net.parseIp6).ReturnType.ErrorSet","fn": 572,"errors": [146,144,145,90]},{"kind": 15,"name": "std.fmt.error:1071:39","errors": [165]},{"kind": 15,"name": "@typeOf(zio.src.socket.testNonBlockingTcp).ReturnType.ErrorSet","fn": 576,"errors": [166,6,127,128,132,133,134,140,153,141,142,90,144,145,146,167,168,138,143]},{"kind": 15,"name": "@typeOf(zio.src.socket.Server.init).ReturnType.ErrorSet","fn": 577,"errors": [132,133,134,155,156,157,158,151,6,138,143,90,144,145,146]},{"kind": 8,"name": "zio.src.socket.Server","src": 754,"pubDecls": [4231,4232,4233,4234],"privDecls": [],"fields": [1227,1227,812,1238]},{"kind": 15,"name": "zio.src.event.RegisterError","errors": [6,167,169,168]},{"kind": 15,"name": "@typeOf(zio.src.socket.Server.handle_server).ReturnType.ErrorSet","fn": 581,"errors": [132,133,134,155,156,157,158,151,6,138]},{"kind": 15,"name": "@typeOf(zio.src.socket.Server.handle_client).ReturnType.ErrorSet","fn": 583,"errors": [132,133,134,135,136,137,138,139]},{"kind": 15,"name": "@typeOf(zio.src.socket.Client.new).ReturnType.ErrorSet","fn": 586,"errors": [132,133,134,140,153,154,141,142,90,144,145,146,6,167,168,138]},{"kind": 8,"name": "zio.src.socket.Client","src": 755,"pubDecls": [4235,4236,4237],"privDecls": [],"fields": [1227,812,2122,842]},{"kind": 15,"name": "@typeOf(zio.src.socket.Client.handle).ReturnType.ErrorSet","fn": 588,"errors": [132,133,134,140,153,154,141,142,90,144,145,146,6,167,168,138]},{"kind": 15,"name": "@typeOf(zio.src.socket.testNonBlockingTcp).ReturnType.ErrorSet","fn": 592,"errors": [166,6,127,128,132,133,134,140,153,141,142,146,144,145,90,167,168,138,143]},{"kind": 15,"name": "@typeOf(zio.src.socket.Server.init).ReturnType.ErrorSet","fn": 593,"errors": [132,133,134,155,156,157,158,151,6,138,143,146,144,145,90]},{"kind": 8,"name": "zio.src.socket.Server","src": 754,"pubDecls": [4238,4239,4240,4241],"privDecls": [],"fields": [1227,1227,812,1238]},{"kind": 15,"name": "@typeOf(zio.src.socket.Server.handle_server).ReturnType.ErrorSet","fn": 595,"errors": [132,133,134,155,156,157,158,151,6,138]},{"kind": 15,"name": "@typeOf(zio.src.socket.Server.handle_client).ReturnType.ErrorSet","fn": 596,"errors": [132,133,134,135,136,137,138,139]},{"kind": 15,"name": "@typeOf(zio.src.socket.Client.new).ReturnType.ErrorSet","fn": 597,"errors": [132,133,134,140,153,154,141,142,146,144,145,90,6,167,168,138]},{"kind": 8,"name": "zio.src.socket.Client","src": 755,"pubDecls": [4242,4243,4244],"privDecls": [],"fields": [1227,812,2122,842]},{"kind": 15,"name": "@typeOf(zio.src.socket.Client.handle).ReturnType.ErrorSet","fn": 599,"errors": [132,133,134,140,153,154,141,142,146,144,145,90,6,167,168,138]},{"kind": 8,"name": "zync.src.futex.Windows","src": 756,"pubDecls": [4245,4246,4247,4248],"privDecls": [4249,4250]},{"kind": 7,"len": 2,"elem": 802},{"kind": 8,"name": "zio.src.backend.windows","src": 757,"pubDecls": [4251,4252,4253,4254,4255,4256,4257],"privDecls": [4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333],"file": 58},{"kind": 8,"name": "zio.src.backend.windows.WSABUF","src": 758,"pubDecls": [],"privDecls": [],"fields": [807,1077]},{"kind": 8,"name": "zio.src.backend.windows.Poller","src": 759,"pubDecls": [4334,4335,4336,4337,4338,4339,4340,4341],"privDecls": [],"fields": [972]},{"kind": 8,"name": "zio.src.backend.windows.OVERLAPPED_ENTRY","src": 760,"pubDecls": [],"privDecls": [],"fields": [812,1950,812,807]},{"kind": 18,"name": "fn(*const zio.src.backend.windows.Socket,u8)var","generic": true,"args": [1297,779]},{"kind": 17,"name": "zio.src.backend.windows.OverlappedResult","src": 761,"pubDecls": [],"privDecls": [],"fields": [1155,812,1950]},{"kind": 18,"name": "fn(*c_void,std.os.windows.bits.GUID,var)var","generic": true,"args": [972,1335,null]},{"kind": 8,"name": "std.os.windows.bits.OVERLAPPED","src": 762,"pubDecls": [],"privDecls": [],"fields": [812,812,807,807,1089]},{"kind": 8,"name": "zio.src.backend.windows.SOCKADDR_IN6","src": 763,"pubDecls": [],"privDecls": [],"fields": [2130,1105,807,2125,807]},{"kind": 8,"name": "zio.src.backend.windows.SOCKADDR_IN","src": 764,"pubDecls": [],"privDecls": [],"fields": [2130,1105,2127,1523]},{"kind": 17,"name": "zio.src.backend.windows.SOCKADDR","src": 765,"pubDecls": [],"privDecls": [],"fields": [1894,1893]},{"kind": 8,"name": "std.hash.wyhash","src": 766,"pubDecls": [4342],"privDecls": [4343,4344,4345,4346,4347,4348,4349,4350,4351,4352],"file": 59},{"kind": 7,"len": 32,"elem": 779},{"kind": 8,"name": "zuma.src.backend.windows.GROUP_AFFINITY","src": 767,"pubDecls": [],"privDecls": [],"fields": [812,909,2133]},{"kind": 8,"name": "zuma.src.backend.windows.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX","src": 768,"pubDecls": [],"privDecls": [],"fields": [807,807,2134]},{"kind": 6,"elem": 1155},{"kind": 15,"name": "zio.src.io.Set","errors": [132,133,134]},{"kind": 8,"name": "std.os.windows.bits","src": 769,"pubDecls": [4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706],"privDecls": [4707,4708,4709,4710],"file": 60},{"kind": 4,"u": 32},{"kind": 13,"child": 2149},{"kind": 13,"child": 2150},{"kind": 13,"child": 2151},{"kind": 7,"len": 1,"elem": 779},{"kind": 8,"name": "std.os.windows.bits.EXCEPTION_POINTERS","src": 770,"pubDecls": [],"privDecls": [],"fields": [2152,972]},{"kind": 15,"name": "@typeOf(std.progress.Progress.start).ReturnType.ErrorSet","fn": 1074,"errors": [170]},{"kind": 15,"name": "std.time.Error","errors": [170]},{"kind": 8,"name": "std.time.Timer","src": 771,"pubDecls": [4711,4712,4713,4714],"privDecls": [4715,4716,4717],"fields": [802,802,802]},{"kind": 8,"name": "std.progress","src": 772,"pubDecls": [4718],"privDecls": [4719,4720,4721],"file": 61},{"kind": 13,"child": 1377},{"kind": 15,"name": "std.fmt.BufPrintError","errors": [171]},{"kind": 15,"name": "@typeOf(std.fmt.bufPrintWrite).ReturnType.ErrorSet","fn": 1116,"errors": [171]},{"kind": 8,"name": "std.fmt.BufPrintContext","src": 773,"pubDecls": [],"privDecls": [],"fields": [855]},{"kind": 18,"name": "fn(zync.src.atomic.AtomicOrder)var","generic": true,"args": [791]},{"kind": 8,"name": "zuma.src.backend.windows.Thread","src": 774,"pubDecls": [4722,4723,4724,4725,4726,4727,4728,4729,4730],"privDecls": [4731,4732]},{"kind": 8,"name": "zuma.src.backend.windows.CpuAffinity","src": 775,"pubDecls": [4733,4734,4735],"privDecls": [4736,4737,4738,4739,4740]},{"kind": 8,"name": "zuma.src.backend.windows.PROCESSOR_GROUP_INFO","src": 776,"pubDecls": [],"privDecls": [],"fields": [779,779,2156,812]},{"kind": 18,"name": "stdcallcc fn(*i64) c_int","generic": false,"ret": 1155,"args": [2157]},{"kind": 18,"name": "stdcallcc fn(u16, *zuma.src.backend.windows.GROUP_AFFINITY) c_int","generic": false,"ret": 1155,"args": [909,1309]},{"kind": 18,"name": "stdcallcc fn(*c_void, ?*c_void, usize, u32, u32, u32) ?*c_void","generic": false,"ret": 1089,"args": [972,1089,812,807,807,807]},{"kind": 18,"name": "stdcallcc fn([*c]const u8) ?*std.os.windows.bits.HMODULE","generic": false,"ret": 1116,"args": [794]},{"kind": 8,"name": "zuma.src.backend.windows.PROCESSOR_RELATIONSHIP","src": 777,"pubDecls": [],"privDecls": [],"fields": [779,779,2158,909,2159]},{"kind": 8,"name": "zuma.src.backend.windows.TOKEN_PRIVILEGES","src": 778,"pubDecls": [],"privDecls": [],"fields": [807,2160]},{"kind": 18,"name": "stdcallcc fn(*c_void, *const zuma.src.backend.windows.GROUP_AFFINITY, ?*zuma.src.backend.windows.GROUP_AFFINITY) c_int","generic": false,"ret": 1155,"args": [972,2161,2162]},{"kind": 18,"name": "stdcallcc fn(u32) void","generic": false,"ret": 850,"args": [807]},{"kind": 18,"name": "stdcallcc fn() usize","generic": false,"ret": 812},{"kind": 18,"name": "stdcallcc fn(*u32) c_int","generic": false,"ret": 1155,"args": [1949]},{"kind": 18,"name": "stdcallcc fn(*c_void, *zuma.src.backend.windows.GROUP_AFFINITY) c_int","generic": false,"ret": 1155,"args": [972,1309]},{"kind": 8,"name": "zuma.src.backend.windows.NUMA_NODE_RELATIONSHIP","src": 779,"pubDecls": [],"privDecls": [],"fields": [807,2158,1898]},{"kind": 18,"name": "stdcallcc fn(*c_void, u32, **c_void) c_int","generic": false,"ret": 1155,"args": [972,807,1322]},{"kind": 18,"name": "stdcallcc fn(*zuma.src.backend.windows.FILETIME) void","generic": false,"ret": 850,"args": [2163]},{"kind": 8,"name": "zuma.src.backend.windows.LUID","src": 780,"pubDecls": [],"privDecls": [],"fields": [807,860]},{"kind": 8,"name": "zuma.src.backend.windows.FILETIME","src": 781,"pubDecls": [],"privDecls": [],"fields": [807,807]},{"kind": 18,"name": "stdcallcc fn(?[*]const u8, [*c]const u8, *zuma.src.backend.windows.LUID) c_int","generic": false,"ret": 1155,"args": [2164,794,2165]},{"kind": 8,"name": "zuma.src.backend.windows.LUID_AND_ATTRIBUTES","src": 782,"pubDecls": [],"privDecls": [],"fields": [1935,807]},{"kind": 18,"name": "stdcallcc fn() c_int","generic": false,"ret": 1155},{"kind": 18,"name": "stdcallcc fn(*c_void, c_int, *zuma.src.backend.windows.TOKEN_PRIVILEGES, u32, ?*zuma.src.backend.windows.TOKEN_PRIVILEGES, ?*u32) c_int","generic": false,"ret": 1155,"args": [972,1155,2166,807,2167,1955]},{"kind": 8,"name": "zuma.src.backend.windows.GROUP_RELATIONSHIP","src": 783,"pubDecls": [],"privDecls": [],"fields": [909,909,2158,2168]},{"kind": 8,"name": "std.os.windows","src": 784,"pubDecls": [4353,4354,4355,4356,4741,4357,4358,4359,4360,4361,4362,4742,4363,4364,4743,4744,4365,4366,4367,4368,4369,4745,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4746,4381,4382,4747,4383,4748,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4749,4395,4750,4396,4751,4397,4398,4399,4752,4400,4401,4402,4753,4403,4404,4405,4406,4754,4755,4407,4408,4756,4409,4410,4757,4411,4412,4413,4414,4415,4416,4417,4418,4758,4419,4759,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4760,4433,4434,4761,4435,4436,4762,4437,4438,4439,4440,4441,4442,4763,4443,4444,4445,4446,4764,4447,4765,4766,4448,4767,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4768,4769,4468,4770,4469,4470,4471,4472,4473,4474,4475,4771,4476,4477,4478,4772,4479,4480,4773,4481,4482,4483,4484,4774,4485,4486,4487,4488,4489,4490,4775,4491,4776,4492,4493,4494,4495,4496,4777,4497,4778,4498,4499,4500,4779,4780,4501,4502,4503,4504,4505,4506,4781,4507,4508,4509,4510,4511,4512,4782,4513,4514,4783,4515,4516,4784,4517,4518,4519,4520,4521,4522,4523,4785,4524,4525,4526,4786,4787,4527,4528,4529,4530,4531,4532,4788,4789,4533,4534,4790,4535,4536,4791,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4792,4560,4793,4561,4562,4563,4564,4565,4794,4566,4567,4568,4795,4569,4796,4570,4797,4571,4572,4573,4574,4798,4575,4576,4577,4799,4578,4579,4580,4581,4800,4582,4583,4801,4584,4585,4586,4587,4588,4802,4589,4803,4590,4591,4804,4592,4593,4594,4805,4595,4596,4597,4806,4807,4598,4808,4599,4600,4601,4602,4603,4604,4809,4605,4606,4607,4810,4811,4608,4609,4610,4611,4612,4812,4613,4614,4615,4616,4617,4813,4618,4619,4620,4621,4814,4622,4623,4624,4625,4626,4627,4628,4629,4815,4630,4631,4632,4816,4633,4634,4635,4817,4636,4637,4638,4818,4639,4819,4820,4640,4641,4642,4821,4643,4644,4822,4645,4646,4647,4648,4823,4649,4650,4651,4652,4653,4654,4824,4655,4656,4657,4658,4825,4659,4826,4660,4661,4827,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4828,4673,4674,4675,4676,4677,4678,4829,4830,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4831,4689,4832,4833,4690,4834,4691,4692,4835,4836,4837,4693,4694,4695,4696,4697,4698,4838,4699,4700,4839,4840,4701,4702,4703,4704,4705,4841,4706,4842,4843],"privDecls": [4844,4845,4846,4847,4848,4849,4850,4851],"file": 62},{"kind": 18,"name": "stdcallcc fn(?*c_void, usize, u32, *u32) c_int","generic": false,"ret": 1155,"args": [1089,812,807,1949]},{"kind": 18,"name": "stdcallcc fn(u32, ?*zuma.src.backend.windows.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *u32) c_int","generic": false,"ret": 1155,"args": [807,2173,1949]},{"kind": 8,"name": "zuma.src.backend.windows.CACHE_RELATIONSHIP","src": 785,"pubDecls": [],"privDecls": [],"fields": [779,779,909,807,1946,2158,1898]},{"kind": 16,"name": "zuma.src.backend.windows.PROCESSOR_CACHE_TYPE","src": 786,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 6,"const": true,"elem": 1895},{"kind": 6,"elem": 2129},{"kind": 6,"elem": 807},{"kind": 13,"child": 1321},{"kind": 13,"child": 2174},{"kind": 6,"elem": 1895},{"kind": 6,"elem": 1236},{"kind": 13,"child": 2175},{"kind": 13,"child": 1949},{"kind": 13,"child": 1957},{"kind": 6,"len": 1,"const": true,"elem": 1886},{"kind": 13,"child": 1947},{"kind": 13,"child": 2128},{"kind": 6,"len": 1,"elem": 1886},{"kind": 13,"child": 1952},{"kind": 13,"child": 1953},{"kind": 16,"name": "std.io.Mode","src": 787,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.special","src": 788,"pubDecls": [4852],"privDecls": [4853,4854,4855,4856],"file": 3},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var)var","generic": true,"args": [977,778,null]},{"kind": 18,"name": "fn(type,var,var,var)var","generic": true,"args": [778,null,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 8,"name": "std.meta.trait","src": 789,"pubDecls": [4857,4858,4859,4860,4861,4862,4863,4864,4865,4866,4867,4868,4869,4870,4871,4872,4873,4874],"privDecls": [4875,4876,4877,4878,4879,4880,4881,4882],"file": 63},{"kind": 8,"name": "std.dynamic_library","src": 790,"pubDecls": [4883,4884,4885,4886,4887],"privDecls": [4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4900],"file": 64},{"kind": 8,"name": "std.thread","src": 791,"pubDecls": [4901],"privDecls": [4902,4903,4904,4905,4906,4907,4908],"file": 65},{"kind": 8,"name": "std.thread.Data","src": 792,"pubDecls": [],"privDecls": [],"fields": [972,972,972]},{"kind": 8,"name": "std.buf_set","src": 793,"pubDecls": [4909],"privDecls": [4910,4911,4912,4913,4914],"file": 66},{"kind": 8,"name": "std.os.bits.windows","src": 794,"pubDecls": [1635,4353,1636,1639,4354,4355,1640,4356,4357,4358,4359,4360,4361,4362,1646,4363,1649,4364,1650,4365,4366,4368,4367,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,1661,4381,4382,4383,4384,1668,4385,1669,4386,1671,4387,4388,4389,4390,4391,4392,4393,4394,4395,1674,4396,4397,4398,4399,1680,4400,1688,4401,4402,4403,1689,4404,4405,4406,1692,4407,4408,1696,1700,4409,4410,1705,1709,4411,4412,1710,4413,4414,4415,4416,4417,4418,4419,1719,4420,4421,4422,4423,4424,1731,4425,4426,4427,4428,4429,1739,4430,4431,4432,4433,4434,4435,4436,1751,1752,4437,4438,1760,4439,1761,4440,4441,4442,4443,1765,1766,4444,1767,4445,4446,4447,4448,1775,4449,1777,4450,4451,4452,4453,4454,1785,4455,4456,1786,4457,1787,4458,4459,4460,4461,4462,1792,4463,4464,1797,4465,4466,4467,4468,1802,4469,4470,4471,4472,4473,4474,1806,4475,4476,1816,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,1836,1837,4496,1838,4497,4498,4499,1840,4500,4501,1850,4502,4503,4504,4505,4506,4507,1857,4508,4509,4510,4511,4512,4513,4514,4515,4516,1871,1872,4517,4518,1882,4519,4520,4521,4522,4523,4524,4525,4526,1886,4527,4528,1889,4529,1890,4530,1892,4531,4532,1894,1896,1895,1897,4533,1899,4534,4535,4536,4537,1642,1644,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,1659,4561,1662,1663,4562,4563,4564,4565,4566,4567,4568,4569,4570,1676,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,1695,4584,4585,1699,4586,4587,4588,1706,4589,1707,4590,4591,4592,4593,4594,4595,4596,1715,4597,1717,4598,4599,1720,1723,1725,4600,4601,4602,4603,4604,4605,4606,4607,1740,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,1750,1753,4618,4619,1756,4620,1758,4621,4622,4623,1768,4624,4625,1771,4626,4627,4628,4629,4630,4631,4632,1774,4633,4634,4635,4636,4637,4638,4639,1790,4640,4641,4642,1794,1796,4643,4644,4645,1799,4646,1801,4647,4648,4649,4650,4651,4652,4653,4654,4655,1813,4656,1815,4657,4658,1822,4659,1826,4660,4661,4662,4663,4664,4665,4666,1839,4667,4668,4669,1842,4670,4671,4672,1845,1846,1848,1849,4673,4674,4675,4676,4677,1854,4678,4679,4680,4681,4682,4683,4684,1860,4685,4686,1861,4687,1863,4688,1865,4689,4690,4691,4692,1873,4693,1876,1877,4694,4695,1881,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706,1632,1634],"privDecls": [],"file": 67},{"kind": 15,"name": "std.os.ExecveError","errors": [172,173,174,175,176,177,178,179,180,181,182,6]},{"kind": 15,"name": "std.os.OpenError","errors": [58,29,30,31,32,59,60,33,34,35,36,37,61,38,6]},{"kind": 8,"name": "std.os.bits","src": 795,"pubDecls": [1632,1634,1635,1761,1636,1765,1766,1767,1639,1768,1640,1642,1771,1644,1774,1775,1777,1646,1649,1785,1786,1650,1787,1790,1792,1794,1654,1796,1797,1799,1801,1802,1659,1661,1662,1663,1806,1668,1669,1813,1815,1671,1816,1822,1674,1676,1826,1679,1831,1680,1684,1688,1836,1837,1838,1689,1839,1840,1842,1692,1845,1846,1848,1849,1850,1695,1696,1699,1700,1854,1705,1706,1707,1857,1709,1710,1860,1861,1863,1865,1715,1717,1719,1720,1723,1725,1871,1872,1873,1876,1731,1877,1881,1882,1739,1740,1886,1889,1890,1892,1894,1750,1751,1752,1753,1895,1896,1897,1756,1758,1899,1760],"privDecls": [4915],"file": 68},{"kind": 15,"name": "std.os.ReadLinkError","errors": [65,56,66,67,68,69,70,6]},{"kind": 8,"name": "std.os.linux","src": 796,"pubDecls": [1634,1636,4916,1639,1640,4917,1642,4918,1644,4919,4920,4921,4922,1646,4923,4924,1649,4925,1650,4926,4927,4928,4929,4930,1654,4931,4932,4933,1659,4934,4935,4936,4937,1661,1662,1663,4938,1668,4939,4940,1669,1671,4941,4942,4943,1674,4944,4945,1676,1679,4946,4947,1680,4948,1684,4949,4950,4951,4952,1688,4953,1689,4954,1692,4955,4956,4957,4958,1696,1695,1699,4959,4960,1700,4961,4962,4963,4964,4965,1705,1706,1707,1709,1710,4966,4967,4968,4969,4970,4971,1715,4972,4973,4974,4975,1717,1719,1720,1723,4976,4977,1725,4978,4979,4980,4981,4982,1731,4983,4984,4985,4986,1739,1740,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,1750,1752,1751,1753,4997,1756,1758,4998,1760,4999,5000,1761,5001,1765,1766,1767,1768,5002,1771,5003,5004,5005,5006,1774,1775,1777,5007,5008,5009,5010,1785,1786,1787,5011,1790,5012,5013,1792,5014,5015,1794,1796,1797,5016,5017,1799,1801,1802,5018,5019,5020,5021,5022,1806,5023,5024,5025,1813,1816,5026,1815,5027,5028,5029,5030,1822,5031,1826,5032,5033,1831,5034,5035,5036,5037,1836,1837,1838,1839,1840,5038,5039,1842,5040,1845,1846,1848,1850,1849,5041,5042,5043,1854,5044,5045,5046,1857,5047,5048,5049,1860,1861,5050,1863,5051,5052,5053,5054,5055,1865,5056,5057,5058,5059,5060,5061,5062,5063,1871,1872,1873,5064,5065,1876,1877,5066,5067,1881,1882,5068,5069,5070,5071,5072,5073,5074,5075,1886,1889,1890,1892,1894,1896,1895,1897,5076,5077,1899,1632,1635],"privDecls": [5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088],"file": 69},{"kind": 15,"name": "std.os.FStatError","errors": [39,6]},{"kind": 15,"name": "std.os.SetIdError","errors": [183,184,185,6]},{"kind": 15,"name": "std.os.ChangeCurDirError","errors": [186,187,188,189,190,191,192,6]},{"kind": 15,"name": "std.os.SysCtlError","errors": [57,193,194,6]},{"kind": 18,"name": "fn(var,var,var,var)var","generic": true,"args": [null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var)var","generic": true,"args": [null,null,null,null]},{"kind": 18,"name": "fn(builtin.StackTrace,var,var,var,var)var","generic": true,"args": [970,null,null,null,null]},{"kind": 18,"name": "fn([]const u8,var)var","generic": true,"args": [868,null]},{"kind": 18,"name": "fn(*std.debug.DebugInfo,var,var,var)var","generic": true,"args": [1072,null,null,null]},{"kind": 18,"name": "fn(?*const builtin.StackTrace,?usize,[]const u8,var)var","generic": true,"args": [962,963,868,null]},{"kind": 18,"name": "fn([]const u8,var)var","generic": true,"args": [868,null]},{"kind": 7,"len": 7,"elem": 779},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 8,"name": "std.debug.MachoSymbol","src": 797,"pubDecls": [],"privDecls": [5089,5090],"fields": [785,2177,802]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 13,"child": 969},{"kind": 18,"name": "fn(*std.debug.DebugInfo,var,var,var)var","generic": true,"args": [1072,null,null,null]},{"kind": 13,"child": 1678},{"kind": 8,"name": "std.buffer","src": 798,"pubDecls": [5091],"privDecls": [5092,5093,5094,5095,5096,5097,5098],"file": 70},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(anyerror,var)var","generic": true,"args": [1159,null]},{"kind": 6,"elem": 1460},{"kind": 8,"name": "std.child_process","src": 799,"pubDecls": [5099,5100],"privDecls": [5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5125,5126,5127],"file": 71},{"kind": 16,"name": "std.child_process.StdIo","src": 800,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 15,"name": "std.child_process.SpawnError","errors": [195,172,173,174,175,176,177,178,179,180,181,182,6,183,184,185,188,196]},{"kind": 17,"name": "std.child_process.Term","src": 801,"pubDecls": [],"privDecls": [],"fields": [807,807,807,807]},{"kind": 13,"child": 967},{"kind": 13,"child": 2178},{"kind": 13,"child": 2179},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn([]u8,[]const u8,var)var","generic": true,"args": [855,868,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn([]const u8,[]const u8,var,var,var,var)var","generic": true,"args": [868,868,null,null,null,null]},{"kind": 16,"name": "std.fmt.Alignment","src": 802,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.fmt.errol","src": 803,"pubDecls": [5128,5129,5130,5131,5132],"privDecls": [5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155],"file": 72},{"kind": 18,"name": "fn(*u32,var,var)var","generic": true,"args": [1949,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null]},{"kind": 16,"name": "std.pdb.DebugSubsectionKind","src": 804,"pubDecls": [],"privDecls": [],"fields": [0,241,242,243,244,245,246,247,248,249,250,251,252,253]},{"kind": 8,"name": "std.pdb.LineFragmentHeader","src": 805,"pubDecls": [],"privDecls": [],"fields": [807,909,2047,807]},{"kind": 8,"name": "std.pdb.LineBlockFragmentHeader","src": 806,"pubDecls": [],"privDecls": [],"fields": [807,807,807]},{"kind": 8,"name": "std.pdb.PDBStringTableHeader","src": 807,"pubDecls": [],"privDecls": [],"fields": [807,807,807]},{"kind": 8,"name": "std.pdb.ColumnNumberEntry","src": 808,"pubDecls": [],"privDecls": [],"fields": [909,909]},{"kind": 8,"name": "std.pdb.LineNumberEntry","src": 809,"pubDecls": [5156],"privDecls": [],"fields": [807,807]},{"kind": 8,"name": "std.pdb.DebugSubsectionHeader","src": 810,"pubDecls": [],"privDecls": [],"fields": [2034,807]},{"kind": 8,"name": "std.pdb.ProcSymFlags","src": 811,"pubDecls": [],"privDecls": [],"fields": [842,842,842,842,842,842,842,842]},{"kind": 8,"name": "std.pdb.RecordPrefix","src": 812,"pubDecls": [],"privDecls": [],"fields": [909,2043]},{"kind": 16,"name": "std.pdb.SymbolKind","src": 813,"pubDecls": [],"privDecls": [],"fields": [1,2,3,4,5,7,8,9,10,11,12,13,14,256,257,258,259,260,261,262,263,264,265,266,267,268,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,768,769,1024,1025,1026,1027,1028,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4352,4356,4362,4372,4373,4375,4376,4377,4378,4379,4382,4383,4384,4385,4386,4387,4388,4390,4392,4393,4394,4395,4398,4399,4400,4401,4402,4403,4404,4405,4411,4424,4425,4426,4427,4432,4433,4434,4436,4439,4440,4441,4444,4445,4447,4448,4449,4450,4451,4452,4453,4455,4456,6,4430,4431,4354,4396,4406,4407,4408,4367,4368,4422,4423,4437,4438,4358,4366,4389,4391,4413,4429,4414,4415,4416,4417,4418,4419,4420,4421,4355,4357,4353,4374,4412,4114,4409,4435,4446,4410,4442,4443,4360,4361,4428,4363,4369,4359,4397,4364,4365,4380,4381,4370,4371]},{"kind": 8,"name": "std.pdb.ProcSym","src": 814,"pubDecls": [],"privDecls": [],"fields": [807,807,807,807,807,807,807,807,909,2041]},{"kind": 8,"name": "std.pdb.FileChecksumEntryHeader","src": 815,"pubDecls": [],"privDecls": [],"fields": [807,779,779]},{"kind": 16,"name": "std.pdb.SectionContrSubstreamVersion","src": 816,"pubDecls": [],"privDecls": [],"fields": [4046371373,4046541284]},{"kind": 8,"name": "std.pdb.LineFlags","src": 817,"pubDecls": [],"privDecls": [],"fields": [842,2185]},{"kind": 8,"name": "std.buf_map","src": 818,"pubDecls": [5157],"privDecls": [5158,5159,5160,5161,5162],"file": 73},{"kind": 8,"name": "std.hash.auto_hash","src": 819,"pubDecls": [5163,5164,5165,5166,5167],"privDecls": [5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178],"file": 74},{"kind": 8,"name": "std.c.windows","src": 820,"pubDecls": [3404],"privDecls": [],"file": 75},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [778,null,null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "std.heap.DirectAllocator","src": 821,"pubDecls": [],"privDecls": [5179,5180,5181]},{"kind": 18,"name": "fn(*std.progress.Progress,[]const u8,var)var","generic": true,"args": [1374,868,null]},{"kind": 18,"name": "fn(*std.progress.Progress,*usize,[]const u8,var)var","generic": true,"args": [1374,1044,868,null]},{"kind": 7,"len": 100,"elem": 779},{"kind": 8,"name": "std.spinlock","src": 822,"pubDecls": [5182],"privDecls": [5183,5184,5185,5186,5187],"file": 76},{"kind": 8,"name": "std.macho.section_64","src": 823,"pubDecls": [],"privDecls": [],"fields": [1686,1686,802,802,807,807,807,807,807,807,807,807]},{"kind": 8,"name": "std.macho.mach_header_64","src": 824,"pubDecls": [],"privDecls": [],"fields": [807,1155,1155,807,807,807,807,807]},{"kind": 17,"name": "std.coff.Misc","src": 825,"pubDecls": [],"privDecls": [],"fields": [807,807]},{"kind": 8,"name": "zync.src.lock.Event","src": 826,"pubDecls": [5188,5189],"privDecls": [5190]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [778]},{"kind": 8,"name": "zync.src.futex","src": 827,"pubDecls": [4036],"privDecls": [5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202],"file": 77},{"kind": 6,"const": true,"elem": 2058},{"kind": 6,"const": true,"elem": 1675},{"kind": 8,"name": "std.math.big.rational","src": 828,"pubDecls": [3999],"privDecls": [5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223],"file": 78},{"kind": 8,"name": "std.math.big.int","src": 829,"pubDecls": [4003,4000,4001,4002],"privDecls": [5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237],"file": 79},{"kind": 14,"err": 955,"payload": 850},{"kind": 6,"elem": 954},{"kind": 8,"name": "zio.src.io.Error","src": 830,"pubDecls": [5238,5239,5240,5241],"privDecls": []},{"kind": 8,"name": "zuma.src.memory","src": 831,"pubDecls": [4014,4013,4015,4016,4017,4018,4021,4022,4024,4025,4026,4028,4029,4030,4031,4032,4033,4035],"privDecls": [5242,5243,5244,5245,5246,5247],"file": 80},{"kind": 8,"name": "zuma.src.thread","src": 832,"pubDecls": [4020,4034],"privDecls": [5248,5249,5250,5251,5252],"file": 81},{"kind": 8,"name": "zuma.src.thread.Thread","src": 833,"pubDecls": [5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267],"privDecls": [5268,5269]},{"kind": 15,"name": "zuma.src.memory.NumaMemoryError","errors": [118,119,120]},{"kind": 16,"name": "builtin.Arm32","src": 834,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},{"kind": 16,"name": "builtin.Kalimba","src": 835,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "builtin.Arm64","src": 836,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 8,"name": "builtin.Struct","src": 837,"pubDecls": [],"privDecls": [],"fields": [2083,2191,2192]},{"kind": 8,"name": "builtin.Array","src": 838,"pubDecls": [],"privDecls": [],"fields": [843,778]},{"kind": 8,"name": "builtin.ErrorUnion","src": 839,"pubDecls": [],"privDecls": [],"fields": [778,778]},{"kind": 8,"name": "builtin.Pointer","src": 840,"pubDecls": [5270],"privDecls": [],"fields": [2193,842,842,843,778,842]},{"kind": 8,"name": "builtin.EnumField","src": 841,"pubDecls": [],"privDecls": [],"fields": [868,843]},{"kind": 16,"name": "builtin.ContainerLayout","src": 842,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "builtin.Declaration","src": 843,"pubDecls": [5271],"privDecls": [],"fields": [868,842,2194]},{"kind": 8,"name": "builtin.Union","src": 844,"pubDecls": [],"privDecls": [],"fields": [2083,2195,2196,2192]},{"kind": 13,"child": 2197},{"kind": 8,"name": "builtin.Optional","src": 845,"pubDecls": [],"privDecls": [],"fields": [778]},{"kind": 8,"name": "builtin.Enum","src": 846,"pubDecls": [],"privDecls": [],"fields": [2083,778,2198,2192]},{"kind": 16,"name": "builtin.CallingConvention","src": 847,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5]},{"kind": 8,"name": "builtin.Vector","src": 848,"pubDecls": [],"privDecls": [],"fields": [843,778]},{"kind": 8,"name": "builtin.Float","src": 849,"pubDecls": [],"privDecls": [],"fields": [843]},{"kind": 8,"name": "builtin.UnionField","src": 850,"pubDecls": [],"privDecls": [],"fields": [868,2199,778]},{"kind": 8,"name": "builtin.StructField","src": 851,"pubDecls": [],"privDecls": [],"fields": [868,2200,778]},{"kind": 8,"name": "builtin.AnyFrame","src": 852,"pubDecls": [],"privDecls": [],"fields": [2195]},{"kind": 8,"name": "builtin.Error","src": 853,"pubDecls": [],"privDecls": [],"fields": [868,843]},{"kind": 8,"name": "builtin.Fn","src": 854,"pubDecls": [],"privDecls": [],"fields": [2089,842,842,2195,2201]},{"kind": 8,"name": "builtin.FnArg","src": 855,"pubDecls": [],"privDecls": [],"fields": [842,842,2195]},{"kind": 8,"name": "builtin.Int","src": 856,"pubDecls": [],"privDecls": [],"fields": [842,843]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var)var","generic": true,"args": [977,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var)var","generic": true,"args": [977,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var,var)var","generic": true,"args": [977,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var,var)var","generic": true,"args": [977,778,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var)var","generic": true,"args": [977,778,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var,var)var","generic": true,"args": [977,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var)var","generic": true,"args": [977,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type)var","generic": true,"args": [977,778]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) std.mem.Error![]u8","generic": false,"ret": 1014,"args": [977,855,1087,812,1087]},{"kind": 8,"name": "std.coff.DataDirectory","src": 857,"pubDecls": [],"privDecls": [],"fields": [807,807]},{"kind": 7,"len": 16,"elem": 2108},{"kind": 8,"name": "std.debug.Bucket","src": 858,"pubDecls": [],"privDecls": [],"fields": [807,807]},{"kind": 21,"name": "std.os.windows.bits.HMODULE"},{"kind": 8,"name": "std.os.windows.bits.SECURITY_ATTRIBUTES","src": 859,"pubDecls": [],"privDecls": [],"fields": [807,1089,1155]},{"kind": 6,"elem": 2140},{"kind": 18,"name": "fn(*std.rand.Random,type,var)var","generic": true,"args": [1211,778,null]},{"kind": 18,"name": "fn(*std.rand.Random,type,var)var","generic": true,"args": [1211,778,null]},{"kind": 18,"name": "fn(*std.rand.Random,type,var,var)var","generic": true,"args": [1211,778,null,null]},{"kind": 18,"name": "fn(*std.rand.Random,type)var","generic": true,"args": [1211,778]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 8,"name": "zio.src.socket.Ipv4Address","src": 860,"pubDecls": [5272,5273,5274],"privDecls": []},{"kind": 8,"name": "zio.src.socket.Ipv6Address","src": 861,"pubDecls": [5275,5276,5277],"privDecls": []},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [778,null]},{"kind": 7,"len": 2048,"elem": 779},{"kind": 8,"name": "zio.src.backend.windows.Options","src": 862,"pubDecls": [5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295],"privDecls": []},{"kind": 8,"name": "zio.src.backend.posix","src": 863,"pubDecls": [5296,5297,5298,5299,5300,5301],"privDecls": [5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321],"file": 82},{"kind": 17,"name": "zio.src.backend.windows.IN6_ADDR","src": 864,"pubDecls": [],"privDecls": [],"fields": [1686,2203]},{"kind": 18,"name": "stdcallcc fn(*c_void, [*]zio.src.backend.windows.OVERLAPPED_ENTRY, u32, *u32, u32, c_int) c_int","generic": false,"ret": 1155,"args": [972,2204,807,1949,807,1155]},{"kind": 8,"name": "zio.src.backend.windows.IN_ADDR","src": 865,"pubDecls": [],"privDecls": [],"fields": [807]},{"kind": 18,"name": "extern fn(u32, u32, *std.os.windows.bits.OVERLAPPED) void","generic": false,"ret": 850,"args": [807,807,1321]},{"kind": 8,"name": "zio.src.backend.windows.WSAData","src": 866,"pubDecls": [],"privDecls": [],"fields": [909,909,1105,1105,1046,2205,2206]},{"kind": 4,"i": 16},{"kind": 7,"len": 5,"elem": 802},{"kind": 18,"name": "fn(u8,var)var","generic": true,"args": [779,null]},{"kind": 7,"len": 3,"elem": 909},{"kind": 17,"name": "zuma.src.backend.windows.union:413:12","src": 867,"pubDecls": [],"privDecls": [],"fields": [1925,1932,1945,1941]},{"kind": 8,"name": "std.os.windows.lang","src": 868,"pubDecls": [5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461],"privDecls": [],"file": 83},{"kind": 8,"name": "std.os.windows.sublang","src": 869,"pubDecls": [5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5704,5705],"privDecls": [],"file": 84},{"kind": 8,"name": "std.os.windows.bits.EXCEPTION_RECORD","src": 870,"pubDecls": [],"privDecls": [],"fields": [807,807,2152,972,807,2207]},{"kind": 8,"name": "std.os.windows.bits.COORD","src": 871,"pubDecls": [],"privDecls": [],"fields": [2130,2130]},{"kind": 8,"name": "std.os.windows.error","src": 872,"pubDecls": [5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728,5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327,6328,6329,6330,6331,6332,6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6361,6362,6363,6364,6365,6366,6367,6368,6369,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6384,6385,6386,6387,6388,6389,6390,6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6437,6438,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6449,6450,6451,6452,6453,6454,6455,6456,6457,6458,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472,6473,6474,6475,6476,6477,6478,6479,6480,6481,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6505,6506,6507,6508,6509,6510,6511,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6533,6534,6535,6536,6537,6538,6539,6540,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552,6553,6554,6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565,6566,6567,6568,6569,6570,6571,6572,6573,6574,6575,6576,6577,6578,6579,6580,6581,6582,6583,6584,6585,6586,6587,6588,6589,6590,6591,6592,6593,6594,6595,6596,6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,6638,6639,6640,6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657,6658,6659,6660,6661,6662,6663,6664,6665,6666,6667,6668,6669,6670,6671,6672,6673,6674,6675,6676,6677,6678,6679,6680,6681,6682,6683,6684,6685,6686,6687,6688,6689,6690,6691,6692,6693,6694,6695,6696,6697,6698,6699,6700,6701,6702,6703,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6747,6748,6749,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762,6763,6764,6765,6766,6767,6768,6769,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794,6795,6796,6797,6798,6799,6800,6801,6802,6803,6804,6805,6806,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829,6830,6831,6832,6833,6834,6835,6836,6837,6838,6839,6840,6841,6842,6843,6844,6845,6846,6847,6848,6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6877,6878,6879,6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892,6893,6894],"privDecls": [],"file": 85},{"kind": 8,"name": "std.os.windows.bits.RTL_CRITICAL_SECTION_DEBUG","src": 873,"pubDecls": [],"privDecls": [],"fields": [909,909,2208,2141,807,807,807,909,909]},{"kind": 8,"name": "std.os.windows.bits.LIST_ENTRY","src": 874,"pubDecls": [],"privDecls": [],"fields": [2209,2209]},{"kind": 6,"elem": 2210},{"kind": 8,"name": "std.os.windows.bits.SYSTEM_INFO","src": 875,"pubDecls": [],"privDecls": [],"fields": [2211,807,972,972,812,807,807,807,909,909]},{"kind": 8,"name": "std.os.windows.bits.CONSOLE_SCREEN_BUFFER_INFO","src": 876,"pubDecls": [],"privDecls": [],"fields": [2138,2138,909,2148,2138]},{"kind": 6,"elem": 2212},{"kind": 13,"child": 2213},{"kind": 8,"name": "std.os.windows.bits.FILE_NAME_INFO","src": 877,"pubDecls": [],"privDecls": [],"fields": [807,2214]},{"kind": 8,"name": "std.os.windows.bits.SMALL_RECT","src": 878,"pubDecls": [],"privDecls": [],"fields": [2130,2130,2130,2130]},{"kind": 18,"name": "extern fn(*c_void, *c_void, ?*c_void, u32, u32, u32, *u32, ?*std.os.windows.bits.OVERLAPPED) c_int","generic": false,"ret": 1155,"args": [972,972,1089,807,807,807,1949,1950]},{"kind": 18,"name": "extern fn(*c_void, *const zio.src.backend.windows.SOCKADDR, c_uint, ?*c_void, u32, ?*u32, ?*std.os.windows.bits.OVERLAPPED) c_int","generic": false,"ret": 1155,"args": [972,1947,1236,1089,807,1955,1950]},{"kind": 18,"name": "extern fn(*c_void, u32, u32, u32, **zio.src.backend.windows.SOCKADDR, *u32, **zio.src.backend.windows.SOCKADDR, *u32) void","generic": false,"ret": 850,"args": [972,807,807,807,2215,1949,2215,1949]},{"kind": 6,"elem": 2137},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(?[]align(4096) u8,var,var)var","generic": true,"args": [1272,null,null]},{"kind": 18,"name": "fn(u32,var,var)var","generic": true,"args": [807,null,null]},{"kind": 7,"len": 38,"elem": 779},{"kind": 6,"elem": 995},{"kind": 7,"len": 20,"elem": 779},{"kind": 7,"len": 1,"elem": 1898},{"kind": 7,"len": 1,"elem": 1938},{"kind": 6,"const": true,"elem": 1898},{"kind": 13,"child": 1309},{"kind": 6,"elem": 1936},{"kind": 13,"child": 1077},{"kind": 6,"elem": 1935},{"kind": 6,"elem": 1926},{"kind": 13,"child": 2166},{"kind": 7,"len": 1,"elem": 1920},{"kind": 15,"name": "std.os.windows.CreateProcessError","errors": [197,198,196,199]},{"kind": 8,"name": "std.os.windows.ntdll","src": 879,"pubDecls": [4353,6895,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4372,4371,4373,4374,4375,4377,4376,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4391,4390,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4459,4458,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,6896,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,6897,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,6898,4566,4567,6899,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,6900,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,6901,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706],"privDecls": [],"file": 86},{"kind": 18,"name": "fn([]const u8,[]const u16)var","generic": true,"args": [868,1098]},{"kind": 8,"name": "std.os.windows.kernel32","src": 880,"pubDecls": [4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,6902,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,6903,4381,4382,6904,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,6905,4395,6906,4396,6907,4397,4398,6908,4399,4400,4401,4402,4403,6909,4404,4405,4406,6910,4407,4408,4409,4410,6911,6912,4411,4412,4413,4414,6913,4415,6914,4416,4417,4418,6915,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,6916,4438,4439,4440,4441,4442,6917,4443,6918,4444,4445,4446,6919,6920,4447,6921,4448,4449,4450,4451,4452,4453,4454,6922,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,6923,4465,4466,4467,6924,4468,6925,4469,4470,4471,4472,4473,6926,4474,4475,6927,4476,4477,4478,4479,4480,6928,4481,4482,4483,4484,4485,4486,4487,4488,6929,4489,4490,4491,6930,4492,4493,4494,6931,4495,4496,4497,4498,4499,4500,6932,4501,4502,4503,4504,4505,4506,6933,4507,4508,4509,4510,4511,4512,4513,4514,6934,4515,4516,6935,4517,4518,4519,4520,4521,4522,6936,4523,4524,6937,4525,4526,6938,6939,4527,4528,4529,4530,4531,4532,6940,6941,4533,6942,4534,4535,4536,6943,6944,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,6945,6946,4558,4559,4560,4561,4562,4563,4564,6947,4565,6948,6949,4566,4567,4568,4569,4570,4571,4572,6950,4573,4574,6951,4575,4576,4577,6952,4578,4579,4580,4581,4582,4583,6953,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,6954,6955,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,6956,6957,4613,4614,4615,4616,4617,6958,4618,4619,4620,4621,4622,4623,4624,4625,6959,4626,4627,4628,4629,4630,4631,4632,6960,4633,4634,6961,4635,6962,4636,4637,4638,4639,4640,4641,4642,6963,6964,4643,4644,6965,4645,6966,4646,4647,6967,4648,4649,6968,4650,4651,4652,4653,4654,6969,4655,4656,4657,4658,6970,4659,4660,6971,6972,4661,6973,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,6974,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,6975,4689,4690,6976,4691,4692,6977,6978,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,6979,4703,4704,4705,4706,6980],"privDecls": [],"file": 87},{"kind": 13,"child": 1310},{"kind": 18,"name": "extern fn(*std.os.windows.bits.OVERLAPPED) usize","generic": false,"ret": 812,"args": [1321]},{"kind": 18,"name": "extern fn() void","generic": false,"ret": 850},{"kind": 8,"name": "std.os.linux.x86_64","src": 881,"pubDecls": [1632,1635,1634,1761,1636,1765,1766,1767,1639,1640,1768,5002,1642,1771,1644,4921,1774,1775,1777,1646,1649,1785,1786,1787,1650,1790,4926,1792,1794,1654,1796,1797,1799,1801,1802,1659,1661,1662,1663,1806,1668,1669,1813,1671,1816,1815,1822,1674,1676,1826,5032,1679,1831,4947,1680,5036,1684,1688,1836,1837,1838,1689,1839,1840,1842,1692,1845,1846,1848,1850,1849,1696,1695,4959,1699,1700,1854,1705,1706,1857,1707,1709,1710,1860,1861,1863,1865,1715,1717,5061,1719,1720,1723,1871,1725,1872,1873,5064,1731,1876,1877,1881,1882,1739,1740,4992,1886,1889,1890,1892,1894,1750,1751,1752,1753,1895,1896,1897,1756,1758,1899,1760],"privDecls": [],"file": 88},{"kind": 13,"child": 785},{"kind": 14,"err": 2013,"payload": 2014},{"kind": 6,"const": true,"elem": 1480},{"kind": 7,"len": 200,"elem": 779},{"kind": 7,"len": 432,"elem": 802},{"kind": 7,"len": 600,"elem": 1368},{"kind": 7,"len": 432,"elem": 1367},{"kind": 8,"name": "std.pdb.Flags","src": 882,"pubDecls": [],"privDecls": [],"fields": [2250,844,842]},{"kind": 4,"u": 15},{"kind": 16,"name": "std.hash.auto_hash.HashStrategy","src": 883,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(var,var,var)var","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(?[]align(4096) u8,var,var)var","generic": true,"args": [1272,null,null]},{"kind": 6,"len": 2,"elem": 2093},{"kind": 6,"len": 2,"elem": 2084},{"kind": 16,"name": "builtin.Size","src": 884,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 17,"name": "builtin.Data","src": 885,"pubDecls": [6981],"privDecls": [],"fields": [778,778,2251]},{"kind": 13,"child": 778},{"kind": 6,"len": 2,"elem": 2092},{"kind": 6,"len": 2,"elem": 2095},{"kind": 6,"len": 2,"elem": 2082},{"kind": 13,"child": 2082},{"kind": 13,"child": 843},{"kind": 6,"len": 2,"elem": 2097},{"kind": 8,"name": "zio.src.backend.posix.Socket","src": 886,"pubDecls": [6982,6983,6984,6985,6986,6987,6988,6989,6990,6991,6992,6993,6994,6995,6996],"privDecls": [6997,6998,6999],"fields": [860]},{"kind": 7,"len": 8,"elem": 909},{"kind": 6,"len": 1,"elem": 1888},{"kind": 7,"len": 257,"elem": 779},{"kind": 7,"len": 129,"elem": 779},{"kind": 7,"len": 15,"elem": 812},{"kind": 6,"elem": 1792},{"kind": 6,"elem": 2141},{"kind": 21,"name": "std.os.windows.bits.FARPROC"},{"kind": 17,"name": "std.os.windows.bits.union:488:12","src": 887,"pubDecls": [],"privDecls": [],"fields": [807,2253]},{"kind": 21,"name": "std.os.windows.bits.va_list"},{"kind": 18,"name": "extern fn(*c_void, u32, *c_void) void","generic": false,"ret": 850,"args": [972,807,972]},{"kind": 7,"len": 1,"elem": 909},{"kind": 6,"elem": 1952},{"kind": 18,"name": "stdcallcc fn(u32, u32, **c_void, ?*u32) u16","generic": false,"ret": 909,"args": [807,807,1322,1955]},{"kind": 18,"name": "stdcallcc fn(*c_void, ?*c_void, usize, u32) ?*c_void","generic": false,"ret": 1089,"args": [972,1089,812,807]},{"kind": 18,"name": "stdcallcc fn(*c_void, [*]const u8, u32, ?*u32, ?*std.os.windows.bits.OVERLAPPED) c_int","generic": false,"ret": 1155,"args": [972,1077,807,1955,1950]},{"kind": 18,"name": "stdcallcc fn(*c_void) c_int","generic": false,"ret": 1155,"args": [972]},{"kind": 18,"name": "stdcallcc fn(?*c_void, usize, u32) c_int","generic": false,"ret": 1155,"args": [1089,812,807]},{"kind": 18,"name": "stdcallcc fn(*std.os.windows.bits.RTL_CRITICAL_SECTION) void","generic": false,"ret": 850,"args": [2208]},{"kind": 18,"name": "stdcallcc fn(*c_void, u32) u32","generic": false,"ret": 807,"args": [972,807]},{"kind": 18,"name": "stdcallcc fn(*c_void, *u32) c_int","generic": false,"ret": 1155,"args": [972,1949]},{"kind": 18,"name": "stdcallcc fn(*c_void, *std.os.windows.bits.CONSOLE_SCREEN_BUFFER_INFO) c_int","generic": false,"ret": 1155,"args": [972,2254]},{"kind": 18,"name": "stdcallcc fn(?*c_void, usize, u32, u32) ?*c_void","generic": false,"ret": 1089,"args": [1089,812,807,807]},{"kind": 18,"name": "stdcallcc fn(c_ulong, ?stdcallcc fn(*std.os.windows.bits.EXCEPTION_POINTERS) c_long) ?*c_void","generic": false,"ret": 1089,"args": [1903,2255]},{"kind": 18,"name": "stdcallcc fn(*std.os.windows.bits.SYSTEM_INFO) void","generic": false,"ret": 850,"args": [2256]},{"kind": 18,"name": "stdcallcc fn(c_uint) noreturn","generic": false,"ret": 959,"args": [1236]},{"kind": 18,"name": "stdcallcc fn(*c_void, [*]u8, u32, ?*u32, ?*std.os.windows.bits.OVERLAPPED) c_int","generic": false,"ret": 1155,"args": [972,1046,807,1955,1950]},{"kind": 18,"name": "stdcallcc fn(*c_void) c_ulong","generic": false,"ret": 1903,"args": [972]},{"kind": 18,"name": "stdcallcc fn(u32, ?[*]u16) u32","generic": false,"ret": 807,"args": [807,2257]},{"kind": 18,"name": "stdcallcc fn(*c_void, u32, usize) ?*c_void","generic": false,"ret": 1089,"args": [972,807,812]},{"kind": 18,"name": "stdcallcc fn(*std.os.windows.bits.RTL_RUN_ONCE, extern fn(*std.os.windows.bits.RTL_RUN_ONCE, ?*c_void, ?*c_void) c_int, ?*c_void, ?*c_void) c_int","generic": false,"ret": 1155,"args": [1154,251,1089,1089]},{"kind": 18,"name": "stdcallcc fn(u32, ?*c_void, u32, u32, [*]u16, u32, ?**std.os.windows.bits.va_list) u32","generic": false,"ret": 807,"args": [807,1089,807,807,1117,807,2258]},{"kind": 18,"name": "stdcallcc fn(?[*]const u16) *std.os.windows.bits.HMODULE","generic": false,"ret": 1768,"args": [2259]},{"kind": 18,"name": "stdcallcc fn(?*std.os.windows.bits.HMODULE, [*]u16, u32) u32","generic": false,"ret": 807,"args": [1116,1117,807]},{"kind": 18,"name": "stdcallcc fn(?*std.os.windows.bits.SECURITY_ATTRIBUTES, usize, extern fn(*c_void) u32, ?*c_void, u32, ?*u32) ?*c_void","generic": false,"ret": 1089,"args": [1119,812,602,1089,807,1955]},{"kind": 18,"name": "stdcallcc fn() ?*c_void","generic": false,"ret": 1089},{"kind": 18,"name": "stdcallcc fn(*c_void, u32, usize, ?*std.os.windows.bits.OVERLAPPED) c_int","generic": false,"ret": 1155,"args": [972,807,812,1950]},{"kind": 18,"name": "stdcallcc fn(*c_void, u32, *c_void, u32) c_int","generic": false,"ret": 1155,"args": [972,807,972,807]},{"kind": 18,"name": "stdcallcc fn(*c_void, u16) c_int","generic": false,"ret": 1155,"args": [972,909]},{"kind": 18,"name": "stdcallcc fn(*std.os.windows.bits.HMODULE, [*]const u8) ?*std.os.windows.bits.FARPROC","generic": false,"ret": 2260,"args": [1768,1077]},{"kind": 18,"name": "stdcallcc fn() u32","generic": false,"ret": 807},{"kind": 18,"name": "stdcallcc fn(*c_void, u32, *c_void) c_int","generic": false,"ret": 1155,"args": [972,807,972]},{"kind": 18,"name": "stdcallcc fn(*c_void, i64, ?*i64, u32) c_int","generic": false,"ret": 1155,"args": [972,995,2261,807]},{"kind": 18,"name": "stdcallcc fn(u32) ?*c_void","generic": false,"ret": 1089,"args": [807]},{"kind": 18,"name": "stdcallcc fn([*]u16, [*]u16, u32) u32","generic": false,"ret": 807,"args": [1117,1117,807]},{"kind": 18,"name": "stdcallcc fn([*]const u16, u32, u32, ?*std.os.windows.bits.SECURITY_ATTRIBUTES, u32, u32, ?*c_void) *c_void","generic": false,"ret": 972,"args": [1092,807,807,1119,807,807,1089]},{"kind": 18,"name": "stdcallcc fn(*c_void, *i64) c_int","generic": false,"ret": 1155,"args": [972,2157]},{"kind": 4,"u": 24},{"kind": 8,"name": "builtin.FnDecl","src": 888,"pubDecls": [7000],"privDecls": [],"fields": [778,2262,2089,842,842,842,1016,778,2263]},{"kind": 18,"name": "fn(*c_void,*zio.src.socket.Option,var,var)var","generic": true,"args": [972,1228,null,null]},{"kind": 8,"name": "std.os.windows.bits.struct:490:16","src": 889,"pubDecls": [],"privDecls": [],"fields": [909,909]},{"kind": 6,"elem": 2144},{"kind": 13,"child": 743},{"kind": 6,"elem": 2143},{"kind": 13,"child": 1117},{"kind": 13,"child": 2264},{"kind": 13,"child": 1092},{"kind": 13,"child": 2142},{"kind": 13,"child": 2157},{"kind": 16,"name": "builtin.Inline","src": 890,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 6,"len": 2,"elem": 868},{"kind": 6,"elem": 2145}],"decls": [{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1385,"value": 1231},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 632,"value": 895},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1386,"value": 1232},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1387,"value": 1233},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1388,"value": 1234},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1389,"value": 1235},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 923,"value": 1222},{"import": 1391,"src": 46,"name": "readByte","kind": "const","type": 96,"value": 99},{"import": 1391,"src": 44,"name": "readStruct","kind": "const","type": 1392,"value": 1236},{"import": 1391,"src": 894,"name": "readIntBig"},{"import": 1391,"src": 895,"name": "skipBytes"},{"import": 1391,"src": 68,"name": "read","kind": "const","type": 72,"value": 188},{"import": 1391,"src": 896,"name": "readAllAlloc"},{"import": 1391,"src": 897,"name": "readUntilDelimiterBuffer"},{"import": 1391,"src": 898,"name": "readIntForeign"},{"import": 1391,"src": 899,"name": "ReadFn","kind": "const","type": 778,"value": 72},{"import": 1391,"src": 900,"name": "readIntNative"},{"import": 1391,"src": 28,"name": "readFull","kind": "const","type": 72,"value": 74},{"import": 1391,"src": 27,"name": "readNoEof","kind": "const","type": 71,"value": 73},{"import": 1391,"src": 901,"name": "readByteSigned"},{"import": 1391,"src": 902,"name": "readVarInt"},{"import": 1391,"src": 903,"name": "Error","kind": "const","type": 778,"value": 788},{"import": 1391,"src": 31,"name": "readIntLittle","kind": "const","type": 1393,"value": 1237},{"import": 1391,"src": 904,"name": "readUntilDelimiterAlloc"},{"import": 1391,"src": 905,"name": "readAllBuffer"},{"import": 1391,"src": 906,"name": "readInt"},{"import": 1391,"src": 907,"name": "Self","kind": "const","type": 778,"value": 787},{"import": 1384,"src": 374,"name": "toBuiltin","kind": "const","type": 440,"value": 615},{"import": 1394,"src": 440,"name": "get","kind": "const","type": 570,"value": 813},{"import": 1394,"src": 474,"name": "loadImports","kind": "const","type": 570,"value": 893},{"import": 1394,"src": 908,"name": "instance","kind": "var","type": 827,"value": null},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1406,"value": 1238},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 560,"value": 797},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1407,"value": 1239},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1408,"value": 1240},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1409,"value": 1241},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1410,"value": 1242},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 789,"value": 1173},{"import": 1384,"src": 274,"name": "fetchOr","kind": "const","type": 1411,"value": 1243},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd","kind": "const","type": 1412,"value": 1244},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap"},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 325,"value": 472},{"import": 1384,"src": 272,"name": "fetchAnd","kind": "const","type": 1413,"value": 1245},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min","kind": "const","type": 1414,"value": 1246},{"import": 1384,"src": 277,"name": "max","kind": "const","type": 1415,"value": 1247},{"import": 1384,"src": 273,"name": "fetchNand","kind": "const","type": 1416,"value": 1248},{"import": 1384,"src": 271,"name": "fetchSub","kind": "const","type": 1417,"value": 1249},{"import": 1384,"src": 275,"name": "fetchXor","kind": "const","type": 1418,"value": 1250},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1419,"value": 1251},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1420,"value": 1252},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 919,"value": 1219},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set","kind": "const","type": 328,"value": 482},{"import": 1384,"src": 270,"name": "fetchAdd","kind": "const","type": 1421,"value": 1253},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap"},{"import": 1384,"src": 260,"name": "new"},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get","kind": "const","type": 330,"value": 484},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1422,"value": 1254},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 807},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1423,"value": 1255},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 915,"value": 1215},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1424,"value": 1256},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 598,"value": 850},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1425,"value": 1257},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1426,"value": 1258},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1427,"value": 1259},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1428,"value": 1260},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 918,"value": 1218},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd","kind": "const","type": 1429,"value": 1261},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap"},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 367,"value": 535},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get","kind": "const","type": 368,"value": 536},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1430,"value": 1262},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 802},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1431,"value": 1263},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 834,"value": 1183},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap"},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 317,"value": 463},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get","kind": "const","type": 318,"value": 464},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load"},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 807},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order"},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw"},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 913,"value": 1213},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1432,"value": 1264},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 466,"value": 665},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1433,"value": 1265},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1434,"value": 1266},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1435,"value": 1267},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1436,"value": 1268},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 917,"value": 1217},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1437,"value": 1269},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 469,"value": 669},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1438,"value": 1270},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1439,"value": 1271},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1440,"value": 1272},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1441,"value": 1273},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 876,"value": 1202},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1442,"value": 1274},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 541,"value": 775},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1443,"value": 1275},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1444,"value": 1276},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1445,"value": 1277},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1446,"value": 1278},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 886,"value": 1205},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 631,"value": 894},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 678,"value": 948},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 783},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 633,"value": 896},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 1317},{"import": 1448,"src": 911,"name": "set"},{"import": 1448,"src": 37,"name": "ensureCapacity","kind": "const","type": 114,"value": 117},{"import": 1448,"src": 912,"name": "setOrError"},{"import": 1448,"src": 913,"name": "appendAssumeCapacity"},{"import": 1448,"src": 914,"name": "swapRemoveOrError"},{"import": 1448,"src": 915,"name": "at"},{"import": 1448,"src": 38,"name": "capacity","kind": "const","type": 115,"value": 118},{"import": 1448,"src": 916,"name": "swapRemove"},{"import": 1448,"src": 917,"name": "iterator"},{"import": 1448,"src": 918,"name": "pop"},{"import": 1448,"src": 919,"name": "toSliceConst"},{"import": 1448,"src": 920,"name": "appendSlice"},{"import": 1448,"src": 921,"name": "insertSlice"},{"import": 1448,"src": 922,"name": "fromOwnedSlice"},{"import": 1448,"src": 923,"name": "SliceConst"},{"import": 1448,"src": 40,"name": "append"},{"import": 1448,"src": 172,"name": "resize"},{"import": 1448,"src": 924,"name": "deinit"},{"import": 1448,"src": 925,"name": "insert"},{"import": 1448,"src": 41,"name": "addOne","kind": "const","type": 113,"value": 116},{"import": 1448,"src": 42,"name": "addOneAssumeCapacity","kind": "const","type": 117,"value": 120},{"import": 1448,"src": 926,"name": "Iterator"},{"import": 1448,"src": 927,"name": "shrink"},{"import": 1448,"src": 928,"name": "Slice","kind": "const","type": 778,"value": 1068},{"import": 1448,"src": 73,"name": "toOwnedSlice","kind": "const","type": 119,"value": 122},{"import": 1448,"src": 929,"name": "orderedRemove"},{"import": 1448,"src": 72,"name": "init","kind": "const","type": 112,"value": 115},{"import": 1448,"src": 110,"name": "count","kind": "const","type": 115,"value": 201},{"import": 1448,"src": 930,"name": "popOrNull"},{"import": 1448,"src": 45,"name": "toSlice"},{"import": 1448,"src": 931,"name": "Self","kind": "const","type": 778,"value": 832},{"import": 1450,"src": 932,"name": "writeIntLittle"},{"import": 1450,"src": 933,"name": "writeInt"},{"import": 1450,"src": 8,"name": "print","kind": "const","type": 1451,"value": 1279},{"import": 1450,"src": 934,"name": "writeIntNative"},{"import": 1450,"src": 935,"name": "Error","kind": "const","type": 778,"value": 840},{"import": 1450,"src": 936,"name": "writeIntForeign"},{"import": 1450,"src": 90,"name": "writeByte","kind": "const","type": 137,"value": 146},{"import": 1450,"src": 937,"name": "writeByteNTimes"},{"import": 1450,"src": 938,"name": "writeIntBig"},{"import": 1450,"src": 91,"name": "write","kind": "const","type": 8,"value": 147},{"import": 1450,"src": 939,"name": "Self","kind": "const","type": 778,"value": 839},{"import": 851,"src": 940,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 851,"src": 941,"name": "DynLib","kind": "const","type": 778,"value": 1453},{"import": 851,"src": 942,"name": "SinglyLinkedList","kind": "const","type": 853,"value": 1190},{"import": 851,"src": 943,"name": "PackedIntArrayEndian","kind": "const","type": 1454,"value": 1280},{"import": 851,"src": 945,"name": "PackedIntArray","kind": "const","type": 1455,"value": 1281},{"import": 851,"src": 947,"name": "math","kind": "const","type": 778,"value": 939},{"import": 851,"src": 948,"name": "Thread","kind": "const","type": 778,"value": 1456},{"import": 851,"src": 949,"name": "BufSet","kind": "const","type": 778,"value": 1457},{"import": 851,"src": 950,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 851,"src": 951,"name": "debug","kind": "const","type": 778,"value": 1459},{"import": 851,"src": 952,"name": "Buffer","kind": "const","type": 778,"value": 1460},{"import": 851,"src": 953,"name": "dwarf","kind": "const","type": 778,"value": 1461},{"import": 851,"src": 954,"name": "testing","kind": "const","type": 778,"value": 1462},{"import": 851,"src": 955,"name": "BufferOutStream","kind": "const","type": 778,"value": 1463},{"import": 851,"src": 956,"name": "event","kind": "const","type": 778,"value": 1464},{"import": 851,"src": 957,"name": "unicode","kind": "const","type": 778,"value": 1465},{"import": 851,"src": 958,"name": "build","kind": "const","type": 778,"value": 1466},{"import": 851,"src": 959,"name": "AlignedArrayList","kind": "const","type": 874,"value": 1201},{"import": 851,"src": 960,"name": "http","kind": "const","type": 778,"value": 1467},{"import": 851,"src": 961,"name": "elf","kind": "const","type": 778,"value": 1468},{"import": 851,"src": 962,"name": "StaticallyInitializedMutex","kind": "const","type": 778,"value": 1149},{"import": 851,"src": 963,"name": "SegmentedList","kind": "const","type": 1469,"value": 1282},{"import": 851,"src": 965,"name": "ascii","kind": "const","type": 778,"value": 1470},{"import": 851,"src": 966,"name": "io","kind": "const","type": 778,"value": 1450},{"import": 851,"src": 967,"name": "ChildProcess","kind": "const","type": 778,"value": 1471},{"import": 851,"src": 968,"name": "hash_map","kind": "const","type": 778,"value": 1472},{"import": 851,"src": 969,"name": "fmt","kind": "const","type": 778,"value": 1473},{"import": 851,"src": 970,"name": "base64","kind": "const","type": 778,"value": 1474},{"import": 851,"src": 971,"name": "atomic","kind": "const","type": 778,"value": 1475},{"import": 851,"src": 972,"name": "TailQueue","kind": "const","type": 1476,"value": 1283},{"import": 851,"src": 974,"name": "json","kind": "const","type": 778,"value": 1477},{"import": 851,"src": 975,"name": "lazyInit","kind": "const","type": 1478,"value": 1284},{"import": 851,"src": 977,"name": "pdb","kind": "const","type": 778,"value": 1479},{"import": 851,"src": 978,"name": "BufMap","kind": "const","type": 778,"value": 1480},{"import": 851,"src": 979,"name": "coff","kind": "const","type": 778,"value": 1481},{"import": 851,"src": 980,"name": "crypto","kind": "const","type": 778,"value": 1482},{"import": 851,"src": 981,"name": "hash","kind": "const","type": 778,"value": 1483},{"import": 851,"src": 982,"name": "sort","kind": "const","type": 778,"value": 1484},{"import": 851,"src": 983,"name": "c","kind": "const","type": 778,"value": 1485},{"import": 851,"src": 984,"name": "cstr","kind": "const","type": 778,"value": 1486},{"import": 851,"src": 985,"name": "rb","kind": "const","type": 778,"value": 1487},{"import": 851,"src": 986,"name": "rand","kind": "const","type": 778,"value": 1488},{"import": 851,"src": 987,"name": "meta","kind": "const","type": 778,"value": 1489},{"import": 851,"src": 988,"name": "net","kind": "const","type": 778,"value": 1490},{"import": 851,"src": 989,"name": "fs","kind": "const","type": 778,"value": 1491},{"import": 851,"src": 990,"name": "heap","kind": "const","type": 778,"value": 1492},{"import": 851,"src": 991,"name": "AutoHashMap","kind": "const","type": 1493,"value": 1285},{"import": 851,"src": 993,"name": "Mutex","kind": "const","type": 778,"value": 1149},{"import": 851,"src": 994,"name": "PriorityQueue","kind": "const","type": 1494,"value": 1286},{"import": 851,"src": 996,"name": "time","kind": "const","type": 778,"value": 1495},{"import": 851,"src": 997,"name": "Progress","kind": "const","type": 778,"value": 1496},{"import": 851,"src": 998,"name": "packed_int_array","kind": "const","type": 778,"value": 1497},{"import": 851,"src": 999,"name": "valgrind","kind": "const","type": 778,"value": 1498},{"import": 851,"src": 1000,"name": "PackedIntSliceEndian","kind": "const","type": 1499,"value": 1287},{"import": 851,"src": 1002,"name": "HashMap","kind": "const","type": 901,"value": 1210},{"import": 851,"src": 1003,"name": "zig","kind": "const","type": 778,"value": 1500},{"import": 851,"src": 1004,"name": "ArrayList","kind": "const","type": 831,"value": 1182},{"import": 851,"src": 1005,"name": "SpinLock","kind": "const","type": 778,"value": 1501},{"import": 851,"src": 1006,"name": "PackedIntSlice","kind": "const","type": 1502,"value": 1288},{"import": 851,"src": 1008,"name": "process","kind": "const","type": 778,"value": 1503},{"import": 851,"src": 1009,"name": "macho","kind": "const","type": 778,"value": 1504},{"import": 851,"src": 1010,"name": "BloomFilter","kind": "const","type": 1505,"value": 1289},{"import": 851,"src": 1012,"name": "StringHashMap","kind": "const","type": 865,"value": 1196},{"import": 1506,"src": 1013,"name": "createNode"},{"import": 1506,"src": 1014,"name": "Node","kind": "const","type": 778,"value": 1507},{"import": 1506,"src": 1015,"name": "destroyNode"},{"import": 1506,"src": 141,"name": "prepend","kind": "const","type": 188,"value": 232},{"import": 1506,"src": 1016,"name": "insertAfter"},{"import": 1506,"src": 143,"name": "init","kind": "const","type": 189,"value": 234},{"import": 1506,"src": 1017,"name": "remove"},{"import": 1506,"src": 1018,"name": "allocateNode"},{"import": 1506,"src": 1019,"name": "popFirst"},{"import": 1506,"src": 1020,"name": "Self","kind": "const","type": 778,"value": 854},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 559,"value": 796},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 624,"value": 883},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 799},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 561,"value": 798},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 972},{"import": 1472,"src": 1021,"name": "clone"},{"import": 1472,"src": 1022,"name": "ensureCapacity"},{"import": 1472,"src": 1023,"name": "getOrPut"},{"import": 1472,"src": 1024,"name": "putNoClobber"},{"import": 1472,"src": 1025,"name": "iterator"},{"import": 1472,"src": 1026,"name": "KV","kind": "const","type": 778,"value": 1509},{"import": 1472,"src": 1027,"name": "get"},{"import": 1472,"src": 1028,"name": "GetOrPutResult"},{"import": 1472,"src": 1029,"name": "clear"},{"import": 1472,"src": 1030,"name": "putAssumeCapacity"},{"import": 1472,"src": 1031,"name": "deinit"},{"import": 1472,"src": 1032,"name": "getOrPutValue"},{"import": 1472,"src": 1033,"name": "getValue"},{"import": 1472,"src": 1034,"name": "put"},{"import": 1472,"src": 1035,"name": "Iterator"},{"import": 1472,"src": 1036,"name": "init"},{"import": 1472,"src": 1037,"name": "count"},{"import": 1472,"src": 1038,"name": "contains"},{"import": 1472,"src": 1039,"name": "remove"},{"import": 1472,"src": 1040,"name": "removeAssertDiscard"},{"import": 1472,"src": 1041,"name": "optimizedCapacity"},{"import": 1472,"src": 1042,"name": "initCapacity"},{"import": 1472,"src": 1043,"name": "keyToIndex"},{"import": 1472,"src": 1044,"name": "Self"},{"import": 1472,"src": 1045,"name": "autoCapacity"},{"import": 1472,"src": 1046,"name": "incrementModificationCount"},{"import": 1472,"src": 1047,"name": "constrainIndex"},{"import": 1472,"src": 1048,"name": "InternalPutResult"},{"import": 1472,"src": 1049,"name": "internalPut"},{"import": 1472,"src": 1050,"name": "Entry","kind": "const","type": 778,"value": 1510},{"import": 1472,"src": 1051,"name": "ensureCapacityExact"},{"import": 1472,"src": 1052,"name": "internalGet"},{"import": 1472,"src": 1021,"name": "clone"},{"import": 1472,"src": 1022,"name": "ensureCapacity"},{"import": 1472,"src": 1023,"name": "getOrPut"},{"import": 1472,"src": 1024,"name": "putNoClobber"},{"import": 1472,"src": 1025,"name": "iterator"},{"import": 1472,"src": 1026,"name": "KV","kind": "const","type": 778,"value": 1512},{"import": 1472,"src": 1027,"name": "get"},{"import": 1472,"src": 1028,"name": "GetOrPutResult"},{"import": 1472,"src": 1029,"name": "clear"},{"import": 1472,"src": 1030,"name": "putAssumeCapacity"},{"import": 1472,"src": 1031,"name": "deinit"},{"import": 1472,"src": 1032,"name": "getOrPutValue"},{"import": 1472,"src": 1033,"name": "getValue"},{"import": 1472,"src": 1034,"name": "put"},{"import": 1472,"src": 1035,"name": "Iterator"},{"import": 1472,"src": 1036,"name": "init"},{"import": 1472,"src": 1037,"name": "count"},{"import": 1472,"src": 1038,"name": "contains"},{"import": 1472,"src": 1039,"name": "remove"},{"import": 1472,"src": 1040,"name": "removeAssertDiscard"},{"import": 1472,"src": 1041,"name": "optimizedCapacity"},{"import": 1472,"src": 1042,"name": "initCapacity"},{"import": 1472,"src": 1043,"name": "keyToIndex"},{"import": 1472,"src": 1044,"name": "Self"},{"import": 1472,"src": 1045,"name": "autoCapacity"},{"import": 1472,"src": 1046,"name": "incrementModificationCount"},{"import": 1472,"src": 1047,"name": "constrainIndex"},{"import": 1472,"src": 1048,"name": "InternalPutResult"},{"import": 1472,"src": 1049,"name": "internalPut"},{"import": 1472,"src": 1050,"name": "Entry","kind": "const","type": 778,"value": 1513},{"import": 1472,"src": 1051,"name": "ensureCapacityExact"},{"import": 1472,"src": 1052,"name": "internalGet"},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 468,"value": 668},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 544,"value": 778},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 818},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 470,"value": 670},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 963},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap"},{"import": 1384,"src": 260,"name": "new"},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load"},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 802},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order"},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw"},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 942,"value": 1227},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set","kind": "const","type": 321,"value": 467},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1515,"value": 1290},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 319,"value": 465},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get","kind": "const","type": 320,"value": 466},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1516,"value": 1291},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1517,"value": 1292},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1518,"value": 1293},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1519,"value": 1294},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 914,"value": 1214},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set","kind": "const","type": 454,"value": 643},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1520,"value": 1295},{"import": 1384,"src": 260,"name": "new"},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1521,"value": 1296},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 807},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1522,"value": 1297},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 885,"value": 1204},{"import": 1448,"src": 911,"name": "set"},{"import": 1448,"src": 37,"name": "ensureCapacity","kind": "const","type": 38,"value": 39},{"import": 1448,"src": 912,"name": "setOrError"},{"import": 1448,"src": 913,"name": "appendAssumeCapacity"},{"import": 1448,"src": 914,"name": "swapRemoveOrError"},{"import": 1448,"src": 915,"name": "at"},{"import": 1448,"src": 38,"name": "capacity","kind": "const","type": 39,"value": 40},{"import": 1448,"src": 916,"name": "swapRemove"},{"import": 1448,"src": 917,"name": "iterator"},{"import": 1448,"src": 918,"name": "pop"},{"import": 1448,"src": 919,"name": "toSliceConst"},{"import": 1448,"src": 920,"name": "appendSlice"},{"import": 1448,"src": 921,"name": "insertSlice"},{"import": 1448,"src": 922,"name": "fromOwnedSlice"},{"import": 1448,"src": 923,"name": "SliceConst"},{"import": 1448,"src": 40,"name": "append","kind": "const","type": 41,"value": 42},{"import": 1448,"src": 172,"name": "resize"},{"import": 1448,"src": 924,"name": "deinit"},{"import": 1448,"src": 925,"name": "insert"},{"import": 1448,"src": 41,"name": "addOne","kind": "const","type": 42,"value": 43},{"import": 1448,"src": 42,"name": "addOneAssumeCapacity","kind": "const","type": 43,"value": 44},{"import": 1448,"src": 926,"name": "Iterator"},{"import": 1448,"src": 927,"name": "shrink"},{"import": 1448,"src": 928,"name": "Slice","kind": "const","type": 778,"value": 1001},{"import": 1448,"src": 73,"name": "toOwnedSlice"},{"import": 1448,"src": 929,"name": "orderedRemove"},{"import": 1448,"src": 72,"name": "init","kind": "const","type": 153,"value": 166},{"import": 1448,"src": 110,"name": "count","kind": "const","type": 39,"value": 171},{"import": 1448,"src": 930,"name": "popOrNull"},{"import": 1448,"src": 45,"name": "toSlice","kind": "const","type": 46,"value": 48},{"import": 1448,"src": 931,"name": "Self","kind": "const","type": 778,"value": 889},{"import": 1526,"src": 288,"name": "reset","kind": "const","type": 337,"value": 496},{"import": 1526,"src": 289,"name": "wait","kind": "const","type": 339,"value": 497},{"import": 1526,"src": 285,"name": "init","kind": "const","type": 337,"value": 493},{"import": 1526,"src": 286,"name": "isSet","kind": "const","type": 338,"value": 494},{"import": 1526,"src": 287,"name": "set","kind": "const","type": 337,"value": 495},{"import": 1526,"src": 291,"name": "deinit","kind": "const","type": 337,"value": 501},{"import": 1526,"src": 1053,"name": "EventState","kind": "const","type": 778,"value": 884},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap"},{"import": 1384,"src": 260,"name": "new"},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load"},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 802},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order"},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw"},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 872,"value": 1200},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set","kind": "const","type": 459,"value": 758},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1528,"value": 1298},{"import": 1384,"src": 260,"name": "new"},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load"},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1529,"value": 1299},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1530,"value": 1300},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 922,"value": 1221},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1531,"value": 1301},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 475,"value": 679},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1532,"value": 1302},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1533,"value": 1303},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1534,"value": 1304},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1535,"value": 1305},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 869,"value": 1197},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1536,"value": 1306},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 527,"value": 745},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1537,"value": 1307},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1538,"value": 1308},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1539,"value": 1309},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1540,"value": 1310},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 852,"value": 1189},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1541,"value": 1311},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 566,"value": 809},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1542,"value": 1312},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1543,"value": 1313},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1544,"value": 1314},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1545,"value": 1315},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 777,"value": 1169},{"import": 1472,"src": 1021,"name": "clone"},{"import": 1472,"src": 1022,"name": "ensureCapacity"},{"import": 1472,"src": 1023,"name": "getOrPut"},{"import": 1472,"src": 1024,"name": "putNoClobber"},{"import": 1472,"src": 1025,"name": "iterator"},{"import": 1472,"src": 1026,"name": "KV","kind": "const","type": 778,"value": 1546},{"import": 1472,"src": 1027,"name": "get"},{"import": 1472,"src": 1028,"name": "GetOrPutResult"},{"import": 1472,"src": 1029,"name": "clear"},{"import": 1472,"src": 1030,"name": "putAssumeCapacity"},{"import": 1472,"src": 1031,"name": "deinit"},{"import": 1472,"src": 1032,"name": "getOrPutValue"},{"import": 1472,"src": 1033,"name": "getValue"},{"import": 1472,"src": 1034,"name": "put"},{"import": 1472,"src": 1035,"name": "Iterator"},{"import": 1472,"src": 1036,"name": "init"},{"import": 1472,"src": 1037,"name": "count"},{"import": 1472,"src": 1038,"name": "contains"},{"import": 1472,"src": 1039,"name": "remove"},{"import": 1472,"src": 1040,"name": "removeAssertDiscard"},{"import": 1472,"src": 1041,"name": "optimizedCapacity"},{"import": 1472,"src": 1042,"name": "initCapacity"},{"import": 1472,"src": 1043,"name": "keyToIndex"},{"import": 1472,"src": 1044,"name": "Self"},{"import": 1472,"src": 1045,"name": "autoCapacity"},{"import": 1472,"src": 1046,"name": "incrementModificationCount"},{"import": 1472,"src": 1047,"name": "constrainIndex"},{"import": 1472,"src": 1048,"name": "InternalPutResult"},{"import": 1472,"src": 1049,"name": "internalPut"},{"import": 1472,"src": 1050,"name": "Entry","kind": "const","type": 778,"value": 1547},{"import": 1472,"src": 1051,"name": "ensureCapacityExact"},{"import": 1472,"src": 1052,"name": "internalGet"},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 540,"value": 774},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 612,"value": 869},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 797},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 542,"value": 776},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 972},{"import": 1448,"src": 911,"name": "set"},{"import": 1448,"src": 37,"name": "ensureCapacity","kind": "const","type": 107,"value": 110},{"import": 1448,"src": 912,"name": "setOrError"},{"import": 1448,"src": 913,"name": "appendAssumeCapacity"},{"import": 1448,"src": 914,"name": "swapRemoveOrError"},{"import": 1448,"src": 915,"name": "at"},{"import": 1448,"src": 38,"name": "capacity","kind": "const","type": 108,"value": 111},{"import": 1448,"src": 916,"name": "swapRemove"},{"import": 1448,"src": 917,"name": "iterator"},{"import": 1448,"src": 918,"name": "pop"},{"import": 1448,"src": 919,"name": "toSliceConst"},{"import": 1448,"src": 920,"name": "appendSlice"},{"import": 1448,"src": 921,"name": "insertSlice"},{"import": 1448,"src": 922,"name": "fromOwnedSlice"},{"import": 1448,"src": 923,"name": "SliceConst"},{"import": 1448,"src": 40,"name": "append","kind": "const","type": 105,"value": 108},{"import": 1448,"src": 172,"name": "resize"},{"import": 1448,"src": 924,"name": "deinit"},{"import": 1448,"src": 925,"name": "insert"},{"import": 1448,"src": 41,"name": "addOne","kind": "const","type": 106,"value": 109},{"import": 1448,"src": 42,"name": "addOneAssumeCapacity","kind": "const","type": 110,"value": 113},{"import": 1448,"src": 926,"name": "Iterator"},{"import": 1448,"src": 927,"name": "shrink"},{"import": 1448,"src": 928,"name": "Slice","kind": "const","type": 778,"value": 1062},{"import": 1448,"src": 73,"name": "toOwnedSlice","kind": "const","type": 111,"value": 114},{"import": 1448,"src": 929,"name": "orderedRemove"},{"import": 1448,"src": 72,"name": "init","kind": "const","type": 92,"value": 95},{"import": 1448,"src": 110,"name": "count","kind": "const","type": 108,"value": 198},{"import": 1448,"src": 930,"name": "popOrNull"},{"import": 1448,"src": 45,"name": "toSlice"},{"import": 1448,"src": 931,"name": "Self","kind": "const","type": 778,"value": 905},{"import": 1448,"src": 911,"name": "set"},{"import": 1448,"src": 37,"name": "ensureCapacity","kind": "const","type": 100,"value": 103},{"import": 1448,"src": 912,"name": "setOrError"},{"import": 1448,"src": 913,"name": "appendAssumeCapacity"},{"import": 1448,"src": 914,"name": "swapRemoveOrError"},{"import": 1448,"src": 915,"name": "at"},{"import": 1448,"src": 38,"name": "capacity","kind": "const","type": 101,"value": 104},{"import": 1448,"src": 916,"name": "swapRemove"},{"import": 1448,"src": 917,"name": "iterator"},{"import": 1448,"src": 918,"name": "pop"},{"import": 1448,"src": 919,"name": "toSliceConst"},{"import": 1448,"src": 920,"name": "appendSlice"},{"import": 1448,"src": 921,"name": "insertSlice"},{"import": 1448,"src": 922,"name": "fromOwnedSlice"},{"import": 1448,"src": 923,"name": "SliceConst"},{"import": 1448,"src": 40,"name": "append","kind": "const","type": 98,"value": 101},{"import": 1448,"src": 172,"name": "resize","kind": "const","type": 232,"value": 287},{"import": 1448,"src": 924,"name": "deinit"},{"import": 1448,"src": 925,"name": "insert"},{"import": 1448,"src": 41,"name": "addOne","kind": "const","type": 99,"value": 102},{"import": 1448,"src": 42,"name": "addOneAssumeCapacity","kind": "const","type": 103,"value": 106},{"import": 1448,"src": 926,"name": "Iterator"},{"import": 1448,"src": 927,"name": "shrink"},{"import": 1448,"src": 928,"name": "Slice","kind": "const","type": 778,"value": 855},{"import": 1448,"src": 73,"name": "toOwnedSlice","kind": "const","type": 233,"value": 288},{"import": 1448,"src": 929,"name": "orderedRemove"},{"import": 1448,"src": 72,"name": "init","kind": "const","type": 95,"value": 98},{"import": 1448,"src": 110,"name": "count","kind": "const","type": 101,"value": 196},{"import": 1448,"src": 930,"name": "popOrNull"},{"import": 1448,"src": 45,"name": "toSlice","kind": "const","type": 97,"value": 100},{"import": 1448,"src": 931,"name": "Self","kind": "const","type": 778,"value": 907},{"import": 1448,"src": 911,"name": "set"},{"import": 1448,"src": 37,"name": "ensureCapacity","kind": "const","type": 215,"value": 269},{"import": 1448,"src": 912,"name": "setOrError"},{"import": 1448,"src": 913,"name": "appendAssumeCapacity"},{"import": 1448,"src": 914,"name": "swapRemoveOrError"},{"import": 1448,"src": 915,"name": "at"},{"import": 1448,"src": 38,"name": "capacity","kind": "const","type": 216,"value": 270},{"import": 1448,"src": 916,"name": "swapRemove"},{"import": 1448,"src": 917,"name": "iterator"},{"import": 1448,"src": 918,"name": "pop"},{"import": 1448,"src": 919,"name": "toSliceConst"},{"import": 1448,"src": 920,"name": "appendSlice"},{"import": 1448,"src": 921,"name": "insertSlice"},{"import": 1448,"src": 922,"name": "fromOwnedSlice"},{"import": 1448,"src": 923,"name": "SliceConst"},{"import": 1448,"src": 40,"name": "append","kind": "const","type": 222,"value": 277},{"import": 1448,"src": 172,"name": "resize"},{"import": 1448,"src": 924,"name": "deinit"},{"import": 1448,"src": 925,"name": "insert"},{"import": 1448,"src": 41,"name": "addOne","kind": "const","type": 223,"value": 278},{"import": 1448,"src": 42,"name": "addOneAssumeCapacity","kind": "const","type": 224,"value": 279},{"import": 1448,"src": 926,"name": "Iterator"},{"import": 1448,"src": 927,"name": "shrink"},{"import": 1448,"src": 928,"name": "Slice","kind": "const","type": 778,"value": 1097},{"import": 1448,"src": 73,"name": "toOwnedSlice","kind": "const","type": 225,"value": 280},{"import": 1448,"src": 929,"name": "orderedRemove"},{"import": 1448,"src": 72,"name": "init","kind": "const","type": 214,"value": 268},{"import": 1448,"src": 110,"name": "count","kind": "const","type": 216,"value": 317},{"import": 1448,"src": 930,"name": "popOrNull"},{"import": 1448,"src": 45,"name": "toSlice"},{"import": 1448,"src": 931,"name": "Self","kind": "const","type": 778,"value": 908},{"import": 1448,"src": 911,"name": "set"},{"import": 1448,"src": 37,"name": "ensureCapacity","kind": "const","type": 83,"value": 86},{"import": 1448,"src": 912,"name": "setOrError"},{"import": 1448,"src": 913,"name": "appendAssumeCapacity"},{"import": 1448,"src": 914,"name": "swapRemoveOrError"},{"import": 1448,"src": 915,"name": "at"},{"import": 1448,"src": 38,"name": "capacity","kind": "const","type": 84,"value": 87},{"import": 1448,"src": 916,"name": "swapRemove"},{"import": 1448,"src": 917,"name": "iterator"},{"import": 1448,"src": 918,"name": "pop"},{"import": 1448,"src": 919,"name": "toSliceConst"},{"import": 1448,"src": 920,"name": "appendSlice"},{"import": 1448,"src": 921,"name": "insertSlice"},{"import": 1448,"src": 922,"name": "fromOwnedSlice"},{"import": 1448,"src": 923,"name": "SliceConst"},{"import": 1448,"src": 40,"name": "append","kind": "const","type": 81,"value": 84},{"import": 1448,"src": 172,"name": "resize"},{"import": 1448,"src": 924,"name": "deinit"},{"import": 1448,"src": 925,"name": "insert"},{"import": 1448,"src": 41,"name": "addOne","kind": "const","type": 82,"value": 85},{"import": 1448,"src": 42,"name": "addOneAssumeCapacity","kind": "const","type": 86,"value": 89},{"import": 1448,"src": 926,"name": "Iterator"},{"import": 1448,"src": 927,"name": "shrink"},{"import": 1448,"src": 928,"name": "Slice","kind": "const","type": 778,"value": 1043},{"import": 1448,"src": 73,"name": "toOwnedSlice","kind": "const","type": 87,"value": 90},{"import": 1448,"src": 929,"name": "orderedRemove"},{"import": 1448,"src": 72,"name": "init","kind": "const","type": 80,"value": 83},{"import": 1448,"src": 110,"name": "count","kind": "const","type": 84,"value": 191},{"import": 1448,"src": 930,"name": "popOrNull"},{"import": 1448,"src": 45,"name": "toSlice"},{"import": 1448,"src": 931,"name": "Self","kind": "const","type": 778,"value": 910},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 474,"value": 678},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 476,"value": 680},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 819},{"import": 1447,"src": 262,"name": "get"},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 1281},{"import": 1394,"src": 440,"name": "get","kind": "const","type": 529,"value": 747},{"import": 1394,"src": 474,"name": "loadImports","kind": "const","type": 529,"value": 848},{"import": 1394,"src": 908,"name": "instance","kind": "var","type": 936,"value": null},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 465,"value": 664},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 539,"value": 773},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 816},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 467,"value": 666},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 963},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 597,"value": 849},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 652,"value": 918},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 809},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 599,"value": 851},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 1306},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 526,"value": 744},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 596,"value": 847},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 820},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 528,"value": 746},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 802},{"import": 939,"src": 1054,"name": "pi_2","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1055,"name": "ceil","kind": "const","type": 1557,"value": 1316},{"import": 939,"src": 1057,"name": "isNan","kind": "const","type": 1558,"value": 1317},{"import": 939,"src": 1058,"name": "isSignalNan","kind": "const","type": 1559,"value": 1318},{"import": 939,"src": 1060,"name": "cosh","kind": "const","type": 1560,"value": 1319},{"import": 939,"src": 1062,"name": "floor","kind": "const","type": 1561,"value": 1320},{"import": 939,"src": 1063,"name": "nan_u128","kind": "const","type": 1296,"value": null},{"import": 939,"src": 1064,"name": "modf64_result","kind": "const","type": 778,"value": 829},{"import": 939,"src": 1065,"name": "hypot","kind": "const","type": 1562,"value": 1321},{"import": 939,"src": 1067,"name": "inf_u16","kind": "const","type": 909,"value": null},{"import": 939,"src": 1068,"name": "absFloat","kind": "const","type": 1563,"value": 1322},{"import": 939,"src": 1069,"name": "f64_true_min","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1070,"name": "rotr","kind": "const","type": 1564,"value": 1323},{"import": 939,"src": 491,"name": "absCast","kind": "const","type": 1565,"value": 1324},{"import": 939,"src": 1071,"name": "cbrt","kind": "const","type": 1566,"value": 1325},{"import": 939,"src": 1073,"name": "round","kind": "const","type": 1567,"value": 1326},{"import": 939,"src": 1075,"name": "nan_f32","kind": "const","type": 814,"value": null},{"import": 939,"src": 240,"name": "divFloor","kind": "const","type": 1568,"value": 1327},{"import": 939,"src": 242,"name": "ceilPowerOfTwo","kind": "const","type": 1569,"value": 1328},{"import": 939,"src": 483,"name": "mulWide","kind": "const","type": 1570,"value": 1329},{"import": 939,"src": 1076,"name": "sinh","kind": "const","type": 1571,"value": 1330},{"import": 939,"src": 1078,"name": "inf_u32","kind": "const","type": 807,"value": null},{"import": 939,"src": 489,"name": "shr","kind": "const","type": 1572,"value": 1331},{"import": 939,"src": 1079,"name": "asinh","kind": "const","type": 1573,"value": 1332},{"import": 939,"src": 566,"name": "maxInt","kind": "const","type": 871,"value": 1199},{"import": 939,"src": 1081,"name": "sin","kind": "const","type": 1574,"value": 1333},{"import": 939,"src": 1083,"name": "f64_toint","kind": "const","type": 1556,"value": null},{"import": 939,"src": 168,"name": "cast","kind": "const","type": 1575,"value": 1334},{"import": 939,"src": 1084,"name": "f128_true_min","kind": "const","type": 1576,"value": null},{"import": 939,"src": 1085,"name": "two_sqrtpi","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1086,"name": "acosh","kind": "const","type": 1577,"value": 1335},{"import": 939,"src": 1088,"name": "frexp32_result","kind": "const","type": 778,"value": 940},{"import": 939,"src": 1089,"name": "Complex","kind": "const","type": 1578,"value": 1336},{"import": 939,"src": 195,"name": "raiseOverflow","kind": "const","type": 3,"value": 364},{"import": 939,"src": 1091,"name": "inf_f128","kind": "const","type": 1576,"value": null},{"import": 939,"src": 1092,"name": "inf","kind": "const","type": 1579,"value": 1337},{"import": 939,"src": 554,"name": "Log2Int","kind": "const","type": 835,"value": 1184},{"import": 939,"src": 1094,"name": "log2_int","kind": "const","type": 1580,"value": 1338},{"import": 939,"src": 248,"name": "add","kind": "const","type": 1581,"value": 1339},{"import": 939,"src": 1095,"name": "atanh","kind": "const","type": 1582,"value": 1340},{"import": 939,"src": 1097,"name": "lossyCast","kind": "const","type": 1583,"value": 1341},{"import": 939,"src": 1098,"name": "modf","kind": "const","type": 1584,"value": 1342},{"import": 939,"src": 244,"name": "mod","kind": "const","type": 1585,"value": 1343},{"import": 939,"src": 1100,"name": "f32_max","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1101,"name": "two_pi","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1102,"name": "sqrt1_2","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1103,"name": "tan","kind": "const","type": 1586,"value": 1344},{"import": 939,"src": 1105,"name": "ilogb","kind": "const","type": 1587,"value": 1345},{"import": 939,"src": 1107,"name": "cos","kind": "const","type": 1588,"value": 1346},{"import": 939,"src": 1109,"name": "f64_epsilon","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1110,"name": "inf_u64","kind": "const","type": 802,"value": null},{"import": 939,"src": 1111,"name": "asin","kind": "const","type": 1589,"value": 1347},{"import": 939,"src": 1113,"name": "isPowerOfTwo","kind": "const","type": 1590,"value": 1348},{"import": 939,"src": 1114,"name": "nan_u16","kind": "const","type": 909,"value": null},{"import": 939,"src": 1115,"name": "inf_f32","kind": "const","type": 814,"value": null},{"import": 939,"src": 1116,"name": "f32_true_min","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1117,"name": "fabs","kind": "const","type": 1563,"value": 1322},{"import": 939,"src": 1118,"name": "complex","kind": "const","type": 778,"value": 1591},{"import": 939,"src": 1119,"name": "atan","kind": "const","type": 1592,"value": 1349},{"import": 939,"src": 197,"name": "raiseDivByZero","kind": "const","type": 3,"value": 366},{"import": 939,"src": 1121,"name": "snan","kind": "const","type": 1593,"value": 1350},{"import": 939,"src": 1123,"name": "f16_true_min","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1124,"name": "isNegativeInf","kind": "const","type": 1594,"value": 1351},{"import": 939,"src": 1126,"name": "log10e","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1127,"name": "f32_toint","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1128,"name": "pow","kind": "const","type": 1595,"value": 1352},{"import": 939,"src": 1130,"name": "pi_4","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1131,"name": "log2","kind": "const","type": 1596,"value": 1353},{"import": 939,"src": 1133,"name": "inf_f64","kind": "const","type": 830,"value": null},{"import": 939,"src": 1134,"name": "log2_int_ceil","kind": "const","type": 1597,"value": 1354},{"import": 939,"src": 1135,"name": "scalbn","kind": "const","type": 1598,"value": 1355},{"import": 939,"src": 1137,"name": "e","kind": "const","type": 1556,"value": null},{"import": 939,"src": 245,"name": "ceilPowerOfTwoPromote","kind": "const","type": 1599,"value": 1356},{"import": 939,"src": 1138,"name": "f16_min","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1139,"name": "expm1","kind": "const","type": 1600,"value": 1357},{"import": 939,"src": 1141,"name": "signbit","kind": "const","type": 1601,"value": 1358},{"import": 939,"src": 250,"name": "shlExact","kind": "const","type": 1602,"value": 1359},{"import": 939,"src": 1142,"name": "nan_f128","kind": "const","type": 1576,"value": null},{"import": 939,"src": 1143,"name": "frexp","kind": "const","type": 1603,"value": 1360},{"import": 939,"src": 1144,"name": "f32_min","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1145,"name": "frexp64_result","kind": "const","type": 778,"value": 878},{"import": 939,"src": 1146,"name": "f16_epsilon","kind": "const","type": 1556,"value": null},{"import": 939,"src": 246,"name": "rem","kind": "const","type": 1604,"value": 1361},{"import": 939,"src": 1147,"name": "ln10","kind": "const","type": 1556,"value": null},{"import": 939,"src": 249,"name": "sub","kind": "const","type": 1605,"value": 1362},{"import": 939,"src": 1148,"name": "floatMantissaBits","kind": "const","type": 1606,"value": 1363},{"import": 939,"src": 571,"name": "max","kind": "const","type": 893,"value": 1208},{"import": 939,"src": 1149,"name": "nan_u32","kind": "const","type": 807,"value": null},{"import": 939,"src": 1150,"name": "acos","kind": "const","type": 1607,"value": 1364},{"import": 939,"src": 1152,"name": "f16_max","kind": "const","type": 843,"value": null},{"import": 939,"src": 247,"name": "floorPowerOfTwo","kind": "const","type": 927,"value": 1223},{"import": 939,"src": 1153,"name": "exp","kind": "const","type": 1608,"value": 1365},{"import": 939,"src": 1155,"name": "f64_min","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1156,"name": "log10","kind": "const","type": 1609,"value": 1366},{"import": 939,"src": 1158,"name": "nan_f16","kind": "const","type": 1610,"value": null},{"import": 939,"src": 1159,"name": "f128_toint","kind": "const","type": 1576,"value": null},{"import": 939,"src": 1160,"name": "IntFittingRange","kind": "const","type": 1611,"value": 1367},{"import": 939,"src": 1161,"name": "nan_u64","kind": "const","type": 802,"value": null},{"import": 939,"src": 487,"name": "rotl","kind": "const","type": 1612,"value": 1368},{"import": 939,"src": 1162,"name": "sqrt2","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1163,"name": "log","kind": "const","type": 1613,"value": 1369},{"import": 939,"src": 201,"name": "raiseUnderflow","kind": "const","type": 3,"value": 370},{"import": 939,"src": 67,"name": "min","kind": "const","type": 934,"value": 1225},{"import": 939,"src": 563,"name": "minInt","kind": "const","type": 863,"value": 1195},{"import": 939,"src": 1165,"name": "negate","kind": "const","type": 1614,"value": 1370},{"import": 939,"src": 1166,"name": "alignCast","kind": "const","type": 1615,"value": 1371},{"import": 939,"src": 1167,"name": "f16_toint","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1168,"name": "isInf","kind": "const","type": 1616,"value": 1372},{"import": 939,"src": 1169,"name": "modf32_result","kind": "const","type": 778,"value": 911},{"import": 939,"src": 1170,"name": "f128_epsilon","kind": "const","type": 1576,"value": null},{"import": 939,"src": 151,"name": "mul","kind": "const","type": 1617,"value": 1373},{"import": 939,"src": 1171,"name": "f128_min","kind": "const","type": 1576,"value": null},{"import": 939,"src": 251,"name": "divExact","kind": "const","type": 1618,"value": 1374},{"import": 939,"src": 1172,"name": "negateCast","kind": "const","type": 1619,"value": 1375},{"import": 939,"src": 1173,"name": "isFinite","kind": "const","type": 1620,"value": 1376},{"import": 939,"src": 1175,"name": "nan_f64","kind": "const","type": 830,"value": null},{"import": 939,"src": 1176,"name": "f128_max","kind": "const","type": 1576,"value": null},{"import": 939,"src": 1177,"name": "f32_epsilon","kind": "const","type": 1556,"value": null},{"import": 939,"src": 520,"name": "forceEval","kind": "const","type": 1621,"value": 1377},{"import": 939,"src": 1178,"name": "isNormal","kind": "const","type": 1622,"value": 1378},{"import": 939,"src": 204,"name": "raiseInvalid","kind": "const","type": 3,"value": 373},{"import": 939,"src": 488,"name": "shl","kind": "const","type": 1623,"value": 1379},{"import": 939,"src": 1180,"name": "ln2","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1181,"name": "big","kind": "const","type": 778,"value": 1624},{"import": 939,"src": 1182,"name": "nan","kind": "const","type": 1625,"value": 1380},{"import": 939,"src": 1184,"name": "f64_max","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1185,"name": "inf_f16","kind": "const","type": 1610,"value": null},{"import": 939,"src": 205,"name": "raiseInexact","kind": "const","type": 3,"value": 374},{"import": 939,"src": 1186,"name": "inf_u128","kind": "const","type": 1296,"value": null},{"import": 939,"src": 1187,"name": "copysign","kind": "const","type": 1626,"value": 1381},{"import": 939,"src": 1189,"name": "fma","kind": "const","type": 1627,"value": 1382},{"import": 939,"src": 1191,"name": "isPositiveInf","kind": "const","type": 1628,"value": 1383},{"import": 939,"src": 1192,"name": "sqrt","kind": "const","type": 1629,"value": 1384},{"import": 939,"src": 1194,"name": "tanh","kind": "const","type": 1630,"value": 1385},{"import": 939,"src": 1196,"name": "approxEq","kind": "const","type": 1631,"value": 1386},{"import": 939,"src": 1197,"name": "trunc","kind": "const","type": 1632,"value": 1387},{"import": 939,"src": 1199,"name": "floatExponentBits","kind": "const","type": 1633,"value": 1388},{"import": 939,"src": 1200,"name": "one_pi","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1201,"name": "exp2","kind": "const","type": 1634,"value": 1389},{"import": 939,"src": 1203,"name": "log1p","kind": "const","type": 1635,"value": 1390},{"import": 939,"src": 1205,"name": "AlignCastError","kind": "const","type": 778,"value": 1636},{"import": 939,"src": 1206,"name": "pi","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1207,"name": "log2e","kind": "const","type": 1556,"value": null},{"import": 939,"src": 1208,"name": "powi","kind": "const","type": 1637,"value": 1391},{"import": 939,"src": 252,"name": "absInt","kind": "const","type": 1638,"value": 1392},{"import": 939,"src": 253,"name": "divTrunc","kind": "const","type": 1639,"value": 1393},{"import": 939,"src": 1210,"name": "atan2","kind": "const","type": 1640,"value": 1394},{"import": 939,"src": 561,"name": "Min","kind": "const","type": 861,"value": 1193},{"import": 939,"src": 1212,"name": "ln","kind": "const","type": 1641,"value": 1395},{"import": 939,"src": 192,"name": "testAbsFloat","kind": "const","type": 3,"value": 361},{"import": 939,"src": 193,"name": "testDivFloor","kind": "const","type": 3,"value": 362},{"import": 939,"src": 194,"name": "testCeilPowerOfTwo","kind": "const","type": 263,"value": 363},{"import": 939,"src": 1214,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 939,"src": 1215,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 939,"src": 196,"name": "testMod","kind": "const","type": 3,"value": 365},{"import": 939,"src": 1216,"name": "TypeId","kind": "const","type": 778,"value": 825},{"import": 939,"src": 198,"name": "testCeilPowerOfTwoPromote","kind": "const","type": 3,"value": 367},{"import": 939,"src": 199,"name": "testRem","kind": "const","type": 3,"value": 368},{"import": 939,"src": 200,"name": "testFloorPowerOfTwo","kind": "const","type": 3,"value": 369},{"import": 939,"src": 202,"name": "testOverflow","kind": "const","type": 3,"value": 371},{"import": 939,"src": 203,"name": "testDivExact","kind": "const","type": 3,"value": 372},{"import": 939,"src": 1217,"name": "testing","kind": "const","type": 778,"value": 1462},{"import": 939,"src": 1218,"name": "std","kind": "const","type": 778,"value": 851},{"import": 939,"src": 206,"name": "testAbsInt","kind": "const","type": 3,"value": 375},{"import": 939,"src": 207,"name": "testDivTrunc","kind": "const","type": 3,"value": 376},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1642,"value": 1396},{"import": 1384,"src": 260,"name": "new","kind": "const","type": 313,"value": 457},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get","kind": "const","type": 314,"value": 458},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1643,"value": 1397},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store","kind": "const","type": 1644,"value": 1398},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1645,"value": 1399},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1646,"value": 1400},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 921,"value": 1220},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap"},{"import": 1384,"src": 260,"name": "new"},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load"},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 779},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order"},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw"},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 932,"value": 1224},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set"},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap"},{"import": 1384,"src": 260,"name": "new"},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load"},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 802},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order"},{"import": 1384,"src": 269,"name": "compareSwap"},{"import": 1384,"src": 375,"name": "atomicRmw"},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 801,"value": 1176},{"import": 1384,"src": 274,"name": "fetchOr"},{"import": 1384,"src": 265,"name": "set","kind": "const","type": 534,"value": 763},{"import": 1384,"src": 270,"name": "fetchAdd"},{"import": 1384,"src": 891,"name": "compareSwapStrong"},{"import": 1384,"src": 268,"name": "swap","kind": "const","type": 1647,"value": 1401},{"import": 1384,"src": 260,"name": "new"},{"import": 1384,"src": 272,"name": "fetchAnd"},{"import": 1384,"src": 261,"name": "get"},{"import": 1384,"src": 276,"name": "min"},{"import": 1384,"src": 277,"name": "max"},{"import": 1384,"src": 273,"name": "fetchNand"},{"import": 1384,"src": 271,"name": "fetchSub"},{"import": 1384,"src": 275,"name": "fetchXor"},{"import": 1384,"src": 266,"name": "load","kind": "const","type": 1648,"value": 1402},{"import": 1384,"src": 892,"name": "Type","kind": "const","type": 778,"value": 807},{"import": 1384,"src": 267,"name": "store"},{"import": 1384,"src": 893,"name": "Order","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 269,"name": "compareSwap","kind": "const","type": 1649,"value": 1403},{"import": 1384,"src": 375,"name": "atomicRmw","kind": "const","type": 1650,"value": 1404},{"import": 1384,"src": 544,"name": "baseType","kind": "const","type": 810,"value": 1177},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 565,"value": 808},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 630,"value": 892},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 805},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 567,"value": 810},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 1315},{"import": 1447,"src": 259,"name": "new","kind": "const","type": 312,"value": 456},{"import": 1447,"src": 373,"name": "getPtr","kind": "const","type": 439,"value": 614},{"import": 1447,"src": 909,"name": "State","kind": "const","type": 778,"value": 800},{"import": 1447,"src": 262,"name": "get","kind": "const","type": 315,"value": 459},{"import": 1447,"src": 910,"name": "Type","kind": "const","type": 778,"value": 814},{"import": 1391,"src": 46,"name": "readByte","kind": "const","type": 47,"value": 49},{"import": 1391,"src": 44,"name": "readStruct","kind": "const","type": 1651,"value": 1405},{"import": 1391,"src": 894,"name": "readIntBig"},{"import": 1391,"src": 895,"name": "skipBytes"},{"import": 1391,"src": 68,"name": "read","kind": "const","type": 27,"value": 76},{"import": 1391,"src": 896,"name": "readAllAlloc"},{"import": 1391,"src": 897,"name": "readUntilDelimiterBuffer"},{"import": 1391,"src": 898,"name": "readIntForeign"},{"import": 1391,"src": 899,"name": "ReadFn","kind": "const","type": 778,"value": 27},{"import": 1391,"src": 900,"name": "readIntNative"},{"import": 1391,"src": 28,"name": "readFull","kind": "const","type": 27,"value": 28},{"import": 1391,"src": 27,"name": "readNoEof","kind": "const","type": 26,"value": 27},{"import": 1391,"src": 901,"name": "readByteSigned"},{"import": 1391,"src": 902,"name": "readVarInt"},{"import": 1391,"src": 903,"name": "Error","kind": "const","type": 778,"value": 953},{"import": 1391,"src": 31,"name": "readIntLittle","kind": "const","type": 1652,"value": 1406},{"import": 1391,"src": 904,"name": "readUntilDelimiterAlloc"},{"import": 1391,"src": 905,"name": "readAllBuffer"},{"import": 1391,"src": 906,"name": "readInt"},{"import": 1391,"src": 907,"name": "Self","kind": "const","type": 778,"value": 952},{"import": 1450,"src": 932,"name": "writeIntLittle"},{"import": 1450,"src": 933,"name": "writeInt"},{"import": 1450,"src": 8,"name": "print"},{"import": 1450,"src": 934,"name": "writeIntNative"},{"import": 1450,"src": 935,"name": "Error","kind": "const","type": 778,"value": 955},{"import": 1450,"src": 936,"name": "writeIntForeign"},{"import": 1450,"src": 90,"name": "writeByte"},{"import": 1450,"src": 937,"name": "writeByteNTimes"},{"import": 1450,"src": 938,"name": "writeIntBig"},{"import": 1450,"src": 91,"name": "write"},{"import": 1450,"src": 939,"name": "Self","kind": "const","type": 778,"value": 954},{"import": 956,"src": 1219,"name": "zell"},{"import": 956,"src": 1220,"name": "zio","kind": "const","type": 778,"value": 1654},{"import": 956,"src": 1221,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 956,"src": 1222,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 956,"src": 1223,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 956,"src": 1224,"name": "std"},{"import": 957,"src": 1225,"name": "test_functions","kind": "const","type": 1657,"value": null},{"import": 957,"src": 1226,"name": "AtomicRmwOp","kind": "const","type": 778,"value": 1658},{"import": 957,"src": 1227,"name": "position_independent_code"},{"import": 957,"src": 1228,"name": "link_libc","kind": "const","type": 842,"value": null},{"import": 957,"src": 1229,"name": "object_format"},{"import": 957,"src": 1230,"name": "arch","kind": "const","type": 1659,"value": null},{"import": 957,"src": 1231,"name": "FloatMode"},{"import": 957,"src": 1232,"name": "endian","kind": "const","type": 1660,"value": null},{"import": 957,"src": 1233,"name": "mode","kind": "const","type": 1661,"value": null},{"import": 957,"src": 1234,"name": "os","kind": "const","type": 1662,"value": null},{"import": 957,"src": 1235,"name": "TypeId","kind": "const","type": 778,"value": 825},{"import": 957,"src": 1236,"name": "AtomicOrder","kind": "const","type": 778,"value": 790},{"import": 957,"src": 1237,"name": "ObjectFormat"},{"import": 957,"src": 1238,"name": "abi"},{"import": 957,"src": 1239,"name": "StackTrace","kind": "const","type": 778,"value": 970},{"import": 957,"src": 1240,"name": "is_test","kind": "const","type": 842,"value": null},{"import": 957,"src": 1241,"name": "PanicFn","kind": "const","type": 778,"value": 0},{"import": 957,"src": 1242,"name": "Arch","kind": "const","type": 778,"value": 1663},{"import": 957,"src": 1243,"name": "glibc_version"},{"import": 957,"src": 1244,"name": "valgrind_support"},{"import": 957,"src": 1245,"name": "SubSystem"},{"import": 957,"src": 1246,"name": "subsystem"},{"import": 957,"src": 1247,"name": "Mode","kind": "const","type": 778,"value": 1661},{"import": 957,"src": 1248,"name": "Endian","kind": "const","type": 778,"value": 1660},{"import": 957,"src": 1249,"name": "strip_debug_info","kind": "const","type": 842,"value": null},{"import": 957,"src": 1250,"name": "Os","kind": "const","type": 778,"value": 1662},{"import": 957,"src": 1251,"name": "Version"},{"import": 957,"src": 1252,"name": "single_threaded","kind": "const","type": 842,"value": null},{"import": 957,"src": 1253,"name": "GlobalLinkage","kind": "const","type": 778,"value": 1664},{"import": 957,"src": 1254,"name": "Abi"},{"import": 957,"src": 1255,"name": "have_error_return_tracing"},{"import": 957,"src": 1256,"name": "TypeInfo","kind": "const","type": 778,"value": 1665},{"import": 957,"src": 1257,"name": "TestFn","kind": "const","type": 778,"value": 1666},{"import": 958,"src": 526,"name": "main","kind": "const","type": 1,"value": 1071},{"import": 958,"src": 1258,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 958,"src": 1259,"name": "io"},{"import": 958,"src": 1260,"name": "std","kind": "const","type": 778,"value": 851},{"import": 958,"src": 1261,"name": "test_fn_list","kind": "const","type": 1657,"value": null},{"import": 1671,"src": 1262,"name": "Error","kind": "const","type": 778,"value": 840},{"import": 1671,"src": 1263,"name": "Stream","kind": "const","type": 778,"value": 839},{"import": 1671,"src": 14,"name": "writeFn","kind": "const","type": 8,"value": 14},{"import": 1671,"src": 7,"name": "outStream","kind": "const","type": 7,"value": 7},{"import": 1671,"src": 1264,"name": "seekableStream"},{"import": 1671,"src": 1265,"name": "OpenError","kind": "const","type": 778,"value": 1672},{"import": 1671,"src": 64,"name": "getEndPos","kind": "const","type": 66,"value": 68},{"import": 1671,"src": 1266,"name": "mode"},{"import": 1671,"src": 128,"name": "isTty","kind": "const","type": 171,"value": 206},{"import": 1671,"src": 1267,"name": "stat"},{"import": 1671,"src": 104,"name": "openReadW","kind": "const","type": 150,"value": 163},{"import": 1671,"src": 1268,"name": "openReadC"},{"import": 1671,"src": 23,"name": "close","kind": "const","type": 22,"value": 23},{"import": 1671,"src": 1269,"name": "openWriteNoClobber"},{"import": 1671,"src": 13,"name": "openHandle","kind": "const","type": 13,"value": 13},{"import": 1671,"src": 1270,"name": "openWrite"},{"import": 1671,"src": 30,"name": "seekTo","kind": "const","type": 29,"value": 30},{"import": 1671,"src": 1271,"name": "Mode"},{"import": 1671,"src": 1272,"name": "UpdateTimesError"},{"import": 1671,"src": 1273,"name": "Stat"},{"import": 1671,"src": 1274,"name": "InStream","kind": "const","type": 778,"value": 984},{"import": 1671,"src": 89,"name": "read","kind": "const","type": 136,"value": 145},{"import": 1671,"src": 1275,"name": "seekFromEnd"},{"import": 1671,"src": 34,"name": "seekBy","kind": "const","type": 35,"value": 36},{"import": 1671,"src": 1276,"name": "ReadError","kind": "const","type": 778,"value": 953},{"import": 1671,"src": 1277,"name": "ModeError"},{"import": 1671,"src": 1278,"name": "SeekError","kind": "const","type": 778,"value": 1673},{"import": 1671,"src": 1279,"name": "getPos"},{"import": 1671,"src": 1280,"name": "writev_iovec"},{"import": 1671,"src": 1281,"name": "default_mode"},{"import": 1671,"src": 1282,"name": "openWriteModeW"},{"import": 1671,"src": 95,"name": "write","kind": "const","type": 142,"value": 154},{"import": 1671,"src": 26,"name": "inStream","kind": "const","type": 25,"value": 26},{"import": 1671,"src": 1283,"name": "OutStream","kind": "const","type": 778,"value": 966},{"import": 1671,"src": 1284,"name": "openWriteModeC"},{"import": 1671,"src": 1285,"name": "openWriteMode"},{"import": 1671,"src": 1286,"name": "openWriteNoClobberW"},{"import": 1671,"src": 1287,"name": "GetPosError","kind": "const","type": 778,"value": 1674},{"import": 1671,"src": 1288,"name": "StatError"},{"import": 1671,"src": 129,"name": "supportsAnsiEscapeCodes","kind": "const","type": 171,"value": 208},{"import": 1671,"src": 62,"name": "openRead","kind": "const","type": 63,"value": 65},{"import": 1671,"src": 1289,"name": "SeekableStream"},{"import": 1671,"src": 1290,"name": "WriteError","kind": "const","type": 778,"value": 840},{"import": 1671,"src": 1291,"name": "access"},{"import": 1671,"src": 1292,"name": "updateTimes"},{"import": 1671,"src": 1293,"name": "accessW"},{"import": 1671,"src": 1294,"name": "accessC"},{"import": 1671,"src": 1295,"name": "openWriteNoClobberC"},{"import": 1481,"src": 36,"name": "loadSections","kind": "const","type": 37,"value": 38},{"import": 1481,"src": 43,"name": "getSection","kind": "const","type": 1683,"value": 1407},{"import": 1481,"src": 24,"name": "init","kind": "const","type": 23,"value": 24},{"import": 1481,"src": 35,"name": "getPdbPath","kind": "const","type": 36,"value": 37},{"import": 1481,"src": 25,"name": "loadHeader","kind": "const","type": 24,"value": 25},{"import": 1481,"src": 33,"name": "loadOptionalHeader","kind": "const","type": 34,"value": 35},{"import": 1671,"src": 1296,"name": "Error","kind": "const","type": 778,"value": 953},{"import": 1671,"src": 1297,"name": "Stream","kind": "const","type": 778,"value": 952},{"import": 1671,"src": 106,"name": "readFn","kind": "const","type": 27,"value": 167},{"import": 1703,"src": 1298,"name": "Kind","kind": "const","type": 778,"value": 1013},{"import": 1452,"src": 56,"name": "next","kind": "const","type": 57,"value": 59},{"import": 1452,"src": 1299,"name": "rest"},{"import": 1452,"src": 115,"name": "isSplitByte","kind": "const","type": 157,"value": 176},{"import": 1479,"src": 1300,"name": "Stream","kind": "const","type": 778,"value": 787},{"import": 1479,"src": 1301,"name": "Error","kind": "const","type": 778,"value": 788},{"import": 1479,"src": 16,"name": "read","kind": "const","type": 15,"value": 16},{"import": 1479,"src": 1302,"name": "getSize"},{"import": 1479,"src": 76,"name": "readNullTermString","kind": "const","type": 94,"value": 97},{"import": 1479,"src": 77,"name": "seekBy","kind": "const","type": 104,"value": 107},{"import": 1479,"src": 87,"name": "seekTo","kind": "const","type": 132,"value": 138},{"import": 1479,"src": 66,"name": "init","kind": "const","type": 69,"value": 71},{"import": 1479,"src": 124,"name": "readFn","kind": "const","type": 72,"value": 187},{"import": 1479,"src": 1303,"name": "getFilePos"},{"import": 1459,"src": 1304,"name": "deinit"},{"import": 1492,"src": 97,"name": "init","kind": "const","type": 144,"value": 156},{"import": 1492,"src": 1305,"name": "deinit"},{"import": 1492,"src": 142,"name": "shrink","kind": "const","type": 147,"value": 233},{"import": 1492,"src": 140,"name": "createNode","kind": "const","type": 186,"value": 230},{"import": 1492,"src": 138,"name": "realloc","kind": "const","type": 184,"value": 228},{"import": 1492,"src": 139,"name": "alloc","kind": "const","type": 185,"value": 229},{"import": 1492,"src": 1306,"name": "BufNode","kind": "const","type": 778,"value": 1507},{"import": 1492,"src": 1307,"name": "reset"},{"import": 1492,"src": 126,"name": "init","kind": "const","type": 169,"value": 204},{"import": 1492,"src": 161,"name": "shrink","kind": "const","type": 147,"value": 266},{"import": 1492,"src": 159,"name": "realloc","kind": "const","type": 211,"value": 264},{"import": 1492,"src": 160,"name": "alloc","kind": "const","type": 212,"value": 265},{"import": 1465,"src": 153,"name": "nextCodepoint","kind": "const","type": 199,"value": 247},{"import": 1465,"src": 152,"name": "init","kind": "const","type": 198,"value": 246},{"import": 1465,"src": 1308,"name": "initComptime"},{"import": 1465,"src": 163,"name": "init","kind": "const","type": 218,"value": 272},{"import": 1465,"src": 165,"name": "initUnchecked","kind": "const","type": 219,"value": 274},{"import": 1465,"src": 166,"name": "iterator","kind": "const","type": 220,"value": 275},{"import": 1465,"src": 181,"name": "nextCodepointSlice","kind": "const","type": 244,"value": 316},{"import": 1465,"src": 167,"name": "nextCodepoint","kind": "const","type": 221,"value": 276},{"import": 1791,"src": 176,"name": "init","kind": "const","type": 238,"value": 304},{"import": 1791,"src": 177,"name": "acquire","kind": "const","type": 239,"value": 305},{"import": 1791,"src": 1309,"name": "deinit"},{"import": 1791,"src": 1310,"name": "Held","kind": "const","type": 778,"value": 1150},{"import": 1791,"src": 185,"name": "initCriticalSection","kind": "const","type": 251,"value": 335},{"import": 1791,"src": 178,"name": "release","kind": "const","type": 240,"value": 306},{"import": 1831,"src": 313,"name": "getCpus","kind": "const","type": 361,"value": 529},{"import": 1831,"src": 307,"name": "clear","kind": "const","type": 356,"value": 523},{"import": 1831,"src": 1311,"name": "TopologyError","kind": "const","type": 778,"value": 1832},{"import": 1831,"src": 311,"name": "getCpuCount","kind": "const","type": 360,"value": 527},{"import": 1831,"src": 309,"name": "set","kind": "const","type": 358,"value": 525},{"import": 1831,"src": 308,"name": "count","kind": "const","type": 357,"value": 524},{"import": 1831,"src": 310,"name": "get","kind": "const","type": 359,"value": 526},{"import": 1831,"src": 312,"name": "getNodeCount","kind": "const","type": 125,"value": 528},{"import": 1831,"src": 1312,"name": "Index","kind": "const","type": 778,"value": 846},{"import": 1835,"src": 321,"name": "fromBytes","kind": "const","type": 373,"value": 543},{"import": 1835,"src": 322,"name": "getBytes","kind": "const","type": 374,"value": 544},{"import": 1840,"src": 1313,"name": "Poller","kind": "const","type": 778,"value": 1837},{"import": 1840,"src": 1314,"name": "EdgeTrigger","kind": "const","type": 779,"value": null},{"import": 1840,"src": 1315,"name": "Disposable"},{"import": 1840,"src": 1316,"name": "Writeable","kind": "const","type": 779,"value": null},{"import": 1840,"src": 1317,"name": "Readable","kind": "const","type": 779,"value": null},{"import": 1840,"src": 327,"name": "readData","kind": "const","type": 379,"value": 549},{"import": 1840,"src": 1318,"name": "Flags","kind": "const","type": 778,"value": 779},{"import": 1840,"src": 367,"name": "getToken","kind": "const","type": 418,"value": 591},{"import": 1840,"src": 1319,"name": "OneShot"},{"import": 1845,"src": 1320,"name": "RawDataError","kind": "const","type": 778,"value": 1846},{"import": 1845,"src": 1321,"name": "Raw","kind": "const","type": 807,"value": null},{"import": 1845,"src": 330,"name": "new","kind": "const","type": 382,"value": 552},{"import": 1845,"src": 1322,"name": "RawConnectError","kind": "const","type": 778,"value": 1847},{"import": 1845,"src": 1323,"name": "Ipv6","kind": "const","type": 807,"value": null},{"import": 1845,"src": 357,"name": "getHandle","kind": "const","type": 409,"value": 580},{"import": 1845,"src": 465,"name": "writev","kind": "const","type": 581,"value": 824},{"import": 1845,"src": 332,"name": "close","kind": "const","type": 384,"value": 554},{"import": 1845,"src": 1324,"name": "Udp","kind": "const","type": 807,"value": null},{"import": 1845,"src": 339,"name": "listen","kind": "const","type": 391,"value": 561},{"import": 1845,"src": 342,"name": "accept","kind": "const","type": 394,"value": 564},{"import": 1845,"src": 1325,"name": "AcceptError","kind": "const","type": 778,"value": 1848},{"import": 1845,"src": 366,"name": "recv","kind": "const","type": 417,"value": 590},{"import": 1845,"src": 338,"name": "bind","kind": "const","type": 390,"value": 560},{"import": 1845,"src": 361,"name": "send","kind": "const","type": 413,"value": 585},{"import": 1845,"src": 1326,"name": "Tcp","kind": "const","type": 807,"value": null},{"import": 1845,"src": 1327,"name": "Option","kind": "const","type": 778,"value": 1226},{"import": 1845,"src": 422,"name": "sendmsg","kind": "const","type": 500,"value": 712},{"import": 1845,"src": 1328,"name": "ConnectError","kind": "const","type": 778,"value": 1849},{"import": 1845,"src": 346,"name": "recvfrom","kind": "const","type": 398,"value": 568},{"import": 1845,"src": 1329,"name": "Ipv4","kind": "const","type": 807,"value": null},{"import": 1845,"src": 431,"name": "read","kind": "const","type": 417,"value": 722},{"import": 1845,"src": 466,"name": "readv","kind": "const","type": 582,"value": 825},{"import": 1845,"src": 1330,"name": "Flags","kind": "const","type": 778,"value": 807},{"import": 1845,"src": 1331,"name": "ListenError","kind": "const","type": 778,"value": 1850},{"import": 1845,"src": 1332,"name": "Nonblock","kind": "const","type": 843,"value": null},{"import": 1845,"src": 1333,"name": "BindError","kind": "const","type": 778,"value": 1851},{"import": 1845,"src": 429,"name": "write","kind": "const","type": 413,"value": 720},{"import": 1845,"src": 1334,"name": "RawAcceptError","kind": "const","type": 778,"value": 1852},{"import": 1845,"src": 1335,"name": "OptionError","kind": "const","type": 778,"value": 1843},{"import": 1845,"src": 333,"name": "getOption","kind": "const","type": 385,"value": 555},{"import": 1845,"src": 421,"name": "fromHandle","kind": "const","type": 499,"value": 711},{"import": 1845,"src": 345,"name": "sendto","kind": "const","type": 397,"value": 567},{"import": 1845,"src": 423,"name": "recvmsg","kind": "const","type": 501,"value": 713},{"import": 1845,"src": 1336,"name": "DataError","kind": "const","type": 778,"value": 1853},{"import": 1845,"src": 1337,"name": "Error","kind": "const","type": 778,"value": 1842},{"import": 1845,"src": 340,"name": "connect","kind": "const","type": 392,"value": 562},{"import": 1845,"src": 359,"name": "getTokenMask","kind": "const","type": 1854,"value": 1408},{"import": 1845,"src": 331,"name": "setOption","kind": "const","type": 383,"value": 553},{"import": 1845,"src": 1338,"name": "buffer_cache","kind": "var","threadlocal": true,"type": 1855,"value": null},{"import": 1845,"src": 1339,"name": "Linger","kind": "const","type": 778,"value": 1844},{"import": 1845,"src": 463,"name": "toBackendBuffers","kind": "const","type": 1856,"value": 1409},{"import": 1860,"src": 335,"name": "parseIpv4","kind": "const","type": 387,"value": 557},{"import": 1860,"src": 348,"name": "parseIpv6","kind": "const","type": 401,"value": 571},{"import": 1860,"src": 425,"name": "isIpv6","kind": "const","type": 395,"value": 715},{"import": 1860,"src": 351,"name": "fromIpv6","kind": "const","type": 404,"value": 574},{"import": 1860,"src": 1340,"name": "Incoming","kind": "const","type": 778,"value": 1238},{"import": 1860,"src": 420,"name": "isIpv4","kind": "const","type": 395,"value": 710},{"import": 1860,"src": 337,"name": "fromIpv4","kind": "const","type": 389,"value": 559},{"import": 1860,"src": 341,"name": "new","kind": "const","type": 393,"value": 563},{"import": 1860,"src": 344,"name": "getSocket","kind": "const","type": 396,"value": 566},{"import": 1488,"src": 451,"name": "init","kind": "const","type": 550,"value": 786},{"import": 1488,"src": 484,"name": "next","kind": "const","type": 667,"value": 934},{"import": 1488,"src": 477,"name": "fill","kind": "const","type": 555,"value": 876},{"import": 1488,"src": 478,"name": "seed","kind": "const","type": 618,"value": 877},{"import": 1488,"src": 1341,"name": "jump"},{"import": 1885,"src": 404,"name": "fromBytes","kind": "const","type": 482,"value": 693},{"import": 1885,"src": 405,"name": "getBytes","kind": "const","type": 483,"value": 694},{"import": 1885,"src": 432,"name": "getToken","kind": "const","type": 506,"value": 723},{"import": 1885,"src": 410,"name": "readData","kind": "const","type": 488,"value": 699},{"import": 1885,"src": 1342,"name": "Poller","kind": "const","type": 778,"value": 1887},{"import": 1885,"src": 411,"name": "new","kind": "const","type": 490,"value": 701},{"import": 1885,"src": 427,"name": "getHandle","kind": "const","type": 504,"value": 717},{"import": 1885,"src": 1343,"name": "Linger","kind": "const","type": 778,"value": 1844},{"import": 1885,"src": 414,"name": "getOption","kind": "const","type": 493,"value": 704},{"import": 1885,"src": 456,"name": "fromHandle","kind": "const","type": 569,"value": 812},{"import": 1885,"src": 413,"name": "close","kind": "const","type": 492,"value": 703},{"import": 1885,"src": 417,"name": "listen","kind": "const","type": 496,"value": 707},{"import": 1885,"src": 419,"name": "accept","kind": "const","type": 498,"value": 709},{"import": 1885,"src": 464,"name": "recvmsg","kind": "const","type": 579,"value": 822},{"import": 1885,"src": 416,"name": "bind","kind": "const","type": 495,"value": 706},{"import": 1885,"src": 462,"name": "sendmsg","kind": "const","type": 577,"value": 820},{"import": 1885,"src": 418,"name": "connect","kind": "const","type": 497,"value": 708},{"import": 1885,"src": 428,"name": "getTokenMask","kind": "const","type": 1889,"value": 1410},{"import": 1885,"src": 412,"name": "setOption","kind": "const","type": 491,"value": 702},{"import": 1885,"src": 455,"name": "createSocket","kind": "const","type": 568,"value": 811},{"import": 1885,"src": 1344,"name": "init_error","kind": "var","type": 947,"value": null},{"import": 1885,"src": 459,"name": "getOverlappedResult","kind": "const","type": 574,"value": 817},{"import": 1885,"src": 454,"name": "WSAInitialize","kind": "const","type": 564,"value": 807},{"import": 1885,"src": 461,"name": "finishAccept","kind": "const","type": 576,"value": 819},{"import": 1885,"src": 1345,"name": "OverlappedResult","kind": "const","type": 778,"value": 1890},{"import": 1885,"src": 480,"name": "setUpdateContext","kind": "const","type": 634,"value": 897},{"import": 1885,"src": 460,"name": "finishConnect","kind": "const","type": 575,"value": 818},{"import": 1885,"src": 1346,"name": "is_overlapped","kind": "const","type": 812,"value": null},{"import": 1885,"src": 479,"name": "findWSAFunction","kind": "const","type": 1891,"value": 1411},{"import": 1885,"src": 1347,"name": "Ipv6","kind": "const","type": 778,"value": 1893},{"import": 1885,"src": 424,"name": "fromIpv6","kind": "const","type": 502,"value": 714},{"import": 1885,"src": 1348,"name": "Ipv4","kind": "const","type": 778,"value": 1894},{"import": 1885,"src": 415,"name": "fromIpv4","kind": "const","type": 494,"value": 705},{"import": 1896,"src": 255,"name": "hash","kind": "const","type": 308,"value": 450},{"import": 1896,"src": 433,"name": "init","kind": "const","type": 516,"value": 733},{"import": 1896,"src": 481,"name": "update","kind": "const","type": 644,"value": 907},{"import": 1896,"src": 435,"name": "final","kind": "const","type": 518,"value": 735},{"import": 1896,"src": 371,"name": "hash","kind": "const","type": 308,"value": 611},{"import": 1896,"src": 436,"name": "init","kind": "const","type": 519,"value": 736},{"import": 1896,"src": 437,"name": "update","kind": "const","type": 520,"value": 737},{"import": 1896,"src": 438,"name": "final","kind": "const","type": 521,"value": 738},{"import": 1896,"src": 468,"name": "round","kind": "const","type": 520,"value": 836},{"import": 1902,"src": 1349,"name": "parse"},{"import": 1488,"src": 486,"name": "next","kind": "const","type": 669,"value": 936},{"import": 1488,"src": 485,"name": "init","kind": "const","type": 668,"value": 935},{"import": 1912,"src": 531,"name": "activate","kind": "const","type": 747,"value": 1077},{"import": 1912,"src": 541,"name": "completeOne","kind": "const","type": 747,"value": 1104},{"import": 1912,"src": 533,"name": "end","kind": "const","type": 747,"value": 1080},{"import": 1912,"src": 530,"name": "start","kind": "const","type": 746,"value": 1076},{"import": 1384,"src": 545,"name": "Atomic","kind": "const","type": 781,"value": 1170},{"import": 1384,"src": 263,"name": "fence","kind": "const","type": 1917,"value": 1412},{"import": 1384,"src": 1350,"name": "AtomicOrder","kind": "const","type": 778,"value": 791},{"import": 1384,"src": 264,"name": "yield","kind": "const","type": 316,"value": 461},{"import": 1384,"src": 1351,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1384,"src": 1352,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1384,"src": 1353,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 1384,"src": 1354,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 1384,"src": 1355,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 1391,"src": 1356,"name": "stack_align"},{"import": 1391,"src": 1357,"name": "default_stack_size"},{"import": 1391,"src": 1358,"name": "stack_size"},{"import": 1391,"src": 547,"name": "InStream","kind": "const","type": 786,"value": 1172},{"import": 1391,"src": 1359,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1391,"src": 1360,"name": "root"},{"import": 1391,"src": 1361,"name": "math"},{"import": 1391,"src": 1362,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1391,"src": 1363,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1391,"src": 1364,"name": "Buffer"},{"import": 1391,"src": 1365,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1394,"src": 393,"name": "modify","kind": "const","type": 354,"value": 672},{"import": 1394,"src": 394,"name": "unmap","kind": "const","type": 355,"value": 673},{"import": 1394,"src": 1366,"name": "Thread","kind": "const","type": 778,"value": 1918},{"import": 1394,"src": 1367,"name": "getNodeSize"},{"import": 1394,"src": 392,"name": "map","kind": "const","type": 353,"value": 671},{"import": 1394,"src": 391,"name": "getHugePageSize","kind": "const","type": 352,"value": 667},{"import": 1394,"src": 390,"name": "getPageSize","kind": "const","type": 352,"value": 663},{"import": 1394,"src": 1368,"name": "CpuAffinity","kind": "const","type": 778,"value": 1919},{"import": 1394,"src": 548,"name": "DynamicLibrary","kind": "const","type": 792,"value": 1174},{"import": 1394,"src": 1369,"name": "PROCESSOR_GROUP_INFO","kind": "const","type": 778,"value": 1920},{"import": 1394,"src": 1370,"name": "QueryPerformanceCounter","kind": "const","type": 1921,"value": 1413},{"import": 1394,"src": 1371,"name": "GetNumaNodeProcessorMaskEx","kind": "const","type": 1922,"value": 1414},{"import": 1394,"src": 446,"name": "getAllocType","kind": "const","type": 78,"value": 780},{"import": 1394,"src": 1372,"name": "ERROR_INSUFFICIENT_BUFFER"},{"import": 1394,"src": 1373,"name": "CacheData"},{"import": 1394,"src": 1374,"name": "VirtualAllocExNuma","kind": "const","type": 1923,"value": 1415},{"import": 1394,"src": 560,"name": "GetCurrentThread","kind": "const","type": 858,"value": 1192},{"import": 1394,"src": 1375,"name": "LOGICAL_PROCESSOR_RELATIONSHIP","kind": "const","type": 778,"value": 807},{"import": 1394,"src": 1376,"name": "CacheUnified"},{"import": 1394,"src": 1377,"name": "CacheTrace"},{"import": 1394,"src": 1378,"name": "LoadLibraryA","kind": "const","type": 1924,"value": 1416},{"import": 1394,"src": 1379,"name": "WAIT_TIMEOUT","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1380,"name": "RelationProcessorPackage"},{"import": 1394,"src": 1381,"name": "PROCESSOR_RELATIONSHIP","kind": "const","type": 778,"value": 1925},{"import": 1394,"src": 1382,"name": "TOKEN_PRIVILEGES","kind": "const","type": 778,"value": 1926},{"import": 1394,"src": 1383,"name": "SetThreadGroupAffinity","kind": "const","type": 1927,"value": 1417},{"import": 1394,"src": 1384,"name": "Sleep","kind": "const","type": 1928,"value": 1418},{"import": 1394,"src": 1385,"name": "GetLargePageMinimum","kind": "const","type": 1929,"value": 1419},{"import": 1394,"src": 1386,"name": "current_process","kind": "var","type": 904,"value": null},{"import": 1394,"src": 1387,"name": "GetNumaHighestNodeNumber","kind": "const","type": 1930,"value": 1420},{"import": 1394,"src": 1388,"name": "GetThreadGroupAffinity","kind": "const","type": 1931,"value": 1421},{"import": 1394,"src": 1389,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 1394,"src": 1390,"name": "RelationCache"},{"import": 1394,"src": 1391,"name": "WAIT_OBJECT_0","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1392,"name": "RelationProcessorCore","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1393,"name": "RelationAll"},{"import": 1394,"src": 1394,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 1394,"src": 1395,"name": "GetModuleHandleA","kind": "const","type": 1924,"value": 1422},{"import": 1394,"src": 1396,"name": "CacheInstruction"},{"import": 1394,"src": 1397,"name": "NUMA_NODE_RELATIONSHIP","kind": "const","type": 778,"value": 1932},{"import": 1394,"src": 1398,"name": "OpenProcessToken","kind": "const","type": 1933,"value": 1423},{"import": 1394,"src": 574,"name": "GetCurrentProcess","kind": "const","type": 858,"value": 1211},{"import": 1394,"src": 1399,"name": "KAFFINITY","kind": "const","type": 778,"value": 812},{"import": 1394,"src": 1400,"name": "GetSystemTimePreciseAsFileTime","kind": "const","type": 1934,"value": 1424},{"import": 1394,"src": 1401,"name": "TOKEN_ADJUST_PRIVILEGES","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1402,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1394,"src": 1403,"name": "LUID","kind": "const","type": 778,"value": 1935},{"import": 1394,"src": 1404,"name": "FILETIME","kind": "const","type": 778,"value": 1936},{"import": 1394,"src": 1405,"name": "ERROR_SUCCESS","kind": "const","type": 843,"value": null},{"import": 1394,"src": 1406,"name": "GROUP_AFFINITY","kind": "const","type": 778,"value": 1898},{"import": 1394,"src": 1407,"name": "TOKEN_QUERY","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1408,"name": "LookupPrivilegeValueA","kind": "const","type": 1937,"value": 1425},{"import": 1394,"src": 1409,"name": "LUID_AND_ATTRIBUTES","kind": "const","type": 778,"value": 1938},{"import": 1394,"src": 1410,"name": "SwitchToThread","kind": "const","type": 1939,"value": 1426},{"import": 1394,"src": 1411,"name": "GetNumaAvailableMemoryNodeEx"},{"import": 1394,"src": 445,"name": "getProtectFlags","kind": "const","type": 78,"value": 779},{"import": 1394,"src": 1412,"name": "USHORT","kind": "const","type": 778,"value": 909},{"import": 1394,"src": 1413,"name": "AdjustTokenPrivileges","kind": "const","type": 1940,"value": 1427},{"import": 1394,"src": 1414,"name": "RelationNumaNode","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1415,"name": "GROUP_RELATIONSHIP","kind": "const","type": 778,"value": 1941},{"import": 1394,"src": 1416,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1394,"src": 1417,"name": "current_thread","kind": "var","threadlocal": true,"type": 857,"value": null},{"import": 1394,"src": 1418,"name": "WAIT_ABANDONED","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1419,"name": "VirtualProtect","kind": "const","type": 1943,"value": 1428},{"import": 1394,"src": 1420,"name": "SE_PRIVILEGE_ENABLED","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1421,"name": "QueryPerformanceFrequency","kind": "const","type": 1921,"value": 1429},{"import": 1394,"src": 1422,"name": "RelationGroup"},{"import": 1394,"src": 1423,"name": "GetLogicalProcessorInformationEx","kind": "const","type": 1944,"value": 1430},{"import": 1394,"src": 1424,"name": "CACHE_RELATIONSHIP","kind": "const","type": 778,"value": 1945},{"import": 1394,"src": 1425,"name": "WAIT_FAILED","kind": "const","type": 807,"value": null},{"import": 1394,"src": 1426,"name": "SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX","kind": "const","type": 778,"value": 1899},{"import": 1394,"src": 1427,"name": "PROCESSOR_CACHE_TYPE","kind": "const","type": 778,"value": 1946},{"import": 1447,"src": 256,"name": "popCount","kind": "const","type": 856,"value": 1191},{"import": 1447,"src": 1428,"name": "cache_line","kind": "const","type": 843,"value": null},{"import": 1447,"src": 562,"name": "ShrType","kind": "const","type": 862,"value": 1194},{"import": 1447,"src": 551,"name": "Lazy","kind": "const","type": 826,"value": 1180},{"import": 1447,"src": 570,"name": "CachePadded","kind": "const","type": 891,"value": 1207},{"import": 1447,"src": 556,"name": "IntType","kind": "const","type": 841,"value": 1186},{"import": 1447,"src": 257,"name": "nextPowerOfTwo","kind": "const","type": 912,"value": 1212},{"import": 1447,"src": 1429,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1447,"src": 1430,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 1447,"src": 1431,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1447,"src": 1432,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 1448,"src": 553,"name": "ArrayList","kind": "const","type": 831,"value": 1182},{"import": 1448,"src": 567,"name": "AlignedArrayList","kind": "const","type": 874,"value": 1201},{"import": 1448,"src": 1433,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1448,"src": 1434,"name": "Allocator","kind": "const","type": 778,"value": 1679},{"import": 1448,"src": 1435,"name": "Item"},{"import": 1448,"src": 1436,"name": "debug","kind": "const","type": 778,"value": 1459},{"import": 1448,"src": 1437,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1448,"src": 1438,"name": "testing"},{"import": 1448,"src": 1439,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1450,"src": 1440,"name": "BufferedInStream"},{"import": 1450,"src": 1441,"name": "Packing"},{"import": 1450,"src": 1442,"name": "mode","kind": "const","type": 1963,"value": null},{"import": 1450,"src": 1443,"name": "COutStream"},{"import": 1450,"src": 1444,"name": "BufferOutStream","kind": "const","type": 778,"value": 1463},{"import": 1450,"src": 1445,"name": "getStdOut"},{"import": 1450,"src": 1446,"name": "Serializer"},{"import": 1450,"src": 1447,"name": "BitOutStream"},{"import": 1450,"src": 1448,"name": "BufferedOutStream"},{"import": 1450,"src": 1449,"name": "BitInStream"},{"import": 1450,"src": 1450,"name": "Mode","kind": "const","type": 778,"value": 1963},{"import": 1450,"src": 1451,"name": "null_out_stream"},{"import": 1450,"src": 1452,"name": "BufferedAtomicFile"},{"import": 1450,"src": 1453,"name": "NullOutStream"},{"import": 1450,"src": 1454,"name": "readLineFrom"},{"import": 1450,"src": 1455,"name": "PeekStream"},{"import": 1450,"src": 1456,"name": "InStream","kind": "const","type": 786,"value": 1172},{"import": 1450,"src": 1457,"name": "is_async","kind": "const","type": 842,"value": null},{"import": 1450,"src": 1458,"name": "BufferedOutStreamCustom"},{"import": 1450,"src": 1459,"name": "Deserializer"},{"import": 1450,"src": 1460,"name": "readLine"},{"import": 1450,"src": 1461,"name": "SliceInStream"},{"import": 1450,"src": 1462,"name": "readLineSliceFrom"},{"import": 1450,"src": 1463,"name": "BufferedInStreamCustom"},{"import": 1450,"src": 1464,"name": "SliceSeekableInStream"},{"import": 1450,"src": 555,"name": "OutStream","kind": "const","type": 838,"value": 1185},{"import": 1450,"src": 1465,"name": "SliceOutStream"},{"import": 1450,"src": 1466,"name": "readFileAlloc"},{"import": 1450,"src": 1467,"name": "SeekableStream"},{"import": 1450,"src": 1468,"name": "writeFile"},{"import": 1450,"src": 1469,"name": "GetStdIoError","kind": "const","type": 778,"value": 1670},{"import": 1450,"src": 6,"name": "getStdErr","kind": "const","type": 6,"value": 6},{"import": 1450,"src": 1470,"name": "readLineSlice"},{"import": 1450,"src": 1471,"name": "CountingOutStream"},{"import": 1450,"src": 1472,"name": "getStdIn"},{"import": 1450,"src": 1473,"name": "readFileAllocAligned"},{"import": 1450,"src": 1474,"name": "builtin"},{"import": 1450,"src": 1475,"name": "math"},{"import": 1450,"src": 1476,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 1450,"src": 1477,"name": "debug"},{"import": 1450,"src": 1478,"name": "Buffer","kind": "const","type": 778,"value": 1460},{"import": 1450,"src": 1479,"name": "testing"},{"import": 1450,"src": 1480,"name": "null_out_stream_state"},{"import": 1450,"src": 1481,"name": "trait"},{"import": 1450,"src": 1482,"name": "fmt"},{"import": 1450,"src": 1483,"name": "root","kind": "const","type": 778,"value": 1964},{"import": 1450,"src": 1484,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1450,"src": 1485,"name": "c"},{"import": 1450,"src": 1486,"name": "meta"},{"import": 1450,"src": 1487,"name": "fs"},{"import": 1450,"src": 1488,"name": "File","kind": "const","type": 778,"value": 967},{"import": 1450,"src": 1489,"name": "assert"},{"import": 1450,"src": 1490,"name": "mem"},{"import": 1452,"src": 74,"name": "toSlice","kind": "const","type": 1965,"value": 1431},{"import": 1452,"src": 1491,"name": "subArrayPtr"},{"import": 1452,"src": 191,"name": "set","kind": "const","type": 1966,"value": 1432},{"import": 1452,"src": 1492,"name": "reverse"},{"import": 1452,"src": 1493,"name": "writeIntSliceBig"},{"import": 1452,"src": 171,"name": "readIntSliceNative","kind": "const","type": 1967,"value": 1433},{"import": 1452,"src": 1494,"name": "toBytes"},{"import": 1452,"src": 1495,"name": "rotate"},{"import": 1452,"src": 125,"name": "len","kind": "const","type": 1968,"value": 1434},{"import": 1452,"src": 1496,"name": "bytesToValue"},{"import": 1452,"src": 1497,"name": "writeIntForeign"},{"import": 1452,"src": 86,"name": "toSliceConst","kind": "const","type": 1969,"value": 1435},{"import": 1452,"src": 1498,"name": "separate"},{"import": 1452,"src": 1499,"name": "SplitIterator"},{"import": 1452,"src": 1500,"name": "max"},{"import": 1452,"src": 112,"name": "startsWith","kind": "const","type": 1970,"value": 1436},{"import": 1452,"src": 1501,"name": "indexOfScalarPos"},{"import": 1452,"src": 1502,"name": "writeIntSliceNative"},{"import": 1452,"src": 182,"name": "indexOf","kind": "const","type": 1971,"value": 1437},{"import": 1452,"src": 54,"name": "copy","kind": "const","type": 1972,"value": 1438},{"import": 1452,"src": 1503,"name": "writeInt"},{"import": 1452,"src": 1504,"name": "swap"},{"import": 1452,"src": 1505,"name": "lastIndexOfScalar"},{"import": 1452,"src": 1506,"name": "Compare"},{"import": 1452,"src": 1507,"name": "writeIntSliceLittle"},{"import": 1452,"src": 1508,"name": "min"},{"import": 1452,"src": 32,"name": "readIntNative","kind": "const","type": 1973,"value": 1439},{"import": 1452,"src": 1509,"name": "readIntSliceBig"},{"import": 1452,"src": 1510,"name": "indexOfAnyPos"},{"import": 1452,"src": 1511,"name": "writeIntLittle"},{"import": 1452,"src": 1512,"name": "trimLeft"},{"import": 1452,"src": 482,"name": "asBytes","kind": "const","type": 1974,"value": 1440},{"import": 1452,"src": 1513,"name": "readVarInt"},{"import": 1452,"src": 1514,"name": "isAligned"},{"import": 1452,"src": 1515,"name": "writeIntSlice"},{"import": 1452,"src": 58,"name": "dupe","kind": "const","type": 1975,"value": 1441},{"import": 1452,"src": 1516,"name": "join"},{"import": 1452,"src": 1517,"name": "concat"},{"import": 1452,"src": 1518,"name": "bytesAsValue"},{"import": 1452,"src": 1519,"name": "toNative"},{"import": 1452,"src": 186,"name": "indexOfPos","kind": "const","type": 1976,"value": 1442},{"import": 1452,"src": 1520,"name": "nativeToLittle"},{"import": 1452,"src": 145,"name": "alignBackward","kind": "const","type": 122,"value": 236},{"import": 1452,"src": 1521,"name": "readIntSlice"},{"import": 1452,"src": 1522,"name": "nativeTo"},{"import": 1452,"src": 1523,"name": "lastIndexOfAny"},{"import": 1452,"src": 1524,"name": "TokenIterator","kind": "const","type": 778,"value": 1015},{"import": 1452,"src": 1525,"name": "littleToNative"},{"import": 1452,"src": 1526,"name": "bigToNative"},{"import": 1452,"src": 102,"name": "alignForward","kind": "const","type": 122,"value": 161},{"import": 1452,"src": 1527,"name": "indexOfScalar"},{"import": 1452,"src": 458,"name": "nativeToBig","kind": "const","type": 1977,"value": 1443},{"import": 1452,"src": 1528,"name": "writeIntNative"},{"import": 1452,"src": 1529,"name": "Allocator","kind": "const","type": 778,"value": 1679},{"import": 1452,"src": 1530,"name": "compare"},{"import": 1452,"src": 1531,"name": "indexOfAny"},{"import": 1452,"src": 1532,"name": "readIntBig"},{"import": 1452,"src": 1533,"name": "lessThan"},{"import": 1452,"src": 1534,"name": "endsWith"},{"import": 1452,"src": 1535,"name": "trim"},{"import": 1452,"src": 55,"name": "tokenize","kind": "const","type": 56,"value": 58},{"import": 1452,"src": 1536,"name": "readIntForeign"},{"import": 1452,"src": 1537,"name": "writeIntSliceForeign"},{"import": 1452,"src": 1538,"name": "readIntSliceLittle","kind": "const","type": 1967,"value": 1433},{"import": 1452,"src": 1539,"name": "trimRight"},{"import": 1452,"src": 1540,"name": "secureZero"},{"import": 1452,"src": 1541,"name": "writeIntBig"},{"import": 1452,"src": 1542,"name": "page_size","kind": "const","type": 843,"value": null},{"import": 1452,"src": 1543,"name": "lastIndexOf"},{"import": 1452,"src": 1544,"name": "readIntLittle","kind": "const","type": 1973,"value": 1439},{"import": 1452,"src": 1545,"name": "readIntSliceForeign"},{"import": 1452,"src": 1546,"name": "copyBackwards"},{"import": 1452,"src": 1547,"name": "allEqual"},{"import": 1452,"src": 29,"name": "eql","kind": "const","type": 951,"value": 1230},{"import": 1452,"src": 1548,"name": "readInt"},{"import": 1452,"src": 1549,"name": "BytesAsValueReturnType"},{"import": 1452,"src": 1550,"name": "testWriteIntImpl"},{"import": 1452,"src": 1551,"name": "meta","kind": "const","type": 778,"value": 1489},{"import": 1452,"src": 1552,"name": "SubArrayPtrReturnType"},{"import": 1452,"src": 1553,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1452,"src": 1554,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1452,"src": 569,"name": "AsBytesReturnType","kind": "const","type": 887,"value": 1206},{"import": 1452,"src": 1555,"name": "math","kind": "const","type": 778,"value": 939},{"import": 1452,"src": 1556,"name": "debug","kind": "const","type": 778,"value": 1459},{"import": 1452,"src": 1557,"name": "testing"},{"import": 1452,"src": 1558,"name": "trait","kind": "const","type": 778,"value": 1978},{"import": 1452,"src": 1559,"name": "testReadIntImpl"},{"import": 1452,"src": 1560,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1452,"src": 1561,"name": "mem"},{"import": 1979,"src": 1562,"name": "open"},{"import": 1979,"src": 1563,"name": "lookup"},{"import": 1979,"src": 1564,"name": "close"},{"import": 1980,"src": 1565,"name": "Id"},{"import": 1980,"src": 1566,"name": "wait"},{"import": 1980,"src": 1567,"name": "Data","kind": "const","type": 778,"value": 1981},{"import": 1980,"src": 1568,"name": "cpuCount"},{"import": 1980,"src": 1569,"name": "Handle","kind": "const","type": 778,"value": 972},{"import": 1980,"src": 1570,"name": "handle"},{"import": 1980,"src": 1571,"name": "getCurrentId"},{"import": 1980,"src": 1572,"name": "CpuCountError"},{"import": 1980,"src": 1573,"name": "use_pthreads","kind": "const","type": 842,"value": null},{"import": 1980,"src": 1574,"name": "spawn"},{"import": 1980,"src": 1575,"name": "SpawnError"},{"import": 1982,"src": 1576,"name": "deinit"},{"import": 1982,"src": 1577,"name": "delete"},{"import": 1982,"src": 1578,"name": "put"},{"import": 1982,"src": 1579,"name": "iterator"},{"import": 1982,"src": 1580,"name": "allocator"},{"import": 1982,"src": 1581,"name": "init"},{"import": 1982,"src": 1582,"name": "count"},{"import": 1982,"src": 1583,"name": "exists"},{"import": 1982,"src": 1584,"name": "BufSetHashMap","kind": "const","type": 778,"value": 866},{"import": 1982,"src": 1585,"name": "copy"},{"import": 1982,"src": 1586,"name": "free"},{"import": 1983,"src": 1587,"name": "ELOOP"},{"import": 1458,"src": 1588,"name": "INotifyAddWatchError"},{"import": 1983,"src": 1589,"name": "EISDIR"},{"import": 1983,"src": 1590,"name": "EXDEV"},{"import": 1983,"src": 1591,"name": "ENOSR"},{"import": 1458,"src": 1592,"name": "ExecveError","kind": "const","type": 778,"value": 1984},{"import": 1458,"src": 1593,"name": "unlinkat"},{"import": 1983,"src": 1594,"name": "SIGTERM"},{"import": 1983,"src": 1595,"name": "ECONNABORTED"},{"import": 1458,"src": 1596,"name": "munmap"},{"import": 1983,"src": 1597,"name": "SIG_SGE"},{"import": 1458,"src": 1598,"name": "OpenError","kind": "const","type": 778,"value": 1985},{"import": 1983,"src": 1599,"name": "time_t"},{"import": 1458,"src": 1600,"name": "createNullDelimitedEnvMap"},{"import": 1983,"src": 1601,"name": "AT_REMOVEDIR"},{"import": 1458,"src": 1602,"name": "readlinkC"},{"import": 1458,"src": 1603,"name": "fork"},{"import": 1983,"src": 1604,"name": "ECONNREFUSED"},{"import": 1983,"src": 1605,"name": "ECANCELED"},{"import": 1458,"src": 1606,"name": "lseek_END"},{"import": 1458,"src": 1607,"name": "inotify_init1"},{"import": 1458,"src": 1608,"name": "epoll_create1"},{"import": 1986,"src": 1609,"name": "iovec"},{"import": 1458,"src": 1610,"name": "execvpeC"},{"import": 1458,"src": 1611,"name": "kqueue"},{"import": 1458,"src": 1612,"name": "PipeError"},{"import": 1458,"src": 1613,"name": "readlinkatC"},{"import": 1983,"src": 1614,"name": "ENETDOWN"},{"import": 1458,"src": 1615,"name": "environ"},{"import": 1983,"src": 1616,"name": "EADDRNOTAVAIL"},{"import": 1983,"src": 1617,"name": "EAGAIN"},{"import": 1983,"src": 1618,"name": "ENOSPC"},{"import": 1458,"src": 1619,"name": "KEventError"},{"import": 1458,"src": 1620,"name": "FutimensError"},{"import": 1458,"src": 1621,"name": "unlink"},{"import": 1458,"src": 1622,"name": "SeekError","kind": "const","type": 778,"value": 1673},{"import": 1983,"src": 1623,"name": "ECHILD"},{"import": 1983,"src": 1624,"name": "EPROTONOSUPPORT"},{"import": 1458,"src": 1625,"name": "getenvC"},{"import": 1983,"src": 1626,"name": "EPIPE"},{"import": 1458,"src": 1627,"name": "mprotect"},{"import": 1458,"src": 1628,"name": "readlink"},{"import": 1983,"src": 1629,"name": "ETXTBSY"},{"import": 1458,"src": 1630,"name": "socket"},{"import": 1983,"src": 1631,"name": "SIG_GET"},{"import": 1458,"src": 1632,"name": "freebsd"},{"import": 1458,"src": 1633,"name": "accessC"},{"import": 1986,"src": 1634,"name": "iovec_const"},{"import": 1983,"src": 1635,"name": "EPERM"},{"import": 1458,"src": 1636,"name": "symlinkat"},{"import": 1458,"src": 1637,"name": "SymLinkError"},{"import": 1458,"src": 1638,"name": "argv"},{"import": 1986,"src": 1639,"name": "FILE"},{"import": 1458,"src": 1640,"name": "exit"},{"import": 1458,"src": 1641,"name": "ForkError"},{"import": 1458,"src": 1642,"name": "inotify_rm_watch"},{"import": 1983,"src": 1643,"name": "ENODATA"},{"import": 1983,"src": 1644,"name": "ENFILE"},{"import": 1458,"src": 1645,"name": "ReadLinkError","kind": "const","type": 778,"value": 1987},{"import": 1458,"src": 1646,"name": "pipe2"},{"import": 1983,"src": 1647,"name": "EADDRINUSE"},{"import": 1458,"src": 1648,"name": "getrandom"},{"import": 1458,"src": 1649,"name": "gethostname"},{"import": 1983,"src": 1650,"name": "SIGINT"},{"import": 1983,"src": 1651,"name": "ENOTSUP"},{"import": 1458,"src": 1652,"name": "system","kind": "const","type": 778,"value": 1942},{"import": 1458,"src": 1653,"name": "sysctlbynameC"},{"import": 1983,"src": 1654,"name": "EWOULDBLOCK"},{"import": 1983,"src": 1655,"name": "ENOTDIR"},{"import": 1458,"src": 1656,"name": "darwin"},{"import": 1458,"src": 1657,"name": "SigaltstackError"},{"import": 1458,"src": 1658,"name": "uefi"},{"import": 1458,"src": 1659,"name": "listen"},{"import": 1983,"src": 1660,"name": "ENXIO"},{"import": 1983,"src": 1661,"name": "ENETUNREACH"},{"import": 1983,"src": 1662,"name": "EMFILE"},{"import": 1458,"src": 1663,"name": "getsockoptError"},{"import": 1983,"src": 1664,"name": "SIG_ERR"},{"import": 1983,"src": 1665,"name": "EIO"},{"import": 1458,"src": 1666,"name": "mmap"},{"import": 1458,"src": 1667,"name": "nanosleep"},{"import": 1458,"src": 1668,"name": "MMapError"},{"import": 1458,"src": 1669,"name": "GetHostNameError"},{"import": 1983,"src": 1670,"name": "EDESTADDRREQ"},{"import": 1458,"src": 1671,"name": "GetRandomError"},{"import": 1983,"src": 1672,"name": "ENOPROTOOPT"},{"import": 1458,"src": 1673,"name": "unlinkC"},{"import": 1983,"src": 1674,"name": "EBADMSG"},{"import": 1983,"src": 1675,"name": "F_OK"},{"import": 1458,"src": 1676,"name": "execveC"},{"import": 1458,"src": 107,"name": "lseek_SET","kind": "const","type": 154,"value": 168},{"import": 1983,"src": 1677,"name": "ENOMSG"},{"import": 1458,"src": 1678,"name": "open"},{"import": 1983,"src": 1679,"name": "pid_t"},{"import": 1458,"src": 1680,"name": "renameW"},{"import": 1458,"src": 57,"name": "getcwd","kind": "const","type": 58,"value": 60},{"import": 1458,"src": 1681,"name": "setuid"},{"import": 1458,"src": 1682,"name": "chdirC"},{"import": 1458,"src": 1683,"name": "gettimeofday"},{"import": 1983,"src": 1684,"name": "EEXIST"},{"import": 1458,"src": 1685,"name": "UnlinkatError"},{"import": 1458,"src": 1686,"name": "epoll_ctl"},{"import": 1458,"src": 1687,"name": "MProtectError"},{"import": 1458,"src": 1688,"name": "sysctl"},{"import": 1458,"src": 1689,"name": "ClockGetTimeError"},{"import": 1458,"src": 1690,"name": "fstat"},{"import": 1458,"src": 1691,"name": "sigaltstack"},{"import": 1983,"src": 1692,"name": "SIG_IGN"},{"import": 1983,"src": 1693,"name": "ENOENT"},{"import": 1458,"src": 1694,"name": "rmdir"},{"import": 1458,"src": 1695,"name": "openat"},{"import": 1458,"src": 1696,"name": "openatC"},{"import": 1458,"src": 1697,"name": "connect_async"},{"import": 1458,"src": 173,"name": "isatty","kind": "const","type": 234,"value": 289},{"import": 1458,"src": 1698,"name": "KQueueError"},{"import": 1458,"src": 1699,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1458,"src": 1700,"name": "GetSockNameError"},{"import": 1458,"src": 1701,"name": "access"},{"import": 1983,"src": 1702,"name": "ESPIPE"},{"import": 1983,"src": 1703,"name": "EINVAL"},{"import": 1983,"src": 1704,"name": "EISCONN"},{"import": 1983,"src": 1705,"name": "EPROTOTYPE"},{"import": 1458,"src": 4,"name": "abort","kind": "const","type": 4,"value": 4},{"import": 1458,"src": 1706,"name": "connect"},{"import": 1983,"src": 1707,"name": "ENOBUFS"},{"import": 1458,"src": 108,"name": "lseek_CUR","kind": "const","type": 155,"value": 169},{"import": 1983,"src": 1708,"name": "SIGSEGV"},{"import": 1458,"src": 1709,"name": "inotify_add_watch"},{"import": 1983,"src": 1710,"name": "EDQUOT"},{"import": 1983,"src": 1711,"name": "EMSGSIZE"},{"import": 1458,"src": 1712,"name": "wasi"},{"import": 1458,"src": 1713,"name": "mkdirC"},{"import": 1458,"src": 1714,"name": "dl_iterate_phdr"},{"import": 1983,"src": 1715,"name": "PATH_MAX"},{"import": 1983,"src": 1716,"name": "EHOSTUNREACH"},{"import": 1983,"src": 1717,"name": "EOVERFLOW"},{"import": 1983,"src": 1718,"name": "EDEADLOCK"},{"import": 1458,"src": 1719,"name": "RaiseError"},{"import": 1458,"src": 1720,"name": "unlinkatC"},{"import": 1983,"src": 1721,"name": "NSIG"},{"import": 1458,"src": 1722,"name": "sigaction"},{"import": 1458,"src": 1723,"name": "DeleteDirError"},{"import": 1983,"src": 1724,"name": "EBUSY"},{"import": 1983,"src": 1725,"name": "EINTR"},{"import": 1458,"src": 1726,"name": "inotify_add_watchC"},{"import": 1983,"src": 1727,"name": "ENOTEMPTY"},{"import": 1458,"src": 1728,"name": "KillError"},{"import": 1458,"src": 1729,"name": "linux","kind": "const","type": 778,"value": 1988},{"import": 1458,"src": 1730,"name": "writev"},{"import": 1458,"src": 1731,"name": "realpath"},{"import": 1458,"src": 105,"name": "close","kind": "const","type": 152,"value": 165},{"import": 1458,"src": 1732,"name": "raise"},{"import": 1458,"src": 1733,"name": "futimens"},{"import": 1983,"src": 1734,"name": "SIGABRT"},{"import": 1983,"src": 1735,"name": "sig_atomic_t"},{"import": 1983,"src": 1736,"name": "EMLINK"},{"import": 1458,"src": 1737,"name": "AcceptError"},{"import": 1458,"src": 1738,"name": "waitpid"},{"import": 1983,"src": 1739,"name": "ENAMETOOLONG"},{"import": 1458,"src": 1740,"name": "bind"},{"import": 1983,"src": 1741,"name": "EOTHER"},{"import": 1458,"src": 1742,"name": "symlinkC"},{"import": 1983,"src": 1743,"name": "ERANGE"},{"import": 1458,"src": 1744,"name": "UnexpectedError","kind": "const","type": 778,"value": 1083},{"import": 1983,"src": 1745,"name": "ETIME"},{"import": 1983,"src": 1746,"name": "ENOSYS"},{"import": 1458,"src": 1747,"name": "openC"},{"import": 1983,"src": 1748,"name": "EINPROGRESS"},{"import": 1458,"src": 1749,"name": "FStatError","kind": "const","type": 778,"value": 1989},{"import": 1983,"src": 1750,"name": "SIGFPE"},{"import": 1983,"src": 1751,"name": "EPROTO"},{"import": 1458,"src": 1752,"name": "eventfd"},{"import": 1458,"src": 1753,"name": "ReadError","kind": "const","type": 778,"value": 953},{"import": 1458,"src": 1754,"name": "symlink"},{"import": 1983,"src": 1755,"name": "EACCES"},{"import": 1458,"src": 1756,"name": "SetIdError","kind": "const","type": 778,"value": 1990},{"import": 1458,"src": 1757,"name": "BindError"},{"import": 1458,"src": 1758,"name": "lseek_CUR_get"},{"import": 1458,"src": 1759,"name": "ChangeCurDirError","kind": "const","type": 778,"value": 1991},{"import": 1458,"src": 1760,"name": "getenv"},{"import": 1458,"src": 1761,"name": "epoll_wait"},{"import": 1983,"src": 1762,"name": "EAFNOSUPPORT"},{"import": 1458,"src": 136,"name": "write","kind": "const","type": 182,"value": 226},{"import": 1983,"src": 1763,"name": "EROFS"},{"import": 1983,"src": 1764,"name": "EDOM"},{"import": 1458,"src": 1765,"name": "execvpe"},{"import": 1458,"src": 1766,"name": "setgid"},{"import": 1458,"src": 1767,"name": "clock_gettime"},{"import": 1458,"src": 1768,"name": "chdir"},{"import": 1458,"src": 1769,"name": "symlinkatC"},{"import": 1983,"src": 1770,"name": "ENOSTR"},{"import": 1458,"src": 1771,"name": "realpathC"},{"import": 1458,"src": 1772,"name": "RealPathError"},{"import": 1458,"src": 1773,"name": "WriteError","kind": "const","type": 778,"value": 840},{"import": 1983,"src": 1774,"name": "ENOTTY"},{"import": 1458,"src": 1775,"name": "freeNullDelimitedEnvMap"},{"import": 1458,"src": 1776,"name": "MakeDirError"},{"import": 1458,"src": 1777,"name": "EventFdError"},{"import": 1458,"src": 1778,"name": "dup2"},{"import": 1986,"src": 1779,"name": "pthread_t"},{"import": 1458,"src": 1780,"name": "zen"},{"import": 1458,"src": 1781,"name": "INotifyInitError"},{"import": 1458,"src": 1782,"name": "kevent"},{"import": 1458,"src": 1783,"name": "unexpectedErrno"},{"import": 1983,"src": 1784,"name": "ESRCH"},{"import": 1983,"src": 1785,"name": "SEEK_SET"},{"import": 1983,"src": 1786,"name": "ENOTRECOVERABLE"},{"import": 1983,"src": 1787,"name": "EOPNOTSUPP"},{"import": 1983,"src": 1788,"name": "EIDRM"},{"import": 1458,"src": 1789,"name": "EpollCreateError"},{"import": 1983,"src": 1790,"name": "EOWNERDEAD"},{"import": 1458,"src": 1791,"name": "UnlinkError"},{"import": 1458,"src": 1792,"name": "rmdirC"},{"import": 1983,"src": 1793,"name": "EFAULT"},{"import": 1983,"src": 1794,"name": "EFBIG"},{"import": 1458,"src": 1795,"name": "unexpected_error_tracing","kind": "const","type": 842,"value": null},{"import": 1983,"src": 1796,"name": "timespec"},{"import": 1983,"src": 1797,"name": "E2BIG"},{"import": 1983,"src": 1798,"name": "SIG_ACK"},{"import": 1458,"src": 1799,"name": "kill"},{"import": 1458,"src": 1800,"name": "preadv"},{"import": 1458,"src": 1801,"name": "setreuid"},{"import": 1983,"src": 1802,"name": "STRUNCATE"},{"import": 1458,"src": 1803,"name": "accept4"},{"import": 1458,"src": 1804,"name": "sched_getaffinity"},{"import": 1983,"src": 1805,"name": "ENOTSOCK"},{"import": 1458,"src": 1806,"name": "errno"},{"import": 1458,"src": 1807,"name": "pwritev"},{"import": 1983,"src": 1808,"name": "ENOMEM"},{"import": 1983,"src": 1809,"name": "ENODEV"},{"import": 1458,"src": 1810,"name": "renameC"},{"import": 1983,"src": 1811,"name": "SIGILL"},{"import": 1458,"src": 1812,"name": "SocketError"},{"import": 1983,"src": 1813,"name": "EALREADY"},{"import": 1458,"src": 1814,"name": "ConnectError"},{"import": 1458,"src": 1815,"name": "setregid"},{"import": 1458,"src": 1816,"name": "EpollCtlError"},{"import": 1458,"src": 132,"name": "read","kind": "const","type": 177,"value": 219},{"import": 1458,"src": 1817,"name": "SysCtlError","kind": "const","type": 778,"value": 1992},{"import": 1983,"src": 1818,"name": "SIGBREAK"},{"import": 1983,"src": 1819,"name": "SIGABRT_COMPAT"},{"import": 1983,"src": 1820,"name": "ENOLCK"},{"import": 1458,"src": 1821,"name": "rename"},{"import": 1458,"src": 174,"name": "isCygwinPty","kind": "const","type": 234,"value": 290},{"import": 1983,"src": 1822,"name": "SIG_DFL"},{"import": 1983,"src": 1823,"name": "ENOTCONN"},{"import": 1458,"src": 1824,"name": "clock_getres"},{"import": 1458,"src": 1825,"name": "mkdir"},{"import": 1458,"src": 1826,"name": "netbsd"},{"import": 1983,"src": 1827,"name": "ETIMEDOUT"},{"import": 1983,"src": 1828,"name": "ENETRESET"},{"import": 1458,"src": 1829,"name": "getsockname"},{"import": 1458,"src": 1830,"name": "GetCwdError","kind": "const","type": 778,"value": 1704},{"import": 1458,"src": 1831,"name": "realpathW"},{"import": 1983,"src": 1832,"name": "EBADF"},{"import": 1458,"src": 1833,"name": "unlinkatW"},{"import": 1458,"src": 1834,"name": "toPosixPath"},{"import": 1983,"src": 1835,"name": "ECONNRESET"},{"import": 1983,"src": 1836,"name": "ENOEXEC"},{"import": 1458,"src": 1837,"name": "AccessError"},{"import": 1983,"src": 1838,"name": "ENOLINK"},{"import": 1458,"src": 1839,"name": "accessW"},{"import": 1983,"src": 1840,"name": "fd_t","kind": "const","type": 778,"value": 972},{"import": 1983,"src": 1841,"name": "EDEADLK"},{"import": 1983,"src": 1842,"name": "SEEK_END"},{"import": 1983,"src": 1843,"name": "SEEK_CUR"},{"import": 1458,"src": 1844,"name": "pipe"},{"import": 1983,"src": 1845,"name": "EILSEQ"},{"import": 1458,"src": 1846,"name": "SchedGetAffinityError"},{"import": 1458,"src": 1847,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1458,"src": 1848,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1458,"src": 1849,"name": "MAX_PATH_BYTES"},{"import": 1458,"src": 1850,"name": "dl"},{"import": 1458,"src": 1851,"name": "ListenError"},{"import": 1458,"src": 1852,"name": "elf"},{"import": 1458,"src": 1853,"name": "math"},{"import": 1458,"src": 1854,"name": "getRandomBytesDevURandom"},{"import": 1458,"src": 1855,"name": "RenameError"},{"import": 1458,"src": 1856,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1458,"src": 1857,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1459,"src": 1858,"name": "LineInfo","kind": "const","type": 778,"value": 1080},{"import": 1459,"src": 525,"name": "attachSegfaultHandler","kind": "const","type": 3,"value": 1070},{"import": 1459,"src": 1859,"name": "captureStackTrace"},{"import": 1459,"src": 93,"name": "writeCurrentStackTraceWindows","kind": "const","type": 1993,"value": 1444},{"import": 1459,"src": 10,"name": "dumpCurrentStackTrace","kind": "const","type": 10,"value": 10},{"import": 1459,"src": 5,"name": "getStderrStream","kind": "const","type": 5,"value": 5},{"import": 1459,"src": 1860,"name": "have_segfault_handling_support","kind": "const","type": 842,"value": null},{"import": 1459,"src": 92,"name": "writeCurrentStackTrace","kind": "const","type": 1994,"value": 1445},{"import": 1459,"src": 9,"name": "dumpStackTrace","kind": "const","type": 9,"value": 9},{"import": 1459,"src": 1861,"name": "DebugInfo","kind": "const","type": 778,"value": 1678},{"import": 1459,"src": 1862,"name": "enable_segfault_handler","kind": "const","type": 842,"value": null},{"import": 1459,"src": 79,"name": "writeStackTrace","kind": "const","type": 1995,"value": 1446},{"import": 1459,"src": 1863,"name": "DwarfInfo"},{"import": 1459,"src": 17,"name": "getSelfDebugInfo","kind": "const","type": 16,"value": 17},{"import": 1459,"src": 369,"name": "panic","kind": "const","type": 1996,"value": 1447},{"import": 1459,"src": 1864,"name": "DwarfInStream"},{"import": 1459,"src": 11,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1459,"src": 1865,"name": "DwarfSeekableStream"},{"import": 1459,"src": 80,"name": "printSourceAtAddress","kind": "const","type": 1997,"value": 1448},{"import": 1459,"src": 1866,"name": "StackIterator"},{"import": 1459,"src": 1867,"name": "OpenSelfDebugInfoError"},{"import": 1459,"src": 1868,"name": "FailingAllocator"},{"import": 1459,"src": 2,"name": "panicExtra","kind": "const","type": 1998,"value": 1449},{"import": 1459,"src": 523,"name": "maybeEnableSegfaultHandler","kind": "const","type": 3,"value": 1068},{"import": 1459,"src": 1869,"name": "runtime_safety","kind": "const","type": 842,"value": null},{"import": 1459,"src": 1870,"name": "dumpStackTraceFromBase"},{"import": 1459,"src": 1871,"name": "dumpStackPointerAddr"},{"import": 1459,"src": 1872,"name": "failing_allocator"},{"import": 1459,"src": 18,"name": "openSelfDebugInfo","kind": "const","type": 17,"value": 18},{"import": 1459,"src": 1873,"name": "printSourceAtAddressPosix"},{"import": 1459,"src": 1874,"name": "openDwarfDebugInfo"},{"import": 1459,"src": 1875,"name": "printSourceAtAddressDwarf"},{"import": 1459,"src": 135,"name": "warn","kind": "const","type": 1999,"value": 1450},{"import": 1459,"src": 1876,"name": "global_allocator"},{"import": 1459,"src": 1877,"name": "openElfDebugInfo"},{"import": 1459,"src": 1878,"name": "readAllocBytes"},{"import": 1459,"src": 1879,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1459,"src": 84,"name": "populateModule","kind": "const","type": 129,"value": 135},{"import": 1459,"src": 1880,"name": "WHITE","kind": "const","type": 2000,"value": null},{"import": 1459,"src": 1881,"name": "getAbbrevTable"},{"import": 1459,"src": 527,"name": "handleSegfaultWindows","kind": "const","type": 743,"value": 1073},{"import": 1459,"src": 1882,"name": "readIntMem"},{"import": 1459,"src": 1883,"name": "parseFormValueTargetAddrSize"},{"import": 1459,"src": 1884,"name": "DW"},{"import": 1459,"src": 1885,"name": "readStringRaw"},{"import": 1459,"src": 1886,"name": "panicking","kind": "var","type": 779,"value": null},{"import": 1459,"src": 1887,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 1459,"src": 1888,"name": "FileEntry"},{"import": 1459,"src": 71,"name": "readSparseBitVector","kind": "const","type": 2001,"value": 1451},{"import": 1459,"src": 1889,"name": "stderr_file_out_stream","kind": "var","type": 966,"value": "undefined"},{"import": 1459,"src": 1890,"name": "RESET","kind": "const","type": 1270,"value": null},{"import": 1459,"src": 1891,"name": "elf"},{"import": 1459,"src": 1892,"name": "openSelfDebugInfoMacOs"},{"import": 1459,"src": 1893,"name": "Func"},{"import": 1459,"src": 1894,"name": "readByteSignedMem"},{"import": 1459,"src": 1895,"name": "readInitialLengthMem"},{"import": 1459,"src": 1896,"name": "MachoSymbol","kind": "const","type": 778,"value": 2002},{"import": 1459,"src": 1897,"name": "parseFormValueBlock"},{"import": 1459,"src": 1898,"name": "io","kind": "const","type": 778,"value": 1450},{"import": 1459,"src": 1899,"name": "LineNumberProgram"},{"import": 1459,"src": 1900,"name": "CYAN","kind": "const","type": 2000,"value": null},{"import": 1459,"src": 1901,"name": "root","kind": "const","type": 778,"value": 1964},{"import": 1459,"src": 1902,"name": "Constant"},{"import": 1459,"src": 1903,"name": "maxInt","kind": "const","type": 871,"value": 1199},{"import": 1459,"src": 1904,"name": "parseAbbrevTable"},{"import": 1459,"src": 1905,"name": "coff","kind": "const","type": 778,"value": 1481},{"import": 1459,"src": 1906,"name": "scanAllCompileUnits"},{"import": 1459,"src": 1907,"name": "parseDie"},{"import": 1459,"src": 1908,"name": "parseFormValueConstant"},{"import": 1459,"src": 1909,"name": "leb"},{"import": 1459,"src": 1910,"name": "DIM","kind": "const","type": 1270,"value": null},{"import": 1459,"src": 1911,"name": "GREEN","kind": "const","type": 2000,"value": null},{"import": 1459,"src": 1912,"name": "getSymbolNameDwarf"},{"import": 1459,"src": 1913,"name": "fs","kind": "const","type": 778,"value": 1491},{"import": 1459,"src": 83,"name": "setTtyColor","kind": "const","type": 127,"value": 131},{"import": 1459,"src": 1914,"name": "File","kind": "const","type": 778,"value": 967},{"import": 1459,"src": 1915,"name": "parseFormValueBlockLen"},{"import": 1459,"src": 88,"name": "printLineFromFileAnyOs","kind": "const","type": 2003,"value": 1452},{"import": 1459,"src": 20,"name": "openSelfDebugInfoWindows","kind": "const","type": 19,"value": 20},{"import": 1459,"src": 1916,"name": "printLineInfo"},{"import": 1459,"src": 1917,"name": "AbbrevTable"},{"import": 1459,"src": 1918,"name": "Die"},{"import": 1459,"src": 1919,"name": "process","kind": "const","type": 778,"value": 1503},{"import": 1459,"src": 1920,"name": "macho","kind": "const","type": 778,"value": 1504},{"import": 1459,"src": 19,"name": "getDebugInfoAllocator","kind": "const","type": 18,"value": 19},{"import": 1459,"src": 1921,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1459,"src": 1922,"name": "windows_segfault_handle","kind": "var","type": 1089,"value": null},{"import": 1459,"src": 1923,"name": "debug_info_allocator","kind": "var","type": 1743,"value": null},{"import": 1459,"src": 1924,"name": "CompileUnit"},{"import": 1459,"src": 1925,"name": "TtyColor","kind": "const","type": 778,"value": 1075},{"import": 1459,"src": 1926,"name": "parseFormValueRef"},{"import": 1459,"src": 1927,"name": "math"},{"import": 1459,"src": 1928,"name": "global_fixed_allocator"},{"import": 1459,"src": 1929,"name": "stderr_file","kind": "var","type": 967,"value": "undefined"},{"import": 1459,"src": 1930,"name": "FormValue"},{"import": 1459,"src": 1931,"name": "openSelfDebugInfoPosix"},{"import": 1459,"src": 1932,"name": "global_allocator_mem"},{"import": 1459,"src": 1933,"name": "findCompileUnit"},{"import": 1459,"src": 1934,"name": "readInitialLength"},{"import": 1459,"src": 78,"name": "wantTtyColor","kind": "const","type": 120,"value": 124},{"import": 1459,"src": 1935,"name": "AbbrevTableEntry"},{"import": 1459,"src": 1936,"name": "getLineNumberInfoMacOs"},{"import": 1459,"src": 1937,"name": "Module","kind": "const","type": 778,"value": 906},{"import": 1459,"src": 3,"name": "resetSegfaultHandler","kind": "const","type": 3,"value": 3},{"import": 1459,"src": 1938,"name": "stderr_stream","kind": "var","type": 2004,"value": null},{"import": 1459,"src": 1939,"name": "stderr_mutex","kind": "var","type": 1149,"value": null},{"import": 1459,"src": 1940,"name": "scanAllFunctions"},{"import": 1459,"src": 1941,"name": "pdb","kind": "const","type": 778,"value": 1479},{"import": 1459,"src": 1942,"name": "PcRange"},{"import": 1459,"src": 1943,"name": "readStringMem"},{"import": 1459,"src": 1944,"name": "readByteMem"},{"import": 1459,"src": 1945,"name": "findDwarfSectionFromElf"},{"import": 1459,"src": 1946,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1459,"src": 1947,"name": "parseFormValueDwarfOffsetSize"},{"import": 1459,"src": 81,"name": "printSourceAtAddressWindows","kind": "const","type": 2005,"value": 1453},{"import": 1459,"src": 1948,"name": "machoSearchSymbols"},{"import": 1459,"src": 1949,"name": "AbbrevAttr"},{"import": 1459,"src": 1950,"name": "getString"},{"import": 1459,"src": 1951,"name": "handleSegfaultLinux"},{"import": 1459,"src": 1952,"name": "printSourceAtAddressMacOs"},{"import": 1459,"src": 1953,"name": "AbbrevTableHeader"},{"import": 1459,"src": 1954,"name": "getAbbrevTableEntry"},{"import": 1459,"src": 1955,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1459,"src": 1956,"name": "self_debug_info","kind": "var","type": 2006,"value": null},{"import": 1459,"src": 1957,"name": "getLineNumberInfoDwarf"},{"import": 1459,"src": 1958,"name": "ArrayList","kind": "const","type": 831,"value": 1182},{"import": 1459,"src": 1959,"name": "parseFormValue"},{"import": 1459,"src": 1960,"name": "MachOFile","kind": "const","type": 778,"value": 903},{"import": 1459,"src": 1961,"name": "debug_info_arena_allocator","kind": "var","type": 1085,"value": "undefined"},{"import": 1459,"src": 1962,"name": "RED","kind": "const","type": 2000,"value": null},{"import": 2007,"src": 1963,"name": "endsWith"},{"import": 2007,"src": 1964,"name": "initFromBuffer"},{"import": 2007,"src": 1965,"name": "ptr"},{"import": 2007,"src": 1966,"name": "len"},{"import": 2007,"src": 1967,"name": "allocPrint"},{"import": 2007,"src": 1968,"name": "initSize"},{"import": 2007,"src": 1969,"name": "toSliceConst"},{"import": 2007,"src": 1970,"name": "replaceContents"},{"import": 2007,"src": 1971,"name": "appendByte"},{"import": 2007,"src": 1972,"name": "fromOwnedSlice"},{"import": 2007,"src": 1973,"name": "startsWith"},{"import": 2007,"src": 1974,"name": "resize"},{"import": 2007,"src": 1975,"name": "append"},{"import": 2007,"src": 1976,"name": "initNull"},{"import": 2007,"src": 1977,"name": "deinit"},{"import": 2007,"src": 1978,"name": "shrink"},{"import": 2007,"src": 1979,"name": "toOwnedSlice"},{"import": 2007,"src": 1980,"name": "init"},{"import": 2007,"src": 1981,"name": "isNull"},{"import": 2007,"src": 1982,"name": "eql"},{"import": 2007,"src": 1983,"name": "toSlice"},{"import": 1461,"src": 1984,"name": "ATE_HP_signed_fixed"},{"import": 1461,"src": 1985,"name": "AT_GNU_exclusive_locks_required"},{"import": 1461,"src": 1986,"name": "OP_lit1"},{"import": 1461,"src": 1987,"name": "CFA_MIPS_advance_loc8"},{"import": 1461,"src": 1988,"name": "CFA_expression"},{"import": 1461,"src": 1989,"name": "OP_const4s"},{"import": 1461,"src": 1990,"name": "OP_GNU_uninit"},{"import": 1461,"src": 1991,"name": "OP_push_object_address"},{"import": 1461,"src": 1992,"name": "AT_subscr_data"},{"import": 1461,"src": 1993,"name": "ATE_HP_float128"},{"import": 1461,"src": 1994,"name": "FORM_strp"},{"import": 1461,"src": 1995,"name": "OP_GNU_entry_value"},{"import": 1461,"src": 1996,"name": "CFA_val_expression"},{"import": 1461,"src": 1997,"name": "CHILDREN_no"},{"import": 1461,"src": 1998,"name": "OP_breg0"},{"import": 1461,"src": 1999,"name": "OP_reg4"},{"import": 1461,"src": 2000,"name": "FORM_GNU_ref_alt"},{"import": 1461,"src": 2001,"name": "OP_lit4"},{"import": 1461,"src": 2002,"name": "LNE_lo_user"},{"import": 1461,"src": 2003,"name": "AT_GNU_shared_locks_required"},{"import": 1461,"src": 2004,"name": "OP_reg13"},{"import": 1461,"src": 2005,"name": "OP_reg30"},{"import": 1461,"src": 2006,"name": "OP_lit21"},{"import": 1461,"src": 2007,"name": "AT_GNU_ranges_base"},{"import": 1461,"src": 2008,"name": "AT_VMS_rtnbeg_pd_address"},{"import": 1461,"src": 2009,"name": "AT_data_location"},{"import": 1461,"src": 2010,"name": "OP_reg20"},{"import": 1461,"src": 2011,"name": "AT_elemental"},{"import": 1461,"src": 2012,"name": "AT_small"},{"import": 1461,"src": 2013,"name": "AT_HP_proc_per_section"},{"import": 1461,"src": 2014,"name": "AT_HP_is_result_param"},{"import": 1461,"src": 2015,"name": "LANG_PLI"},{"import": 1461,"src": 2016,"name": "OP_reg1"},{"import": 1461,"src": 2017,"name": "OP_HP_unmod_range"},{"import": 1461,"src": 2018,"name": "OP_lit14"},{"import": 1461,"src": 2019,"name": "OP_breg25"},{"import": 1461,"src": 2020,"name": "TAG_module"},{"import": 1461,"src": 2021,"name": "AT_decimal_scale"},{"import": 1461,"src": 2022,"name": "AT_PGI_lstride"},{"import": 1461,"src": 2023,"name": "OP_reg16"},{"import": 1461,"src": 2024,"name": "OP_abs"},{"import": 1461,"src": 2025,"name": "AT_body_begin"},{"import": 1461,"src": 2026,"name": "OP_plus"},{"import": 1461,"src": 2027,"name": "AT_start_scope"},{"import": 1461,"src": 2028,"name": "TAG_HP_array_descriptor"},{"import": 1461,"src": 2029,"name": "TAG_GNU_formal_parameter_pack"},{"import": 1461,"src": 2030,"name": "AT_priority"},{"import": 1461,"src": 2031,"name": "AT_PGI_soffset"},{"import": 1461,"src": 2032,"name": "AT_external"},{"import": 1461,"src": 2033,"name": "AT_HP_prof_version_id"},{"import": 1461,"src": 2034,"name": "OP_deref"},{"import": 1461,"src": 2035,"name": "OP_breg15"},{"import": 1461,"src": 2036,"name": "TAG_label"},{"import": 1461,"src": 2037,"name": "ATE_HP_complex_float128"},{"import": 1461,"src": 2038,"name": "AT_import"},{"import": 1461,"src": 2039,"name": "ATE_numeric_string"},{"import": 1461,"src": 2040,"name": "OP_breg22"},{"import": 1461,"src": 2041,"name": "LANG_hi_user"},{"import": 1461,"src": 2042,"name": "LANG_Cobol74"},{"import": 1461,"src": 2043,"name": "TAG_class_template"},{"import": 1461,"src": 2044,"name": "TAG_constant"},{"import": 1461,"src": 2045,"name": "OP_over"},{"import": 1461,"src": 2046,"name": "CFA_lo_user"},{"import": 1461,"src": 2047,"name": "LANG_C_plus_plus"},{"import": 1461,"src": 2048,"name": "AT_location"},{"import": 1461,"src": 2049,"name": "TAG_variant_part"},{"import": 1461,"src": 2050,"name": "TAG_upc_shared_type"},{"import": 1461,"src": 2051,"name": "TAG_PGI_interface_block"},{"import": 1461,"src": 2052,"name": "AT_signature"},{"import": 1461,"src": 2053,"name": "FORM_GNU_strp_alt"},{"import": 1461,"src": 2054,"name": "OP_breg18"},{"import": 1461,"src": 2055,"name": "TAG_with_stmt"},{"import": 1461,"src": 2056,"name": "AT_HP_raw_data_ptr"},{"import": 1461,"src": 2057,"name": "LANG_C11"},{"import": 1461,"src": 2058,"name": "TAG_namespace"},{"import": 1461,"src": 2059,"name": "LANG_lo_user"},{"import": 1461,"src": 2060,"name": "LANG_UPC"},{"import": 1461,"src": 2061,"name": "FORM_block2"},{"import": 1461,"src": 2062,"name": "AT_GNAT_descriptive_type"},{"import": 1461,"src": 2063,"name": "OP_call4"},{"import": 1461,"src": 2064,"name": "ATE_HP_complex_float80"},{"import": 1461,"src": 2065,"name": "TAG_try_block"},{"import": 1461,"src": 2066,"name": "LNE_define_file"},{"import": 1461,"src": 2067,"name": "AT_stmt_list"},{"import": 1461,"src": 2068,"name": "CFA_def_cfa"},{"import": 1461,"src": 2069,"name": "ATE_unsigned_char"},{"import": 1461,"src": 2070,"name": "AT_frame_base"},{"import": 1461,"src": 2071,"name": "AT_vtable_elem_location"},{"import": 1461,"src": 2072,"name": "AT_common_reference"},{"import": 1461,"src": 2073,"name": "AT_abstract_origin"},{"import": 1461,"src": 2074,"name": "AT_HP_opt_level"},{"import": 1461,"src": 2075,"name": "ATE_HP_unsigned_fixed"},{"import": 1461,"src": 2076,"name": "TAG_set_type"},{"import": 1461,"src": 2077,"name": "AT_mac_info"},{"import": 1461,"src": 2078,"name": "AT_lo_user"},{"import": 1461,"src": 2079,"name": "OP_const2u"},{"import": 1461,"src": 2080,"name": "LANG_Fortran90"},{"import": 1461,"src": 2081,"name": "CFA_restore"},{"import": 1461,"src": 2082,"name": "TAG_padding"},{"import": 1461,"src": 2083,"name": "AT_GNU_dwo_name"},{"import": 1461,"src": 2084,"name": "FORM_ref8"},{"import": 1461,"src": 2085,"name": "AT_virtuality"},{"import": 1461,"src": 2086,"name": "FORM_GNU_str_index"},{"import": 1461,"src": 2087,"name": "TAG_GNU_template_template_param"},{"import": 1461,"src": 2088,"name": "TAG_packed_type"},{"import": 1461,"src": 2089,"name": "OP_pick"},{"import": 1461,"src": 2090,"name": "LNE_hi_user"},{"import": 1461,"src": 2091,"name": "CFA_advance_loc2"},{"import": 1461,"src": 2092,"name": "AT_HP_default_location"},{"import": 1461,"src": 2093,"name": "OP_minus"},{"import": 1461,"src": 2094,"name": "AT_MIPS_linkage_name"},{"import": 1461,"src": 2095,"name": "TAG_base_type"},{"import": 1461,"src": 2096,"name": "LNS_fixed_advance_pc"},{"import": 1461,"src": 2097,"name": "TAG_GNU_template_parameter_pack"},{"import": 1461,"src": 2098,"name": "TAG_lo_user"},{"import": 1461,"src": 2099,"name": "OP_reg28"},{"import": 1461,"src": 2100,"name": "AT_GNU_template_name"},{"import": 1461,"src": 2101,"name": "AT_HP_unit_name"},{"import": 1461,"src": 2102,"name": "LANG_C99"},{"import": 1461,"src": 2103,"name": "OP_breg5"},{"import": 1461,"src": 2104,"name": "TAG_variable"},{"import": 1461,"src": 2105,"name": "OP_reg9"},{"import": 1461,"src": 2106,"name": "OP_mul"},{"import": 1461,"src": 2107,"name": "OP_lit7"},{"import": 1461,"src": 2108,"name": "AT_GNU_all_call_sites"},{"import": 1461,"src": 2109,"name": "TAG_GNU_call_site_parameter"},{"import": 1461,"src": 2110,"name": "OP_lit24"},{"import": 1461,"src": 2111,"name": "CFA_val_offset"},{"import": 1461,"src": 2112,"name": "TAG_subrange_type"},{"import": 1461,"src": 2113,"name": "AT_GNU_tail_call"},{"import": 1461,"src": 2114,"name": "LNE_end_sequence"},{"import": 1461,"src": 2115,"name": "LANG_Fortran08"},{"import": 1461,"src": 2116,"name": "ATE_HP_zoned_decimal"},{"import": 1461,"src": 2117,"name": "OP_reg25"},{"import": 1461,"src": 2118,"name": "OP_shr"},{"import": 1461,"src": 2119,"name": "TAG_restrict_type"},{"import": 1461,"src": 2120,"name": "AT_variable_parameter"},{"import": 1461,"src": 2121,"name": "ATE_decimal_float"},{"import": 1461,"src": 2122,"name": "OP_breg2"},{"import": 1461,"src": 2123,"name": "LANG_Go"},{"import": 1461,"src": 2124,"name": "LANG_HP_Pascal91"},{"import": 1461,"src": 2125,"name": "OP_neg"},{"import": 1461,"src": 2126,"name": "OP_reg6"},{"import": 1461,"src": 2127,"name": "CFA_hi_user"},{"import": 1461,"src": 2128,"name": "OP_not"},{"import": 1461,"src": 2129,"name": "OP_lit11"},{"import": 1461,"src": 2130,"name": "LNS_copy"},{"import": 1461,"src": 2131,"name": "OP_reg15"},{"import": 1461,"src": 2132,"name": "FORM_flag"},{"import": 1461,"src": 2133,"name": "OP_lit23"},{"import": 1461,"src": 2134,"name": "OP_GNU_push_tls_address"},{"import": 1461,"src": 2135,"name": "LANG_Rust"},{"import": 1461,"src": 2136,"name": "TAG_subroutine"},{"import": 1461,"src": 2137,"name": "LNE_set_address"},{"import": 1461,"src": 2138,"name": "OP_reg22"},{"import": 1461,"src": 2139,"name": "OP_GNU_deref_type"},{"import": 1461,"src": 2140,"name": "OP_lit31"},{"import": 1461,"src": 2141,"name": "LNS_advance_line"},{"import": 1461,"src": 2142,"name": "ATE_complex_float"},{"import": 1461,"src": 2143,"name": "OP_breg10"},{"import": 1461,"src": 2144,"name": "OP_breg31"},{"import": 1461,"src": 2145,"name": "ATE_HP_float80"},{"import": 1461,"src": 2146,"name": "OP_reg3"},{"import": 1461,"src": 2147,"name": "OP_lit16"},{"import": 1461,"src": 2148,"name": "AT_MIPS_has_inlines"},{"import": 1461,"src": 2149,"name": "OP_breg27"},{"import": 1461,"src": 2150,"name": "ATE_lo_user"},{"import": 1461,"src": 2151,"name": "FORM_flag_present"},{"import": 1461,"src": 2152,"name": "OP_bit_piece"},{"import": 1461,"src": 2153,"name": "AT_GNU_addr_base"},{"import": 1461,"src": 2154,"name": "AT_MIPS_software_pipeline_depth"},{"import": 1461,"src": 2155,"name": "FORM_ref_sig8"},{"import": 1461,"src": 2156,"name": "ATE_signed_fixed"},{"import": 1461,"src": 2157,"name": "OP_lo_user"},{"import": 1461,"src": 2158,"name": "LANG_HP_Basic91"},{"import": 1461,"src": 2159,"name": "TAG_inheritance"},{"import": 1461,"src": 2160,"name": "FORM_data8"},{"import": 1461,"src": 2161,"name": "OP_breg17"},{"import": 1461,"src": 2162,"name": "AT_GNU_pubtypes"},{"import": 1461,"src": 2163,"name": "LNS_set_file"},{"import": 1461,"src": 2164,"name": "AT_MIPS_clone_origin"},{"import": 1461,"src": 2165,"name": "CFA_def_cfa_expression"},{"import": 1461,"src": 2166,"name": "OP_shl"},{"import": 1461,"src": 2167,"name": "LANG_Python"},{"import": 1461,"src": 2168,"name": "TAG_union_type"},{"import": 1461,"src": 2169,"name": "AT_alignment"},{"import": 1461,"src": 2170,"name": "AT_specification"},{"import": 1461,"src": 2171,"name": "AT_visibility"},{"import": 1461,"src": 2172,"name": "AT_enum_class"},{"import": 1461,"src": 2173,"name": "OP_PGI_omp_thread_num"},{"import": 1461,"src": 2174,"name": "LNS_negate_stmt"},{"import": 1461,"src": 2175,"name": "OP_GNU_encoded_addr"},{"import": 1461,"src": 2176,"name": "ATE_float"},{"import": 1461,"src": 2177,"name": "LANG_Fortran95"},{"import": 1461,"src": 2178,"name": "AT_GNU_all_tail_call_sites"},{"import": 1461,"src": 2179,"name": "CFA_offset_extended"},{"import": 1461,"src": 2180,"name": "AT_MIPS_stride"},{"import": 1461,"src": 2181,"name": "OP_breg29"},{"import": 1461,"src": 2182,"name": "TAG_pointer_type"},{"import": 1461,"src": 2183,"name": "ATE_unsigned"},{"import": 1461,"src": 2184,"name": "LNS_advance_pc"},{"import": 1461,"src": 2185,"name": "LANG_Pascal83"},{"import": 1461,"src": 2186,"name": "AT_HP_definition_points"},{"import": 1461,"src": 2187,"name": "OP_addr"},{"import": 1461,"src": 2188,"name": "AT_body_end"},{"import": 1461,"src": 2189,"name": "LANG_C_plus_plus_14"},{"import": 1461,"src": 2190,"name": "AT_decl_line"},{"import": 1461,"src": 2191,"name": "AT_HP_widened_byte_size"},{"import": 1461,"src": 2192,"name": "LNS_set_column"},{"import": 1461,"src": 2193,"name": "ATE_signed_char"},{"import": 1461,"src": 2194,"name": "ATE_HP_VAX_float"},{"import": 1461,"src": 2195,"name": "TAG_inlined_subroutine"},{"import": 1461,"src": 2196,"name": "AT_GNU_dwo_id"},{"import": 1461,"src": 2197,"name": "OP_const4u"},{"import": 1461,"src": 2198,"name": "AT_comp_dir"},{"import": 1461,"src": 2199,"name": "CFA_restore_extended"},{"import": 1461,"src": 2200,"name": "AT_decl_file"},{"import": 1461,"src": 2201,"name": "FORM_ref_udata"},{"import": 1461,"src": 2202,"name": "OP_const2s"},{"import": 1461,"src": 2203,"name": "ATE_packed_decimal"},{"import": 1461,"src": 2204,"name": "OP_xderef_size"},{"import": 1461,"src": 2205,"name": "TAG_namelist"},{"import": 1461,"src": 2206,"name": "AT_MIPS_epilog_begin"},{"import": 1461,"src": 2207,"name": "ATE_HP_imaginary_float80"},{"import": 1461,"src": 2208,"name": "TAG_common_inclusion"},{"import": 1461,"src": 2209,"name": "TAG_rvalue_reference_type"},{"import": 1461,"src": 2210,"name": "TAG_ptr_to_member_type"},{"import": 1461,"src": 2211,"name": "CHILDREN_yes"},{"import": 1461,"src": 2212,"name": "AT_MIPS_loop_unroll_factor"},{"import": 1461,"src": 2213,"name": "TAG_typedef"},{"import": 1461,"src": 2214,"name": "AT_GNU_call_site_target_clobbered"},{"import": 1461,"src": 2215,"name": "OP_lit2"},{"import": 1461,"src": 2216,"name": "OP_lit19"},{"import": 1461,"src": 2217,"name": "AT_decl_column"},{"import": 1461,"src": 2218,"name": "AT_friend"},{"import": 1461,"src": 2219,"name": "AT_PGI_lbase"},{"import": 1461,"src": 2220,"name": "AT_calling_convention"},{"import": 1461,"src": 2221,"name": "FORM_sec_offset"},{"import": 1461,"src": 2222,"name": "AT_allocated"},{"import": 1461,"src": 2223,"name": "FORM_exprloc"},{"import": 1461,"src": 2224,"name": "TAG_thrown_type"},{"import": 1461,"src": 2225,"name": "AT_inline"},{"import": 1461,"src": 2226,"name": "AT_GNU_vector"},{"import": 1461,"src": 2227,"name": "TAG_partial_unit"},{"import": 1461,"src": 2228,"name": "LANG_Fortran77"},{"import": 1461,"src": 2229,"name": "OP_regx"},{"import": 1461,"src": 2230,"name": "ATE_void"},{"import": 1461,"src": 2231,"name": "OP_breg7"},{"import": 1461,"src": 2232,"name": "TAG_member"},{"import": 1461,"src": 2233,"name": "AT_data_member_location"},{"import": 1461,"src": 2234,"name": "AT_trampoline"},{"import": 1461,"src": 2235,"name": "AT_linkage_name"},{"import": 1461,"src": 2236,"name": "AT_discr_list"},{"import": 1461,"src": 2237,"name": "AT_MIPS_abstract_name"},{"import": 1461,"src": 2238,"name": "OP_lit5"},{"import": 1461,"src": 2239,"name": "LANG_C89"},{"import": 1461,"src": 2240,"name": "TAG_reference_type"},{"import": 1461,"src": 2241,"name": "OP_reg10"},{"import": 1461,"src": 2242,"name": "OP_reg31"},{"import": 1461,"src": 2243,"name": "OP_lit26"},{"import": 1461,"src": 2244,"name": "AT_use_UTF8"},{"import": 1461,"src": 2245,"name": "AT_picture_string"},{"import": 1461,"src": 2246,"name": "OP_reg27"},{"import": 1461,"src": 2247,"name": "AT_GNU_macros"},{"import": 1461,"src": 2248,"name": "AT_const_value"},{"import": 1461,"src": 2249,"name": "AT_upper_bound"},{"import": 1461,"src": 2250,"name": "FORM_ref4"},{"import": 1461,"src": 2251,"name": "LNS_set_isa"},{"import": 1461,"src": 2252,"name": "TAG_unspecified_type"},{"import": 1461,"src": 2253,"name": "TAG_imported_module"},{"import": 1461,"src": 2254,"name": "OP_reg0"},{"import": 1461,"src": 2255,"name": "OP_bra"},{"import": 1461,"src": 2256,"name": "OP_lit8"},{"import": 1461,"src": 2257,"name": "OP_lit13"},{"import": 1461,"src": 2258,"name": "OP_breg24"},{"import": 1461,"src": 2259,"name": "AT_default_value"},{"import": 1461,"src": 2260,"name": "OP_reg17"},{"import": 1461,"src": 2261,"name": "OP_HP_fltconst8"},{"import": 1461,"src": 2262,"name": "TAG_imported_unit"},{"import": 1461,"src": 2263,"name": "ATE_hi_user"},{"import": 1461,"src": 2264,"name": "AT_pure"},{"import": 1461,"src": 2265,"name": "OP_breg12"},{"import": 1461,"src": 2266,"name": "OP_breg9"},{"import": 1461,"src": 2267,"name": "AT_main_subprogram"},{"import": 1461,"src": 2268,"name": "OP_breg21"},{"import": 1461,"src": 2269,"name": "OP_form_tls_address"},{"import": 1461,"src": 2270,"name": "AT_byte_size"},{"import": 1461,"src": 2271,"name": "CFA_val_offset_sf"},{"import": 1461,"src": 2272,"name": "OP_ne"},{"import": 1461,"src": 2273,"name": "CFA_GNU_args_size"},{"import": 1461,"src": 2274,"name": "AT_data_bit_offset"},{"import": 1461,"src": 2275,"name": "OP_lit28"},{"import": 1461,"src": 2276,"name": "OP_ge"},{"import": 1461,"src": 2277,"name": "AT_language"},{"import": 1461,"src": 2278,"name": "AT_HP_prologue"},{"import": 1461,"src": 2279,"name": "FORM_sdata"},{"import": 1461,"src": 2280,"name": "TAG_structure_type"},{"import": 1461,"src": 2281,"name": "AT_endianity"},{"import": 1461,"src": 2282,"name": "AT_return_addr"},{"import": 1461,"src": 2283,"name": "OP_dup"},{"import": 1461,"src": 2284,"name": "OP_le"},{"import": 1461,"src": 2285,"name": "OP_breg19"},{"import": 1461,"src": 2286,"name": "TAG_shared_type"},{"import": 1461,"src": 2287,"name": "AT_binary_scale"},{"import": 1461,"src": 2288,"name": "AT_call_line"},{"import": 1461,"src": 2289,"name": "CFA_advance_loc"},{"import": 1461,"src": 2290,"name": "LANG_C_plus_plus_11"},{"import": 1461,"src": 2291,"name": "AT_string_length"},{"import": 1461,"src": 2292,"name": "AT_macro_info"},{"import": 1461,"src": 2293,"name": "AT_element_list"},{"import": 1461,"src": 2294,"name": "AT_GNU_call_site_value"},{"import": 1461,"src": 2295,"name": "AT_HP_pass_by_reference"},{"import": 1461,"src": 2296,"name": "FORM_data1"},{"import": 1461,"src": 2297,"name": "CFA_advance_loc4"},{"import": 1461,"src": 2298,"name": "TAG_HP_Bliss_field_set"},{"import": 1461,"src": 2299,"name": "LNS_set_epilogue_begin"},{"import": 1461,"src": 2300,"name": "OP_consts"},{"import": 1461,"src": 2301,"name": "LNS_set_prologue_end"},{"import": 1461,"src": 2302,"name": "OP_const1u"},{"import": 1461,"src": 2303,"name": "AT_address_class"},{"import": 1461,"src": 2304,"name": "OP_implicit_value"},{"import": 1461,"src": 2305,"name": "LANG_Fortran03"},{"import": 1461,"src": 2306,"name": "AT_HP_epilogue"},{"import": 1461,"src": 2307,"name": "AT_associated"},{"import": 1461,"src": 2308,"name": "AT_HP_unit_size"},{"import": 1461,"src": 2309,"name": "AT_bit_stride"},{"import": 1461,"src": 2310,"name": "LANG_Modula2"},{"import": 1461,"src": 2311,"name": "AT_name"},{"import": 1461,"src": 2312,"name": "CFA_advance_loc1"},{"import": 1461,"src": 2313,"name": "OP_and"},{"import": 1461,"src": 2314,"name": "LNS_const_add_pc"},{"import": 1461,"src": 2315,"name": "OP_reg18"},{"import": 1461,"src": 2316,"name": "AT_type"},{"import": 1461,"src": 2317,"name": "OP_HP_mod_range"},{"import": 1461,"src": 2318,"name": "OP_const8s"},{"import": 1461,"src": 2319,"name": "ATE_HP_edited"},{"import": 1461,"src": 2320,"name": "CFA_def_cfa_offset_sf"},{"import": 1461,"src": 2321,"name": "AT_use_GNAT_descriptive_type"},{"import": 1461,"src": 2322,"name": "LANG_Java"},{"import": 1461,"src": 2323,"name": "AT_namelist_items"},{"import": 1461,"src": 2324,"name": "OP_GNU_addr_index"},{"import": 1461,"src": 2325,"name": "OP_breg4"},{"import": 1461,"src": 2326,"name": "ATE_UTF"},{"import": 1461,"src": 2327,"name": "TAG_GNU_EINCL"},{"import": 1461,"src": 2328,"name": "OP_reg8"},{"import": 1461,"src": 2329,"name": "OP_lit0"},{"import": 1461,"src": 2330,"name": "TAG_namelist_item"},{"import": 1461,"src": 2331,"name": "AT_prototyped"},{"import": 1461,"src": 2332,"name": "OP_lt"},{"import": 1461,"src": 2333,"name": "AT_GNU_pubnames"},{"import": 1461,"src": 2334,"name": "OP_lit25"},{"import": 1461,"src": 2335,"name": "AT_GNU_odr_signature"},{"import": 1461,"src": 2336,"name": "TAG_formal_parameter"},{"import": 1461,"src": 2337,"name": "AT_artificial"},{"import": 1461,"src": 2338,"name": "TAG_class_type"},{"import": 1461,"src": 2339,"name": "OP_deref_size"},{"import": 1461,"src": 2340,"name": "AT_discr_value"},{"import": 1461,"src": 2341,"name": "OP_rot"},{"import": 1461,"src": 2342,"name": "OP_reg24"},{"import": 1461,"src": 2343,"name": "OP_piece"},{"import": 1461,"src": 2344,"name": "OP_HP_is_value"},{"import": 1461,"src": 2345,"name": "TAG_compile_unit"},{"import": 1461,"src": 2346,"name": "FORM_ref1"},{"import": 1461,"src": 2347,"name": "OP_GNU_regval_type"},{"import": 1461,"src": 2348,"name": "OP_breg1"},{"import": 1461,"src": 2349,"name": "TAG_string_type"},{"import": 1461,"src": 2350,"name": "LANG_D"},{"import": 1461,"src": 2351,"name": "OP_GNU_reinterpret"},{"import": 1461,"src": 2352,"name": "LANG_ObjC_plus_plus"},{"import": 1461,"src": 2353,"name": "OP_reg5"},{"import": 1461,"src": 2354,"name": "TAG_enumeration_type"},{"import": 1461,"src": 2355,"name": "OP_lit10"},{"import": 1461,"src": 2356,"name": "TAG_subprogram"},{"import": 1461,"src": 2357,"name": "AT_explicit"},{"import": 1461,"src": 2358,"name": "OP_reg12"},{"import": 1461,"src": 2359,"name": "OP_eq"},{"import": 1461,"src": 2360,"name": "OP_lit20"},{"import": 1461,"src": 2361,"name": "AT_HP_all_variables_modifiable"},{"import": 1461,"src": 2362,"name": "OP_reg21"},{"import": 1461,"src": 2363,"name": "OP_lit30"},{"import": 1461,"src": 2364,"name": "ATE_address"},{"import": 1461,"src": 2365,"name": "OP_breg11"},{"import": 1461,"src": 2366,"name": "FORM_indirect"},{"import": 1461,"src": 2367,"name": "TAG_file_type"},{"import": 1461,"src": 2368,"name": "AT_upc_threads_scaled"},{"import": 1461,"src": 2369,"name": "LANG_HP_Bliss"},{"import": 1461,"src": 2370,"name": "CFA_offset_extended_sf"},{"import": 1461,"src": 2371,"name": "OP_reg2"},{"import": 1461,"src": 2372,"name": "OP_lit15"},{"import": 1461,"src": 2373,"name": "TAG_HP_Bliss_field"},{"import": 1461,"src": 2374,"name": "OP_breg26"},{"import": 1461,"src": 2375,"name": "TAG_GNU_call_site"},{"import": 1461,"src": 2376,"name": "FORM_GNU_addr_index"},{"import": 1461,"src": 2377,"name": "TAG_common_block"},{"import": 1461,"src": 2378,"name": "TAG_subroutine_type"},{"import": 1461,"src": 2379,"name": "OP_GNU_const_type"},{"import": 1461,"src": 2380,"name": "TAG_entry_point"},{"import": 1461,"src": 2381,"name": "TAG_catch_block"},{"import": 1461,"src": 2382,"name": "OP_swap"},{"import": 1461,"src": 2383,"name": "AT_sibling"},{"import": 1461,"src": 2384,"name": "OP_bregx"},{"import": 1461,"src": 2385,"name": "AT_base_types"},{"import": 1461,"src": 2386,"name": "FORM_addr"},{"import": 1461,"src": 2387,"name": "OP_breg14"},{"import": 1461,"src": 2388,"name": "TAG_interface_type"},{"import": 1461,"src": 2389,"name": "LANG_Ada95"},{"import": 1461,"src": 2390,"name": "AT_ordering"},{"import": 1461,"src": 2391,"name": "AT_byte_stride"},{"import": 1461,"src": 2392,"name": "AT_producer"},{"import": 1461,"src": 2393,"name": "OP_breg23"},{"import": 1461,"src": 2394,"name": "AT_use_location"},{"import": 1461,"src": 2395,"name": "TAG_hi_user"},{"import": 1461,"src": 2396,"name": "AT_HP_opt_flags"},{"import": 1461,"src": 2397,"name": "AT_object_pointer"},{"import": 1461,"src": 2398,"name": "AT_lower_bound"},{"import": 1461,"src": 2399,"name": "AT_entry_pc"},{"import": 1461,"src": 2400,"name": "OP_mod"},{"import": 1461,"src": 2401,"name": "TAG_condition"},{"import": 1461,"src": 2402,"name": "OP_GNU_const_index"},{"import": 1461,"src": 2403,"name": "OP_stack_value"},{"import": 1461,"src": 2404,"name": "OP_GNU_implicit_pointer"},{"import": 1461,"src": 2405,"name": "AT_recursive"},{"import": 1461,"src": 2406,"name": "FORM_data4"},{"import": 1461,"src": 2407,"name": "AT_HP_prof_flags"},{"import": 1461,"src": 2408,"name": "LNS_extended_op"},{"import": 1461,"src": 2409,"name": "TAG_function_template"},{"import": 1461,"src": 2410,"name": "AT_GNU_locks_excluded"},{"import": 1461,"src": 2411,"name": "OP_drop"},{"import": 1461,"src": 2412,"name": "OP_breg28"},{"import": 1461,"src": 2413,"name": "AT_src_coords"},{"import": 1461,"src": 2414,"name": "AT_GNU_guarded_by"},{"import": 1461,"src": 2415,"name": "AT_const_expr"},{"import": 1461,"src": 2416,"name": "AT_high_pc"},{"import": 1461,"src": 2417,"name": "LANG_HP_Assembler"},{"import": 1461,"src": 2418,"name": "AT_HP_unmodifiable"},{"import": 1461,"src": 2419,"name": "ATE_HP_packed_decimal"},{"import": 1461,"src": 2420,"name": "ATE_HP_VAX_complex_float_d"},{"import": 1461,"src": 2421,"name": "ATE_HP_VAX_float_d"},{"import": 1461,"src": 2422,"name": "OP_xor"},{"import": 1461,"src": 2423,"name": "LANG_Mips_Assembler"},{"import": 1461,"src": 2424,"name": "OP_const1s"},{"import": 1461,"src": 2425,"name": "TAG_template_value_param"},{"import": 1461,"src": 2426,"name": "TAG_upc_strict_type"},{"import": 1461,"src": 2427,"name": "CFA_def_cfa_register"},{"import": 1461,"src": 2428,"name": "CFA_register"},{"import": 1461,"src": 2429,"name": "AT_GNU_pt_guarded_by"},{"import": 1461,"src": 2430,"name": "OP_HP_unknown"},{"import": 1461,"src": 2431,"name": "OP_lit3"},{"import": 1461,"src": 2432,"name": "OP_lit18"},{"import": 1461,"src": 2433,"name": "AT_MIPS_loop_begin"},{"import": 1461,"src": 2434,"name": "FORM_string"},{"import": 1461,"src": 2435,"name": "OP_or"},{"import": 1461,"src": 2436,"name": "TAG_upc_relaxed_type"},{"import": 1461,"src": 2437,"name": "OP_const8u"},{"import": 1461,"src": 2438,"name": "CFA_offset"},{"import": 1461,"src": 2439,"name": "TAG_template_alias"},{"import": 1461,"src": 2440,"name": "OP_reg29"},{"import": 1461,"src": 2441,"name": "AT_call_column"},{"import": 1461,"src": 2442,"name": "CFA_restore_state"},{"import": 1461,"src": 2443,"name": "TAG_type_unit"},{"import": 1461,"src": 2444,"name": "AT_count"},{"import": 1461,"src": 2445,"name": "OP_gt"},{"import": 1461,"src": 2446,"name": "ATE_boolean"},{"import": 1461,"src": 2447,"name": "FORM_ref2"},{"import": 1461,"src": 2448,"name": "AT_threads_scaled"},{"import": 1461,"src": 2449,"name": "TAG_format_label"},{"import": 1461,"src": 2450,"name": "OP_breg6"},{"import": 1461,"src": 2451,"name": "LANG_C"},{"import": 1461,"src": 2452,"name": "OP_HP_tls"},{"import": 1461,"src": 2453,"name": "AT_extension"},{"import": 1461,"src": 2454,"name": "OP_nop"},{"import": 1461,"src": 2455,"name": "OP_lit6"},{"import": 1461,"src": 2456,"name": "LANG_Upc"},{"import": 1461,"src": 2457,"name": "OP_reg11"},{"import": 1461,"src": 2458,"name": "TAG_enumerator"},{"import": 1461,"src": 2459,"name": "OP_lit27"},{"import": 1461,"src": 2460,"name": "AT_hi_user"},{"import": 1461,"src": 2461,"name": "OP_reg26"},{"import": 1461,"src": 2462,"name": "AT_bit_offset"},{"import": 1461,"src": 2463,"name": "AT_HP_actuals_stmt_list"},{"import": 1461,"src": 2464,"name": "CFA_remember_state"},{"import": 1461,"src": 2465,"name": "AT_decimal_sign"},{"import": 1461,"src": 2466,"name": "OP_breg3"},{"import": 1461,"src": 2467,"name": "CFA_same_value"},{"import": 1461,"src": 2468,"name": "TAG_PGI_kanji_type"},{"import": 1461,"src": 2469,"name": "OP_shra"},{"import": 1461,"src": 2470,"name": "AT_discr"},{"import": 1461,"src": 2471,"name": "OP_reg7"},{"import": 1461,"src": 2472,"name": "CFA_set_loc"},{"import": 1461,"src": 2473,"name": "OP_GNU_convert"},{"import": 1461,"src": 2474,"name": "OP_lit9"},{"import": 1461,"src": 2475,"name": "OP_lit12"},{"import": 1461,"src": 2476,"name": "TAG_unspecified_parameters"},{"import": 1461,"src": 2477,"name": "ATE_unsigned_fixed"},{"import": 1461,"src": 2478,"name": "CFA_nop"},{"import": 1461,"src": 2479,"name": "AT_GNU_call_site_target"},{"import": 1461,"src": 2480,"name": "OP_reg14"},{"import": 1461,"src": 2481,"name": "AT_low_pc"},{"import": 1461,"src": 2482,"name": "OP_lit22"},{"import": 1461,"src": 2483,"name": "AT_GNU_all_source_call_sites"},{"import": 1461,"src": 2484,"name": "AT_mutable"},{"import": 1461,"src": 2485,"name": "TAG_friend"},{"import": 1461,"src": 2486,"name": "OP_call_ref"},{"import": 1461,"src": 2487,"name": "OP_call_frame_cfa"},{"import": 1461,"src": 2488,"name": "OP_reg23"},{"import": 1461,"src": 2489,"name": "OP_breg13"},{"import": 1461,"src": 2490,"name": "OP_fbreg"},{"import": 1461,"src": 2491,"name": "OP_breg30"},{"import": 1461,"src": 2492,"name": "OP_breg8"},{"import": 1461,"src": 2493,"name": "AT_static_link"},{"import": 1461,"src": 2494,"name": "TAG_template_type_param"},{"import": 1461,"src": 2495,"name": "AT_is_optional"},{"import": 1461,"src": 2496,"name": "OP_plus_uconst"},{"import": 1461,"src": 2497,"name": "OP_hi_user"},{"import": 1461,"src": 2498,"name": "LANG_Cobol85"},{"import": 1461,"src": 2499,"name": "OP_lit17"},{"import": 1461,"src": 2500,"name": "OP_breg20"},{"import": 1461,"src": 2501,"name": "LNE_set_discriminator"},{"import": 1461,"src": 2502,"name": "LANG_Ada83"},{"import": 1461,"src": 2503,"name": "AT_sf_names"},{"import": 1461,"src": 2504,"name": "AT_MIPS_tail_loop_begin"},{"import": 1461,"src": 2505,"name": "CFA_GNU_window_save"},{"import": 1461,"src": 2506,"name": "TAG_GNU_BINCL"},{"import": 1461,"src": 2507,"name": "OP_lit29"},{"import": 1461,"src": 2508,"name": "AT_GNU_pt_guarded"},{"import": 1461,"src": 2509,"name": "TAG_volatile_type"},{"import": 1461,"src": 2510,"name": "OP_HP_fltconst4"},{"import": 1461,"src": 2511,"name": "TAG_array_type"},{"import": 1461,"src": 2512,"name": "AT_ranges"},{"import": 1461,"src": 2513,"name": "AT_bit_size"},{"import": 1461,"src": 2514,"name": "AT_GNU_guarded"},{"import": 1461,"src": 2515,"name": "TAG_access_declaration"},{"import": 1461,"src": 2516,"name": "AT_HP_block_index"},{"import": 1461,"src": 2517,"name": "OP_breg16"},{"import": 1461,"src": 2518,"name": "ATE_imaginary_float"},{"import": 1461,"src": 2519,"name": "LANG_ObjC"},{"import": 1461,"src": 2520,"name": "AT_src_info"},{"import": 1461,"src": 2521,"name": "LNS_set_basic_block"},{"import": 1461,"src": 2522,"name": "OP_constu"},{"import": 1461,"src": 2523,"name": "CFA_def_cfa_offset"},{"import": 1461,"src": 2524,"name": "TAG_const_type"},{"import": 1461,"src": 2525,"name": "TAG_lexical_block"},{"import": 1461,"src": 2526,"name": "ATE_HP_VAX_complex_float"},{"import": 1461,"src": 2527,"name": "AT_call_file"},{"import": 1461,"src": 2528,"name": "OP_skip"},{"import": 1461,"src": 2529,"name": "DW_TAG_MIPS_loop"},{"import": 1461,"src": 2530,"name": "AT_HP_cold_region_high_pc"},{"import": 1461,"src": 2531,"name": "FORM_block4"},{"import": 1461,"src": 2532,"name": "OP_call2"},{"import": 1461,"src": 2533,"name": "OP_div"},{"import": 1461,"src": 2534,"name": "OP_xderef"},{"import": 1461,"src": 2535,"name": "OP_GNU_parameter_ref"},{"import": 1461,"src": 2536,"name": "AT_identifier_case"},{"import": 1461,"src": 2537,"name": "AT_declaration"},{"import": 1461,"src": 2538,"name": "FORM_data2"},{"import": 1461,"src": 2539,"name": "LANG_HP_IMacro"},{"import": 1461,"src": 2540,"name": "AT_accessibility"},{"import": 1461,"src": 2541,"name": "AT_member"},{"import": 1461,"src": 2542,"name": "TAG_variant"},{"import": 1461,"src": 2543,"name": "FORM_block1"},{"import": 1461,"src": 2544,"name": "ATE_HP_imaginary_float128"},{"import": 1461,"src": 2545,"name": "CFA_undefined"},{"import": 1461,"src": 2546,"name": "AT_encoding"},{"import": 1461,"src": 2547,"name": "ATE_signed"},{"import": 1461,"src": 2548,"name": "CFA_def_cfa_sf"},{"import": 1461,"src": 2549,"name": "AT_GNU_call_site_data_value"},{"import": 1461,"src": 2550,"name": "AT_containing_type"},{"import": 1461,"src": 2551,"name": "AT_HP_cold_region_low_pc"},{"import": 1461,"src": 2552,"name": "AT_HP_linkage_name"},{"import": 1461,"src": 2553,"name": "TAG_dwarf_procedure"},{"import": 1461,"src": 2554,"name": "AT_digit_count"},{"import": 1461,"src": 2555,"name": "TAG_imported_declaration"},{"import": 1461,"src": 2556,"name": "OP_reg19"},{"import": 1461,"src": 2557,"name": "FORM_udata"},{"import": 1461,"src": 2558,"name": "CFA_GNU_negative_offset_extended"},{"import": 1461,"src": 2559,"name": "AT_segment"},{"import": 1461,"src": 2560,"name": "FORM_block"},{"import": 1461,"src": 2561,"name": "AT_description"},{"import": 1461,"src": 2562,"name": "AT_MIPS_fde"},{"import": 1461,"src": 2563,"name": "FORM_ref_addr"},{"import": 1461,"src": 2564,"name": "ATE_edited"},{"import": 1461,"src": 2565,"name": "ATE_HP_floathpintel"},{"import": 1462,"src": 243,"name": "expectEqual","kind": "const","type": 2008,"value": 1454},{"import": 1462,"src": 2566,"name": "expectEqualSlices"},{"import": 1462,"src": 238,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 1462,"src": 241,"name": "expectError","kind": "const","type": 2009,"value": 1455},{"import": 1462,"src": 2567,"name": "builtin"},{"import": 1462,"src": 2568,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1462,"src": 2569,"name": "TypeId"},{"import": 1450,"src": 2570,"name": "Error","kind": "const","type": 778,"value": 955},{"import": 1450,"src": 2571,"name": "init"},{"import": 1450,"src": 2572,"name": "Stream","kind": "const","type": 778,"value": 954},{"import": 1450,"src": 2573,"name": "writeFn"},{"import": 1464,"src": 2574,"name": "Lock"},{"import": 1464,"src": 2575,"name": "Channel"},{"import": 1464,"src": 2576,"name": "RwLocked"},{"import": 1464,"src": 2577,"name": "Loop"},{"import": 1464,"src": 2578,"name": "Group"},{"import": 1464,"src": 2579,"name": "RwLock"},{"import": 1464,"src": 2580,"name": "Locked"},{"import": 1464,"src": 2581,"name": "Future"},{"import": 1464,"src": 2582,"name": "net"},{"import": 1464,"src": 2583,"name": "fs"},{"import": 1465,"src": 170,"name": "utf16leToUtf8Alloc","kind": "const","type": 230,"value": 285},{"import": 1465,"src": 162,"name": "utf8ToUtf16LeWithNull","kind": "const","type": 213,"value": 267},{"import": 1465,"src": 154,"name": "utf8CodepointSequenceLength","kind": "const","type": 200,"value": 248},{"import": 1465,"src": 156,"name": "utf8Decode2","kind": "const","type": 202,"value": 250},{"import": 1465,"src": 122,"name": "utf8Decode","kind": "const","type": 163,"value": 184},{"import": 1465,"src": 180,"name": "utf8ByteSequenceLength","kind": "const","type": 243,"value": 315},{"import": 1465,"src": 2584,"name": "Utf8Iterator","kind": "const","type": 778,"value": 1138},{"import": 1465,"src": 2585,"name": "Utf8View","kind": "const","type": 778,"value": 1137},{"import": 1465,"src": 2586,"name": "Utf16LeIterator","kind": "const","type": 778,"value": 1122},{"import": 1465,"src": 158,"name": "utf8Decode4","kind": "const","type": 204,"value": 252},{"import": 1465,"src": 134,"name": "utf16leToUtf8","kind": "const","type": 180,"value": 224},{"import": 1465,"src": 157,"name": "utf8Decode3","kind": "const","type": 203,"value": 251},{"import": 1465,"src": 155,"name": "utf8Encode","kind": "const","type": 201,"value": 249},{"import": 1465,"src": 121,"name": "utf8ToUtf16Le","kind": "const","type": 162,"value": 183},{"import": 1465,"src": 164,"name": "utf8ValidateSlice","kind": "const","type": 156,"value": 273},{"import": 1465,"src": 2587,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1465,"src": 2588,"name": "testInvalidUtf8ContinuationBytes"},{"import": 1465,"src": 2589,"name": "testMiscInvalidUtf8"},{"import": 1465,"src": 2590,"name": "testUtf8EncodeError"},{"import": 1465,"src": 2591,"name": "testDecode"},{"import": 1465,"src": 2592,"name": "testError"},{"import": 1465,"src": 2593,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1465,"src": 2594,"name": "Utf8Decode2Error","kind": "const","type": 778,"value": 1776},{"import": 1465,"src": 2595,"name": "testUtf8IteratorOnAscii"},{"import": 1465,"src": 2596,"name": "testUtf8ViewOk"},{"import": 1465,"src": 2597,"name": "testValidUtf8"},{"import": 1465,"src": 2598,"name": "testing"},{"import": 1465,"src": 2599,"name": "Utf8DecodeError","kind": "const","type": 778,"value": 1757},{"import": 1465,"src": 2600,"name": "Utf8Decode4Error","kind": "const","type": 778,"value": 1778},{"import": 1465,"src": 2601,"name": "testUtf8Encode"},{"import": 1465,"src": 2602,"name": "testErrorEncode"},{"import": 1465,"src": 2603,"name": "testBadUtf8Slice"},{"import": 1465,"src": 2604,"name": "Utf8Decode3Error","kind": "const","type": 778,"value": 1777},{"import": 1465,"src": 2605,"name": "testValid"},{"import": 1465,"src": 2606,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1465,"src": 2607,"name": "testOverlongUtf8Codepoint"},{"import": 1465,"src": 2608,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1465,"src": 2609,"name": "testUtf8ViewBad"},{"import": 1466,"src": 2610,"name": "CrossTarget"},{"import": 1466,"src": 2611,"name": "RemoveDirStep"},{"import": 1466,"src": 2612,"name": "LibExeObjStep"},{"import": 1466,"src": 2613,"name": "InstallFileStep"},{"import": 1466,"src": 2614,"name": "RunStep"},{"import": 1466,"src": 2615,"name": "InstallDirectoryOptions"},{"import": 1466,"src": 2616,"name": "LogStep"},{"import": 1466,"src": 2617,"name": "Builder"},{"import": 1466,"src": 2618,"name": "InstallDirStep"},{"import": 1466,"src": 2619,"name": "InstalledFile"},{"import": 1466,"src": 2620,"name": "Target"},{"import": 1466,"src": 2621,"name": "WriteFileStep"},{"import": 1466,"src": 2622,"name": "Step"},{"import": 1466,"src": 2623,"name": "Version"},{"import": 1466,"src": 2624,"name": "InstallDir"},{"import": 1466,"src": 2625,"name": "FmtStep"},{"import": 1466,"src": 2626,"name": "builtin"},{"import": 1466,"src": 2627,"name": "BufMap"},{"import": 1466,"src": 2628,"name": "fmt_lib"},{"import": 1466,"src": 2629,"name": "Pkg"},{"import": 1466,"src": 2630,"name": "std"},{"import": 1466,"src": 2631,"name": "BufSet"},{"import": 1466,"src": 2632,"name": "debug"},{"import": 1466,"src": 2633,"name": "fs"},{"import": 1466,"src": 2634,"name": "CSourceFile"},{"import": 1466,"src": 2635,"name": "File"},{"import": 1466,"src": 2636,"name": "doAtomicSymLinks"},{"import": 1466,"src": 2637,"name": "InstallArtifactStep"},{"import": 1466,"src": 2638,"name": "io"},{"import": 1466,"src": 2639,"name": "warn"},{"import": 1466,"src": 2640,"name": "ArrayList"},{"import": 1466,"src": 2641,"name": "Allocator"},{"import": 1466,"src": 2642,"name": "panic"},{"import": 1466,"src": 2643,"name": "isLibCLibrary"},{"import": 1466,"src": 2644,"name": "process"},{"import": 1466,"src": 2645,"name": "assert"},{"import": 1466,"src": 2646,"name": "StringHashMap"},{"import": 1466,"src": 2647,"name": "mem"},{"import": 1467,"src": 2648,"name": "Headers"},{"import": 1468,"src": 2649,"name": "SHT_SYMTAB_SHNDX"},{"import": 1468,"src": 2650,"name": "Elf32_Nhdr"},{"import": 1468,"src": 2651,"name": "DT_MIPS_SYMBOL_LIB"},{"import": 1468,"src": 2652,"name": "DT_SYMINFO"},{"import": 1468,"src": 2653,"name": "DT_MIPS_COMPACT_SIZE"},{"import": 1468,"src": 2654,"name": "DT_MIPS_LOCAL_GOTNO"},{"import": 1468,"src": 2655,"name": "AT_PHNUM"},{"import": 1468,"src": 2656,"name": "PT_NOTE"},{"import": 1468,"src": 2657,"name": "EI_NIDENT"},{"import": 1468,"src": 2658,"name": "STB_LOCAL"},{"import": 1468,"src": 2659,"name": "DT_MIPS_DELTA_RELOC"},{"import": 1468,"src": 2660,"name": "DT_MIPS_DELTA_SYM_NO"},{"import": 1468,"src": 2661,"name": "DT_FEATURE_1"},{"import": 1468,"src": 2662,"name": "SHT_FINI_ARRAY"},{"import": 1468,"src": 2663,"name": "AT_DCACHEBSIZE"},{"import": 1468,"src": 2664,"name": "Elf64_Section"},{"import": 1468,"src": 2665,"name": "DT_MIPS_NUM"},{"import": 1468,"src": 2666,"name": "Elf32_Chdr"},{"import": 1468,"src": 2667,"name": "AT_EGID"},{"import": 1468,"src": 2668,"name": "AT_L3_CACHEGEOMETRY"},{"import": 1468,"src": 2669,"name": "STT_ARM_TFUNC"},{"import": 1468,"src": 2670,"name": "DT_VALNUM"},{"import": 1468,"src": 2671,"name": "Elf_Options"},{"import": 1468,"src": 2672,"name": "DT_SYMINSZ"},{"import": 1468,"src": 2673,"name": "DT_GNU_CONFLICTSZ"},{"import": 1468,"src": 2674,"name": "DT_RELASZ"},{"import": 1468,"src": 2675,"name": "Elf64_Off"},{"import": 1468,"src": 2676,"name": "Elf64_Shdr"},{"import": 1468,"src": 2677,"name": "Phdr"},{"import": 1468,"src": 2678,"name": "STT_SPARC_REGISTER"},{"import": 1468,"src": 2679,"name": "STT_LOPROC"},{"import": 1468,"src": 2680,"name": "SHT_SHLIB"},{"import": 1468,"src": 2681,"name": "DT_MIPS_UNREFEXTNO"},{"import": 1468,"src": 2682,"name": "Elf32_Phdr"},{"import": 1468,"src": 2683,"name": "Elf32_Xword"},{"import": 1468,"src": 2684,"name": "ET_CORE"},{"import": 1468,"src": 2685,"name": "DT_MIPS_PLTGOT"},{"import": 1468,"src": 2686,"name": "Elf64_Sym"},{"import": 1468,"src": 2687,"name": "DT_DEPAUDIT"},{"import": 1468,"src": 2688,"name": "DT_MIPS_DELTA_CLASS_NO"},{"import": 1468,"src": 2689,"name": "PT_HIOS"},{"import": 1468,"src": 2690,"name": "DT_VERNEEDNUM"},{"import": 1468,"src": 2691,"name": "DT_MIPS_RWPLT"},{"import": 1468,"src": 2692,"name": "DT_INIT_ARRAY"},{"import": 1468,"src": 2693,"name": "DT_FINI_ARRAY"},{"import": 1468,"src": 2694,"name": "DT_HIPROC"},{"import": 1468,"src": 2695,"name": "Elf32_Verneed"},{"import": 1468,"src": 2696,"name": "Elf64_Addr"},{"import": 1468,"src": 2697,"name": "DT_AUDIT"},{"import": 1468,"src": 2698,"name": "SHT_GROUP"},{"import": 1468,"src": 2699,"name": "Elf32_Conflict"},{"import": 1468,"src": 2700,"name": "DT_MIPS_CONFLICT"},{"import": 1468,"src": 2701,"name": "AT_L1I_CACHESHAPE"},{"import": 1468,"src": 2702,"name": "PT_GNU_EH_FRAME"},{"import": 1468,"src": 2703,"name": "DT_NEEDED"},{"import": 1468,"src": 2704,"name": "DT_MIPS_SYMTABNO"},{"import": 1468,"src": 2705,"name": "STB_LOPROC"},{"import": 1468,"src": 2706,"name": "AT_L3_CACHESHAPE"},{"import": 1468,"src": 2707,"name": "Elf"},{"import": 1468,"src": 2708,"name": "DT_SYMENT"},{"import": 1468,"src": 2709,"name": "DT_NULL"},{"import": 1468,"src": 2710,"name": "DT_PPC64_OPD"},{"import": 1468,"src": 2711,"name": "DT_GNU_CONFLICT"},{"import": 1468,"src": 2712,"name": "DT_MIPS_RLD_MAP_REL"},{"import": 1468,"src": 2713,"name": "SHT_STRTAB"},{"import": 1468,"src": 2714,"name": "SectionHeader"},{"import": 1468,"src": 2715,"name": "PT_HISUNW"},{"import": 1468,"src": 2716,"name": "DT_HIOS"},{"import": 1468,"src": 2717,"name": "SHT_INIT_ARRAY"},{"import": 1468,"src": 2718,"name": "Elf64_Versym"},{"import": 1468,"src": 2719,"name": "Arch"},{"import": 1468,"src": 2720,"name": "DT_MIPS_PERF_SUFFIX"},{"import": 1468,"src": 2721,"name": "Elf64_Dyn"},{"import": 1468,"src": 2722,"name": "DT_ADDRRNGHI"},{"import": 1468,"src": 2723,"name": "SHT_HIOS"},{"import": 1468,"src": 2724,"name": "AT_NULL"},{"import": 1468,"src": 2725,"name": "STT_HIPROC"},{"import": 1468,"src": 2726,"name": "Elf_Options_Hw"},{"import": 1468,"src": 2727,"name": "VER_FLG_BASE"},{"import": 1468,"src": 2728,"name": "STT_GNU_IFUNC"},{"import": 1468,"src": 2729,"name": "Elf64_Chdr"},{"import": 1468,"src": 2730,"name": "Elf64_Verdaux"},{"import": 1468,"src": 2731,"name": "STT_TLS"},{"import": 1468,"src": 2732,"name": "DT_ADDRNUM"},{"import": 1468,"src": 2733,"name": "DT_MIPS_DELTA_INSTANCE"},{"import": 1468,"src": 2734,"name": "AT_PAGESZ"},{"import": 1468,"src": 2735,"name": "Dyn"},{"import": 1468,"src": 2736,"name": "DT_SPARC_REGISTER"},{"import": 1468,"src": 2737,"name": "AT_HWCAP"},{"import": 1468,"src": 2738,"name": "AT_IGNOREPPC"},{"import": 1468,"src": 2739,"name": "DT_PLTREL"},{"import": 1468,"src": 2740,"name": "AT_HWCAP2"},{"import": 1468,"src": 2741,"name": "DT_MOVETAB"},{"import": 1468,"src": 2742,"name": "DT_PPC64_OPDSZ"},{"import": 1468,"src": 2743,"name": "DT_INIT_ARRAYSZ"},{"import": 1468,"src": 2744,"name": "DT_TLSDESC_GOT"},{"import": 1468,"src": 2745,"name": "DT_FLAGS_1"},{"import": 1468,"src": 2746,"name": "Elf32_auxv_t"},{"import": 1468,"src": 2747,"name": "DT_PLTGOT"},{"import": 1468,"src": 2748,"name": "Elf32_Move"},{"import": 1468,"src": 2749,"name": "DT_RELAENT"},{"import": 1468,"src": 2750,"name": "SHT_HIUSER"},{"import": 1468,"src": 2751,"name": "Sym"},{"import": 1468,"src": 2752,"name": "Elf64_Verneed"},{"import": 1468,"src": 2753,"name": "AT_NOTELF"},{"import": 1468,"src": 2754,"name": "ET_EXEC"},{"import": 1468,"src": 2755,"name": "PT_TLS"},{"import": 1468,"src": 2756,"name": "STT_FUNC"},{"import": 1468,"src": 2757,"name": "DT_MOVEENT"},{"import": 1468,"src": 2758,"name": "Elf_MIPS_ABIFlags_v0"},{"import": 1468,"src": 2759,"name": "AT_SYSINFO_EHDR"},{"import": 1468,"src": 2760,"name": "AT_ICACHEBSIZE"},{"import": 1468,"src": 2761,"name": "STT_COMMON"},{"import": 1468,"src": 2762,"name": "DT_ENCODING"},{"import": 1468,"src": 2763,"name": "ET_NONE"},{"import": 1468,"src": 2764,"name": "DT_GNU_LIBLIST"},{"import": 1468,"src": 2765,"name": "Verdef"},{"import": 1468,"src": 2766,"name": "Elf32_Verdaux"},{"import": 1468,"src": 2767,"name": "DT_LOOS"},{"import": 1468,"src": 2768,"name": "AT_L1D_CACHESIZE"},{"import": 1468,"src": 2769,"name": "DT_GNU_LIBLISTSZ"},{"import": 1468,"src": 2770,"name": "AT_UCACHEBSIZE"},{"import": 1468,"src": 2771,"name": "SHT_LOUSER"},{"import": 1468,"src": 2772,"name": "AT_L2_CACHEGEOMETRY"},{"import": 1468,"src": 2773,"name": "FileType"},{"import": 1468,"src": 2774,"name": "DT_SYMTAB"},{"import": 1468,"src": 2775,"name": "Elf32_gptab"},{"import": 1468,"src": 2776,"name": "STT_ARM_16BIT"},{"import": 1468,"src": 2777,"name": "DT_FLAGS"},{"import": 1468,"src": 2778,"name": "DT_RELACOUNT"},{"import": 1468,"src": 2779,"name": "DT_MIPS_MSYM"},{"import": 1468,"src": 2780,"name": "DT_IA_64_NUM"},{"import": 1468,"src": 2781,"name": "ET_REL"},{"import": 1468,"src": 2782,"name": "SHT_RELA"},{"import": 1468,"src": 2783,"name": "DT_TEXTREL"},{"import": 1468,"src": 2784,"name": "DT_RELCOUNT"},{"import": 1468,"src": 2785,"name": "DT_MIPS_RLD_TEXT_RESOLVE_ADDR"},{"import": 1468,"src": 2786,"name": "DT_PPC64_GLINK"},{"import": 1468,"src": 2787,"name": "DT_MIPS_BASE_ADDRESS"},{"import": 1468,"src": 2788,"name": "Elf64_Nhdr"},{"import": 1468,"src": 2789,"name": "DT_LOPROC"},{"import": 1468,"src": 2790,"name": "AT_ENTRY"},{"import": 1468,"src": 2791,"name": "DT_MIPS_LOCAL_GOTIDX"},{"import": 1468,"src": 2792,"name": "DT_PLTRELSZ"},{"import": 1468,"src": 2793,"name": "STT_HIOS"},{"import": 1468,"src": 2794,"name": "DT_VALRNGLO"},{"import": 1468,"src": 2795,"name": "VER_FLG_WEAK"},{"import": 1468,"src": 2796,"name": "DT_CHECKSUM"},{"import": 1468,"src": 2797,"name": "DT_MIPS_HIDDEN_GOTIDX"},{"import": 1468,"src": 2798,"name": "AT_RANDOM"},{"import": 1468,"src": 2799,"name": "DT_MIPS_TIME_STAMP"},{"import": 1468,"src": 2800,"name": "Elf64_Rela"},{"import": 1468,"src": 2801,"name": "AT_FPUCW"},{"import": 1468,"src": 2802,"name": "DT_BIND_NOW"},{"import": 1468,"src": 2803,"name": "Elf64_Sxword"},{"import": 1468,"src": 2804,"name": "DT_ADDRRNGLO"},{"import": 1468,"src": 2805,"name": "Elf64_auxv_t"},{"import": 1468,"src": 2806,"name": "DT_SYMINENT"},{"import": 1468,"src": 2807,"name": "PT_PHDR"},{"import": 1468,"src": 2808,"name": "DT_MIPS_DELTA_SYM"},{"import": 1468,"src": 2809,"name": "DT_PPC_OPT"},{"import": 1468,"src": 2810,"name": "DT_MIPS_PIXIE_INIT"},{"import": 1468,"src": 2811,"name": "Elf32_Word"},{"import": 1468,"src": 2812,"name": "DT_AUXILIARY"},{"import": 1468,"src": 2813,"name": "STT_HP_OPAQUE"},{"import": 1468,"src": 2814,"name": "PT_SUNWSTACK"},{"import": 1468,"src": 2815,"name": "Elf32_Dyn"},{"import": 1468,"src": 2816,"name": "DT_RELSZ"},{"import": 1468,"src": 2817,"name": "Elf32_Half"},{"import": 1468,"src": 2818,"name": "Elf64_Verdef"},{"import": 1468,"src": 2819,"name": "AT_L2_CACHESIZE"},{"import": 1468,"src": 2820,"name": "Elf32_Versym"},{"import": 1468,"src": 2821,"name": "Elf64_Xword"},{"import": 1468,"src": 2822,"name": "AT_SECURE"},{"import": 1468,"src": 2823,"name": "DT_MIPS_LIBLISTNO"},{"import": 1468,"src": 2824,"name": "STT_NOTYPE"},{"import": 1468,"src": 2825,"name": "DT_MOVESZ"},{"import": 1468,"src": 2826,"name": "STB_GLOBAL"},{"import": 1468,"src": 2827,"name": "Elf32_Syminfo"},{"import": 1468,"src": 2828,"name": "DT_MIPS_LIBLIST"},{"import": 1468,"src": 2829,"name": "DT_RUNPATH"},{"import": 1468,"src": 2830,"name": "Elf64_Ehdr"},{"import": 1468,"src": 2831,"name": "DT_DEBUG"},{"import": 1468,"src": 2832,"name": "DT_MIPS_LOCALPAGE_GOTIDX"},{"import": 1468,"src": 2833,"name": "DT_PPC64_OPT"},{"import": 1468,"src": 2834,"name": "DT_NIOS2_GP"},{"import": 1468,"src": 2835,"name": "PT_INTERP"},{"import": 1468,"src": 2836,"name": "DT_TLSDESC_PLT"},{"import": 1468,"src": 2837,"name": "Elf64_Half"},{"import": 1468,"src": 2838,"name": "DT_RPATH"},{"import": 1468,"src": 2839,"name": "SHT_DYNSYM"},{"import": 1468,"src": 2840,"name": "PT_DYNAMIC"},{"import": 1468,"src": 2841,"name": "Elf32_Sxword"},{"import": 1468,"src": 2842,"name": "SHT_LOOS"},{"import": 1468,"src": 2843,"name": "STB_NUM"},{"import": 1468,"src": 2844,"name": "DT_MIPS_HIPAGENO"},{"import": 1468,"src": 2845,"name": "DT_POSFLAG_1"},{"import": 1468,"src": 2846,"name": "DT_PPC64_NUM"},{"import": 1468,"src": 2847,"name": "PT_HIPROC"},{"import": 1468,"src": 2848,"name": "STB_WEAK"},{"import": 1468,"src": 2849,"name": "DT_VERNEED"},{"import": 1468,"src": 2850,"name": "DT_STRSZ"},{"import": 1468,"src": 2851,"name": "DT_MIPS_DELTA_CLASSSYM_NO"},{"import": 1468,"src": 2852,"name": "Elf32_Lib"},{"import": 1468,"src": 2853,"name": "SHT_LOPROC"},{"import": 1468,"src": 2854,"name": "DT_PREINIT_ARRAY"},{"import": 1468,"src": 2855,"name": "AT_GID"},{"import": 1468,"src": 2856,"name": "STB_HIOS"},{"import": 1468,"src": 2857,"name": "PT_NUM"},{"import": 1468,"src": 2858,"name": "Ehdr"},{"import": 1468,"src": 2859,"name": "DT_VERDEFNUM"},{"import": 1468,"src": 2860,"name": "DT_SYMBOLIC"},{"import": 1468,"src": 2861,"name": "DT_ALPHA_PLTRO"},{"import": 1468,"src": 2862,"name": "DT_MIPS_INTERFACE_SIZE"},{"import": 1468,"src": 2863,"name": "DT_MIPS_GOTSYM"},{"import": 1468,"src": 2864,"name": "DT_SYMTAB_SHNDX"},{"import": 1468,"src": 2865,"name": "DT_MIPS_DELTA_INSTANCE_NO"},{"import": 1468,"src": 2866,"name": "AT_EXECFD"},{"import": 1468,"src": 2867,"name": "PT_SHLIB"},{"import": 1468,"src": 2868,"name": "Elf32_Rela"},{"import": 1468,"src": 2869,"name": "DT_MIPS_IVERSION"},{"import": 1468,"src": 2870,"name": "AT_PLATFORM"},{"import": 1468,"src": 2871,"name": "DT_FILTER"},{"import": 1468,"src": 2872,"name": "SHT_REL"},{"import": 1468,"src": 2873,"name": "Elf64_Sword"},{"import": 1468,"src": 2874,"name": "AT_L1I_CACHEGEOMETRY"},{"import": 1468,"src": 2875,"name": "AT_EUID"},{"import": 1468,"src": 2876,"name": "STB_MIPS_SPLIT_COMMON"},{"import": 1468,"src": 2877,"name": "Shdr"},{"import": 1468,"src": 2878,"name": "AT_UID"},{"import": 1468,"src": 2879,"name": "PT_LOSUNW"},{"import": 1468,"src": 2880,"name": "DT_PROCNUM"},{"import": 1468,"src": 2881,"name": "DT_MIPS_AUX_DYNAMIC"},{"import": 1468,"src": 2882,"name": "AT_EXECFN"},{"import": 1468,"src": 2883,"name": "AT_L2_CACHESHAPE"},{"import": 1468,"src": 2884,"name": "DT_RELA"},{"import": 1468,"src": 2885,"name": "DT_STRTAB"},{"import": 1468,"src": 2886,"name": "SHT_DYNAMIC"},{"import": 1468,"src": 2887,"name": "DT_MIPS_INTERFACE"},{"import": 1468,"src": 2888,"name": "DT_REL"},{"import": 1468,"src": 2889,"name": "DT_VERSYM"},{"import": 1468,"src": 2890,"name": "DT_VERDEF"},{"import": 1468,"src": 2891,"name": "DT_PLTPADSZ"},{"import": 1468,"src": 2892,"name": "Elf32_Sym"},{"import": 1468,"src": 2893,"name": "DT_MIPS_GP_VALUE"},{"import": 1468,"src": 2894,"name": "PT_GNU_STACK"},{"import": 1468,"src": 2895,"name": "DT_EXTRANUM"},{"import": 1468,"src": 2896,"name": "DT_PREINIT_ARRAYSZ"},{"import": 1468,"src": 2897,"name": "DT_CONFIG"},{"import": 1468,"src": 2898,"name": "Elf64_Word"},{"import": 1468,"src": 2899,"name": "AT_L1D_CACHEGEOMETRY"},{"import": 1468,"src": 2900,"name": "AT_L1D_CACHESHAPE"},{"import": 1468,"src": 2901,"name": "STT_OBJECT"},{"import": 1468,"src": 2902,"name": "AT_CLKTCK"},{"import": 1468,"src": 2903,"name": "ET_DYN"},{"import": 1468,"src": 2904,"name": "DT_GNU_PRELINKED"},{"import": 1468,"src": 2905,"name": "SHT_HIPROC"},{"import": 1468,"src": 2906,"name": "Elf64_Rel"},{"import": 1468,"src": 2907,"name": "PT_GNU_RELRO"},{"import": 1468,"src": 2908,"name": "AT_PHDR"},{"import": 1468,"src": 2909,"name": "SHT_NULL"},{"import": 1468,"src": 2910,"name": "PT_NULL"},{"import": 1468,"src": 2911,"name": "Elf64_Vernaux"},{"import": 1468,"src": 2912,"name": "DT_JMPREL"},{"import": 1468,"src": 2913,"name": "SHT_NOBITS"},{"import": 1468,"src": 2914,"name": "STT_HP_STUB"},{"import": 1468,"src": 2915,"name": "AT_SYSINFO"},{"import": 1468,"src": 2916,"name": "DT_SPARC_NUM"},{"import": 1468,"src": 2917,"name": "AT_L3_CACHESIZE"},{"import": 1468,"src": 2918,"name": "Elf64_Lib"},{"import": 1468,"src": 2919,"name": "STT_SECTION"},{"import": 1468,"src": 2920,"name": "DT_PLTPAD"},{"import": 1468,"src": 2921,"name": "Elf32_Verdef"},{"import": 1468,"src": 2922,"name": "DT_PPC_GOT"},{"import": 1468,"src": 2923,"name": "PT_LOAD"},{"import": 1468,"src": 2924,"name": "SHT_PREINIT_ARRAY"},{"import": 1468,"src": 2925,"name": "STT_FILE"},{"import": 1468,"src": 2926,"name": "Elf32_RegInfo"},{"import": 1468,"src": 2927,"name": "AT_FLAGS"},{"import": 1468,"src": 2928,"name": "DT_IA_64_PLT_RESERVE"},{"import": 1468,"src": 2929,"name": "Elf64_Phdr"},{"import": 1468,"src": 2930,"name": "Verdaux"},{"import": 1468,"src": 2931,"name": "DT_MIPS_OPTIONS"},{"import": 1468,"src": 2932,"name": "AT_IGNORE"},{"import": 1468,"src": 2933,"name": "SHT_HASH"},{"import": 1468,"src": 2934,"name": "STB_LOOS"},{"import": 1468,"src": 2935,"name": "STB_GNU_UNIQUE"},{"import": 1468,"src": 2936,"name": "DT_MIPS_PROTECTED_GOTIDX"},{"import": 1468,"src": 2937,"name": "DT_VALRNGHI"},{"import": 1468,"src": 2938,"name": "Elf32_Rel"},{"import": 1468,"src": 2939,"name": "DT_MIPS_DYNSTR_ALIGN"},{"import": 1468,"src": 2940,"name": "DT_HASH"},{"import": 1468,"src": 2941,"name": "DT_INIT"},{"import": 1468,"src": 2942,"name": "DT_FINI_ARRAYSZ"},{"import": 1468,"src": 2943,"name": "DT_NUM"},{"import": 1468,"src": 2944,"name": "Elf64_Move"},{"import": 1468,"src": 2945,"name": "Elf32_Off"},{"import": 1468,"src": 2946,"name": "Elf32_Vernaux"},{"import": 1468,"src": 2947,"name": "DT_MIPS_RLD_VERSION"},{"import": 1468,"src": 2948,"name": "DT_MIPS_CONFLICTNO"},{"import": 1468,"src": 2949,"name": "DT_GNU_HASH"},{"import": 1468,"src": 2950,"name": "PT_LOPROC"},{"import": 1468,"src": 2951,"name": "DT_MIPS_DELTA_CLASS"},{"import": 1468,"src": 2952,"name": "DT_MIPS_FLAGS"},{"import": 1468,"src": 2953,"name": "Auxv"},{"import": 1468,"src": 2954,"name": "Elf32_Section"},{"import": 1468,"src": 2955,"name": "Elf32_Sword"},{"import": 1468,"src": 2956,"name": "PT_LOOS"},{"import": 1468,"src": 2957,"name": "AT_BASE_PLATFORM"},{"import": 1468,"src": 2958,"name": "DT_MIPS_ICHECKSUM"},{"import": 1468,"src": 2959,"name": "AT_BASE"},{"import": 1468,"src": 2960,"name": "DT_ALPHA_NUM"},{"import": 1468,"src": 2961,"name": "DT_MIPS_RLD_MAP"},{"import": 1468,"src": 2962,"name": "STB_HIPROC"},{"import": 1468,"src": 2963,"name": "SHT_NOTE"},{"import": 1468,"src": 2964,"name": "STT_LOOS"},{"import": 1468,"src": 2965,"name": "Elf64_Syminfo"},{"import": 1468,"src": 2966,"name": "STT_NUM"},{"import": 1468,"src": 2967,"name": "AT_L1I_CACHESIZE"},{"import": 1468,"src": 2968,"name": "DT_PPC_NUM"},{"import": 1468,"src": 2969,"name": "DT_SONAME"},{"import": 1468,"src": 2970,"name": "DT_MIPS_DELTA_RELOC_NO"},{"import": 1468,"src": 2971,"name": "SHT_SYMTAB"},{"import": 1468,"src": 2972,"name": "DT_VERSIONTAGNUM"},{"import": 1468,"src": 2973,"name": "SHT_PROGBITS"},{"import": 1468,"src": 2974,"name": "AT_PHENT"},{"import": 1468,"src": 2975,"name": "Elf32_Addr"},{"import": 1468,"src": 2976,"name": "DT_MIPS_CXX_FLAGS"},{"import": 1468,"src": 2977,"name": "Elf32_Ehdr"},{"import": 1468,"src": 2978,"name": "PT_SUNWBSS"},{"import": 1468,"src": 2979,"name": "STT_PARISC_MILLICODE"},{"import": 1468,"src": 2980,"name": "DT_RELENT"},{"import": 1468,"src": 2981,"name": "DT_FINI"},{"import": 1468,"src": 2982,"name": "DT_MIPS_DELTA_CLASSSYM"},{"import": 1468,"src": 2983,"name": "Elf32_Shdr"},{"import": 1468,"src": 2984,"name": "io"},{"import": 1468,"src": 2985,"name": "math"},{"import": 1468,"src": 2986,"name": "debug"},{"import": 1468,"src": 2987,"name": "std"},{"import": 1468,"src": 2988,"name": "File"},{"import": 1468,"src": 2989,"name": "builtin"},{"import": 1468,"src": 2990,"name": "InStream"},{"import": 1468,"src": 2991,"name": "os"},{"import": 1468,"src": 2992,"name": "mem"},{"import": 1470,"src": 2993,"name": "isDigit"},{"import": 1470,"src": 2994,"name": "indexOfIgnoreCasePos"},{"import": 1470,"src": 2995,"name": "eqlIgnoreCase"},{"import": 1470,"src": 2996,"name": "isPunct"},{"import": 1470,"src": 2997,"name": "isLower"},{"import": 1470,"src": 2998,"name": "isXDigit"},{"import": 1470,"src": 2999,"name": "isBlank"},{"import": 1470,"src": 3000,"name": "toLower"},{"import": 1470,"src": 3001,"name": "isSpace"},{"import": 1470,"src": 3002,"name": "isGraph"},{"import": 1470,"src": 3003,"name": "isUpper"},{"import": 1470,"src": 3004,"name": "isAlpha"},{"import": 1470,"src": 3005,"name": "indexOfIgnoreCase"},{"import": 1470,"src": 3006,"name": "allocLowerString"},{"import": 1470,"src": 3007,"name": "isASCII"},{"import": 1470,"src": 3008,"name": "isAlNum"},{"import": 1470,"src": 3009,"name": "isPrint"},{"import": 1470,"src": 3010,"name": "toUpper"},{"import": 1470,"src": 3011,"name": "isCntrl"},{"import": 1470,"src": 3012,"name": "std"},{"import": 1470,"src": 3013,"name": "inTable"},{"import": 1470,"src": 3014,"name": "combinedTable"},{"import": 1470,"src": 3015,"name": "tIndex"},{"import": 2011,"src": 3016,"name": "setUserName"},{"import": 2011,"src": 3017,"name": "ExecResult"},{"import": 2011,"src": 3018,"name": "StdIo","kind": "const","type": 778,"value": 2012},{"import": 2011,"src": 3019,"name": "spawn"},{"import": 2011,"src": 3020,"name": "kill"},{"import": 2011,"src": 3021,"name": "spawnAndWait"},{"import": 2011,"src": 3022,"name": "killPosix"},{"import": 2011,"src": 3023,"name": "exec"},{"import": 2011,"src": 3024,"name": "SpawnError","kind": "const","type": 778,"value": 2013},{"import": 2011,"src": 3025,"name": "wait"},{"import": 2011,"src": 3026,"name": "deinit"},{"import": 2011,"src": 3027,"name": "killWindows"},{"import": 2011,"src": 3028,"name": "init"},{"import": 2011,"src": 3029,"name": "Term","kind": "const","type": 778,"value": 2014},{"import": 2011,"src": 3030,"name": "waitUnwrapped"},{"import": 2011,"src": 3031,"name": "statusToTerm"},{"import": 2011,"src": 3032,"name": "waitPosix"},{"import": 2011,"src": 3033,"name": "handleWaitResult"},{"import": 2011,"src": 3034,"name": "cleanupStreams"},{"import": 2011,"src": 3035,"name": "spawnPosix"},{"import": 2011,"src": 3036,"name": "waitUnwrappedWindows"},{"import": 2011,"src": 3037,"name": "cleanupAfterWait"},{"import": 2011,"src": 3038,"name": "spawnWindows"},{"import": 2011,"src": 3039,"name": "setUpChildIo"},{"import": 2011,"src": 3040,"name": "waitWindows"},{"import": 1472,"src": 3041,"name": "getAutoEqlFn"},{"import": 1472,"src": 210,"name": "hashString","kind": "const","type": 266,"value": 379},{"import": 1472,"src": 575,"name": "getTrivialEqlFn","kind": "const","type": 916,"value": 1216},{"import": 1472,"src": 3042,"name": "getAutoHashStratFn"},{"import": 1472,"src": 992,"name": "AutoHashMap","kind": "const","type": 1493,"value": 1285},{"import": 1472,"src": 254,"name": "getAutoHashFn","kind": "const","type": 2018,"value": 1456},{"import": 1472,"src": 573,"name": "HashMap","kind": "const","type": 901,"value": 1210},{"import": 1472,"src": 211,"name": "eqlString","kind": "const","type": 28,"value": 380},{"import": 1472,"src": 546,"name": "getHashPtrAddrFn","kind": "const","type": 784,"value": 1171},{"import": 1472,"src": 564,"name": "StringHashMap","kind": "const","type": 865,"value": 1196},{"import": 1472,"src": 3043,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1472,"src": 3044,"name": "Wyhash","kind": "const","type": 778,"value": 1298},{"import": 1472,"src": 3045,"name": "math"},{"import": 1472,"src": 3046,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1472,"src": 3047,"name": "debug"},{"import": 1472,"src": 3048,"name": "meta"},{"import": 1472,"src": 3049,"name": "testing"},{"import": 1472,"src": 3050,"name": "debug_u32","kind": "const","type": 778,"value": 807},{"import": 1472,"src": 3051,"name": "Allocator","kind": "const","type": 778,"value": 1679},{"import": 1472,"src": 3052,"name": "want_modification_safety","kind": "const","type": 842,"value": null},{"import": 1472,"src": 3053,"name": "autoHash","kind": "const","type": 2019,"value": 1457},{"import": 1472,"src": 3054,"name": "assert"},{"import": 1472,"src": 3055,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1473,"src": 350,"name": "charToDigit","kind": "const","type": 403,"value": 573},{"import": 1473,"src": 537,"name": "bufPrint","kind": "const","type": 2020,"value": 1458},{"import": 1473,"src": 3056,"name": "default_max_depth","kind": "const","type": 843,"value": null},{"import": 1473,"src": 96,"name": "formatType","kind": "const","type": 2021,"value": 1459},{"import": 1473,"src": 3057,"name": "isWhiteSpace"},{"import": 1473,"src": 3058,"name": "formatAsciiChar"},{"import": 1473,"src": 3059,"name": "formatFloatDecimal"},{"import": 1473,"src": 187,"name": "formatIntValue","kind": "const","type": 2022,"value": 1460},{"import": 1473,"src": 3060,"name": "trim"},{"import": 1473,"src": 492,"name": "formatFloatScientific","kind": "const","type": 2023,"value": 1461},{"import": 1473,"src": 3061,"name": "parseFloat"},{"import": 1473,"src": 3062,"name": "formatBytes"},{"import": 1473,"src": 3063,"name": "allocPrint"},{"import": 1473,"src": 15,"name": "format","kind": "const","type": 2024,"value": 1462},{"import": 1473,"src": 3064,"name": "parseInt"},{"import": 1473,"src": 3065,"name": "FormatOptions","kind": "const","type": 778,"value": 1084},{"import": 1473,"src": 3066,"name": "BufPrintError","kind": "const","type": 778,"value": 1914},{"import": 1473,"src": 188,"name": "formatInt","kind": "const","type": 2025,"value": 1463},{"import": 1473,"src": 3067,"name": "formatIntBuf"},{"import": 1473,"src": 3068,"name": "AllocPrintError"},{"import": 1473,"src": 137,"name": "formatText","kind": "const","type": 2026,"value": 1464},{"import": 1473,"src": 3069,"name": "hexToBytes"},{"import": 1473,"src": 3070,"name": "formatBuf"},{"import": 1473,"src": 3071,"name": "parseUnsigned"},{"import": 1473,"src": 3072,"name": "Alignment","kind": "const","type": 778,"value": 2027},{"import": 1473,"src": 3073,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1473,"src": 3074,"name": "builtin"},{"import": 1473,"src": 3075,"name": "BufPrintContext","kind": "const","type": 778,"value": 1916},{"import": 1473,"src": 542,"name": "bufPrintWrite","kind": "const","type": 763,"value": 1116},{"import": 1473,"src": 3076,"name": "countSize"},{"import": 1473,"src": 3077,"name": "math","kind": "const","type": 778,"value": 939},{"import": 1473,"src": 3078,"name": "errol","kind": "const","type": 778,"value": 2028},{"import": 1473,"src": 3079,"name": "nextArg","kind": "const","type": 2029,"value": 1465},{"import": 1473,"src": 3080,"name": "FormatIntBuf"},{"import": 1473,"src": 3081,"name": "debug","kind": "const","type": 778,"value": 1459},{"import": 1473,"src": 3082,"name": "testing"},{"import": 1473,"src": 490,"name": "formatFloatValue","kind": "const","type": 2030,"value": 1466},{"import": 1473,"src": 3083,"name": "peekIsAlign"},{"import": 1473,"src": 493,"name": "formatIntSigned","kind": "const","type": 2031,"value": 1467},{"import": 1473,"src": 3084,"name": "testFmt"},{"import": 1473,"src": 3085,"name": "bufPrintIntToSlice"},{"import": 1473,"src": 3086,"name": "ParseUnsignedError"},{"import": 1473,"src": 189,"name": "formatIntUnsigned","kind": "const","type": 2032,"value": 1468},{"import": 1473,"src": 3087,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1473,"src": 183,"name": "formatValue","kind": "const","type": 2033,"value": 1469},{"import": 1473,"src": 190,"name": "digitToChar","kind": "const","type": 260,"value": 357},{"import": 1473,"src": 3088,"name": "formatIntCallback"},{"import": 1473,"src": 3089,"name": "lossyCast"},{"import": 1473,"src": 3090,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1474,"src": 3091,"name": "standard_encoder"},{"import": 1474,"src": 3092,"name": "Base64Encoder"},{"import": 1474,"src": 3093,"name": "standard_decoder_unsafe"},{"import": 1474,"src": 3094,"name": "standard_pad_char"},{"import": 1474,"src": 3095,"name": "Base64DecoderWithIgnore"},{"import": 1474,"src": 3096,"name": "standard_alphabet_chars"},{"import": 1474,"src": 3097,"name": "Base64DecoderUnsafe"},{"import": 1474,"src": 3098,"name": "standard_decoder"},{"import": 1474,"src": 3099,"name": "Base64Decoder"},{"import": 1474,"src": 3100,"name": "calcDecodedSizeExactUnsafe"},{"import": 1474,"src": 3101,"name": "testError"},{"import": 1474,"src": 3102,"name": "testOutputTooSmallError"},{"import": 1474,"src": 3103,"name": "std"},{"import": 1474,"src": 3104,"name": "testDecodeIgnoreSpace"},{"import": 1474,"src": 3105,"name": "testBase64"},{"import": 1474,"src": 3106,"name": "assert"},{"import": 1474,"src": 3107,"name": "testing"},{"import": 1474,"src": 3108,"name": "testAllApis"},{"import": 1474,"src": 3109,"name": "mem"},{"import": 1475,"src": 3110,"name": "Queue"},{"import": 1475,"src": 3111,"name": "Int"},{"import": 1475,"src": 3112,"name": "Stack"},{"import": 1477,"src": 3113,"name": "StreamingParser"},{"import": 1477,"src": 3114,"name": "Array"},{"import": 1477,"src": 3115,"name": "validate"},{"import": 1477,"src": 3116,"name": "Token"},{"import": 1477,"src": 3117,"name": "Parser"},{"import": 1477,"src": 3118,"name": "WriteStream"},{"import": 1477,"src": 3119,"name": "ObjectMap"},{"import": 1477,"src": 3120,"name": "ValueTree"},{"import": 1477,"src": 3121,"name": "TokenStream"},{"import": 1477,"src": 3122,"name": "Value"},{"import": 1477,"src": 3123,"name": "maxInt"},{"import": 1477,"src": 3124,"name": "std"},{"import": 1477,"src": 3125,"name": "debug"},{"import": 1477,"src": 3126,"name": "testing"},{"import": 1477,"src": 3127,"name": "ArenaAllocator"},{"import": 1477,"src": 3128,"name": "checkNext"},{"import": 1477,"src": 3129,"name": "Allocator"},{"import": 1477,"src": 3130,"name": "ArrayList"},{"import": 1477,"src": 3131,"name": "mem"},{"import": 1477,"src": 3132,"name": "StringHashMap"},{"import": 1479,"src": 3133,"name": "DebugSubsectionKind","kind": "const","type": 778,"value": 2034},{"import": 1479,"src": 3134,"name": "LineFragmentHeader","kind": "const","type": 778,"value": 2035},{"import": 1479,"src": 3135,"name": "DbiStreamHeader","kind": "const","type": 778,"value": 1723},{"import": 1479,"src": 3136,"name": "TypeIndex","kind": "const","type": 778,"value": 807},{"import": 1479,"src": 3137,"name": "ModInfo","kind": "const","type": 778,"value": 1551},{"import": 1479,"src": 3138,"name": "SectionContribEntry","kind": "const","type": 778,"value": 833},{"import": 1479,"src": 3139,"name": "LineBlockFragmentHeader","kind": "const","type": 778,"value": 2036},{"import": 1479,"src": 3140,"name": "PDBStringTableHeader","kind": "const","type": 778,"value": 2037},{"import": 1479,"src": 3141,"name": "ColumnNumberEntry","kind": "const","type": 778,"value": 2038},{"import": 1479,"src": 3142,"name": "LineNumberEntry","kind": "const","type": 778,"value": 2039},{"import": 1479,"src": 3143,"name": "DebugSubsectionHeader","kind": "const","type": 778,"value": 2040},{"import": 1479,"src": 3144,"name": "ProcSymFlags","kind": "const","type": 778,"value": 2041},{"import": 1479,"src": 3145,"name": "RecordPrefix","kind": "const","type": 778,"value": 2042},{"import": 1479,"src": 3146,"name": "Pdb","kind": "const","type": 778,"value": 1707},{"import": 1479,"src": 3147,"name": "SectionMapHeader"},{"import": 1479,"src": 3148,"name": "StreamType","kind": "const","type": 778,"value": 1035},{"import": 1479,"src": 3149,"name": "SymbolKind","kind": "const","type": 778,"value": 2043},{"import": 1479,"src": 3150,"name": "ProcSym","kind": "const","type": 778,"value": 2044},{"import": 1479,"src": 3151,"name": "FileChecksumEntryHeader","kind": "const","type": 778,"value": 2045},{"import": 1479,"src": 3152,"name": "SectionMapEntry"},{"import": 1479,"src": 3153,"name": "SectionContrSubstreamVersion","kind": "const","type": 778,"value": 2046},{"import": 1479,"src": 3154,"name": "LineFlags","kind": "const","type": 778,"value": 2047},{"import": 1479,"src": 3155,"name": "builtin"},{"import": 1479,"src": 3156,"name": "SuperBlock","kind": "const","type": 778,"value": 1711},{"import": 1479,"src": 3157,"name": "coff","kind": "const","type": 778,"value": 1481},{"import": 1479,"src": 3158,"name": "math","kind": "const","type": 778,"value": 939},{"import": 1479,"src": 3159,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1479,"src": 3160,"name": "MsfStream","kind": "const","type": 778,"value": 1028},{"import": 1479,"src": 3161,"name": "os"},{"import": 1479,"src": 3162,"name": "File","kind": "const","type": 778,"value": 967},{"import": 1479,"src": 65,"name": "blockCountFromSize","kind": "const","type": 67,"value": 69},{"import": 1479,"src": 3163,"name": "warn"},{"import": 1479,"src": 3164,"name": "io","kind": "const","type": 778,"value": 1450},{"import": 1479,"src": 3165,"name": "ArrayList","kind": "const","type": 831,"value": 1182},{"import": 1479,"src": 3166,"name": "Msf","kind": "const","type": 778,"value": 1709},{"import": 1479,"src": 3167,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 2048,"src": 3168,"name": "set"},{"import": 2048,"src": 3169,"name": "deinit"},{"import": 2048,"src": 3170,"name": "setMove"},{"import": 2048,"src": 3171,"name": "delete"},{"import": 2048,"src": 3172,"name": "iterator"},{"import": 2048,"src": 3173,"name": "init"},{"import": 2048,"src": 3174,"name": "count"},{"import": 2048,"src": 3175,"name": "get"},{"import": 2048,"src": 3176,"name": "copy"},{"import": 2048,"src": 3177,"name": "BufMapHashMap","kind": "const","type": 778,"value": 867},{"import": 2048,"src": 3178,"name": "free"},{"import": 1481,"src": 3179,"name": "Section","kind": "const","type": 778,"value": 890},{"import": 1481,"src": 3180,"name": "Coff","kind": "const","type": 778,"value": 981},{"import": 1481,"src": 3181,"name": "CoffError"},{"import": 1481,"src": 3182,"name": "builtin"},{"import": 1481,"src": 3183,"name": "IMAGE_DEBUG_TYPE_CODEVIEW","kind": "const","type": 843,"value": null},{"import": 1481,"src": 3184,"name": "IMAGE_FILE_MACHINE_IA64","kind": "const","type": 843,"value": null},{"import": 1481,"src": 3185,"name": "DEBUG_DIRECTORY","kind": "const","type": 843,"value": null},{"import": 1481,"src": 3186,"name": "IMAGE_NUMBEROF_DIRECTORY_ENTRIES","kind": "const","type": 843,"value": null},{"import": 1481,"src": 3187,"name": "OptionalHeader","kind": "const","type": 778,"value": 1685},{"import": 1481,"src": 3188,"name": "IMAGE_NT_OPTIONAL_HDR64_MAGIC","kind": "const","type": 843,"value": null},{"import": 1481,"src": 3189,"name": "IMAGE_FILE_MACHINE_I386","kind": "const","type": 843,"value": null},{"import": 1481,"src": 3190,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1481,"src": 3191,"name": "os"},{"import": 1481,"src": 3192,"name": "SectionHeader","kind": "const","type": 778,"value": 1524},{"import": 1481,"src": 3193,"name": "File","kind": "const","type": 778,"value": 967},{"import": 1481,"src": 3194,"name": "DebugDirectoryEntry","kind": "const","type": 778,"value": 1698},{"import": 1481,"src": 3195,"name": "CoffHeader","kind": "const","type": 778,"value": 1684},{"import": 1481,"src": 3196,"name": "IMAGE_NT_OPTIONAL_HDR32_MAGIC","kind": "const","type": 843,"value": null},{"import": 1481,"src": 3197,"name": "IMAGE_FILE_MACHINE_AMD64","kind": "const","type": 843,"value": null},{"import": 1481,"src": 3198,"name": "io"},{"import": 1481,"src": 3199,"name": "ArrayList","kind": "const","type": 831,"value": 1182},{"import": 1481,"src": 3200,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1482,"src": 3201,"name": "Sha3_384"},{"import": 1482,"src": 3202,"name": "HmacMd5"},{"import": 1482,"src": 3203,"name": "gimli"},{"import": 1482,"src": 3204,"name": "Sha512"},{"import": 1482,"src": 3205,"name": "Sha3_256"},{"import": 1482,"src": 3206,"name": "Sha3_224"},{"import": 1482,"src": 3207,"name": "Blake2s256"},{"import": 1482,"src": 3208,"name": "Md5"},{"import": 1482,"src": 3209,"name": "Sha256"},{"import": 1482,"src": 3210,"name": "Sha3_512"},{"import": 1482,"src": 3211,"name": "Blake2b384"},{"import": 1482,"src": 3212,"name": "randomBytes"},{"import": 1482,"src": 3213,"name": "Blake2b512"},{"import": 1482,"src": 3214,"name": "X25519"},{"import": 1482,"src": 3215,"name": "HmacBlake2s256"},{"import": 1482,"src": 3216,"name": "chaCha20IETF"},{"import": 1482,"src": 3217,"name": "chaCha20With64BitNonce"},{"import": 1482,"src": 3218,"name": "Blake2s224"},{"import": 1482,"src": 3219,"name": "Sha1"},{"import": 1482,"src": 3220,"name": "Poly1305"},{"import": 1482,"src": 3221,"name": "HmacSha256"},{"import": 1482,"src": 3222,"name": "Sha384"},{"import": 1482,"src": 3223,"name": "Sha224"},{"import": 1482,"src": 3224,"name": "HmacSha1"},{"import": 1482,"src": 3225,"name": "blake2"},{"import": 1482,"src": 3226,"name": "sha2"},{"import": 1482,"src": 3227,"name": "std"},{"import": 1482,"src": 3228,"name": "import_chaCha20"},{"import": 1482,"src": 3229,"name": "sha3"},{"import": 1482,"src": 3230,"name": "hmac"},{"import": 1483,"src": 3231,"name": "Strategy"},{"import": 1483,"src": 3232,"name": "Crc32"},{"import": 1483,"src": 3233,"name": "Murmur2_64"},{"import": 1483,"src": 3234,"name": "Wyhash","kind": "const","type": 778,"value": 1298},{"import": 1483,"src": 3235,"name": "SipHash128"},{"import": 1483,"src": 3236,"name": "autoHashStrat"},{"import": 1483,"src": 3237,"name": "murmur"},{"import": 1483,"src": 3238,"name": "Murmur2_32"},{"import": 1483,"src": 3239,"name": "Fnv1a_128"},{"import": 1483,"src": 3240,"name": "cityhash"},{"import": 1483,"src": 3241,"name": "Murmur3_32"},{"import": 1483,"src": 3242,"name": "Fnv1a_32"},{"import": 1483,"src": 3243,"name": "Fnv1a_64"},{"import": 1483,"src": 3244,"name": "Adler32"},{"import": 1483,"src": 3245,"name": "SipHash64"},{"import": 1483,"src": 3246,"name": "CityHash32"},{"import": 1483,"src": 3247,"name": "crc"},{"import": 1483,"src": 3248,"name": "autoHash","kind": "const","type": 2019,"value": 1457},{"import": 1483,"src": 3249,"name": "CityHash64"},{"import": 1483,"src": 3250,"name": "fnv"},{"import": 1483,"src": 3251,"name": "wyhash","kind": "const","type": 778,"value": 1896},{"import": 1483,"src": 3252,"name": "adler"},{"import": 1483,"src": 3253,"name": "auto_hash","kind": "const","type": 778,"value": 2049},{"import": 1483,"src": 3254,"name": "siphash"},{"import": 1484,"src": 3255,"name": "sort"},{"import": 1484,"src": 3256,"name": "min"},{"import": 1484,"src": 3257,"name": "max"},{"import": 1484,"src": 3258,"name": "desc"},{"import": 1484,"src": 3259,"name": "asc"},{"import": 1484,"src": 3260,"name": "insertionSort"},{"import": 1484,"src": 3261,"name": "mem"},{"import": 1484,"src": 3262,"name": "builtin"},{"import": 1484,"src": 3263,"name": "fixed_buffer_mem"},{"import": 1484,"src": 3264,"name": "findLastForward"},{"import": 1484,"src": 3265,"name": "fuzzTest"},{"import": 1484,"src": 3266,"name": "mergeInto"},{"import": 1484,"src": 3267,"name": "IdAndValue"},{"import": 1484,"src": 3268,"name": "mergeInPlace"},{"import": 1484,"src": 3269,"name": "binaryLast"},{"import": 1484,"src": 3270,"name": "findFirstForward"},{"import": 1484,"src": 3271,"name": "swap"},{"import": 1484,"src": 3272,"name": "math"},{"import": 1484,"src": 3273,"name": "std"},{"import": 1484,"src": 3274,"name": "testing"},{"import": 1484,"src": 3275,"name": "mergeExternal"},{"import": 1484,"src": 3276,"name": "Pull"},{"import": 1484,"src": 3277,"name": "findFirstBackward"},{"import": 1484,"src": 3278,"name": "findLastBackward"},{"import": 1484,"src": 3279,"name": "Iterator"},{"import": 1484,"src": 3280,"name": "Range"},{"import": 1484,"src": 3281,"name": "binaryFirst"},{"import": 1484,"src": 3282,"name": "blockSwap"},{"import": 1484,"src": 3283,"name": "testStableSort"},{"import": 1484,"src": 3284,"name": "assert"},{"import": 1484,"src": 3285,"name": "cmpByValue"},{"import": 1484,"src": 3286,"name": "mergeInternal"},{"import": 2050,"src": 3287,"name": "_errno"},{"import": 1485,"src": 3288,"name": "unlinkat"},{"import": 1485,"src": 3289,"name": "munmap"},{"import": 1485,"src": 3290,"name": "aligned_alloc"},{"import": 1485,"src": 3291,"name": "fork"},{"import": 1485,"src": 3292,"name": "dup"},{"import": 1485,"src": 3293,"name": "getsockopt"},{"import": 1485,"src": 3294,"name": "kqueue"},{"import": 1485,"src": 3295,"name": "unlink"},{"import": 1485,"src": 3296,"name": "sysctlnametomib"},{"import": 1485,"src": 3297,"name": "fwrite"},{"import": 1485,"src": 3298,"name": "mprotect"},{"import": 1485,"src": 3299,"name": "readlink"},{"import": 1485,"src": 3300,"name": "socket"},{"import": 1485,"src": 3301,"name": "getdirentries"},{"import": 1485,"src": 3302,"name": "fread"},{"import": 1485,"src": 3303,"name": "exit"},{"import": 1485,"src": 3304,"name": "lseek"},{"import": 1485,"src": 3305,"name": "posix_memalign"},{"import": 1485,"src": 3306,"name": "pipe2"},{"import": 1485,"src": 3307,"name": "pthread_attr_init"},{"import": 1485,"src": 3308,"name": "stat"},{"import": 1485,"src": 3309,"name": "gethostname"},{"import": 1485,"src": 3310,"name": "listen"},{"import": 1485,"src": 3311,"name": "printf"},{"import": 1485,"src": 3312,"name": "mmap"},{"import": 1485,"src": 3313,"name": "nanosleep"},{"import": 1485,"src": 3314,"name": "sigprocmask"},{"import": 1485,"src": 3315,"name": "pthread_create"},{"import": 1485,"src": 3316,"name": "readv"},{"import": 1485,"src": 3317,"name": "open"},{"import": 1485,"src": 3318,"name": "fstat$INODE64"},{"import": 1485,"src": 3319,"name": "getcwd"},{"import": 1485,"src": 3320,"name": "setuid"},{"import": 1485,"src": 3321,"name": "gettimeofday"},{"import": 1485,"src": 3322,"name": "sysctl"},{"import": 1485,"src": 3323,"name": "pthread_self"},{"import": 1485,"src": 3324,"name": "free"},{"import": 1485,"src": 3325,"name": "fstat"},{"import": 1485,"src": 3326,"name": "rmdir"},{"import": 1485,"src": 3327,"name": "openat"},{"import": 1485,"src": 3328,"name": "isatty"},{"import": 1485,"src": 3329,"name": "getErrno"},{"import": 1485,"src": 3330,"name": "access"},{"import": 1485,"src": 3331,"name": "fclose"},{"import": 1485,"src": 3332,"name": "connect"},{"import": 1485,"src": 3333,"name": "abort"},{"import": 1485,"src": 3334,"name": "sigaction"},{"import": 1485,"src": 3335,"name": "pthread_join"},{"import": 1485,"src": 3336,"name": "writev"},{"import": 1485,"src": 3337,"name": "realpath"},{"import": 1485,"src": 3338,"name": "raise"},{"import": 1485,"src": 3339,"name": "close"},{"import": 1485,"src": 3340,"name": "futimens"},{"import": 1485,"src": 3341,"name": "waitpid"},{"import": 1485,"src": 3342,"name": "bind"},{"import": 1485,"src": 3343,"name": "pread"},{"import": 1485,"src": 3344,"name": "realloc"},{"import": 1485,"src": 3345,"name": "malloc"},{"import": 1485,"src": 3346,"name": "pwrite"},{"import": 1485,"src": 3347,"name": "symlink"},{"import": 1485,"src": 3348,"name": "utimensat"},{"import": 1485,"src": 3349,"name": "getenv"},{"import": 1485,"src": 3350,"name": "write"},{"import": 1485,"src": 3351,"name": "setgid"},{"import": 1485,"src": 3352,"name": "clock_gettime"},{"import": 1485,"src": 3353,"name": "chdir"},{"import": 1485,"src": 3354,"name": "dup2"},{"import": 1485,"src": 3355,"name": "pthread_attr_setstack"},{"import": 1485,"src": 3356,"name": "pthread_attr_destroy"},{"import": 1485,"src": 3357,"name": "kevent"},{"import": 1485,"src": 3358,"name": "kill"},{"import": 1485,"src": 3359,"name": "preadv"},{"import": 1485,"src": 3360,"name": "setreuid"},{"import": 1485,"src": 3361,"name": "execve"},{"import": 1485,"src": 3362,"name": "accept4"},{"import": 1485,"src": 3363,"name": "pwritev"},{"import": 1485,"src": 3364,"name": "versionCheck"},{"import": 1485,"src": 3365,"name": "setregid"},{"import": 1485,"src": 3366,"name": "read"},{"import": 1485,"src": 3367,"name": "fopen"},{"import": 1485,"src": 3368,"name": "rename"},{"import": 1485,"src": 3369,"name": "clock_getres"},{"import": 1485,"src": 3370,"name": "mkdir"},{"import": 1485,"src": 3371,"name": "getsockname"},{"import": 1485,"src": 3372,"name": "close$NOCANCEL"},{"import": 1485,"src": 3373,"name": "sysctlbyname"},{"import": 1485,"src": 3374,"name": "pipe"},{"import": 1485,"src": 3375,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1485,"src": 3376,"name": "page_size"},{"import": 1485,"src": 3377,"name": "std"},{"import": 1486,"src": 3378,"name": "NullTerminated2DArray"},{"import": 1486,"src": 3379,"name": "cmp"},{"import": 1486,"src": 3380,"name": "line_sep"},{"import": 1486,"src": 3381,"name": "addNullByte"},{"import": 1486,"src": 3382,"name": "builtin"},{"import": 1486,"src": 3383,"name": "testCStrFnsImpl"},{"import": 1486,"src": 3384,"name": "std"},{"import": 1486,"src": 3385,"name": "debug"},{"import": 1486,"src": 3386,"name": "testing"},{"import": 1486,"src": 3387,"name": "mem"},{"import": 1487,"src": 3388,"name": "Node"},{"import": 1487,"src": 3389,"name": "Tree"},{"import": 1487,"src": 3390,"name": "testNumber"},{"import": 1487,"src": 3391,"name": "Black"},{"import": 1487,"src": 3392,"name": "rotateLeft"},{"import": 1487,"src": 3393,"name": "ReplaceError"},{"import": 1487,"src": 3394,"name": "std"},{"import": 1487,"src": 3395,"name": "testCompare"},{"import": 1487,"src": 3396,"name": "testGetNumber"},{"import": 1487,"src": 3397,"name": "Color"},{"import": 1487,"src": 3398,"name": "rotateRight"},{"import": 1487,"src": 3399,"name": "doLookup"},{"import": 1487,"src": 3400,"name": "testing"},{"import": 1487,"src": 3401,"name": "assert"},{"import": 1487,"src": 3402,"name": "Red"},{"import": 1487,"src": 3403,"name": "mem"},{"import": 1488,"src": 3404,"name": "Random","kind": "const","type": 778,"value": 1833},{"import": 1488,"src": 3405,"name": "Isaac64"},{"import": 1488,"src": 3406,"name": "DefaultCsprng"},{"import": 1488,"src": 453,"name": "limitRangeBiased","kind": "const","type": 2051,"value": 1470},{"import": 1488,"src": 3407,"name": "Pcg"},{"import": 1488,"src": 3408,"name": "DefaultPrng","kind": "const","type": 778,"value": 1281},{"import": 1488,"src": 3409,"name": "Xoroshiro128","kind": "const","type": 778,"value": 1281},{"import": 1488,"src": 3410,"name": "Sfc64"},{"import": 1488,"src": 3411,"name": "builtin"},{"import": 1488,"src": 3412,"name": "sumArray"},{"import": 1488,"src": 3413,"name": "testRangeBias"},{"import": 1488,"src": 3414,"name": "ziggurat"},{"import": 1488,"src": 3415,"name": "maxInt","kind": "const","type": 871,"value": 1199},{"import": 1488,"src": 3416,"name": "math","kind": "const","type": 778,"value": 939},{"import": 1488,"src": 3417,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1488,"src": 3418,"name": "testRange"},{"import": 1488,"src": 3419,"name": "testRandomIntAtMost"},{"import": 1488,"src": 3420,"name": "expect"},{"import": 1488,"src": 3421,"name": "testRandomBoolean"},{"import": 1488,"src": 3422,"name": "SequentialPrng"},{"import": 1488,"src": 3423,"name": "expectEqual"},{"import": 1488,"src": 3424,"name": "SplitMix64","kind": "const","type": 778,"value": 1348},{"import": 1488,"src": 3425,"name": "testRandomIntLessThan"},{"import": 1488,"src": 3426,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1488,"src": 3427,"name": "testRandomInt"},{"import": 1488,"src": 3428,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1489,"src": 3429,"name": "eql"},{"import": 1489,"src": 3430,"name": "bitCount"},{"import": 1489,"src": 3431,"name": "declarations","kind": "const","type": 2052,"value": 1471},{"import": 1489,"src": 3432,"name": "fieldIndex"},{"import": 1489,"src": 558,"name": "refAllDecls","kind": "const","type": 849,"value": 1188},{"import": 1489,"src": 3433,"name": "IntToEnumError"},{"import": 1489,"src": 557,"name": "alignment","kind": "const","type": 847,"value": 1187},{"import": 1489,"src": 3434,"name": "fieldInfo"},{"import": 1489,"src": 3435,"name": "activeTag"},{"import": 1489,"src": 3436,"name": "declarationInfo"},{"import": 1489,"src": 3437,"name": "trait","kind": "const","type": 778,"value": 1978},{"import": 1489,"src": 3438,"name": "TagType"},{"import": 1489,"src": 3439,"name": "containerLayout"},{"import": 1489,"src": 3440,"name": "tagName"},{"import": 1489,"src": 3441,"name": "intToEnum"},{"import": 1489,"src": 3442,"name": "TagPayloadType"},{"import": 1489,"src": 3443,"name": "stringToEnum"},{"import": 1489,"src": 3444,"name": "fields"},{"import": 1489,"src": 578,"name": "Child","kind": "const","type": 949,"value": 1229},{"import": 1489,"src": 3445,"name": "mem"},{"import": 1489,"src": 3446,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1489,"src": 3447,"name": "math"},{"import": 1489,"src": 3448,"name": "std"},{"import": 1489,"src": 3449,"name": "debug"},{"import": 1489,"src": 3450,"name": "TypeId","kind": "const","type": 778,"value": 825},{"import": 1489,"src": 3451,"name": "testing"},{"import": 1489,"src": 3452,"name": "TypeInfo","kind": "const","type": 778,"value": 1665},{"import": 1490,"src": 3453,"name": "OsAddress"},{"import": 1490,"src": 3454,"name": "TmpWinAddr"},{"import": 1490,"src": 336,"name": "parseIp4","kind": "const","type": 388,"value": 558},{"import": 1490,"src": 3455,"name": "connectUnixSocket"},{"import": 1490,"src": 349,"name": "parseIp6","kind": "const","type": 402,"value": 572},{"import": 1490,"src": 3456,"name": "Address"},{"import": 1490,"src": 3457,"name": "Ip6Addr","kind": "const","type": 778,"value": 1248},{"import": 1490,"src": 3458,"name": "builtin"},{"import": 1490,"src": 3459,"name": "testParseIp4Fail"},{"import": 1490,"src": 3460,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1490,"src": 3461,"name": "os"},{"import": 1490,"src": 3462,"name": "net"},{"import": 1490,"src": 3463,"name": "assert"},{"import": 1490,"src": 3464,"name": "mem"},{"import": 1491,"src": 3465,"name": "Walker"},{"import": 1491,"src": 3466,"name": "makePath"},{"import": 1491,"src": 3467,"name": "MAX_PATH_BYTES","kind": "const","type": 843,"value": null},{"import": 1491,"src": 3468,"name": "readLink"},{"import": 1491,"src": 3469,"name": "deleteDirW"},{"import": 1491,"src": 3470,"name": "walkPath"},{"import": 1491,"src": 3471,"name": "realpath"},{"import": 1491,"src": 3472,"name": "selfExePath"},{"import": 1491,"src": 3473,"name": "updateFileMode"},{"import": 1491,"src": 3474,"name": "GetAppDataDirError"},{"import": 1491,"src": 3475,"name": "renameC"},{"import": 1491,"src": 3476,"name": "deleteDir"},{"import": 1491,"src": 21,"name": "openSelfExe","kind": "const","type": 20,"value": 21},{"import": 1491,"src": 3477,"name": "copyFile"},{"import": 1491,"src": 3478,"name": "Dir"},{"import": 1491,"src": 3479,"name": "symLink"},{"import": 1491,"src": 3480,"name": "path","kind": "const","type": 778,"value": 1703},{"import": 1491,"src": 3481,"name": "copyFileMode"},{"import": 1491,"src": 3482,"name": "realpathAlloc"},{"import": 1491,"src": 3483,"name": "deleteTree"},{"import": 1491,"src": 3484,"name": "SelfExePathError","kind": "const","type": 778,"value": 1749},{"import": 1491,"src": 3485,"name": "renameW"},{"import": 1491,"src": 3486,"name": "makeDir"},{"import": 1491,"src": 3487,"name": "selfExeDirPathAlloc"},{"import": 1491,"src": 3488,"name": "rename"},{"import": 1491,"src": 3489,"name": "symLinkC"},{"import": 1491,"src": 3490,"name": "OpenSelfExeError","kind": "const","type": 778,"value": 1681},{"import": 1491,"src": 3491,"name": "AtomicFile"},{"import": 1491,"src": 3492,"name": "makeDirW"},{"import": 1491,"src": 3493,"name": "updateFile"},{"import": 1491,"src": 3494,"name": "File","kind": "const","type": 778,"value": 967},{"import": 1491,"src": 3495,"name": "realpathC"},{"import": 1491,"src": 3496,"name": "getAppDataDir"},{"import": 1491,"src": 3497,"name": "realpathW"},{"import": 1491,"src": 103,"name": "selfExePathW","kind": "const","type": 149,"value": 162},{"import": 1491,"src": 3498,"name": "selfExeDirPath"},{"import": 1491,"src": 3499,"name": "deleteFile"},{"import": 1491,"src": 3500,"name": "deleteDirC"},{"import": 1491,"src": 3501,"name": "makeDirC"},{"import": 1491,"src": 3502,"name": "atomicSymLink"},{"import": 1491,"src": 3503,"name": "deleteFileC"},{"import": 1491,"src": 3504,"name": "readLinkC"},{"import": 1491,"src": 3505,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1491,"src": 3506,"name": "b64_fs_encoder"},{"import": 1491,"src": 3507,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 1491,"src": 3508,"name": "Allocator"},{"import": 1491,"src": 3509,"name": "base64"},{"import": 1491,"src": 3510,"name": "crypto"},{"import": 1491,"src": 3511,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1491,"src": 3512,"name": "default_new_dir_mode"},{"import": 1491,"src": 3513,"name": "PrevStatus"},{"import": 1491,"src": 3514,"name": "assert"},{"import": 1491,"src": 3515,"name": "mem"},{"import": 1492,"src": 3516,"name": "ThreadSafeFixedBufferAllocator"},{"import": 1492,"src": 3517,"name": "LoggingAllocator"},{"import": 1492,"src": 3518,"name": "FixedBufferAllocator","kind": "const","type": 778,"value": 1102},{"import": 1492,"src": 3519,"name": "stackFallback"},{"import": 1492,"src": 3520,"name": "ArenaAllocator","kind": "const","type": 778,"value": 1085},{"import": 1492,"src": 3521,"name": "wasm_allocator"},{"import": 1492,"src": 3522,"name": "HeapAllocator"},{"import": 1492,"src": 3523,"name": "c_allocator"},{"import": 1492,"src": 3524,"name": "direct_allocator","kind": "const","type": 977,"value": null},{"import": 1492,"src": 3525,"name": "StackFallbackAllocator"},{"import": 1492,"src": 3526,"name": "builtin"},{"import": 1492,"src": 3527,"name": "testAllocatorAligned"},{"import": 1492,"src": 3528,"name": "testAllocatorAlignedShrink"},{"import": 1492,"src": 3529,"name": "llvm.wasm.memory.size.i32"},{"import": 1492,"src": 3530,"name": "maxInt"},{"import": 1492,"src": 3531,"name": "WasmAllocator"},{"import": 1492,"src": 3532,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1492,"src": 3533,"name": "c"},{"import": 1492,"src": 3534,"name": "testAllocator"},{"import": 1492,"src": 3535,"name": "cShrink"},{"import": 1492,"src": 3536,"name": "cRealloc"},{"import": 1492,"src": 3537,"name": "test_fixed_buffer_allocator_memory"},{"import": 1492,"src": 3538,"name": "wasm_allocator_state"},{"import": 1492,"src": 3539,"name": "testAllocatorLargeAlignment"},{"import": 1492,"src": 3540,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 1492,"src": 3541,"name": "debug","kind": "const","type": 778,"value": 1459},{"import": 1492,"src": 3542,"name": "llvm.wasm.memory.grow.i32"},{"import": 1492,"src": 3543,"name": "testing"},{"import": 1492,"src": 3544,"name": "c_allocator_state"},{"import": 1492,"src": 3545,"name": "DirectAllocator","kind": "const","type": 778,"value": 2053},{"import": 1492,"src": 3546,"name": "direct_allocator_state","kind": "var","type": 1679,"value": null},{"import": 1492,"src": 3547,"name": "Allocator","kind": "const","type": 778,"value": 1679},{"import": 1492,"src": 3548,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1492,"src": 3549,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1495,"src": 3550,"name": "Timer","kind": "const","type": 778,"value": 1911},{"import": 1495,"src": 3551,"name": "microsecond","kind": "const","type": 843,"value": null},{"import": 1495,"src": 3552,"name": "milliTimestamp"},{"import": 1495,"src": 3553,"name": "s_per_day"},{"import": 1495,"src": 3554,"name": "sleep"},{"import": 1495,"src": 3555,"name": "s_per_week"},{"import": 1495,"src": 3556,"name": "hour"},{"import": 1495,"src": 3557,"name": "ns_per_s","kind": "const","type": 843,"value": null},{"import": 1495,"src": 3558,"name": "s_per_hour"},{"import": 1495,"src": 3559,"name": "nanosecond","kind": "const","type": 843,"value": null},{"import": 1495,"src": 3560,"name": "second"},{"import": 1495,"src": 3561,"name": "timestamp"},{"import": 1495,"src": 3562,"name": "epoch"},{"import": 1495,"src": 3563,"name": "minute"},{"import": 1495,"src": 3564,"name": "millisecond","kind": "const","type": 843,"value": null},{"import": 1495,"src": 3565,"name": "s_per_min"},{"import": 1495,"src": 3566,"name": "ms_per_s"},{"import": 1495,"src": 3567,"name": "us_per_s"},{"import": 1495,"src": 3568,"name": "cs_per_s"},{"import": 1495,"src": 3569,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1495,"src": 3570,"name": "math"},{"import": 1495,"src": 3571,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1495,"src": 3572,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 1495,"src": 3573,"name": "testing"},{"import": 1495,"src": 3574,"name": "assert"},{"import": 1912,"src": 528,"name": "start","kind": "const","type": 744,"value": 1074},{"import": 1912,"src": 534,"name": "log","kind": "const","type": 2054,"value": 1472},{"import": 1912,"src": 532,"name": "refresh","kind": "const","type": 748,"value": 1078},{"import": 1912,"src": 3575,"name": "Node","kind": "const","type": 778,"value": 1376},{"import": 1912,"src": 540,"name": "maybeRefresh","kind": "const","type": 748,"value": 1103},{"import": 1912,"src": 538,"name": "bufWrite","kind": "const","type": 2055,"value": 1473},{"import": 1497,"src": 944,"name": "PackedIntArrayEndian","kind": "const","type": 1454,"value": 1280},{"import": 1497,"src": 946,"name": "PackedIntArray","kind": "const","type": 1455,"value": 1281},{"import": 1497,"src": 1007,"name": "PackedIntSlice","kind": "const","type": 1502,"value": 1288},{"import": 1497,"src": 3576,"name": "PackedIntIo"},{"import": 1497,"src": 1001,"name": "PackedIntSliceEndian","kind": "const","type": 1499,"value": 1287},{"import": 1497,"src": 3577,"name": "builtin"},{"import": 1497,"src": 3578,"name": "std"},{"import": 1497,"src": 3579,"name": "debug"},{"import": 1497,"src": 3580,"name": "testing"},{"import": 1498,"src": 3581,"name": "countErrors"},{"import": 1498,"src": 3582,"name": "mempoolChange"},{"import": 1498,"src": 3583,"name": "mempoolExists"},{"import": 1498,"src": 3584,"name": "stackDeregister"},{"import": 1498,"src": 3585,"name": "MempoolFlags"},{"import": 1498,"src": 3586,"name": "freeLikeBlock"},{"import": 1498,"src": 3587,"name": "resizeInPlaceBlock"},{"import": 1498,"src": 3588,"name": "ToolBase"},{"import": 1498,"src": 3589,"name": "mempoolFree"},{"import": 1498,"src": 3590,"name": "disableErrorReporting"},{"import": 1498,"src": 3591,"name": "createMempool"},{"import": 1498,"src": 3592,"name": "nonSIMDCall3"},{"import": 1498,"src": 3593,"name": "memcheck"},{"import": 1498,"src": 3594,"name": "ClientRequest"},{"import": 1498,"src": 3595,"name": "monitorCommand"},{"import": 1498,"src": 3596,"name": "mempoolAlloc"},{"import": 1498,"src": 3597,"name": "callgrind"},{"import": 1498,"src": 3598,"name": "innerThreads"},{"import": 1498,"src": 3599,"name": "mempoolTrim"},{"import": 1498,"src": 3600,"name": "nonSIMDCall2"},{"import": 1498,"src": 3601,"name": "mapIpToSrcloc"},{"import": 1498,"src": 3602,"name": "nonSIMDCall1"},{"import": 1498,"src": 3603,"name": "discardTranslations"},{"import": 1498,"src": 3604,"name": "mallocLikeBlock"},{"import": 1498,"src": 3605,"name": "stackRegister"},{"import": 1498,"src": 3606,"name": "moveMempool"},{"import": 1498,"src": 3607,"name": "destroyMempool"},{"import": 1498,"src": 3608,"name": "IsTool"},{"import": 1498,"src": 3609,"name": "runningOnValgrind"},{"import": 1498,"src": 3610,"name": "nonSIMDCall0"},{"import": 1498,"src": 3611,"name": "stackChange"},{"import": 1498,"src": 3612,"name": "doClientRequest"},{"import": 1498,"src": 3613,"name": "enableErrorReporting"},{"import": 1498,"src": 3614,"name": "builtin"},{"import": 1498,"src": 3615,"name": "math"},{"import": 1498,"src": 3616,"name": "doClientRequestExpr"},{"import": 1498,"src": 3617,"name": "doClientRequestStmt"},{"import": 1500,"src": 3618,"name": "Token"},{"import": 1500,"src": 3619,"name": "Tokenizer"},{"import": 1500,"src": 3620,"name": "ast"},{"import": 1500,"src": 3621,"name": "parseStringLiteral"},{"import": 1500,"src": 3622,"name": "parse"},{"import": 1500,"src": 3623,"name": "render"},{"import": 1500,"src": 3624,"name": "tokenizer"},{"import": 2057,"src": 3625,"name": "acquire"},{"import": 2057,"src": 3626,"name": "init"},{"import": 2057,"src": 3627,"name": "Held"},{"import": 1503,"src": 49,"name": "getCwdAlloc","kind": "const","type": 50,"value": 52},{"import": 1503,"src": 3628,"name": "getEnvMap"},{"import": 1503,"src": 3629,"name": "exit"},{"import": 1503,"src": 3630,"name": "changeCurDir"},{"import": 1503,"src": 3631,"name": "ArgIterator"},{"import": 1503,"src": 3632,"name": "ArgIteratorPosix"},{"import": 1503,"src": 3633,"name": "argsFree"},{"import": 1503,"src": 82,"name": "getBaseAddress","kind": "const","type": 125,"value": 129},{"import": 1503,"src": 3634,"name": "posixGetUserInfo"},{"import": 1503,"src": 3635,"name": "changeCurDirC"},{"import": 1503,"src": 3636,"name": "argsAlloc"},{"import": 1503,"src": 3637,"name": "UserInfo"},{"import": 1503,"src": 3638,"name": "getCwd"},{"import": 1503,"src": 127,"name": "getEnvVarOwned","kind": "const","type": 170,"value": 205},{"import": 1503,"src": 3639,"name": "ArgIteratorWindows"},{"import": 1503,"src": 3640,"name": "GetEnvVarOwnedError","kind": "const","type": 778,"value": 1759},{"import": 1503,"src": 3641,"name": "getUserInfo"},{"import": 1503,"src": 3642,"name": "abort"},{"import": 1503,"src": 3643,"name": "args"},{"import": 1503,"src": 3644,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1503,"src": 3645,"name": "BufMap"},{"import": 1503,"src": 3646,"name": "math","kind": "const","type": 778,"value": 939},{"import": 1503,"src": 3647,"name": "testWindowsCmdLine"},{"import": 1503,"src": 3648,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1503,"src": 3649,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 1503,"src": 3650,"name": "Buffer"},{"import": 1503,"src": 3651,"name": "testing"},{"import": 1503,"src": 3652,"name": "fs","kind": "const","type": 778,"value": 1491},{"import": 1503,"src": 3653,"name": "Allocator","kind": "const","type": 778,"value": 1679},{"import": 1503,"src": 3654,"name": "assert"},{"import": 1503,"src": 3655,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1504,"src": 3656,"name": "N_OLEVEL"},{"import": 1504,"src": 3657,"name": "MH_NOUNDEFS"},{"import": 1504,"src": 3658,"name": "LC_SEGMENT_SPLIT_INFO"},{"import": 1504,"src": 3659,"name": "LC_DYLD_INFO_ONLY"},{"import": 1504,"src": 3660,"name": "MH_HAS_TLV_DESCRIPTORS"},{"import": 1504,"src": 3661,"name": "LC_FVMFILE"},{"import": 1504,"src": 3662,"name": "N_GSYM"},{"import": 1504,"src": 3663,"name": "S_4BYTE_LITERALS"},{"import": 1504,"src": 3664,"name": "LC_SUB_UMBRELLA"},{"import": 1504,"src": 3665,"name": "LC_FUNCTION_STARTS"},{"import": 1504,"src": 3666,"name": "LC_UNIXTHREAD"},{"import": 1504,"src": 3667,"name": "LC_TWOLEVEL_HINTS"},{"import": 1504,"src": 3668,"name": "LC_VERSION_MIN_TVOS"},{"import": 1504,"src": 3669,"name": "N_PEXT"},{"import": 1504,"src": 3670,"name": "SECTION_ATTRIBUTES"},{"import": 1504,"src": 3671,"name": "N_LBRAC"},{"import": 1504,"src": 3672,"name": "segment_command"},{"import": 1504,"src": 3673,"name": "mach_header"},{"import": 1504,"src": 3674,"name": "N_ENTRY"},{"import": 1504,"src": 3675,"name": "LC_PREBOUND_DYLIB"},{"import": 1504,"src": 3676,"name": "MH_SETUID_SAFE"},{"import": 1504,"src": 3677,"name": "MH_DYLDLINK"},{"import": 1504,"src": 3678,"name": "N_OPT"},{"import": 1504,"src": 3679,"name": "S_8BYTE_LITERALS"},{"import": 1504,"src": 3680,"name": "MH_PRELOAD"},{"import": 1504,"src": 3681,"name": "N_LENG"},{"import": 1504,"src": 3682,"name": "MH_DYLIB"},{"import": 1504,"src": 3683,"name": "N_BNSYM"},{"import": 1504,"src": 3684,"name": "S_CSTRING_LITERALS"},{"import": 1504,"src": 3685,"name": "section_64","kind": "const","type": 778,"value": 2058},{"import": 1504,"src": 3686,"name": "LC_SUB_CLIENT"},{"import": 1504,"src": 3687,"name": "MH_BUNDLE"},{"import": 1504,"src": 3688,"name": "N_ECOML"},{"import": 1504,"src": 3689,"name": "LC_ROUTINES_64"},{"import": 1504,"src": 3690,"name": "LC_ENCRYPTION_INFO"},{"import": 1504,"src": 3691,"name": "MH_WEAK_DEFINES"},{"import": 1504,"src": 3692,"name": "MH_FORCE_FLAT"},{"import": 1504,"src": 3693,"name": "MH_SUBSECTIONS_VIA_SYMBOLS"},{"import": 1504,"src": 3694,"name": "MH_DYLINKER"},{"import": 1504,"src": 3695,"name": "MH_DEAD_STRIPPABLE_DYLIB"},{"import": 1504,"src": 3696,"name": "LC_DYSYMTAB"},{"import": 1504,"src": 3697,"name": "symtab_command"},{"import": 1504,"src": 3698,"name": "LC_PREPAGE"},{"import": 1504,"src": 3699,"name": "MH_NO_REEXPORTED_DYLIBS"},{"import": 1504,"src": 3700,"name": "LC_THREAD"},{"import": 1504,"src": 3701,"name": "N_EXT"},{"import": 1504,"src": 3702,"name": "N_SLINE"},{"import": 1504,"src": 3703,"name": "LC_LINKER_OPTION"},{"import": 1504,"src": 3704,"name": "MH_MAGIC"},{"import": 1504,"src": 3705,"name": "N_FUN"},{"import": 1504,"src": 3706,"name": "MH_NO_HEAP_EXECUTION"},{"import": 1504,"src": 3707,"name": "cpu_type_t","kind": "const","type": 778,"value": 1155},{"import": 1504,"src": 3708,"name": "MH_INCRLINK"},{"import": 1504,"src": 3709,"name": "LC_VERSION_MIN_WATCHOS"},{"import": 1504,"src": 3710,"name": "MH_APP_EXTENSION_SAFE"},{"import": 1504,"src": 3711,"name": "N_RSYM"},{"import": 1504,"src": 3712,"name": "LC_DATA_IN_CODE"},{"import": 1504,"src": 3713,"name": "MH_FVMLIB"},{"import": 1504,"src": 3714,"name": "MH_ALLOW_STACK_EXECUTION"},{"import": 1504,"src": 3715,"name": "N_LSYM"},{"import": 1504,"src": 3716,"name": "LC_REEXPORT_DYLIB"},{"import": 1504,"src": 3717,"name": "N_STSYM"},{"import": 1504,"src": 3718,"name": "MH_PIE"},{"import": 1504,"src": 3719,"name": "integer_t","kind": "const","type": 778,"value": 1155},{"import": 1504,"src": 3720,"name": "LC_DYLD_INFO"},{"import": 1504,"src": 3721,"name": "LC_ENCRYPTION_INFO_64"},{"import": 1504,"src": 3722,"name": "MH_EXECUTE"},{"import": 1504,"src": 3723,"name": "MH_CIGAM"},{"import": 1504,"src": 3724,"name": "LC_SEGMENT_64"},{"import": 1504,"src": 3725,"name": "MH_BINDS_TO_WEAK"},{"import": 1504,"src": 3726,"name": "LC_LOADFVMLIB"},{"import": 1504,"src": 3727,"name": "MH_BINDATLOAD"},{"import": 1504,"src": 3728,"name": "MH_NOMULTIDEFS"},{"import": 1504,"src": 3729,"name": "LC_VERSION_MIN_IPHONEOS"},{"import": 1504,"src": 3730,"name": "segment_command_64"},{"import": 1504,"src": 3731,"name": "mach_header_64","kind": "const","type": 778,"value": 2059},{"import": 1504,"src": 3732,"name": "LC_BUILD_VERSION"},{"import": 1504,"src": 3733,"name": "N_EXCL"},{"import": 1504,"src": 3734,"name": "MH_TWOLEVEL"},{"import": 1504,"src": 3735,"name": "nlist_64","kind": "const","type": 778,"value": 1390},{"import": 1504,"src": 3736,"name": "MH_PREBINDABLE"},{"import": 1504,"src": 3737,"name": "MH_NLIST_OUTOFSYNC_WITH_DYLDINFO"},{"import": 1504,"src": 3738,"name": "S_ATTR_DEBUG"},{"import": 1504,"src": 3739,"name": "LC_SUB_LIBRARY"},{"import": 1504,"src": 3740,"name": "LC_UUID"},{"import": 1504,"src": 3741,"name": "MH_DYLIB_STUB"},{"import": 1504,"src": 3742,"name": "LC_SYMTAB"},{"import": 1504,"src": 3743,"name": "cpu_subtype_t","kind": "const","type": 778,"value": 1155},{"import": 1504,"src": 3744,"name": "N_RBRAC"},{"import": 1504,"src": 3745,"name": "S_ZEROFILL"},{"import": 1504,"src": 3746,"name": "LC_SOURCE_VERSION"},{"import": 1504,"src": 3747,"name": "LC_ID_DYLINKER"},{"import": 1504,"src": 3748,"name": "LC_VERSION_MIN_MACOSX"},{"import": 1504,"src": 3749,"name": "nlist"},{"import": 1504,"src": 3750,"name": "LC_NOTE"},{"import": 1504,"src": 3751,"name": "N_FNAME"},{"import": 1504,"src": 3752,"name": "SECTION_TYPE"},{"import": 1504,"src": 3753,"name": "S_REGULAR"},{"import": 1504,"src": 3754,"name": "MH_CIGAM_64"},{"import": 1504,"src": 3755,"name": "LC_LOAD_UPWARD_DYLIB"},{"import": 1504,"src": 3756,"name": "MH_ALLMODSBOUND"},{"import": 1504,"src": 3757,"name": "LC_IDFVMLIB"},{"import": 1504,"src": 3758,"name": "MH_SPLIT_SEGS"},{"import": 1504,"src": 3759,"name": "MH_LAZY_INIT"},{"import": 1504,"src": 3760,"name": "N_BINCL"},{"import": 1504,"src": 3761,"name": "MH_ROOT_SAFE"},{"import": 1504,"src": 3762,"name": "vm_prot_t"},{"import": 1504,"src": 3763,"name": "LC_DYLD_ENVIRONMENT"},{"import": 1504,"src": 3764,"name": "LC_IDENT"},{"import": 1504,"src": 3765,"name": "N_AST"},{"import": 1504,"src": 3766,"name": "LC_CODE_SIGNATURE"},{"import": 1504,"src": 3767,"name": "LC_SUB_FRAMEWORK"},{"import": 1504,"src": 3768,"name": "N_SO"},{"import": 1504,"src": 3769,"name": "load_command"},{"import": 1504,"src": 3770,"name": "MH_MAGIC_64"},{"import": 1504,"src": 3771,"name": "LC_ID_DYLIB"},{"import": 1504,"src": 3772,"name": "LC_RPATH"},{"import": 1504,"src": 3773,"name": "MH_CORE"},{"import": 1504,"src": 3774,"name": "MH_PREBOUND"},{"import": 1504,"src": 3775,"name": "MH_NOFIXPREBINDING"},{"import": 1504,"src": 3776,"name": "section"},{"import": 1504,"src": 3777,"name": "N_SOL"},{"import": 1504,"src": 3778,"name": "N_ECOMM"},{"import": 1504,"src": 3779,"name": "N_LCSYM"},{"import": 1504,"src": 3780,"name": "LC_SYMSEG"},{"import": 1504,"src": 3781,"name": "N_PSYM"},{"import": 1504,"src": 3782,"name": "N_VERSION"},{"import": 1504,"src": 3783,"name": "N_BCOMM"},{"import": 1504,"src": 3784,"name": "LC_LAZY_LOAD_DYLIB"},{"import": 1504,"src": 3785,"name": "N_EINCL"},{"import": 1504,"src": 3786,"name": "MH_DSYM"},{"import": 1504,"src": 3787,"name": "N_STAB"},{"import": 1504,"src": 3788,"name": "LC_REQ_DYLD"},{"import": 1504,"src": 3789,"name": "LC_SEGMENT"},{"import": 1504,"src": 3790,"name": "LC_PREBIND_CKSUM"},{"import": 1504,"src": 3791,"name": "LC_MAIN"},{"import": 1504,"src": 3792,"name": "N_ENSYM"},{"import": 1504,"src": 3793,"name": "LC_LINKER_OPTIMIZATION_HINT"},{"import": 1504,"src": 3794,"name": "N_TYPE"},{"import": 1504,"src": 3795,"name": "LC_DYLIB_CODE_SIGN_DRS"},{"import": 1504,"src": 3796,"name": "LC_ROUTINES"},{"import": 1504,"src": 3797,"name": "S_LITERAL_POINTERS"},{"import": 1504,"src": 3798,"name": "N_OSO"},{"import": 1504,"src": 3799,"name": "MH_OBJECT"},{"import": 1504,"src": 3800,"name": "LC_LOAD_DYLINKER"},{"import": 1504,"src": 3801,"name": "LC_LOAD_DYLIB"},{"import": 1504,"src": 3802,"name": "N_PARAMS"},{"import": 1504,"src": 3803,"name": "MH_KEXT_BUNDLE"},{"import": 1504,"src": 3804,"name": "N_SSYM"},{"import": 1504,"src": 3805,"name": "MH_CANONICAL"},{"import": 1504,"src": 3806,"name": "LC_LOAD_WEAK_DYLIB"},{"import": 1504,"src": 3807,"name": "linkedit_data_command"},{"import": 1506,"src": 559,"name": "SinglyLinkedList","kind": "const","type": 853,"value": 1190},{"import": 1506,"src": 973,"name": "TailQueue","kind": "const","type": 1476,"value": 1283},{"import": 1506,"src": 3808,"name": "std"},{"import": 1506,"src": 3809,"name": "Allocator"},{"import": 1506,"src": 3810,"name": "debug"},{"import": 1506,"src": 3811,"name": "assert"},{"import": 1506,"src": 3812,"name": "testing"},{"import": 1506,"src": 3813,"name": "mem"},{"import": 1506,"src": 3814,"name": "removeNext"},{"import": 1506,"src": 3815,"name": "insertAfter"},{"import": 1506,"src": 3816,"name": "init"},{"import": 1481,"src": 3817,"name": "Misc","kind": "const","type": 778,"value": 2060},{"import": 1526,"src": 3818,"name": "Mutex","kind": "const","type": 778,"value": 1828},{"import": 1526,"src": 3819,"name": "Spinlock","kind": "const","type": 778,"value": 1825},{"import": 1526,"src": 3820,"name": "Event","kind": "const","type": 778,"value": 2061},{"import": 1526,"src": 3821,"name": "builtin"},{"import": 1526,"src": 3822,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 1526,"src": 3823,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1526,"src": 3824,"name": "c"},{"import": 1526,"src": 3825,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 1526,"src": 292,"name": "testLockImplementation","kind": "const","type": 2062,"value": 1474},{"import": 1526,"src": 3826,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 1526,"src": 3827,"name": "expectError","kind": "const","type": 2009,"value": 1455},{"import": 2063,"src": 280,"name": "wait","kind": "const","type": 332,"value": 486},{"import": 2063,"src": 380,"name": "notifyOne","kind": "const","type": 451,"value": 638},{"import": 2063,"src": 278,"name": "init","kind": "const","type": 329,"value": 483},{"import": 2063,"src": 3828,"name": "WaitError","kind": "const","type": 778,"value": 1818},{"import": 2063,"src": 379,"name": "notifyAll","kind": "const","type": 451,"value": 637},{"import": 2063,"src": 283,"name": "deinit","kind": "const","type": 329,"value": 490},{"import": 1591,"src": 3829,"name": "sinh"},{"import": 1591,"src": 3830,"name": "asinh"},{"import": 1591,"src": 3831,"name": "sin"},{"import": 1591,"src": 3832,"name": "sqrt"},{"import": 1591,"src": 3833,"name": "tanh"},{"import": 1591,"src": 3834,"name": "log"},{"import": 1591,"src": 3835,"name": "acosh"},{"import": 1591,"src": 3836,"name": "pow"},{"import": 1591,"src": 1090,"name": "Complex","kind": "const","type": 1578,"value": 1336},{"import": 1591,"src": 3837,"name": "tan"},{"import": 1591,"src": 3838,"name": "cosh"},{"import": 1591,"src": 3839,"name": "cos"},{"import": 1591,"src": 3840,"name": "acos"},{"import": 1591,"src": 3841,"name": "asin"},{"import": 1591,"src": 3842,"name": "arg"},{"import": 1591,"src": 3843,"name": "exp"},{"import": 1591,"src": 3844,"name": "conj"},{"import": 1591,"src": 3845,"name": "atanh"},{"import": 1591,"src": 3846,"name": "proj"},{"import": 1591,"src": 3847,"name": "abs"},{"import": 1591,"src": 3848,"name": "atan"},{"import": 1591,"src": 3849,"name": "math"},{"import": 1591,"src": 3850,"name": "std"},{"import": 1591,"src": 3851,"name": "testing"},{"import": 1591,"src": 3852,"name": "epsilon"},{"import": 2066,"src": 3853,"name": "Rational"},{"import": 2067,"src": 3854,"name": "Limb","kind": "const","type": 778,"value": 812},{"import": 2067,"src": 3855,"name": "DoubleLimb"},{"import": 2067,"src": 3856,"name": "Log2Limb"},{"import": 2067,"src": 3857,"name": "Int"},{"import": 1840,"src": 3858,"name": "Event","kind": "const","type": 778,"value": 1221},{"import": 1835,"src": 3859,"name": "Error","kind": "const","type": 778,"value": 2070},{"import": 1835,"src": 3860,"name": "Handle","kind": "const","type": 778,"value": 972},{"import": 1860,"src": 3861,"name": "Address","kind": "const","type": 778,"value": 1232},{"import": 1835,"src": 3862,"name": "Nonblock","kind": "const","type": 843,"value": null},{"import": 1835,"src": 3863,"name": "Buffer","kind": "const","type": 778,"value": 1215},{"import": 1835,"src": 3864,"name": "Flags","kind": "const","type": 778,"value": 807},{"import": 1845,"src": 3865,"name": "Socket","kind": "const","type": 778,"value": 1227},{"import": 956,"src": 3866,"name": "backend","kind": "const","type": 778,"value": 1885},{"import": 2071,"src": 372,"name": "transmute","kind": "const","type": 796,"value": 1175},{"import": 2071,"src": 3867,"name": "NumaError","kind": "const","type": 778,"value": 1832},{"import": 2071,"src": 305,"name": "modify","kind": "const","type": 354,"value": 521},{"import": 2071,"src": 306,"name": "unmap","kind": "const","type": 355,"value": 522},{"import": 2071,"src": 3868,"name": "PAGE_DECOMMIT","kind": "const","type": 843,"value": null},{"import": 2071,"src": 3869,"name": "getNodeForMemory"},{"import": 956,"src": 3870,"name": "backend","kind": "const","type": 778,"value": 1394},{"import": 2072,"src": 3871,"name": "Thread","kind": "const","type": 778,"value": 2073},{"import": 2071,"src": 302,"name": "getPageSize","kind": "const","type": 125,"value": 518},{"import": 2071,"src": 3872,"name": "MemoryError","kind": "const","type": 778,"value": 1829},{"import": 1831,"src": 3873,"name": "CpuAffinity","kind": "const","type": 778,"value": 1207},{"import": 2071,"src": 3874,"name": "PAGE_EXEC","kind": "const","type": 843,"value": null},{"import": 2071,"src": 3875,"name": "PAGE_WRITE","kind": "const","type": 843,"value": null},{"import": 2071,"src": 3876,"name": "getAvailableMemory"},{"import": 1831,"src": 3877,"name": "CpuType","kind": "const","type": 778,"value": 1209},{"import": 2071,"src": 3878,"name": "PAGE_COMMIT","kind": "const","type": 843,"value": null},{"import": 2071,"src": 3879,"name": "page_size","kind": "const","type": 843,"value": null},{"import": 2071,"src": 304,"name": "map","kind": "const","type": 353,"value": 520},{"import": 2071,"src": 303,"name": "getHugePageSize","kind": "const","type": 352,"value": 519},{"import": 2071,"src": 3880,"name": "PAGE_HUGE","kind": "const","type": 843,"value": null},{"import": 2071,"src": 3881,"name": "NumaMemoryError","kind": "const","type": 778,"value": 2074},{"import": 2072,"src": 3882,"name": "ClockType","kind": "const","type": 778,"value": 1187},{"import": 2071,"src": 3883,"name": "PAGE_READ","kind": "const","type": 843,"value": null},{"import": 2063,"src": 3884,"name": "Futex","kind": "const","type": 778,"value": 1527},{"import": 957,"src": 3885,"name": "Arm32","kind": "const","type": 778,"value": 2075},{"import": 957,"src": 3886,"name": "Kalimba","kind": "const","type": 778,"value": 2076},{"import": 957,"src": 3887,"name": "Mips"},{"import": 957,"src": 3888,"name": "Arm64","kind": "const","type": 778,"value": 2077},{"import": 957,"src": 3889,"name": "Struct","kind": "const","type": 778,"value": 2078},{"import": 957,"src": 3890,"name": "Array","kind": "const","type": 778,"value": 2079},{"import": 957,"src": 3891,"name": "ErrorUnion","kind": "const","type": 778,"value": 2080},{"import": 957,"src": 3892,"name": "Pointer","kind": "const","type": 778,"value": 2081},{"import": 957,"src": 3893,"name": "EnumField","kind": "const","type": 778,"value": 2082},{"import": 957,"src": 3894,"name": "ContainerLayout","kind": "const","type": 778,"value": 2083},{"import": 957,"src": 3895,"name": "Declaration","kind": "const","type": 778,"value": 2084},{"import": 957,"src": 3896,"name": "Union","kind": "const","type": 778,"value": 2085},{"import": 957,"src": 3897,"name": "ErrorSet","kind": "const","type": 778,"value": 2086},{"import": 957,"src": 3898,"name": "Optional","kind": "const","type": 778,"value": 2087},{"import": 957,"src": 3899,"name": "Enum","kind": "const","type": 778,"value": 2088},{"import": 957,"src": 3900,"name": "CallingConvention","kind": "const","type": 778,"value": 2089},{"import": 957,"src": 3901,"name": "Vector","kind": "const","type": 778,"value": 2090},{"import": 957,"src": 3902,"name": "Float","kind": "const","type": 778,"value": 2091},{"import": 957,"src": 3903,"name": "UnionField","kind": "const","type": 778,"value": 2092},{"import": 957,"src": 3904,"name": "StructField","kind": "const","type": 778,"value": 2093},{"import": 957,"src": 3905,"name": "AnyFrame","kind": "const","type": 778,"value": 2094},{"import": 957,"src": 3906,"name": "Error","kind": "const","type": 778,"value": 2095},{"import": 957,"src": 3907,"name": "Fn","kind": "const","type": 778,"value": 2096},{"import": 957,"src": 3908,"name": "FnArg","kind": "const","type": 778,"value": 2097},{"import": 957,"src": 3909,"name": "Int","kind": "const","type": 778,"value": 2098},{"import": 1671,"src": 3910,"name": "File","kind": "const","type": 778,"value": 967},{"import": 1671,"src": 3911,"name": "builtin"},{"import": 1671,"src": 3912,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1671,"src": 3913,"name": "maxInt"},{"import": 1671,"src": 3914,"name": "math"},{"import": 1671,"src": 3915,"name": "io","kind": "const","type": 778,"value": 1450},{"import": 1671,"src": 3916,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1671,"src": 3917,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 1671,"src": 3918,"name": "Os"},{"import": 1671,"src": 3919,"name": "assert"},{"import": 1671,"src": 3920,"name": "mem"},{"import": 1452,"src": 3921,"name": "destroy"},{"import": 1452,"src": 39,"name": "realloc","kind": "const","type": 2099,"value": 1475},{"import": 1452,"src": 60,"name": "shrink","kind": "const","type": 2100,"value": 1476},{"import": 1452,"src": 3922,"name": "Error","kind": "const","type": 778,"value": 1682},{"import": 1452,"src": 117,"name": "alignedShrink","kind": "const","type": 2101,"value": 1477},{"import": 1452,"src": 114,"name": "alignedAlloc","kind": "const","type": 2102,"value": 1478},{"import": 1452,"src": 53,"name": "alloc","kind": "const","type": 2103,"value": 1479},{"import": 1452,"src": 109,"name": "alignedRealloc","kind": "const","type": 2104,"value": 1480},{"import": 1452,"src": 59,"name": "free","kind": "const","type": 2105,"value": 1481},{"import": 1452,"src": 22,"name": "create","kind": "const","type": 2106,"value": 1482},{"import": 1481,"src": 3923,"name": "DataDirectory","kind": "const","type": 778,"value": 2108},{"import": 1703,"src": 3924,"name": "isAbsoluteW"},{"import": 1703,"src": 3925,"name": "delimiter_windows"},{"import": 1703,"src": 3926,"name": "isAbsolutePosix"},{"import": 1703,"src": 3927,"name": "dirname"},{"import": 1703,"src": 3928,"name": "relative"},{"import": 1703,"src": 3929,"name": "resolvePosix"},{"import": 1703,"src": 131,"name": "basenameWindows","kind": "const","type": 130,"value": 213},{"import": 1703,"src": 3930,"name": "dirnameWindows"},{"import": 1703,"src": 111,"name": "isAbsoluteWindows","kind": "const","type": 156,"value": 172},{"import": 1703,"src": 85,"name": "basename","kind": "const","type": 130,"value": 136},{"import": 1703,"src": 3931,"name": "joinPosix"},{"import": 1703,"src": 3932,"name": "dirnamePosix"},{"import": 1703,"src": 50,"name": "windowsParsePath","kind": "const","type": 51,"value": 53},{"import": 1703,"src": 3933,"name": "relativeWindows"},{"import": 1703,"src": 120,"name": "isAbsolute","kind": "const","type": 156,"value": 181},{"import": 1703,"src": 3934,"name": "delimiter_posix"},{"import": 1703,"src": 3935,"name": "joinWindows"},{"import": 1703,"src": 3936,"name": "sep"},{"import": 1703,"src": 3937,"name": "diskDesignator"},{"import": 1703,"src": 48,"name": "resolveWindows","kind": "const","type": 49,"value": 51},{"import": 1703,"src": 3938,"name": "WindowsPath","kind": "const","type": 778,"value": 1012},{"import": 1703,"src": 3939,"name": "diskDesignatorWindows"},{"import": 1703,"src": 3940,"name": "sep_str"},{"import": 1703,"src": 3941,"name": "isSep"},{"import": 1703,"src": 3942,"name": "relativePosix"},{"import": 1703,"src": 47,"name": "resolve","kind": "const","type": 48,"value": 50},{"import": 1703,"src": 3943,"name": "sep_windows","kind": "const","type": 843,"value": null},{"import": 1703,"src": 3944,"name": "sep_posix"},{"import": 1703,"src": 3945,"name": "join"},{"import": 1703,"src": 3946,"name": "delimiter"},{"import": 1703,"src": 3947,"name": "basenamePosix"},{"import": 1703,"src": 3948,"name": "builtin"},{"import": 1703,"src": 3949,"name": "joinSep"},{"import": 1703,"src": 113,"name": "asciiEqlIgnoreCase","kind": "const","type": 28,"value": 174},{"import": 1703,"src": 3950,"name": "math"},{"import": 1703,"src": 3951,"name": "testIsAbsolutePosix"},{"import": 1703,"src": 3952,"name": "debug","kind": "const","type": 778,"value": 1459},{"import": 1703,"src": 3953,"name": "testing"},{"import": 1703,"src": 3954,"name": "testResolvePosix"},{"import": 1703,"src": 3955,"name": "testBasenameWindows"},{"import": 1703,"src": 3956,"name": "Allocator","kind": "const","type": 778,"value": 1679},{"import": 1703,"src": 3957,"name": "testDirnameWindows"},{"import": 1703,"src": 3958,"name": "fmt"},{"import": 1703,"src": 3959,"name": "testIsAbsoluteWindows"},{"import": 1703,"src": 3960,"name": "testBasename"},{"import": 1703,"src": 3961,"name": "testJoinPosix"},{"import": 1703,"src": 3962,"name": "testDirnamePosix"},{"import": 1703,"src": 3963,"name": "networkShareServersEql"},{"import": 1703,"src": 3964,"name": "testRelativeWindows"},{"import": 1703,"src": 52,"name": "compareDiskDesignators","kind": "const","type": 53,"value": 55},{"import": 1703,"src": 51,"name": "asciiUpper","kind": "const","type": 52,"value": 54},{"import": 1703,"src": 3965,"name": "testJoinWindows"},{"import": 1703,"src": 3966,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1703,"src": 3967,"name": "testResolveWindows"},{"import": 1703,"src": 3968,"name": "fs"},{"import": 1703,"src": 3969,"name": "testRelativePosix"},{"import": 1703,"src": 3970,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1703,"src": 3971,"name": "process","kind": "const","type": 778,"value": 1503},{"import": 1703,"src": 3972,"name": "testBasenamePosix"},{"import": 1703,"src": 3973,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1703,"src": 3974,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1479,"src": 69,"name": "getStream","kind": "const","type": 76,"value": 79},{"import": 1479,"src": 61,"name": "openFile","kind": "const","type": 62,"value": 64},{"import": 1479,"src": 75,"name": "getStreamById","kind": "const","type": 90,"value": 93},{"import": 1479,"src": 63,"name": "openFile","kind": "const","type": 64,"value": 66},{"import": 1479,"src": 3975,"name": "file_magic","kind": "const","type": 1897,"value": null},{"import": 1459,"src": 70,"name": "maxLoad","kind": "const","type": 78,"value": 81},{"import": 1791,"src": 3976,"name": "StaticallyInitializedMutex","kind": "const","type": 778,"value": 1149},{"import": 1791,"src": 3977,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1791,"src": 3978,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1791,"src": 3979,"name": "AtomicRmwOp"},{"import": 1791,"src": 3980,"name": "AtomicOrder"},{"import": 1791,"src": 3981,"name": "expect"},{"import": 1791,"src": 3982,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1791,"src": 3983,"name": "assert"},{"import": 2072,"src": 284,"name": "join","kind": "const","type": 336,"value": 492},{"import": 1526,"src": 298,"name": "deinit","kind": "const","type": 343,"value": 509},{"import": 1526,"src": 293,"name": "init","kind": "const","type": 343,"value": 503},{"import": 1526,"src": 297,"name": "updateAndRelease","kind": "const","type": 343,"value": 507},{"import": 1526,"src": 385,"name": "init","kind": "const","type": 345,"value": 648},{"import": 1526,"src": 296,"name": "acquire","kind": "const","type": 345,"value": 506},{"import": 1526,"src": 294,"name": "tryAcquire","kind": "const","type": 344,"value": 504},{"import": 1526,"src": 386,"name": "deinit","kind": "const","type": 345,"value": 653},{"import": 1526,"src": 295,"name": "release","kind": "const","type": 345,"value": 505},{"import": 1526,"src": 298,"name": "deinit","kind": "const","type": 348,"value": 517},{"import": 1526,"src": 293,"name": "init","kind": "const","type": 348,"value": 511},{"import": 1526,"src": 297,"name": "updateAndRelease","kind": "const","type": 348,"value": 515},{"import": 1526,"src": 387,"name": "init","kind": "const","type": 350,"value": 654},{"import": 1526,"src": 301,"name": "acquire","kind": "const","type": 350,"value": 514},{"import": 1526,"src": 299,"name": "tryAcquire","kind": "const","type": 349,"value": 512},{"import": 1526,"src": 389,"name": "deinit","kind": "const","type": 350,"value": 662},{"import": 1526,"src": 300,"name": "release","kind": "const","type": 350,"value": 513},{"import": 1526,"src": 3984,"name": "MutexState","kind": "const","type": 778,"value": 946},{"import": 1526,"src": 3985,"name": "SpinCpuCount","kind": "const","type": 843,"value": null},{"import": 1526,"src": 3986,"name": "SpinCpu","kind": "const","type": 843,"value": null},{"import": 1526,"src": 3987,"name": "SpinThread","kind": "const","type": 843,"value": null},{"import": 1831,"src": 3988,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1831,"src": 3989,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 1831,"src": 3990,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 1831,"src": 3991,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 1488,"src": 3992,"name": "uintLessThan"},{"import": 1488,"src": 452,"name": "bytes","kind": "const","type": 555,"value": 792},{"import": 1488,"src": 3993,"name": "intRangeLessThan"},{"import": 1488,"src": 3994,"name": "intRangeAtMost"},{"import": 1488,"src": 3995,"name": "float"},{"import": 1488,"src": 400,"name": "uintLessThanBiased","kind": "const","type": 2114,"value": 1483},{"import": 1488,"src": 3996,"name": "floatExp"},{"import": 1488,"src": 315,"name": "uintAtMostBiased","kind": "const","type": 2115,"value": 1484},{"import": 1488,"src": 3997,"name": "shuffle"},{"import": 1488,"src": 3998,"name": "floatNorm"},{"import": 1488,"src": 3999,"name": "range"},{"import": 1488,"src": 4000,"name": "uintAtMost"},{"import": 1488,"src": 328,"name": "intRangeLessThanBiased","kind": "const","type": 2116,"value": 1485},{"import": 1488,"src": 4001,"name": "intRangeAtMostBiased"},{"import": 1488,"src": 4002,"name": "scalar"},{"import": 1488,"src": 399,"name": "int","kind": "const","type": 2117,"value": 1486},{"import": 1488,"src": 4003,"name": "boolean"},{"import": 1835,"src": 4004,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1835,"src": 4005,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 1835,"src": 4006,"name": "zio","kind": "const","type": 778,"value": 1654},{"import": 1840,"src": 356,"name": "register","kind": "const","type": 408,"value": 579},{"import": 1840,"src": 4007,"name": "fromHandle"},{"import": 1840,"src": 325,"name": "close","kind": "const","type": 377,"value": 547},{"import": 1840,"src": 4008,"name": "RegisterError","kind": "const","type": 778,"value": 1869},{"import": 1840,"src": 4009,"name": "NotifyError","kind": "const","type": 778,"value": 1839},{"import": 1840,"src": 4010,"name": "Error","kind": "const","type": 778,"value": 1836},{"import": 1840,"src": 323,"name": "new","kind": "const","type": 375,"value": 545},{"import": 1840,"src": 324,"name": "poll","kind": "const","type": 376,"value": 546},{"import": 1840,"src": 4011,"name": "getHandle"},{"import": 1840,"src": 365,"name": "reregister","kind": "const","type": 408,"value": 589},{"import": 1840,"src": 326,"name": "notify","kind": "const","type": 378,"value": 548},{"import": 1840,"src": 4012,"name": "PollError","kind": "const","type": 778,"value": 1838},{"import": 1840,"src": 4013,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1840,"src": 4014,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 1840,"src": 4015,"name": "zio","kind": "const","type": 778,"value": 1654},{"import": 1840,"src": 4016,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 1845,"src": 4017,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1845,"src": 329,"name": "testBlockingTcp","kind": "const","type": 2118,"value": 1487},{"import": 1845,"src": 4018,"name": "Ipv4Address","kind": "const","type": 778,"value": 2119},{"import": 1845,"src": 4019,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 1845,"src": 4020,"name": "Ipv6Address","kind": "const","type": 778,"value": 2120},{"import": 1845,"src": 4021,"name": "zio","kind": "const","type": 778,"value": 1654},{"import": 1845,"src": 4022,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 1845,"src": 353,"name": "testNonBlockingTcp","kind": "const","type": 2121,"value": 1488},{"import": 1860,"src": 4023,"name": "expect"},{"import": 1860,"src": 4024,"name": "zio","kind": "const","type": 778,"value": 1654},{"import": 1860,"src": 4025,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1845,"src": 355,"name": "close","kind": "const","type": 407,"value": 578},{"import": 1845,"src": 354,"name": "init","kind": "const","type": 406,"value": 577},{"import": 1845,"src": 360,"name": "handle_client","kind": "const","type": 412,"value": 583},{"import": 1845,"src": 358,"name": "handle_server","kind": "const","type": 410,"value": 581},{"import": 1845,"src": 362,"name": "new","kind": "const","type": 414,"value": 586},{"import": 1845,"src": 364,"name": "handle","kind": "const","type": 416,"value": 588},{"import": 1845,"src": 363,"name": "close","kind": "const","type": 415,"value": 587},{"import": 1845,"src": 355,"name": "close","kind": "const","type": 421,"value": 594},{"import": 1845,"src": 354,"name": "init","kind": "const","type": 420,"value": 593},{"import": 1845,"src": 360,"name": "handle_client","kind": "const","type": 423,"value": 596},{"import": 1845,"src": 358,"name": "handle_server","kind": "const","type": 422,"value": 595},{"import": 1845,"src": 362,"name": "new","kind": "const","type": 424,"value": 597},{"import": 1845,"src": 364,"name": "handle","kind": "const","type": 426,"value": 599},{"import": 1845,"src": 363,"name": "close","kind": "const","type": 425,"value": 598},{"import": 2063,"src": 378,"name": "wait","kind": "const","type": 448,"value": 634},{"import": 2063,"src": 376,"name": "init","kind": "const","type": 446,"value": 632},{"import": 2063,"src": 383,"name": "deinit","kind": "const","type": 446,"value": 641},{"import": 2063,"src": 441,"name": "notify","kind": "const","type": 531,"value": 750},{"import": 2063,"src": 4026,"name": "Synchronization","kind": "const","type": 778,"value": 925},{"import": 2063,"src": 4027,"name": "ERROR_TIMEOUT","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4028,"name": "Event","kind": "const","type": 778,"value": 1289},{"import": 1885,"src": 4029,"name": "IncomingPadding","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4030,"name": "Options","kind": "const","type": 778,"value": 2123},{"import": 1885,"src": 4031,"name": "Socket","kind": "const","type": 778,"value": 1292},{"import": 1885,"src": 4032,"name": "Buffer","kind": "const","type": 778,"value": 1284},{"import": 1885,"src": 4033,"name": "SockAddr","kind": "const","type": 778,"value": 1293},{"import": 1885,"src": 4034,"name": "Handle","kind": "const","type": 778,"value": 972},{"import": 1885,"src": 4035,"name": "WSAEFAULT","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4036,"name": "posix","kind": "const","type": 778,"value": 2124},{"import": 1885,"src": 4037,"name": "SOCKADDR_IN6","kind": "const","type": 778,"value": 1893},{"import": 1885,"src": 4038,"name": "WAIT_TIMEOUT","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4039,"name": "IN6_ADDR","kind": "const","type": 778,"value": 2125},{"import": 1885,"src": 4040,"name": "WSAEOPNOTSUPP","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4041,"name": "WSAENETRESET","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4042,"name": "WSAENOTCONN","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4043,"name": "WSAEPROVIDERFAILEDINIT","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4044,"name": "WSAEINPROGRESS","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4045,"name": "WSAEALREADY","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4046,"name": "WSAECONNREFUSED","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4047,"name": "WSAEWOULDBLOCK","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4048,"name": "WSAEADDRNOTAVAIL","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4049,"name": "GetQueuedCompletionStatusEx","kind": "const","type": 2126,"value": 1489},{"import": 1885,"src": 4050,"name": "ConnectEx","kind": "var","type": 1905,"value": null},{"import": 1885,"src": 4051,"name": "WSAEINVALIDPROVIDER","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4052,"name": "AF_UNSPEC","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4053,"name": "WSAEINTR","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4054,"name": "IN_ADDR","kind": "const","type": 778,"value": 2127},{"import": 1885,"src": 4055,"name": "SOCKADDR_IN","kind": "const","type": 778,"value": 1894},{"import": 1885,"src": 4056,"name": "WSAEDISCON","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4057,"name": "WSAENETUNREACH","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4058,"name": "WSAEADDRINUSE","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4059,"name": "zio","kind": "const","type": 778,"value": 1654},{"import": 1885,"src": 4060,"name": "WSA_OPERATION_ABORTED","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4061,"name": "WSA_INVALID_HANDLE"},{"import": 1885,"src": 4062,"name": "WSAEPROTOTYPE","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4063,"name": "WSAENOPROTOOPT","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4064,"name": "WSAID_GETACCEPTEXSOCKADDRS","kind": "const","type": 1335,"value": null},{"import": 1885,"src": 4065,"name": "SOCKET_ERROR","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4066,"name": "STATUS_SUCCESS","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4067,"name": "SOCK_DGRAM","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4068,"name": "WSAEINVAL","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4069,"name": "WSAEAFNOTSUPPORT","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4070,"name": "WSA_IO_PENDING","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4071,"name": "ERROR_IO_PENDING"},{"import": 1885,"src": 4072,"name": "WSAENOBUFS","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4073,"name": "WSAEINVALIDPROCTABLE","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4074,"name": "AcceptEx","kind": "var","type": 1904,"value": null},{"import": 1885,"src": 4075,"name": "Winsock2","kind": "const","type": 778,"value": 793},{"import": 1885,"src": 4076,"name": "SOCK_STREAM","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4077,"name": "OverlappedCompletionRoutine","kind": "const","type": 778,"value": 2128},{"import": 1885,"src": 4078,"name": "WSAEHOSTUNREACH","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4079,"name": "AF_INET6","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4080,"name": "WSAENOTSOCK","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4081,"name": "WSAData","kind": "const","type": 778,"value": 2129},{"import": 1885,"src": 4082,"name": "OVERLAPPED_ENTRY","kind": "const","type": 778,"value": 1888},{"import": 1885,"src": 4083,"name": "WSAENETDOWN","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4084,"name": "WSAEPROTONOSUPPORT","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4085,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 1885,"src": 4086,"name": "GetAcceptExSockaddrs","kind": "var","type": 1906,"value": null},{"import": 1885,"src": 4087,"name": "WSAEMSGSIZE","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4088,"name": "WSAENOTINITIALIZED","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4089,"name": "WSAID_ACCEPTEX","kind": "const","type": 1335,"value": null},{"import": 1885,"src": 4090,"name": "WSAECONNRESET","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4091,"name": "WSAESOCKTNOSUPPORT","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4092,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 1885,"src": 4093,"name": "WSAETIMEDOUT","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4094,"name": "WSAESHUTDOWN","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4095,"name": "WSAECONNABORTED","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4096,"name": "WSAID_CONNECTEX","kind": "const","type": 1335,"value": null},{"import": 1885,"src": 4097,"name": "AF_INET","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4098,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1885,"src": 4099,"name": "WSAEDESTADDRREQ","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4100,"name": "WSABUF","kind": "const","type": 778,"value": 1886},{"import": 1885,"src": 4101,"name": "WSAEISCONN","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4102,"name": "SOCK_RAW","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4103,"name": "WSA_FLAG_OVERLAPPED","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4104,"name": "SOCKADDR","kind": "const","type": 778,"value": 1895},{"import": 1885,"src": 4105,"name": "INVALID_SOCKET","kind": "const","type": 972,"value": null},{"import": 1885,"src": 4106,"name": "SIO_GET_EXTENSION_FUNCTION_POINTER","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4107,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1885,"src": 4108,"name": "SOCKET","kind": "const","type": 778,"value": 972},{"import": 1885,"src": 4109,"name": "WSAEACCES","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4110,"name": "WSAEMFILE","kind": "const","type": 807,"value": null},{"import": 1885,"src": 426,"name": "register","kind": "const","type": 503,"value": 716},{"import": 1885,"src": 406,"name": "new","kind": "const","type": 484,"value": 695},{"import": 1885,"src": 4111,"name": "fromHandle"},{"import": 1885,"src": 408,"name": "close","kind": "const","type": 486,"value": 697},{"import": 1885,"src": 407,"name": "poll","kind": "const","type": 485,"value": 696},{"import": 1885,"src": 4112,"name": "getHandle"},{"import": 1885,"src": 430,"name": "reregister","kind": "const","type": 503,"value": 721},{"import": 1885,"src": 409,"name": "notify","kind": "const","type": 487,"value": 698},{"import": 1896,"src": 4113,"name": "Wyhash","kind": "const","type": 778,"value": 1298},{"import": 1896,"src": 469,"name": "mix0","kind": "const","type": 592,"value": 837},{"import": 1896,"src": 471,"name": "read_8bytes_swapped","kind": "const","type": 556,"value": 841},{"import": 1896,"src": 4114,"name": "primes","kind": "const","type": 2131,"value": null},{"import": 1896,"src": 473,"name": "mum","kind": "const","type": 558,"value": 843},{"import": 1896,"src": 472,"name": "mix1","kind": "const","type": 592,"value": 842},{"import": 1896,"src": 4115,"name": "expectEqual"},{"import": 1896,"src": 4116,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1896,"src": 4117,"name": "WyhashStateless","kind": "const","type": 778,"value": 1300},{"import": 1896,"src": 470,"name": "read_bytes","kind": "const","type": 2132,"value": 1490},{"import": 1896,"src": 4118,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1902,"src": 4119,"name": "EXCEPTION_DATATYPE_MISALIGNMENT","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4120,"name": "MEM_RESERVE_PLACEHOLDERS"},{"import": 1902,"src": 4121,"name": "FILE_ACTION_MODIFIED"},{"import": 1902,"src": 4122,"name": "OBJ_KERNEL_HANDLE"},{"import": 1902,"src": 4123,"name": "STARTF_RUNFULLSCREEN"},{"import": 1902,"src": 4124,"name": "FileCompressionInfo"},{"import": 1902,"src": 4125,"name": "PSECURITY_ATTRIBUTES"},{"import": 1902,"src": 4126,"name": "CREATE_UNICODE_ENVIRONMENT"},{"import": 1902,"src": 4127,"name": "FILE_NOTIFY_INFORMATION"},{"import": 1902,"src": 4128,"name": "EXCEPTION_POINTERS","kind": "const","type": 778,"value": 1908},{"import": 1902,"src": 4129,"name": "RTL_DRIVE_LETTER_CURDIR"},{"import": 1902,"src": 4130,"name": "FILE_TRANSACTED_MODE"},{"import": 1902,"src": 4131,"name": "COINIT_DISABLE_OLE1DDE"},{"import": 1902,"src": 4132,"name": "KF_FLAG_NOT_PARENT_RELATIVE"},{"import": 1902,"src": 4133,"name": "WIN32_FIND_DATAW"},{"import": 1902,"src": 4134,"name": "FILE_OPEN"},{"import": 1902,"src": 4135,"name": "FileFullDirectoryInfo"},{"import": 1902,"src": 4136,"name": "E_UNEXPECTED"},{"import": 1902,"src": 4137,"name": "LPCTSTR"},{"import": 1902,"src": 4138,"name": "EXCEPTION_ACCESS_VIOLATION","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4139,"name": "WCHAR","kind": "const","type": 778,"value": 909},{"import": 1902,"src": 4140,"name": "BOOL","kind": "const","type": 778,"value": 1155},{"import": 1902,"src": 4141,"name": "FILE_NAME_INFORMATION"},{"import": 1902,"src": 4142,"name": "WRITE_DAC"},{"import": 1902,"src": 4143,"name": "FILE_FLAG_OVERLAPPED"},{"import": 1902,"src": 4144,"name": "FILE_ACCESS_INFORMATION"},{"import": 1902,"src": 4145,"name": "OBJ_OPENIF"},{"import": 1902,"src": 4146,"name": "NTSTATUS"},{"import": 1902,"src": 4147,"name": "PHKEY"},{"import": 1902,"src": 4148,"name": "FILE_NAME_NORMALIZED"},{"import": 1902,"src": 4149,"name": "HANDLE","kind": "const","type": 778,"value": 972},{"import": 1902,"src": 4150,"name": "LANG","kind": "const","type": 778,"value": 2135},{"import": 1902,"src": 4151,"name": "FILE_MAXIMUM_DISPOSITION"},{"import": 1902,"src": 4152,"name": "KF_FLAG_CREATE"},{"import": 1902,"src": 4153,"name": "VOLUME_NAME_NT"},{"import": 1902,"src": 4154,"name": "VECTORED_EXCEPTION_HANDLER","kind": "const","type": 778,"value": 743},{"import": 1902,"src": 4155,"name": "FILE_ATTRIBUTE_ENCRYPTED"},{"import": 1902,"src": 4156,"name": "UINT","kind": "const","type": 778,"value": 1236},{"import": 1902,"src": 4157,"name": "FILE_NO_EA_KNOWLEDGE"},{"import": 1902,"src": 4158,"name": "COINIT_SPEED_OVER_MEMORY"},{"import": 1902,"src": 4159,"name": "PAGE_TARGETS_INVALID"},{"import": 1902,"src": 4160,"name": "FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS"},{"import": 1902,"src": 4161,"name": "HEAP_NO_SERIALIZE"},{"import": 1902,"src": 4162,"name": "FileIdInfo"},{"import": 1902,"src": 4163,"name": "LPTSTR"},{"import": 1902,"src": 4164,"name": "MEM_PHYSICAL"},{"import": 1902,"src": 4165,"name": "FALSE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4166,"name": "FILE_CREATE_TREE_CONNECTION"},{"import": 1902,"src": 4167,"name": "MOVEFILE_DELAY_UNTIL_REBOOT"},{"import": 1902,"src": 4168,"name": "KF_FLAG_SIMPLE_IDLIST"},{"import": 1902,"src": 4169,"name": "KF_FLAG_DONT_UNEXPAND"},{"import": 1902,"src": 4170,"name": "FILE_ATTRIBUTE_DIRECTORY"},{"import": 1902,"src": 4171,"name": "BY_HANDLE_FILE_INFORMATION"},{"import": 1902,"src": 4172,"name": "FileIoPriorityHintInfo"},{"import": 1902,"src": 4173,"name": "FILE_FLAG_WRITE_THROUGH"},{"import": 1902,"src": 4174,"name": "PEB_LDR_DATA"},{"import": 1902,"src": 4175,"name": "FILE_CREATE"},{"import": 1902,"src": 4176,"name": "GENERIC_WRITE"},{"import": 1902,"src": 4177,"name": "FILE_NON_DIRECTORY_FILE"},{"import": 1902,"src": 4178,"name": "INIT_ONCE_FN","kind": "const","type": 778,"value": 251},{"import": 1902,"src": 4179,"name": "FILE_FLAG_POSIX_SEMANTICS"},{"import": 1902,"src": 4180,"name": "HRESULT"},{"import": 1902,"src": 4181,"name": "MAX_PATH","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4182,"name": "SHORT","kind": "const","type": 778,"value": 2130},{"import": 1902,"src": 4183,"name": "LPCVOID"},{"import": 1902,"src": 4184,"name": "TLS_OUT_OF_INDEXES","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4185,"name": "PAGE_READONLY","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4186,"name": "SUBLANG","kind": "const","type": 778,"value": 2136},{"import": 1902,"src": 4187,"name": "FILE_RESERVE_OPFILTER"},{"import": 1902,"src": 4188,"name": "FORMAT_MESSAGE_FROM_SYSTEM","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4189,"name": "INFINITE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4190,"name": "E_POINTER"},{"import": 1902,"src": 4191,"name": "FILE_SYNCHRONOUS_IO_ALERT"},{"import": 1902,"src": 4192,"name": "FileNameInfo","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4193,"name": "FILE_NOTIFY_CHANGE_CREATION"},{"import": 1902,"src": 4194,"name": "E_NOINTERFACE"},{"import": 1902,"src": 4195,"name": "FILETIME"},{"import": 1902,"src": 4196,"name": "OBJ_EXCLUSIVE"},{"import": 1902,"src": 4197,"name": "FileAlignmentInfo"},{"import": 1902,"src": 4198,"name": "STARTF_FORCEONFEEDBACK"},{"import": 1902,"src": 4199,"name": "INVALID_HANDLE_VALUE","kind": "const","type": 972,"value": null},{"import": 1902,"src": 4200,"name": "FILE_MODE_INFORMATION"},{"import": 1902,"src": 4201,"name": "FileRemoteProtocolInfo"},{"import": 1902,"src": 4202,"name": "EXCEPTION_RECORD","kind": "const","type": 778,"value": 2137},{"import": 1902,"src": 4203,"name": "KF_FLAG_ALIAS_ONLY"},{"import": 1902,"src": 4204,"name": "FileAttributeTagInfo"},{"import": 1902,"src": 4205,"name": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"},{"import": 1902,"src": 4206,"name": "UNICODE","kind": "const","type": 842,"value": null},{"import": 1902,"src": 4207,"name": "FORMAT_MESSAGE_IGNORE_INSERTS","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4208,"name": "UNICODE_STRING"},{"import": 1902,"src": 4209,"name": "LPTHREAD_START_ROUTINE","kind": "const","type": 778,"value": 602},{"import": 1902,"src": 4210,"name": "E_OUTOFMEMORY"},{"import": 1902,"src": 4211,"name": "LPCH"},{"import": 1902,"src": 4212,"name": "KF_FLAG_NO_APPCONTAINER_REDIRECTION"},{"import": 1902,"src": 4213,"name": "COORD","kind": "const","type": 778,"value": 2138},{"import": 1902,"src": 4214,"name": "STARTF_TITLEISLINKNAME"},{"import": 1902,"src": 4215,"name": "LPSECURITY_ATTRIBUTES","kind": "const","type": 778,"value": 1770},{"import": 1902,"src": 4216,"name": "FILE_ATTRIBUTE_REPARSE_POINT"},{"import": 1902,"src": 4217,"name": "FORMAT_MESSAGE_MAX_WIDTH_MASK"},{"import": 1902,"src": 4218,"name": "FILE_NO_INTERMEDIATE_BUFFERING"},{"import": 1902,"src": 4219,"name": "TRUE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4220,"name": "LPOVERLAPPED"},{"import": 1902,"src": 4221,"name": "EXCEPTION_CONTINUE_SEARCH","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4222,"name": "PAGE_GUARD"},{"import": 1902,"src": 4223,"name": "FILE_OPEN_IF"},{"import": 1902,"src": 4224,"name": "FileIdExtdDirectoryRestartInfo"},{"import": 1902,"src": 4225,"name": "MEM_DECOMMIT","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4226,"name": "OBJ_INHERIT"},{"import": 1902,"src": 4227,"name": "FILE_BOTH_DIRECTORY_INFORMATION"},{"import": 1902,"src": 4228,"name": "ERROR","kind": "const","type": 778,"value": 2139},{"import": 1902,"src": 4229,"name": "RTL_CRITICAL_SECTION_DEBUG","kind": "const","type": 778,"value": 2140},{"import": 1902,"src": 4230,"name": "HLOCAL"},{"import": 1902,"src": 4231,"name": "WORD","kind": "const","type": 778,"value": 909},{"import": 1902,"src": 4232,"name": "FILE_ATTRIBUTE_NORMAL","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4233,"name": "FILE_SHARE_WRITE"},{"import": 1902,"src": 4234,"name": "GENERIC_READ","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4235,"name": "KF_FLAG_DEFAULT_PATH"},{"import": 1902,"src": 4236,"name": "FILE_ATTRIBUTE_READONLY"},{"import": 1902,"src": 4237,"name": "STARTF_USESTDHANDLES"},{"import": 1902,"src": 4238,"name": "FILE_FLAG_BACKUP_SEMANTICS"},{"import": 1902,"src": 4239,"name": "LIST_ENTRY","kind": "const","type": 778,"value": 2141},{"import": 1902,"src": 4240,"name": "FOREGROUND_RED","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4241,"name": "FILE_POSITION_INFORMATION"},{"import": 1902,"src": 4242,"name": "PAGE_WRITECOMBINE"},{"import": 1902,"src": 4243,"name": "TRUNCATE_EXISTING"},{"import": 1902,"src": 4244,"name": "FILE_DELETE_ON_CLOSE"},{"import": 1902,"src": 4245,"name": "MEM_RELEASE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4246,"name": "FILE_NOTIFY_CHANGE_DIR_NAME"},{"import": 1902,"src": 4247,"name": "MEM_RESET_UNDO"},{"import": 1902,"src": 4248,"name": "PAGE_NOACCESS","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4249,"name": "PWSTR"},{"import": 1902,"src": 4250,"name": "PAGE_NOCACHE"},{"import": 1902,"src": 4251,"name": "STATUS"},{"import": 1902,"src": 4252,"name": "WRITE_OWNER"},{"import": 1902,"src": 4253,"name": "OBJECT_ATTRIBUTES"},{"import": 1902,"src": 4254,"name": "LPVOID","kind": "const","type": 778,"value": 972},{"import": 1902,"src": 4255,"name": "FORMAT_MESSAGE_ARGUMENT_ARRAY"},{"import": 1902,"src": 4256,"name": "FILE_OPEN_FOR_FREE_SPACE_QUERY"},{"import": 1902,"src": 4257,"name": "INT"},{"import": 1902,"src": 4258,"name": "STARTF_UNTRUSTEDSOURCE"},{"import": 1902,"src": 4259,"name": "READ_CONTROL"},{"import": 1902,"src": 4260,"name": "FILE_STANDARD_INFORMATION"},{"import": 1902,"src": 4261,"name": "FileBasicInfo"},{"import": 1902,"src": 4262,"name": "FILE_NOTIFY_CHANGE_LAST_ACCESS"},{"import": 1902,"src": 4263,"name": "MEM_COALESCE_PLACEHOLDERS"},{"import": 1902,"src": 4264,"name": "FILE_ATTRIBUTE_NO_SCRUB_DATA"},{"import": 1902,"src": 4265,"name": "OBJ_PERMANENT"},{"import": 1902,"src": 4266,"name": "HCRYPTPROV"},{"import": 1902,"src": 4267,"name": "IMAGE_TLS_DIRECTORY64"},{"import": 1902,"src": 4268,"name": "FILE_NOTIFY_CHANGE_FILE_NAME"},{"import": 1902,"src": 4269,"name": "OBJ_VALID_ATTRIBUTES"},{"import": 1902,"src": 4270,"name": "FILE_NOTIFY_CHANGE_SIZE"},{"import": 1902,"src": 4271,"name": "FARPROC","kind": "const","type": 778,"value": 2142},{"import": 1902,"src": 4272,"name": "OPEN_EXISTING","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4273,"name": "EXCEPTION_ILLEGAL_INSTRUCTION","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4274,"name": "S_OK"},{"import": 1902,"src": 4275,"name": "FILE_ACTION_REMOVED"},{"import": 1902,"src": 4276,"name": "FileStreamInfo"},{"import": 1902,"src": 4277,"name": "FORMAT_MESSAGE_FROM_STRING"},{"import": 1902,"src": 4278,"name": "PAGE_WRITECOPY"},{"import": 1902,"src": 4279,"name": "FILE_OVERWRITE_IF"},{"import": 1902,"src": 4280,"name": "MOVEFILE_FAIL_IF_NOT_TRACKABLE"},{"import": 1902,"src": 4281,"name": "HINSTANCE"},{"import": 1902,"src": 4282,"name": "CURDIR"},{"import": 1902,"src": 4283,"name": "COINIT"},{"import": 1902,"src": 4284,"name": "HKEY__"},{"import": 1902,"src": 4285,"name": "MOVEFILE_COPY_ALLOWED"},{"import": 1902,"src": 4286,"name": "FILE_ALL_INFORMATION"},{"import": 1902,"src": 4287,"name": "STARTF_USESIZE"},{"import": 1902,"src": 4288,"name": "FILE_EA_INFORMATION"},{"import": 1902,"src": 4289,"name": "E_ABORT"},{"import": 1902,"src": 4290,"name": "RTL_USER_PROCESS_PARAMETERS"},{"import": 1902,"src": 4291,"name": "FILE_SYNCHRONOUS_IO_NONALERT"},{"import": 1902,"src": 4292,"name": "LONGLONG"},{"import": 1902,"src": 4293,"name": "STARTF_PREVENTPINNING"},{"import": 1902,"src": 4294,"name": "LANGID","kind": "const","type": 778,"value": 1105},{"import": 1902,"src": 4295,"name": "PVOID","kind": "const","type": 778,"value": 972},{"import": 1902,"src": 4296,"name": "FILE_OPEN_FOR_BACKUP_INTENT"},{"import": 1902,"src": 4297,"name": "FileEndOfFileInfo"},{"import": 1902,"src": 4298,"name": "FORMAT_MESSAGE_ALLOCATE_BUFFER"},{"import": 1902,"src": 4299,"name": "LPBYTE"},{"import": 1902,"src": 4300,"name": "FILE_NO_COMPRESSION"},{"import": 1902,"src": 4301,"name": "PAGE_READWRITE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4302,"name": "COINIT_MULTITHREADED"},{"import": 1902,"src": 4303,"name": "PAGE_EXECUTE_WRITECOPY","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4304,"name": "STD_OUTPUT_HANDLE"},{"import": 1902,"src": 4305,"name": "HANDLE_FLAG_INHERIT"},{"import": 1902,"src": 4306,"name": "FILE_ATTRIBUTE_ARCHIVE"},{"import": 1902,"src": 4307,"name": "LPCWSTR"},{"import": 1902,"src": 4308,"name": "FILE_ATTRIBUTE_OFFLINE"},{"import": 1902,"src": 4309,"name": "LPWSTR","kind": "const","type": 778,"value": 1117},{"import": 1902,"src": 4310,"name": "MEM_RESERVE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4311,"name": "FILE_RANDOM_ACCESS"},{"import": 1902,"src": 4312,"name": "HANDLE_FLAG_PROTECT_FROM_CLOSE"},{"import": 1902,"src": 4313,"name": "PAGE_TARGETS_NO_UPDATE"},{"import": 1902,"src": 4314,"name": "MEM_COMMIT","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4315,"name": "FILE_BOTH_DIR_INFORMATION"},{"import": 1902,"src": 4316,"name": "E_HANDLE"},{"import": 1902,"src": 4317,"name": "INVALID_FILE_ATTRIBUTES"},{"import": 1902,"src": 4318,"name": "FILE_FLAG_RANDOM_ACCESS"},{"import": 1902,"src": 4319,"name": "FileIdExtdDirectoryInfo"},{"import": 1902,"src": 4320,"name": "MEM_RESET"},{"import": 1902,"src": 4321,"name": "WAIT_OBJECT_0"},{"import": 1902,"src": 4322,"name": "COINIT_APARTMENTTHREADED"},{"import": 1902,"src": 4323,"name": "LPOVERLAPPED_COMPLETION_ROUTINE"},{"import": 1902,"src": 4324,"name": "KF_FLAG_INIT"},{"import": 1902,"src": 4325,"name": "RTL_RUN_ONCE_INIT","kind": "const","type": 1793,"value": null},{"import": 1902,"src": 4326,"name": "FileDispositionInfo"},{"import": 1902,"src": 4327,"name": "FILE_NOTIFY_CHANGE_ATTRIBUTES"},{"import": 1902,"src": 4328,"name": "PROV_RSA_FULL"},{"import": 1902,"src": 4329,"name": "FILE_ACTION_RENAMED_OLD_NAME"},{"import": 1902,"src": 4330,"name": "FILE_CURRENT","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4331,"name": "E_FAIL"},{"import": 1902,"src": 4332,"name": "CHAR","kind": "const","type": 778,"value": 779},{"import": 1902,"src": 4333,"name": "FILE_OVERWRITE"},{"import": 1902,"src": 4334,"name": "CREATE_ALWAYS"},{"import": 1902,"src": 4335,"name": "OBJ_OPENLINK"},{"import": 1902,"src": 4336,"name": "STARTF_TITLEISAPPID"},{"import": 1902,"src": 4337,"name": "IMAGE_TLS_DIRECTORY"},{"import": 1902,"src": 4338,"name": "FILE_COMPLETE_IF_OPLOCKED"},{"import": 1902,"src": 4339,"name": "DUPLICATE_SAME_ACCESS"},{"import": 1902,"src": 4340,"name": "FILE_BASIC_INFORMATION"},{"import": 1902,"src": 4341,"name": "LARGE_INTEGER","kind": "const","type": 778,"value": 995},{"import": 1902,"src": 4342,"name": "FileRenameInfo"},{"import": 1902,"src": 4343,"name": "FILE_FLAG_DELETE_ON_CLOSE"},{"import": 1902,"src": 4344,"name": "ULONGLONG"},{"import": 1902,"src": 4345,"name": "VOLUME_NAME_GUID"},{"import": 1902,"src": 4346,"name": "GENERIC_ALL"},{"import": 1902,"src": 4347,"name": "HKEY"},{"import": 1902,"src": 4348,"name": "E_INVALIDARG"},{"import": 1902,"src": 4349,"name": "EXCEPTION_STACK_OVERFLOW","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4350,"name": "SYNCHRONIZE"},{"import": 1902,"src": 4351,"name": "FILE_FLAG_OPEN_NO_RECALL"},{"import": 1902,"src": 4352,"name": "BOOLEAN"},{"import": 1902,"src": 4353,"name": "SYSTEM_INFO","kind": "const","type": 778,"value": 2143},{"import": 1902,"src": 4354,"name": "IO_STATUS_BLOCK"},{"import": 1902,"src": 4355,"name": "FILE_INFO_BY_HANDLE_CLASS","kind": "const","type": 778,"value": 807},{"import": 1902,"src": 4356,"name": "FILE_FLAG_NO_BUFFERING"},{"import": 1902,"src": 4357,"name": "DWORD","kind": "const","type": 778,"value": 807},{"import": 1902,"src": 4358,"name": "FILE_ALIGNMENT_INFORMATION"},{"import": 1902,"src": 4359,"name": "STARTF_USESHOWWINDOW"},{"import": 1902,"src": 4360,"name": "CONSOLE_SCREEN_BUFFER_INFO","kind": "const","type": 778,"value": 2144},{"import": 1902,"src": 4361,"name": "FOLDERID_LocalAppData"},{"import": 1902,"src": 4362,"name": "LPSTR"},{"import": 1902,"src": 4363,"name": "FILE_OPEN_OFFLINE_FILE"},{"import": 1902,"src": 4364,"name": "FILE_OPEN_BY_FILE_ID"},{"import": 1902,"src": 4365,"name": "RTL_CRITICAL_SECTION","kind": "const","type": 778,"value": 1792},{"import": 1902,"src": 4366,"name": "FILE_END"},{"import": 1902,"src": 4367,"name": "DELETE"},{"import": 1902,"src": 4368,"name": "FILE_FLAG_SESSION_AWARE"},{"import": 1902,"src": 4369,"name": "MEM_LARGE_PAGES","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4370,"name": "STARTF_USECOUNTCHARS"},{"import": 1902,"src": 4371,"name": "FileAllocationInfo"},{"import": 1902,"src": 4372,"name": "VOLUME_NAME_NONE"},{"import": 1902,"src": 4373,"name": "PAGE_EXECUTE_READ","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4374,"name": "STARTF_USEHOTKEY"},{"import": 1902,"src": 4375,"name": "INIT_ONCE","kind": "const","type": 778,"value": 1793},{"import": 1902,"src": 4376,"name": "FileFullDirectoryRestartInfo"},{"import": 1902,"src": 4377,"name": "E_NOTIMPL"},{"import": 1902,"src": 4378,"name": "E_ACCESSDENIED"},{"import": 1902,"src": 4379,"name": "PTHREAD_START_ROUTINE","kind": "const","type": 778,"value": 602},{"import": 1902,"src": 4380,"name": "LPCSTR"},{"import": 1902,"src": 4381,"name": "FILE_INFORMATION_CLASS"},{"import": 1902,"src": 4382,"name": "REGSAM"},{"import": 1902,"src": 4383,"name": "KF_FLAG_DONT_VERIFY"},{"import": 1902,"src": 4384,"name": "FILE_ATTRIBUTE_COMPRESSED"},{"import": 1902,"src": 4385,"name": "FILE_ACTION_RENAMED_NEW_NAME"},{"import": 1902,"src": 4386,"name": "FILE_NAME_OPENED"},{"import": 1902,"src": 4387,"name": "WAIT_FAILED"},{"import": 1902,"src": 4388,"name": "FileIdBothDirectoryRestartInfo"},{"import": 1902,"src": 4389,"name": "KF_FLAG_NO_ALIAS"},{"import": 1902,"src": 4390,"name": "VOLUME_NAME_DOS"},{"import": 1902,"src": 4391,"name": "STARTF_USEFILLATTRIBUTE"},{"import": 1902,"src": 4392,"name": "ULONG_PTR","kind": "const","type": 778,"value": 812},{"import": 1902,"src": 4393,"name": "FILE_ATTRIBUTE_SYSTEM"},{"import": 1902,"src": 4394,"name": "WAIT_TIMEOUT"},{"import": 1902,"src": 4395,"name": "MOVEFILE_CREATE_HARDLINK"},{"import": 1902,"src": 4396,"name": "HMODULE","kind": "const","type": 778,"value": 1768},{"import": 1902,"src": 4397,"name": "PROCESS_INFORMATION"},{"import": 1902,"src": 4398,"name": "STARTF_USEPOSITION"},{"import": 1902,"src": 4399,"name": "IO_APC_ROUTINE"},{"import": 1902,"src": 4400,"name": "INIT_ONCE_STATIC_INIT","kind": "const","type": 1793,"value": null},{"import": 1902,"src": 4401,"name": "va_list","kind": "const","type": 778,"value": 2145},{"import": 1902,"src": 4402,"name": "HEAP_GENERATE_EXCEPTIONS"},{"import": 1902,"src": 4403,"name": "FILE_SUPERSEDE"},{"import": 1902,"src": 4404,"name": "FILE_FLAG_OPEN_REPARSE_POINT"},{"import": 1902,"src": 4405,"name": "TCHAR","kind": "const","type": 778,"value": 779},{"import": 1902,"src": 4406,"name": "SECURITY_ATTRIBUTES","kind": "const","type": 778,"value": 2112},{"import": 1902,"src": 4407,"name": "FILE_ATTRIBUTE_TEMPORARY"},{"import": 1902,"src": 4408,"name": "FILE_ATTRIBUTE_SPARSE_FILE"},{"import": 1902,"src": 4409,"name": "MEM_TOP_DOWN"},{"import": 1902,"src": 4410,"name": "PIMAGE_TLS_CALLBACK","kind": "const","type": 778,"value": 2146},{"import": 1902,"src": 4411,"name": "FILE_ACTION_ADDED"},{"import": 1902,"src": 4412,"name": "FILE_SEQUENTIAL_ONLY"},{"import": 1902,"src": 4413,"name": "FileIdBothDirectoryInfo"},{"import": 1902,"src": 4414,"name": "FileStandardInfo"},{"import": 1902,"src": 4415,"name": "GUID","kind": "const","type": 778,"value": 1335},{"import": 1902,"src": 4416,"name": "FILE_OPEN_FOR_RECOVERY"},{"import": 1902,"src": 4417,"name": "FOREGROUND_INTENSITY","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4418,"name": "LONG","kind": "const","type": 778,"value": 860},{"import": 1902,"src": 4419,"name": "FILE_LIST_DIRECTORY"},{"import": 1902,"src": 4420,"name": "FILE_WRITE_THROUGH"},{"import": 1902,"src": 4421,"name": "OBJ_CASE_INSENSITIVE"},{"import": 1902,"src": 4422,"name": "MOVEFILE_REPLACE_EXISTING"},{"import": 1902,"src": 4423,"name": "STARTF_FORCEOFFFEEDBACK"},{"import": 1902,"src": 4424,"name": "FILE_SHARE_READ","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4425,"name": "PPS_POST_PROCESS_INIT_ROUTINE"},{"import": 1902,"src": 4426,"name": "STANDARD_RIGHTS_REQUIRED"},{"import": 1902,"src": 4427,"name": "STD_ERROR_HANDLE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4428,"name": "MOVEFILE_WRITE_THROUGH"},{"import": 1902,"src": 4429,"name": "FOREGROUND_GREEN","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4430,"name": "FILE_ATTRIBUTE_HIDDEN"},{"import": 1902,"src": 4431,"name": "FORMAT_MESSAGE_FROM_HMODULE"},{"import": 1902,"src": 4432,"name": "FILE_SHARE_DELETE"},{"import": 1902,"src": 4433,"name": "FILE_NAME_INFO","kind": "const","type": 778,"value": 2147},{"import": 1902,"src": 4434,"name": "FileStorageInfo"},{"import": 1902,"src": 4435,"name": "ULONG","kind": "const","type": 778,"value": 807},{"import": 1902,"src": 4436,"name": "RTL_RUN_ONCE","kind": "const","type": 778,"value": 1793},{"import": 1902,"src": 4437,"name": "GENERIC_EXECUTE"},{"import": 1902,"src": 4438,"name": "LPDWORD","kind": "const","type": 778,"value": 1949},{"import": 1902,"src": 4439,"name": "MEM_WRITE_WATCH"},{"import": 1902,"src": 4440,"name": "LSTATUS"},{"import": 1902,"src": 4441,"name": "BYTE","kind": "const","type": 778,"value": 779},{"import": 1902,"src": 4442,"name": "FILE_ATTRIBUTE_DEVICE"},{"import": 1902,"src": 4443,"name": "STARTUPINFOW"},{"import": 1902,"src": 4444,"name": "HEAP_CREATE_ENABLE_EXECUTE"},{"import": 1902,"src": 4445,"name": "FLOAT"},{"import": 1902,"src": 4446,"name": "FILE_ATTRIBUTE_INTEGRITY_STREAM"},{"import": 1902,"src": 4447,"name": "KNOWNFOLDERID"},{"import": 1902,"src": 4448,"name": "OVERLAPPED","kind": "const","type": 778,"value": 1892},{"import": 1902,"src": 4449,"name": "FILE_BEGIN","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4450,"name": "DWORD_PTR","kind": "const","type": 778,"value": 812},{"import": 1902,"src": 4451,"name": "ACCESS_MASK"},{"import": 1902,"src": 4452,"name": "FILE_FLAG_SEQUENTIAL_SCAN"},{"import": 1902,"src": 4453,"name": "CREATE_NEW"},{"import": 1902,"src": 4454,"name": "PATH_MAX_WIDE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4455,"name": "CRITICAL_SECTION","kind": "const","type": 778,"value": 1792},{"import": 1902,"src": 4456,"name": "OPEN_ALWAYS"},{"import": 1902,"src": 4457,"name": "FILE_ATTRIBUTE_RECALL_ON_OPEN"},{"import": 1902,"src": 4458,"name": "STD_INPUT_HANDLE"},{"import": 1902,"src": 4459,"name": "FILE_NOTIFY_CHANGE_SECURITY"},{"import": 1902,"src": 4460,"name": "IMAGE_TLS_DIRECTORY32"},{"import": 1902,"src": 4461,"name": "SIZE_T","kind": "const","type": 778,"value": 812},{"import": 1902,"src": 4462,"name": "KF_FLAG_DEFAULT"},{"import": 1902,"src": 4463,"name": "FOREGROUND_BLUE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4464,"name": "FILE_NOTIFY_CHANGE_LAST_WRITE"},{"import": 1902,"src": 4465,"name": "FILE_INTERNAL_INFORMATION"},{"import": 1902,"src": 4466,"name": "SMALL_RECT","kind": "const","type": 778,"value": 2148},{"import": 1902,"src": 4467,"name": "PAGE_EXECUTE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4468,"name": "WAIT_ABANDONED"},{"import": 1902,"src": 4469,"name": "FILE_ATTRIBUTE_VIRTUAL"},{"import": 1902,"src": 4470,"name": "PEB"},{"import": 1902,"src": 4471,"name": "FILE_DIRECTORY_FILE"},{"import": 1902,"src": 4472,"name": "PAGE_EXECUTE_READWRITE","kind": "const","type": 843,"value": null},{"import": 1902,"src": 4473,"name": "assert"},{"import": 1902,"src": 4474,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1902,"src": 4475,"name": "maxInt","kind": "const","type": 871,"value": 1199},{"import": 1902,"src": 4476,"name": "builtin"},{"import": 1495,"src": 4477,"name": "reset"},{"import": 1495,"src": 539,"name": "read","kind": "const","type": 760,"value": 1101},{"import": 1495,"src": 4478,"name": "lap"},{"import": 1495,"src": 529,"name": "start","kind": "const","type": 745,"value": 1075},{"import": 1495,"src": 4479,"name": "Error","kind": "const","type": 778,"value": 1910},{"import": 1495,"src": 543,"name": "clockNative","kind": "const","type": 525,"value": 1124},{"import": 1495,"src": 4480,"name": "monotonic_clock_id"},{"import": 1912,"src": 4481,"name": "Progress","kind": "const","type": 778,"value": 1496},{"import": 1912,"src": 4482,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1912,"src": 4483,"name": "assert"},{"import": 1912,"src": 4484,"name": "testing"},{"import": 1394,"src": 402,"name": "getAffinity","kind": "const","type": 365,"value": 684},{"import": 1394,"src": 401,"name": "sleep","kind": "const","type": 364,"value": 683},{"import": 1394,"src": 444,"name": "yield","kind": "const","type": 3,"value": 769},{"import": 1394,"src": 4485,"name": "Handle","kind": "const","type": 778,"value": 972},{"import": 1394,"src": 403,"name": "setAffinity","kind": "const","type": 366,"value": 685},{"import": 1394,"src": 377,"name": "now","kind": "const","type": 447,"value": 633},{"import": 1394,"src": 442,"name": "getStackSize","kind": "const","type": 2153,"value": 1491},{"import": 1394,"src": 384,"name": "join","kind": "const","type": 453,"value": 642},{"import": 1394,"src": 443,"name": "create","kind": "const","type": 2154,"value": 1492},{"import": 1394,"src": 4486,"name": "frequency","kind": "var","type": 937,"value": null},{"import": 1394,"src": 439,"name": "getQPCFrequency","kind": "const","type": 525,"value": 743},{"import": 1394,"src": 397,"name": "getCpus","kind": "const","type": 472,"value": 676},{"import": 1394,"src": 395,"name": "getCpuCount","kind": "const","type": 471,"value": 674},{"import": 1394,"src": 396,"name": "getNodeCount","kind": "const","type": 125,"value": 675},{"import": 1394,"src": 448,"name": "findAffinityCount","kind": "const","type": 546,"value": 782},{"import": 1394,"src": 449,"name": "iterateProcessorInfo","kind": "const","type": 2155,"value": 1493},{"import": 1394,"src": 476,"name": "findNumaGroupAffinity","kind": "const","type": 616,"value": 874},{"import": 1394,"src": 450,"name": "findFirstAffinity","kind": "const","type": 548,"value": 784},{"import": 1394,"src": 447,"name": "getNumaGroupAffinity","kind": "const","type": 545,"value": 781},{"import": 1942,"src": 4487,"name": "WaitForSingleObjectError"},{"import": 1942,"src": 4488,"name": "fromSysTime"},{"import": 1942,"src": 4489,"name": "RtlGenRandomError"},{"import": 1942,"src": 4490,"name": "CreateIoCompletionPort"},{"import": 1942,"src": 4491,"name": "FindFirstFile"},{"import": 1942,"src": 179,"name": "WriteFile","kind": "const","type": 242,"value": 308},{"import": 1942,"src": 4492,"name": "HeapDestroy"},{"import": 1942,"src": 4493,"name": "CreateProcessError","kind": "const","type": 778,"value": 2169},{"import": 1942,"src": 148,"name": "CloseHandle","kind": "const","type": 152,"value": 240},{"import": 1942,"src": 4494,"name": "GetEnvironmentStringsW"},{"import": 1942,"src": 101,"name": "VirtualFree","kind": "const","type": 148,"value": 160},{"import": 1942,"src": 4495,"name": "TerminateProcessError"},{"import": 1942,"src": 4496,"name": "ReadFileError","kind": "const","type": 778,"value": 1790},{"import": 1942,"src": 4497,"name": "SetHandleInformation"},{"import": 1942,"src": 4498,"name": "GetFileAttributesError"},{"import": 1942,"src": 149,"name": "SetFilePointerEx_BEGIN","kind": "const","type": 193,"value": 241},{"import": 1942,"src": 4499,"name": "WaitForSingleObject"},{"import": 1942,"src": 4500,"name": "GetFinalPathNameByHandleW"},{"import": 1942,"src": 4501,"name": "MoveFileError"},{"import": 1942,"src": 4502,"name": "CreatePipeError"},{"import": 1942,"src": 4503,"name": "MoveFileEx"},{"import": 1942,"src": 4504,"name": "subsystem"},{"import": 1942,"src": 144,"name": "VirtualAlloc","kind": "const","type": 190,"value": 235},{"import": 1942,"src": 4505,"name": "CreateSymbolicLinkW"},{"import": 1942,"src": 4506,"name": "MoveFileExW"},{"import": 1942,"src": 4507,"name": "GetFinalPathNameByHandleError"},{"import": 1942,"src": 4508,"name": "CreateSymbolicLinkError"},{"import": 1942,"src": 4509,"name": "ntdll","kind": "const","type": 778,"value": 2170},{"import": 1942,"src": 175,"name": "ReadFile","kind": "const","type": 237,"value": 297},{"import": 1942,"src": 4510,"name": "FindNextFile"},{"import": 1942,"src": 4511,"name": "fileTimeToNanoSeconds"},{"import": 1942,"src": 4512,"name": "RemoveDirectory"},{"import": 1942,"src": 4513,"name": "CreatePipe"},{"import": 1942,"src": 119,"name": "sliceToPrefixedSuffixedFileW","kind": "const","type": 2171,"value": 1494},{"import": 1942,"src": 4514,"name": "DeleteFileError"},{"import": 1942,"src": 4515,"name": "GetQueuedCompletionStatusResult"},{"import": 1942,"src": 116,"name": "GetCurrentDirectory","kind": "const","type": 158,"value": 177},{"import": 1942,"src": 4516,"name": "WriteFileError","kind": "const","type": 778,"value": 1794},{"import": 1942,"src": 4517,"name": "ole32"},{"import": 1942,"src": 4518,"name": "RemoveDirectoryW"},{"import": 1942,"src": 4519,"name": "GetFileAttributesW"},{"import": 1942,"src": 4520,"name": "toSysTime"},{"import": 1942,"src": 184,"name": "InitOnceExecuteOnce","kind": "const","type": 250,"value": 334},{"import": 1942,"src": 4521,"name": "shell32"},{"import": 1942,"src": 118,"name": "sliceToPrefixedFileW","kind": "const","type": 159,"value": 179},{"import": 1942,"src": 4522,"name": "FreeLibrary"},{"import": 1942,"src": 4523,"name": "FreeEnvironmentStringsW"},{"import": 1942,"src": 535,"name": "QueryPerformanceFrequency","kind": "const","type": 525,"value": 1092},{"import": 1942,"src": 146,"name": "GetModuleFileNameW","kind": "const","type": 191,"value": 237},{"import": 1942,"src": 4524,"name": "CreateDirectory"},{"import": 1942,"src": 4525,"name": "RemoveDirectoryError"},{"import": 1942,"src": 4526,"name": "SetConsoleTextAttributeError","kind": "const","type": 778,"value": 1760},{"import": 1942,"src": 4527,"name": "VirtualAllocError","kind": "const","type": 778,"value": 1766},{"import": 1942,"src": 4528,"name": "TerminateProcess"},{"import": 1942,"src": 4529,"name": "CreateDirectoryError"},{"import": 1942,"src": 150,"name": "SetFilePointerEx_CURRENT","kind": "const","type": 194,"value": 242},{"import": 1942,"src": 4530,"name": "GetCurrentDirectoryError","kind": "const","type": 778,"value": 1752},{"import": 1942,"src": 536,"name": "QueryPerformanceCounter","kind": "const","type": 525,"value": 1093},{"import": 1942,"src": 4531,"name": "PostQueuedCompletionStatus"},{"import": 1942,"src": 4532,"name": "PostQueuedCompletionStatusError"},{"import": 1942,"src": 4533,"name": "GetEnvironmentVariableError","kind": "const","type": 778,"value": 1787},{"import": 1942,"src": 4534,"name": "self_process_handle"},{"import": 1942,"src": 4535,"name": "RtlGenRandom"},{"import": 1942,"src": 4536,"name": "GetFileAttributes"},{"import": 1942,"src": 4537,"name": "LoadLibraryW"},{"import": 1942,"src": 4538,"name": "FindFirstFileError"},{"import": 1942,"src": 4539,"name": "SetHandleInformationError"},{"import": 1942,"src": 4540,"name": "LoadLibraryError"},{"import": 1942,"src": 4541,"name": "peb"},{"import": 1942,"src": 4542,"name": "GetFileInformationByHandleError"},{"import": 1942,"src": 94,"name": "unexpectedError","kind": "const","type": 141,"value": 153},{"import": 1942,"src": 4543,"name": "FindClose"},{"import": 1942,"src": 4544,"name": "CreateDirectoryW"},{"import": 1942,"src": 4545,"name": "cStrToPrefixedFileW"},{"import": 1942,"src": 4546,"name": "SetFilePointerEx_CURRENT_get"},{"import": 1942,"src": 130,"name": "SetConsoleTextAttribute","kind": "const","type": 173,"value": 209},{"import": 1942,"src": 4547,"name": "CreateFileError","kind": "const","type": 778,"value": 1769},{"import": 1942,"src": 4548,"name": "SetFileTimeError"},{"import": 1942,"src": 4549,"name": "FindNextFileError"},{"import": 1942,"src": 4550,"name": "CreateSymbolicLink"},{"import": 1942,"src": 4551,"name": "nanoSecondsToFileTime"},{"import": 1942,"src": 4552,"name": "HeapFree"},{"import": 1942,"src": 4553,"name": "DeleteFile"},{"import": 1942,"src": 4554,"name": "GetQueuedCompletionStatus"},{"import": 1942,"src": 12,"name": "GetStdHandle","kind": "const","type": 12,"value": 12},{"import": 1942,"src": 4555,"name": "unexpectedStatus"},{"import": 1942,"src": 4556,"name": "DeleteFileW"},{"import": 1942,"src": 4557,"name": "CreateIoCompletionPortError"},{"import": 1942,"src": 4558,"name": "SetFilePointerError","kind": "const","type": 778,"value": 1771},{"import": 1942,"src": 169,"name": "GetEnvironmentVariableW","kind": "const","type": 229,"value": 284},{"import": 1942,"src": 4559,"name": "SetFileTime"},{"import": 1942,"src": 4560,"name": "GetFileSizeError","kind": "const","type": 778,"value": 1758},{"import": 1942,"src": 4561,"name": "is_the_target","kind": "const","type": 842,"value": null},{"import": 1942,"src": 147,"name": "CreateFileW","kind": "const","type": 192,"value": 238},{"import": 1942,"src": 123,"name": "GetFileSizeEx","kind": "const","type": 164,"value": 185},{"import": 1942,"src": 4562,"name": "GetFileInformationByHandle"},{"import": 1942,"src": 4563,"name": "advapi32"},{"import": 1942,"src": 4564,"name": "GetEnvironmentStringsError"},{"import": 1942,"src": 4565,"name": "GetStdHandleError","kind": "const","type": 778,"value": 1670},{"import": 1942,"src": 4566,"name": "SetFilePointerEx_END"},{"import": 1942,"src": 4567,"name": "kernel32","kind": "const","type": 778,"value": 2172},{"import": 1942,"src": 4568,"name": "CreateFile"},{"import": 1942,"src": 4569,"name": "CreateProcessW"},{"import": 1942,"src": 4570,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 1942,"src": 133,"name": "MAKELANGID","kind": "const","type": 179,"value": 223},{"import": 1942,"src": 4571,"name": "math","kind": "const","type": 778,"value": 939},{"import": 1942,"src": 4572,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1942,"src": 4573,"name": "maxInt","kind": "const","type": 871,"value": 1199},{"import": 1942,"src": 4574,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1942,"src": 4575,"name": "GetModuleFileNameError","kind": "const","type": 778,"value": 1767},{"import": 1942,"src": 4576,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1964,"src": 4577,"name": "main"},{"import": 1964,"src": 4578,"name": "builtin"},{"import": 1964,"src": 4579,"name": "io"},{"import": 1964,"src": 4580,"name": "std"},{"import": 1964,"src": 4581,"name": "test_fn_list"},{"import": 1978,"src": 577,"name": "isSlice","kind": "const","type": 948,"value": 1228},{"import": 1978,"src": 4582,"name": "hasFn"},{"import": 1978,"src": 4583,"name": "isExtern"},{"import": 1978,"src": 4584,"name": "isContainer"},{"import": 1978,"src": 576,"name": "isSingleItemPtr","kind": "const","type": 938,"value": 1226},{"import": 1978,"src": 4585,"name": "multiTrait"},{"import": 1978,"src": 4586,"name": "isNumber"},{"import": 1978,"src": 549,"name": "is","kind": "const","type": 822,"value": 1178},{"import": 1978,"src": 4587,"name": "isUnsignedInt"},{"import": 1978,"src": 4588,"name": "TraitFn","kind": "const","type": 778,"value": 823},{"import": 1978,"src": 4589,"name": "isManyItemPtr"},{"import": 1978,"src": 4590,"name": "isSignedInt"},{"import": 1978,"src": 4591,"name": "isIndexable"},{"import": 1978,"src": 4592,"name": "isPtrTo"},{"import": 1978,"src": 4593,"name": "isPacked"},{"import": 1978,"src": 4594,"name": "TraitList"},{"import": 1978,"src": 4595,"name": "hasField"},{"import": 1978,"src": 565,"name": "isConstPtr","kind": "const","type": 870,"value": 1198},{"import": 1978,"src": 4596,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1978,"src": 4597,"name": "std"},{"import": 1978,"src": 4598,"name": "debug"},{"import": 1978,"src": 4599,"name": "meta"},{"import": 1978,"src": 4600,"name": "testing"},{"import": 1978,"src": 4601,"name": "traitFnWorkaround","kind": "const","type": 823,"value": 1495},{"import": 1978,"src": 4602,"name": "warn"},{"import": 1978,"src": 4603,"name": "mem"},{"import": 1979,"src": 4604,"name": "linkmap_iterator"},{"import": 1979,"src": 4605,"name": "WindowsDynLib","kind": "const","type": 778,"value": 1453},{"import": 1979,"src": 4606,"name": "ElfLib"},{"import": 1979,"src": 4607,"name": "LinuxDynLib"},{"import": 1979,"src": 4608,"name": "DynLib","kind": "const","type": 778,"value": 1453},{"import": 1979,"src": 4609,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1979,"src": 4610,"name": "checkver"},{"import": 1979,"src": 4611,"name": "LinkMap"},{"import": 1979,"src": 4612,"name": "elf"},{"import": 1979,"src": 4613,"name": "RDebug"},{"import": 1979,"src": 4614,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1979,"src": 4615,"name": "maxInt"},{"import": 1979,"src": 4616,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1979,"src": 4617,"name": "os"},{"import": 1979,"src": 4618,"name": "elf_get_va_offset"},{"import": 1979,"src": 4619,"name": "testing"},{"import": 1979,"src": 4620,"name": "assert"},{"import": 1979,"src": 4621,"name": "mem"},{"import": 1980,"src": 4622,"name": "Thread","kind": "const","type": 778,"value": 1456},{"import": 1980,"src": 4623,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1980,"src": 4624,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1980,"src": 4625,"name": "c"},{"import": 1980,"src": 4626,"name": "os"},{"import": 1980,"src": 4627,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 1980,"src": 4628,"name": "assert"},{"import": 1980,"src": 4629,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1982,"src": 4630,"name": "BufSet","kind": "const","type": 778,"value": 1457},{"import": 1982,"src": 4631,"name": "std","kind": "const","type": 778,"value": 851},{"import": 1982,"src": 4632,"name": "Allocator"},{"import": 1982,"src": 4633,"name": "testing"},{"import": 1982,"src": 4634,"name": "mem"},{"import": 1982,"src": 4635,"name": "StringHashMap","kind": "const","type": 865,"value": 1196},{"import": 1986,"src": 4636,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1988,"src": 4637,"name": "unlinkat"},{"import": 1988,"src": 4638,"name": "munmap"},{"import": 1988,"src": 4639,"name": "itimerspec"},{"import": 1988,"src": 4640,"name": "clone2"},{"import": 1988,"src": 4641,"name": "llseek"},{"import": 2176,"src": 4642,"name": "restore_rt"},{"import": 1988,"src": 4643,"name": "getuid"},{"import": 1988,"src": 4644,"name": "fork"},{"import": 1988,"src": 4645,"name": "io_uring_enter"},{"import": 1988,"src": 4646,"name": "accept"},{"import": 2176,"src": 4647,"name": "syscall1"},{"import": 1988,"src": 4648,"name": "futex_wait"},{"import": 1988,"src": 4649,"name": "inotify_init1"},{"import": 1988,"src": 4650,"name": "clock_settime"},{"import": 1988,"src": 4651,"name": "epoll_create1"},{"import": 1988,"src": 4652,"name": "getsockopt"},{"import": 1988,"src": 4653,"name": "statx"},{"import": 1988,"src": 4654,"name": "vfork"},{"import": 1988,"src": 4655,"name": "getxattr"},{"import": 1988,"src": 4656,"name": "lremovexattr"},{"import": 1988,"src": 4657,"name": "setgroups"},{"import": 1988,"src": 4658,"name": "shutdown"},{"import": 1988,"src": 4659,"name": "unlink"},{"import": 1988,"src": 4660,"name": "getdents"},{"import": 1988,"src": 4661,"name": "elf_aux_maybe"},{"import": 1988,"src": 4662,"name": "mkdirat"},{"import": 1988,"src": 4663,"name": "mprotect"},{"import": 1988,"src": 4664,"name": "readlink"},{"import": 1988,"src": 4665,"name": "getresuid"},{"import": 1988,"src": 4666,"name": "socket"},{"import": 1988,"src": 4667,"name": "chroot"},{"import": 2176,"src": 4668,"name": "syscall5"},{"import": 1988,"src": 4669,"name": "symlinkat"},{"import": 1988,"src": 4670,"name": "getdents64"},{"import": 1988,"src": 4671,"name": "exit"},{"import": 1988,"src": 4672,"name": "inotify_rm_watch"},{"import": 1988,"src": 4673,"name": "lseek"},{"import": 1988,"src": 4674,"name": "capset"},{"import": 1988,"src": 4675,"name": "pipe2"},{"import": 1988,"src": 4676,"name": "getgroups"},{"import": 1988,"src": 4677,"name": "stat"},{"import": 1988,"src": 4678,"name": "getrandom"},{"import": 1988,"src": 4679,"name": "removexattr"},{"import": 2176,"src": 4680,"name": "syscall0"},{"import": 1988,"src": 4681,"name": "setresuid"},{"import": 1988,"src": 4682,"name": "lgetxattr"},{"import": 1988,"src": 4683,"name": "fsetxattr"},{"import": 1988,"src": 4684,"name": "blockAllSignals"},{"import": 1988,"src": 4685,"name": "listen"},{"import": 1988,"src": 4686,"name": "timerfd_gettime"},{"import": 1988,"src": 4687,"name": "mmap"},{"import": 1988,"src": 4688,"name": "nanosleep"},{"import": 1988,"src": 4689,"name": "epoll_create"},{"import": 1988,"src": 4690,"name": "settimeofday"},{"import": 1988,"src": 4691,"name": "mount"},{"import": 1988,"src": 4692,"name": "geteuid"},{"import": 1988,"src": 4693,"name": "sigprocmask"},{"import": 1988,"src": 4694,"name": "futex_wake"},{"import": 1988,"src": 4695,"name": "setxattr"},{"import": 1988,"src": 4696,"name": "socketpair"},{"import": 1988,"src": 4697,"name": "open"},{"import": 1988,"src": 4698,"name": "readv"},{"import": 1988,"src": 4699,"name": "getegid"},{"import": 1988,"src": 4700,"name": "fstatat"},{"import": 1988,"src": 4701,"name": "setuid"},{"import": 1988,"src": 4702,"name": "getcwd"},{"import": 1988,"src": 4703,"name": "gettimeofday"},{"import": 1988,"src": 4704,"name": "fgetxattr"},{"import": 1988,"src": 4705,"name": "epoll_ctl"},{"import": 1988,"src": 4706,"name": "fstat"},{"import": 1988,"src": 4707,"name": "sigaltstack"},{"import": 1988,"src": 4708,"name": "rmdir"},{"import": 1988,"src": 4709,"name": "openat"},{"import": 1988,"src": 4710,"name": "renameat"},{"import": 1988,"src": 4711,"name": "getErrno"},{"import": 1988,"src": 4712,"name": "recvmsg"},{"import": 2176,"src": 4713,"name": "syscall4"},{"import": 1988,"src": 4714,"name": "access"},{"import": 1988,"src": 4715,"name": "llistxattr"},{"import": 1988,"src": 4716,"name": "faccessat"},{"import": 1988,"src": 4717,"name": "capget"},{"import": 1988,"src": 4718,"name": "connect"},{"import": 1988,"src": 4719,"name": "fremovexattr"},{"import": 1988,"src": 4720,"name": "inotify_add_watch"},{"import": 1988,"src": 4721,"name": "umount"},{"import": 1988,"src": 4722,"name": "dl_iterate_phdr"},{"import": 2176,"src": 4723,"name": "syscall3"},{"import": 1988,"src": 4724,"name": "dup3"},{"import": 1988,"src": 4725,"name": "sigaction"},{"import": 1988,"src": 4726,"name": "listxattr"},{"import": 1988,"src": 4727,"name": "clone5"},{"import": 1988,"src": 4728,"name": "writev"},{"import": 1988,"src": 4729,"name": "exit_group"},{"import": 1988,"src": 4730,"name": "close"},{"import": 1988,"src": 4731,"name": "futimens"},{"import": 1988,"src": 4732,"name": "waitpid"},{"import": 1988,"src": 4733,"name": "bind"},{"import": 1988,"src": 4734,"name": "io_uring_setup"},{"import": 1988,"src": 4735,"name": "pread"},{"import": 1988,"src": 4736,"name": "sendmmsg"},{"import": 1988,"src": 4737,"name": "recvfrom"},{"import": 1988,"src": 4738,"name": "timerfd_create"},{"import": 1988,"src": 4739,"name": "getgid"},{"import": 1988,"src": 4740,"name": "eventfd"},{"import": 1988,"src": 4741,"name": "getauxval"},{"import": 1988,"src": 4742,"name": "pwrite"},{"import": 1988,"src": 4743,"name": "symlink"},{"import": 1988,"src": 4744,"name": "utimensat"},{"import": 1988,"src": 4745,"name": "preadv2"},{"import": 1988,"src": 4746,"name": "epoll_wait"},{"import": 1988,"src": 4747,"name": "write"},{"import": 1988,"src": 4748,"name": "create"},{"import": 1988,"src": 4749,"name": "setgid"},{"import": 1988,"src": 4750,"name": "clock_gettime"},{"import": 1988,"src": 4751,"name": "chdir"},{"import": 1988,"src": 4752,"name": "sigaddset"},{"import": 2176,"src": 4753,"name": "syscall2"},{"import": 1988,"src": 4754,"name": "dup2"},{"import": 1988,"src": 4755,"name": "getresgid"},{"import": 1988,"src": 4756,"name": "getpid"},{"import": 2176,"src": 4757,"name": "clone"},{"import": 1988,"src": 4758,"name": "readlinkat"},{"import": 1988,"src": 4759,"name": "setresgid"},{"import": 1988,"src": 4760,"name": "unshare"},{"import": 1988,"src": 4761,"name": "uname"},{"import": 1988,"src": 4762,"name": "kill"},{"import": 1988,"src": 4763,"name": "preadv"},{"import": 1988,"src": 4764,"name": "setreuid"},{"import": 1988,"src": 4765,"name": "execve"},{"import": 1988,"src": 4766,"name": "sched_getaffinity"},{"import": 1988,"src": 4767,"name": "accept4"},{"import": 1988,"src": 4768,"name": "blockAppSignals"},{"import": 1988,"src": 4769,"name": "pwritev"},{"import": 1988,"src": 4770,"name": "lsetxattr"},{"import": 1988,"src": 4771,"name": "sigismember"},{"import": 1988,"src": 4772,"name": "getpeername"},{"import": 1988,"src": 4773,"name": "sendmsg"},{"import": 1988,"src": 4774,"name": "pwritev2"},{"import": 1988,"src": 4775,"name": "restoreSignals"},{"import": 1988,"src": 4776,"name": "renameat2"},{"import": 1988,"src": 4777,"name": "is_the_target","kind": "const","type": 842,"value": null},{"import": 1988,"src": 4778,"name": "flistxattr"},{"import": 1988,"src": 4779,"name": "seteuid"},{"import": 1988,"src": 4780,"name": "lstat"},{"import": 1988,"src": 4781,"name": "setregid"},{"import": 2176,"src": 4782,"name": "syscall6"},{"import": 1988,"src": 4783,"name": "read"},{"import": 1988,"src": 4784,"name": "setsockopt"},{"import": 2176,"src": 4785,"name": "restore"},{"import": 1988,"src": 4786,"name": "rename"},{"import": 1988,"src": 4787,"name": "clock_getres"},{"import": 1988,"src": 4788,"name": "mkdir"},{"import": 1988,"src": 4789,"name": "gettid"},{"import": 1988,"src": 4790,"name": "getsockname"},{"import": 1988,"src": 4791,"name": "umount2"},{"import": 1988,"src": 4792,"name": "setegid"},{"import": 1988,"src": 4793,"name": "epoll_pwait"},{"import": 1988,"src": 4794,"name": "tls"},{"import": 1988,"src": 4795,"name": "sendto"},{"import": 1988,"src": 4796,"name": "io_uring_register"},{"import": 1988,"src": 4797,"name": "pipe"},{"import": 1988,"src": 4798,"name": "timerfd_settime"},{"import": 1988,"src": 4799,"name": "maxInt"},{"import": 1988,"src": 4800,"name": "assert"},{"import": 1988,"src": 4801,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 1988,"src": 4802,"name": "vdso_clock_gettime_ty"},{"import": 1988,"src": 4803,"name": "dl"},{"import": 1988,"src": 4804,"name": "vdso"},{"import": 1988,"src": 4805,"name": "__ehdr_start"},{"import": 1988,"src": 4806,"name": "elf"},{"import": 1988,"src": 4807,"name": "init_vdso_clock_gettime"},{"import": 1988,"src": 4808,"name": "vdso_clock_gettime"},{"import": 1988,"src": 4809,"name": "std"},{"import": 1459,"src": 4810,"name": "addressLessThan"},{"import": 1459,"src": 4811,"name": "address"},{"import": 2007,"src": 4812,"name": "Buffer","kind": "const","type": 778,"value": 1460},{"import": 2007,"src": 4813,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2007,"src": 4814,"name": "Allocator"},{"import": 2007,"src": 4815,"name": "ArrayList","kind": "const","type": 831,"value": 1182},{"import": 2007,"src": 4816,"name": "debug"},{"import": 2007,"src": 4817,"name": "assert"},{"import": 2007,"src": 4818,"name": "testing"},{"import": 2007,"src": 4819,"name": "mem"},{"import": 2011,"src": 4820,"name": "createWindowsEnvBlock"},{"import": 2011,"src": 4821,"name": "ChildProcess","kind": "const","type": 778,"value": 1471},{"import": 2011,"src": 4822,"name": "builtin"},{"import": 2011,"src": 4823,"name": "windowsMakePipeOut"},{"import": 2011,"src": 4824,"name": "TailQueue"},{"import": 2011,"src": 4825,"name": "maxInt"},{"import": 2011,"src": 4826,"name": "BufMap","kind": "const","type": 778,"value": 1480},{"import": 2011,"src": 4827,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2011,"src": 4828,"name": "forkChildErrReport"},{"import": 2011,"src": 4829,"name": "windowsMakePipeIn"},{"import": 2011,"src": 4830,"name": "windowsCreateProcess"},{"import": 2011,"src": 4831,"name": "cstr"},{"import": 2011,"src": 4832,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 2011,"src": 4833,"name": "debug"},{"import": 2011,"src": 4834,"name": "windowsDestroyPipe"},{"import": 2011,"src": 4835,"name": "destroyPipe"},{"import": 2011,"src": 4836,"name": "Buffer"},{"import": 2011,"src": 4837,"name": "fs"},{"import": 2011,"src": 4838,"name": "unicode"},{"import": 2011,"src": 4839,"name": "File","kind": "const","type": 778,"value": 967},{"import": 2011,"src": 4840,"name": "readIntFd"},{"import": 2011,"src": 4841,"name": "writeIntFd"},{"import": 2011,"src": 4842,"name": "windows","kind": "const","type": 778,"value": 1942},{"import": 2011,"src": 4843,"name": "windowsCreateCommandLine"},{"import": 2011,"src": 4844,"name": "io"},{"import": 2011,"src": 4845,"name": "ErrInt"},{"import": 2011,"src": 4846,"name": "Os"},{"import": 2011,"src": 4847,"name": "process"},{"import": 2011,"src": 4848,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 2028,"src": 4849,"name": "FloatDecimal","kind": "const","type": 778,"value": 1364},{"import": 2028,"src": 4850,"name": "RoundMode","kind": "const","type": 778,"value": 1366},{"import": 2028,"src": 498,"name": "roundToPrecision","kind": "const","type": 728,"value": 1040},{"import": 2028,"src": 4851,"name": "c_digits_lut","kind": "const","type": 2180,"value": null},{"import": 2028,"src": 497,"name": "errol3","kind": "const","type": 727,"value": 1039},{"import": 2028,"src": 4852,"name": "enum3","kind": "const","type": 2181,"value": null},{"import": 2028,"src": 504,"name": "errolFixed","kind": "const","type": 727,"value": 1049},{"import": 2028,"src": 521,"name": "gethi","kind": "const","type": 732,"value": 1066},{"import": 2028,"src": 4853,"name": "math","kind": "const","type": 778,"value": 939},{"import": 2028,"src": 4854,"name": "lookup_table","kind": "const","type": 2182,"value": null},{"import": 2028,"src": 508,"name": "hpDiv10","kind": "const","type": 734,"value": 1053},{"import": 2028,"src": 4855,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2028,"src": 515,"name": "u64toa","kind": "const","type": 737,"value": 1060},{"import": 2028,"src": 502,"name": "errol3u","kind": "const","type": 727,"value": 1047},{"import": 2028,"src": 513,"name": "fpeint","kind": "const","type": 735,"value": 1058},{"import": 2028,"src": 500,"name": "tableLowerBound","kind": "const","type": 479,"value": 1045},{"import": 2028,"src": 511,"name": "fpprev","kind": "const","type": 732,"value": 1056},{"import": 2028,"src": 509,"name": "hpMul10","kind": "const","type": 734,"value": 1054},{"import": 2028,"src": 503,"name": "errolInt","kind": "const","type": 727,"value": 1048},{"import": 2028,"src": 510,"name": "fpnext","kind": "const","type": 732,"value": 1055},{"import": 2028,"src": 518,"name": "split","kind": "const","type": 738,"value": 1063},{"import": 2028,"src": 4856,"name": "HP","kind": "const","type": 778,"value": 1368},{"import": 2028,"src": 512,"name": "hpNormalize","kind": "const","type": 734,"value": 1057},{"import": 2028,"src": 514,"name": "mismatch10","kind": "const","type": 736,"value": 1059},{"import": 2028,"src": 4857,"name": "enum3_data","kind": "const","type": 2183,"value": null},{"import": 2028,"src": 507,"name": "hpProd","kind": "const","type": 733,"value": 1052},{"import": 2028,"src": 4858,"name": "assert","kind": "const","type": 11,"value": 11},{"import": 2028,"src": 4859,"name": "mem","kind": "const","type": 778,"value": 1452},{"import": 1479,"src": 4860,"name": "Flags","kind": "const","type": 778,"value": 2184},{"import": 2048,"src": 4861,"name": "BufMap","kind": "const","type": 778,"value": 1480},{"import": 2048,"src": 4862,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2048,"src": 4863,"name": "Allocator"},{"import": 2048,"src": 4864,"name": "testing"},{"import": 2048,"src": 4865,"name": "mem"},{"import": 2048,"src": 4866,"name": "StringHashMap","kind": "const","type": 865,"value": 1196},{"import": 2049,"src": 4867,"name": "HashStrategy","kind": "const","type": 778,"value": 2186},{"import": 2049,"src": 467,"name": "hash","kind": "const","type": 2187,"value": 1496},{"import": 2049,"src": 4868,"name": "hashArray"},{"import": 2049,"src": 434,"name": "autoHash","kind": "const","type": 2019,"value": 1457},{"import": 2049,"src": 4869,"name": "hashPointer"},{"import": 2049,"src": 4870,"name": "builtin"},{"import": 2049,"src": 4871,"name": "testHashDeep"},{"import": 2049,"src": 4872,"name": "Wyhash"},{"import": 2049,"src": 4873,"name": "testHash"},{"import": 2049,"src": 4874,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2049,"src": 4875,"name": "testHashDeepRecursive"},{"import": 2049,"src": 4876,"name": "testHashShallow"},{"import": 2049,"src": 4877,"name": "meta","kind": "const","type": 778,"value": 1489},{"import": 2049,"src": 4878,"name": "assert"},{"import": 2049,"src": 4879,"name": "testing"},{"import": 2049,"src": 4880,"name": "mem"},{"import": 1492,"src": 100,"name": "shrink","kind": "const","type": 147,"value": 159},{"import": 1492,"src": 98,"name": "realloc","kind": "const","type": 145,"value": 157},{"import": 1492,"src": 99,"name": "alloc","kind": "const","type": 146,"value": 158},{"import": 2057,"src": 4881,"name": "SpinLock","kind": "const","type": 778,"value": 1501},{"import": 2057,"src": 4882,"name": "builtin"},{"import": 2057,"src": 4883,"name": "std"},{"import": 2057,"src": 4884,"name": "AtomicRmwOp"},{"import": 2057,"src": 4885,"name": "AtomicOrder"},{"import": 2057,"src": 4886,"name": "assert"},{"import": 1526,"src": 4887,"name": "AutoReset","kind": "const","type": 778,"value": 895},{"import": 1526,"src": 4888,"name": "ManualReset"},{"import": 1526,"src": 572,"name": "EventImpl","kind": "const","type": 894,"value": 1209},{"import": 2063,"src": 4889,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 2063,"src": 4890,"name": "Posix"},{"import": 2063,"src": 4891,"name": "Windows","kind": "const","type": 778,"value": 1883},{"import": 2063,"src": 4892,"name": "Backend","kind": "const","type": 778,"value": 1883},{"import": 2063,"src": 4893,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 2063,"src": 4894,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2063,"src": 4895,"name": "os","kind": "const","type": 778,"value": 1458},{"import": 2063,"src": 4896,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 2063,"src": 4897,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 2063,"src": 4898,"name": "system","kind": "const","type": 778,"value": 1942},{"import": 2063,"src": 4899,"name": "Linux"},{"import": 2063,"src": 4900,"name": "expectError","kind": "const","type": 2009,"value": 1455},{"import": 2066,"src": 4901,"name": "builtin"},{"import": 2066,"src": 4902,"name": "al"},{"import": 2066,"src": 4903,"name": "gcd"},{"import": 2066,"src": 4904,"name": "gcdLehmer"},{"import": 2066,"src": 4905,"name": "Limb"},{"import": 2066,"src": 4906,"name": "SignedDoubleLimb"},{"import": 2066,"src": 4907,"name": "math"},{"import": 2066,"src": 4908,"name": "bn"},{"import": 2066,"src": 4909,"name": "std"},{"import": 2066,"src": 4910,"name": "extractLowBits"},{"import": 2066,"src": 4911,"name": "debug"},{"import": 2066,"src": 4912,"name": "TypeId"},{"import": 2066,"src": 4913,"name": "testing"},{"import": 2066,"src": 4914,"name": "FixedIntFromSignedDoubleLimb"},{"import": 2066,"src": 4915,"name": "Allocator"},{"import": 2066,"src": 4916,"name": "ArrayList"},{"import": 2066,"src": 4917,"name": "fixed"},{"import": 2066,"src": 4918,"name": "buffer"},{"import": 2066,"src": 4919,"name": "DoubleLimb"},{"import": 2066,"src": 4920,"name": "mem"},{"import": 2066,"src": 4921,"name": "Int"},{"import": 2067,"src": 4922,"name": "mem"},{"import": 2067,"src": 4923,"name": "builtin"},{"import": 2067,"src": 4924,"name": "al"},{"import": 2067,"src": 4925,"name": "maxInt"},{"import": 2067,"src": 4926,"name": "math","kind": "const","type": 778,"value": 939},{"import": 2067,"src": 4927,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2067,"src": 4928,"name": "Allocator"},{"import": 2067,"src": 4929,"name": "ArrayList"},{"import": 2067,"src": 4930,"name": "debug","kind": "const","type": 778,"value": 1459},{"import": 2067,"src": 4931,"name": "minInt"},{"import": 2067,"src": 4932,"name": "TypeId"},{"import": 2067,"src": 4933,"name": "fixed"},{"import": 2067,"src": 4934,"name": "buffer"},{"import": 2067,"src": 4935,"name": "testing"},{"import": 1835,"src": 4936,"name": "Set","kind": "const","type": 778,"value": 1901},{"import": 1835,"src": 4937,"name": "Pending","kind": "const","type": 1901,"value": null},{"import": 1835,"src": 4938,"name": "Closed","kind": "const","type": 1901,"value": null},{"import": 1835,"src": 4939,"name": "InvalidToken","kind": "const","type": 1901,"value": null},{"import": 2071,"src": 4940,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2071,"src": 4941,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 2071,"src": 4942,"name": "cached_huge_page_size","kind": "var","type": 873,"value": null},{"import": 2071,"src": 4943,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 2071,"src": 4944,"name": "cached_page_size","kind": "var","type": 935,"value": null},{"import": 2071,"src": 4945,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 2072,"src": 4946,"name": "std","kind": "const","type": 778,"value": 851},{"import": 2072,"src": 4947,"name": "expect","kind": "const","type": 11,"value": 407},{"import": 2072,"src": 4948,"name": "zuma","kind": "const","type": 778,"value": 1655},{"import": 2072,"src": 4949,"name": "expectError","kind": "const","type": 2009,"value": 1455},{"import": 2072,"src": 4950,"name": "zync","kind": "const","type": 778,"value": 1656},{"import": 2072,"src": 317,"name": "getAffinity","kind": "const","type": 365,"value": 533},{"import": 2072,"src": 316,"name": "sleep","kind": "const","type": 364,"value": 532},{"import": 2072,"src": 4951,"name": "CreateError","kind": "const","type": 778,"value": 1819},{"import": 2072,"src": 388,"name": "yield","kind": "const","type": 3,"value": 659},{"import": 2072,"src": 4952,"name": "Handle","kind": "const","type": 778,"value": 972},{"import": 2072,"src": 318,"name": "setAffinity","kind": "const","type": 366,"value": 534},{"import": 2072,"src": 279,"name": "now","kind": "const","type": 331,"value": 485},{"import": 2072,"src": 4953,"name": "JoinHandle","kind": "const","type": 778,"value": 1820},{"import": 2072,"src": 381,"name": "getStackSize","kind": "const","type": 2188,"value": 1497},{"import": 2072,"src": 282,"name": "spawn","kind": "const","type": 2189,"value": 1498},{"import": 2072,"src": 314,"name": "getRandom","kind": "const","type": 362,"value": 530},{"import": 2072,"src": 4954,"name": "join"},{"import": 2072,"src": 382,"name": "create","kind": "const","type": 2190,"value": 1499},{"import": 2072,"src": 4955,"name": "JoinError","kind": "const","type": 778,"value": 1821},{"import": 2072,"src": 4956,"name": "AffinityError","kind": "const","type": 778,"value": 1834},{"import": 2072,"src": 398,"name": "createThreadLocalRandom","kind": "const","type": 473,"value": 677},{"import": 2072,"src": 4957,"name": "random_instance","kind": "var","threadlocal": true,"type": 924,"value": null},{"import": 957,"src": 4958,"name": "Size","kind": "const","type": 778,"value": 2193},{"import": 957,"src": 4959,"name": "Data","kind": "const","type": 778,"value": 2194},{"import": 1845,"src": 334,"name": "new","kind": "const","type": 386,"value": 556},{"import": 1845,"src": 343,"name": "validate","kind": "const","type": 395,"value": 565},{"import": 1845,"src": 4960,"name": "Flag","kind": "const","type": 807,"value": null},{"import": 1845,"src": 347,"name": "new","kind": "const","type": 400,"value": 570},{"import": 1845,"src": 352,"name": "validate","kind": "const","type": 395,"value": 575},{"import": 1845,"src": 4961,"name": "Flag","kind": "const","type": 807,"value": null},{"import": 1885,"src": 4962,"name": "SOL_SOCKET","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4963,"name": "SO_BROADCAST","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4964,"name": "TCP_NODELAY","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4965,"name": "SO_RCVLOWAT","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4966,"name": "IPPROTO_TCP","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4967,"name": "SO_KEEPALIVE","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4968,"name": "SO_REUSEADDR","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4969,"name": "SO_LINGER","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4970,"name": "SO_UPDATE_ACCEPT_CONTEXT","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4971,"name": "SO_DEBUG","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4972,"name": "SO_RCVTIMEO","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4973,"name": "SO_OOBINLINE","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4974,"name": "IPPROTO_UDP","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4975,"name": "SO_SNDBUF","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4976,"name": "SO_UPDATE_CONNECT_CONTEXT","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4977,"name": "SO_SNDTIMEO","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4978,"name": "SO_RCVBUF","kind": "const","type": 843,"value": null},{"import": 1885,"src": 4979,"name": "SO_SNDLOWAT","kind": "const","type": 843,"value": null},{"import": 2124,"src": 4980,"name": "IncomingPadding"},{"import": 2124,"src": 4981,"name": "Socket","kind": "const","type": 778,"value": 2202},{"import": 2124,"src": 4982,"name": "Buffer"},{"import": 2124,"src": 4983,"name": "SockAddr"},{"import": 2124,"src": 4984,"name": "Handle","kind": "const","type": 778,"value": 860},{"import": 2124,"src": 4985,"name": "Event"},{"import": 2124,"src": 4986,"name": "builtin","kind": "const","type": 778,"value": 957},{"import": 2124,"src": 4987,"name": "Options"},{"import": 2124,"src": 4988,"name": "Listen"},{"import": 2124,"src": 4989,"name": "Accept"},{"import": 2124,"src": 4990,"name": "Recvmsg"},{"import": 2124,"src": 4991,"name": "Bind"},{"import": 2124,"src": 4992,"name": "std"},{"import": 2124,"src": 4993,"name": "c"},{"import": 2124,"src": 4994,"name": "os"},{"import": 2124,"src": 4995,"name": "MSG_NOSIGNAL"},{"import": 2124,"src": 4996,"name": "Sendmsg"},{"import": 2124,"src": 4997,"name": "Connect"},{"import": 2124,"src": 4998,"name": "zio","kind": "const","type": 778,"value": 1654},{"import": 2124,"src": 4999,"name": "Getsockopt"},{"import": 2124,"src": 5000,"name": "system"},{"import": 2124,"src": 5001,"name": "CreateSocket"},{"import": 2124,"src": 5002,"name": "Setsockopt"},{"import": 2124,"src": 5003,"name": "errno"},{"import": 2124,"src": 5004,"name": "C"},{"import": 2124,"src": 5005,"name": "msghdr"},{"import": 2135,"src": 5006,"name": "IGBO"},{"import": 2135,"src": 5007,"name": "CZECH"},{"import": 2135,"src": 5008,"name": "LOWER_SORBIAN"},{"import": 2135,"src": 5009,"name": "CROATIAN"},{"import": 2135,"src": 5010,"name": "DUTCH"},{"import": 2135,"src": 5011,"name": "KYRGYZ"},{"import": 2135,"src": 5012,"name": "GERMAN"},{"import": 2135,"src": 5013,"name": "AZERI"},{"import": 2135,"src": 5014,"name": "BRETON"},{"import": 2135,"src": 5015,"name": "KICHE"},{"import": 2135,"src": 5016,"name": "SANSKRIT"},{"import": 2135,"src": 5017,"name": "HUNGARIAN"},{"import": 2135,"src": 5018,"name": "CORSICAN"},{"import": 2135,"src": 5019,"name": "SPANISH"},{"import": 2135,"src": 5020,"name": "MALAYALAM"},{"import": 2135,"src": 5021,"name": "ASSAMESE"},{"import": 2135,"src": 5022,"name": "ALBANIAN"},{"import": 2135,"src": 5023,"name": "SAKHA"},{"import": 2135,"src": 5024,"name": "FARSI"},{"import": 2135,"src": 5025,"name": "JAPANESE"},{"import": 2135,"src": 5026,"name": "AFRIKAANS"},{"import": 2135,"src": 5027,"name": "TIGRIGNA"},{"import": 2135,"src": 5028,"name": "GEORGIAN"},{"import": 2135,"src": 5029,"name": "PERSIAN"},{"import": 2135,"src": 5030,"name": "TAJIK"},{"import": 2135,"src": 5031,"name": "TIGRINYA"},{"import": 2135,"src": 5032,"name": "HAWAIIAN"},{"import": 2135,"src": 5033,"name": "NEUTRAL","kind": "const","type": 843,"value": null},{"import": 2135,"src": 5034,"name": "CHEROKEE"},{"import": 2135,"src": 5035,"name": "VALENCIAN"},{"import": 2135,"src": 5036,"name": "FRENCH"},{"import": 2135,"src": 5037,"name": "TATAR"},{"import": 2135,"src": 5038,"name": "TSWANA"},{"import": 2135,"src": 5039,"name": "BASHKIR"},{"import": 2135,"src": 5040,"name": "KINYARWANDA"},{"import": 2135,"src": 5041,"name": "AMHARIC"},{"import": 2135,"src": 5042,"name": "DIVEHI"},{"import": 2135,"src": 5043,"name": "POLISH"},{"import": 2135,"src": 5044,"name": "LATVIAN"},{"import": 2135,"src": 5045,"name": "OCCITAN"},{"import": 2135,"src": 5046,"name": "VIETNAMESE"},{"import": 2135,"src": 5047,"name": "TURKISH"},{"import": 2135,"src": 5048,"name": "BASQUE"},{"import": 2135,"src": 5049,"name": "FAEROESE"},{"import": 2135,"src": 5050,"name": "HAUSA"},{"import": 2135,"src": 5051,"name": "TAMIL"},{"import": 2135,"src": 5052,"name": "FRISIAN"},{"import": 2135,"src": 5053,"name": "SLOVAK"},{"import": 2135,"src": 5054,"name": "SYRIAC"},{"import": 2135,"src": 5055,"name": "ORIYA"},{"import": 2135,"src": 5056,"name": "FILIPINO"},{"import": 2135,"src": 5057,"name": "HINDI"},{"import": 2135,"src": 5058,"name": "MACEDONIAN"},{"import": 2135,"src": 5059,"name": "BOSNIAN_NEUTRAL"},{"import": 2135,"src": 5060,"name": "BULGARIAN"},{"import": 2135,"src": 5061,"name": "YORUBA"},{"import": 2135,"src": 5062,"name": "THAI"},{"import": 2135,"src": 5063,"name": "CATALAN"},{"import": 2135,"src": 5064,"name": "SWAHILI"},{"import": 2135,"src": 5065,"name": "SWEDISH"},{"import": 2135,"src": 5066,"name": "CENTRAL_KURDISH"},{"import": 2135,"src": 5067,"name": "ROMANSH"},{"import": 2135,"src": 5068,"name": "ARMENIAN"},{"import": 2135,"src": 5069,"name": "BANGLA"},{"import": 2135,"src": 5070,"name": "SOTHO"},{"import": 2135,"src": 5071,"name": "RUSSIAN"},{"import": 2135,"src": 5072,"name": "ARABIC"},{"import": 2135,"src": 5073,"name": "URDU"},{"import": 2135,"src": 5074,"name": "MARATHI"},{"import": 2135,"src": 5075,"name": "GALICIAN"},{"import": 2135,"src": 5076,"name": "GREENLANDIC"},{"import": 2135,"src": 5077,"name": "SLOVENIAN"},{"import": 2135,"src": 5078,"name": "UKRAINIAN"},{"import": 2135,"src": 5079,"name": "YAKUT"},{"import": 2135,"src": 5080,"name": "INVARIANT"},{"import": 2135,"src": 5081,"name": "DARI"},{"import": 2135,"src": 5082,"name": "KANNADA"},{"import": 2135,"src": 5083,"name": "BOSNIAN"},{"import": 2135,"src": 5084,"name": "GREEK"},{"import": 2135,"src": 5085,"name": "WELSH"},{"import": 2135,"src": 5086,"name": "INDONESIAN"},{"import": 2135,"src": 5087,"name": "ICELANDIC"},{"import": 2135,"src": 5088,"name": "LITHUANIAN"},{"import": 2135,"src": 5089,"name": "SCOTTISH_GAELIC"},{"import": 2135,"src": 5090,"name": "CHINESE_TRADITIONAL"},{"import": 2135,"src": 5091,"name": "KONKANI"},{"import": 2135,"src": 5092,"name": "MALTESE"},{"import": 2135,"src": 5093,"name": "LUXEMBOURGISH"},{"import": 2135,"src": 5094,"name": "SERBIAN"},{"import": 2135,"src": 5095,"name": "SERBIAN_NEUTRAL"},{"import": 2135,"src": 5096,"name": "MANIPURI"},{"import": 2135,"src": 5097,"name": "ESTONIAN"},{"import": 2135,"src": 5098,"name": "PORTUGUESE"},{"import": 2135,"src": 5099,"name": "PUNJABI"},{"import": 2135,"src": 5100,"name": "QUECHUA"},{"import": 2135,"src": 5101,"name": "KOREAN"},{"import": 2135,"src": 5102,"name": "INUKTITUT"},{"import": 2135,"src": 5103,"name": "LAO"},{"import": 2135,"src": 5104,"name": "SINHALESE"},{"import": 2135,"src": 5105,"name": "GUJARATI"},{"import": 2135,"src": 5106,"name": "MAPUDUNGUN"},{"import": 2135,"src": 5107,"name": "TURKMEN"},{"import": 2135,"src": 5108,"name": "KHMER"},{"import": 2135,"src": 5109,"name": "ROMANIAN"},{"import": 2135,"src": 5110,"name": "NORWEGIAN"},{"import": 2135,"src": 5111,"name": "ODIA"},{"import": 2135,"src": 5112,"name": "AZERBAIJANI"},{"import": 2135,"src": 5113,"name": "SINDHI"},{"import": 2135,"src": 5114,"name": "FINNISH"},{"import": 2135,"src": 5115,"name": "UPPER_SORBIAN"},{"import": 2135,"src": 5116,"name": "DANISH"},{"import": 2135,"src": 5117,"name": "PASHTO"},{"import": 2135,"src": 5118,"name": "UZBEK"},{"import": 2135,"src": 5119,"name": "WOLOF"},{"import": 2135,"src": 5120,"name": "MAORI"},{"import": 2135,"src": 5121,"name": "XHOSA"},{"import": 2135,"src": 5122,"name": "ZULU"},{"import": 2135,"src": 5123,"name": "MOHAWK"},{"import": 2135,"src": 5124,"name": "MONGOLIAN"},{"import": 2135,"src": 5125,"name": "MALAY"},{"import": 2135,"src": 5126,"name": "NEPALI"},{"import": 2135,"src": 5127,"name": "TELUGU"},{"import": 2135,"src": 5128,"name": "KAZAK"},{"import": 2135,"src": 5129,"name": "ALSATIAN"},{"import": 2135,"src": 5130,"name": "BELARUSIAN"},{"import": 2135,"src": 5131,"name": "YI"},{"import": 2135,"src": 5132,"name": "CHINESE"},{"import": 2135,"src": 5133,"name": "FULAH"},{"import": 2135,"src": 5134,"name": "IRISH"},{"import": 2135,"src": 5135,"name": "TAMAZIGHT"},{"import": 2135,"src": 5136,"name": "ITALIAN"},{"import": 2135,"src": 5137,"name": "SAMI"},{"import": 2135,"src": 5138,"name": "KASHMIRI"},{"import": 2135,"src": 5139,"name": "UIGHUR"},{"import": 2135,"src": 5140,"name": "PULAR"},{"import": 2135,"src": 5141,"name": "TIBETAN"},{"import": 2135,"src": 5142,"name": "BENGALI"},{"import": 2135,"src": 5143,"name": "CHINESE_SIMPLIFIED"},{"import": 2135,"src": 5144,"name": "ENGLISH"},{"import": 2135,"src": 5145,"name": "HEBREW"},{"import": 2136,"src": 5146,"name": "CROATIAN_BOSNIA_HERZEGOVINA_LATIN"},{"import": 2136,"src": 5147,"name": "SERBIAN_CROATIA"},{"import": 2136,"src": 5148,"name": "SPANISH_GUATEMALA"},{"import": 2136,"src": 5149,"name": "ARABIC_JORDAN"},{"import": 2136,"src": 5150,"name": "GERMAN_LUXEMBOURG"},{"import": 2136,"src": 5151,"name": "SERBIAN_MONTENEGRO_CYRILLIC"},{"import": 2136,"src": 5152,"name": "HAWAIIAN_US"},{"import": 2136,"src": 5153,"name": "CHINESE_SINGAPORE"},{"import": 2136,"src": 5154,"name": "ARABIC_SYRIA"},{"import": 2136,"src": 5155,"name": "ENGLISH_NZ"},{"import": 2136,"src": 5156,"name": "KONKANI_INDIA"},{"import": 2136,"src": 5157,"name": "HINDI_INDIA"},{"import": 2136,"src": 5158,"name": "SPANISH"},{"import": 2136,"src": 5159,"name": "ENGLISH_INDIA"},{"import": 2136,"src": 5160,"name": "MONGOLIAN_PRC"},{"import": 2136,"src": 5161,"name": "SERBIAN_MONTENEGRO_LATIN"},{"import": 2136,"src": 5162,"name": "SPANISH_COSTA_RICA"},{"import": 2136,"src": 5163,"name": "ENGLISH_ZIMBABWE"},{"import": 2136,"src": 5164,"name": "GERMAN_LIECHTENSTEIN"},{"import": 2136,"src": 5165,"name": "POLISH_POLAND"},{"import": 2136,"src": 5166,"name": "ARABIC_LIBYA"},{"import": 2136,"src": 5167,"name": "SAMI_LULE_SWEDEN"},{"import": 2136,"src": 5168,"name": "MAPUDUNGUN_CHILE"},{"import": 2136,"src": 5169,"name": "BELARUSIAN_BELARUS"},{"import": 2136,"src": 5170,"name": "QUECHUA_PERU"},{"import": 2136,"src": 5171,"name": "INUKTITUT_CANADA_LATIN"},{"import": 2136,"src": 5172,"name": "KANNADA_INDIA"},{"import": 2136,"src": 5173,"name": "MALTESE_MALTA"},{"import": 2136,"src": 5174,"name": "PERSIAN_IRAN"},{"import": 2136,"src": 5175,"name": "XHOSA_SOUTH_AFRICA"},{"import": 2136,"src": 5176,"name": "FRENCH_MONACO"},{"import": 2136,"src": 5177,"name": "SINDHI_INDIA"},{"import": 2136,"src": 5178,"name": "FRENCH"},{"import": 2136,"src": 5179,"name": "CROATIAN_CROATIA"},{"import": 2136,"src": 5180,"name": "SPANISH_EL_SALVADOR"},{"import": 2136,"src": 5181,"name": "SINDHI_PAKISTAN"},{"import": 2136,"src": 5182,"name": "FRENCH_CANADIAN"},{"import": 2136,"src": 5183,"name": "TATAR_RUSSIA"},{"import": 2136,"src": 5184,"name": "SINHALESE_SRI_LANKA"},{"import": 2136,"src": 5185,"name": "SAKHA_RUSSIA"},{"import": 2136,"src": 5186,"name": "BANGLA_BANGLADESH"},{"import": 2136,"src": 5187,"name": "PUNJABI_INDIA"},{"import": 2136,"src": 5188,"name": "SPANISH_US"},{"import": 2136,"src": 5189,"name": "PORTUGUESE_BRAZILIAN"},{"import": 2136,"src": 5190,"name": "ARABIC_IRAQ"},{"import": 2136,"src": 5191,"name": "TELUGU_INDIA"},{"import": 2136,"src": 5192,"name": "DARI_AFGHANISTAN"},{"import": 2136,"src": 5193,"name": "YORUBA_NIGERIA"},{"import": 2136,"src": 5194,"name": "MAORI_NEW_ZEALAND"},{"import": 2136,"src": 5195,"name": "SPANISH_URUGUAY"},{"import": 2136,"src": 5196,"name": "LUXEMBOURGISH_LUXEMBOURG"},{"import": 2136,"src": 5197,"name": "ALBANIAN_ALBANIA"},{"import": 2136,"src": 5198,"name": "ICELANDIC_ICELAND"},{"import": 2136,"src": 5199,"name": "SPANISH_PARAGUAY"},{"import": 2136,"src": 5200,"name": "SAMI_NORTHERN_FINLAND"},{"import": 2136,"src": 5201,"name": "MARATHI_INDIA"},{"import": 2136,"src": 5202,"name": "TIGRIGNA_ERITREA"},{"import": 2136,"src": 5203,"name": "SPANISH_BOLIVIA"},{"import": 2136,"src": 5204,"name": "ENGLISH_SOUTH_AFRICA"},{"import": 2136,"src": 5205,"name": "FRENCH_SWISS"},{"import": 2136,"src": 5206,"name": "IRISH_IRELAND"},{"import": 2136,"src": 5207,"name": "CUSTOM_DEFAULT"},{"import": 2136,"src": 5208,"name": "SERBIAN_LATIN"},{"import": 2136,"src": 5209,"name": "FRENCH_BELGIAN"},{"import": 2136,"src": 5210,"name": "CZECH_CZECH_REPUBLIC"},{"import": 2136,"src": 5211,"name": "MALAY_BRUNEI_DARUSSALAM"},{"import": 2136,"src": 5212,"name": "ARABIC_UAE"},{"import": 2136,"src": 5213,"name": "SYS_DEFAULT"},{"import": 2136,"src": 5214,"name": "ENGLISH_SINGAPORE"},{"import": 2136,"src": 5215,"name": "ODIA_INDIA"},{"import": 2136,"src": 5216,"name": "GREENLANDIC_GREENLAND"},{"import": 2136,"src": 5217,"name": "INUKTITUT_CANADA"},{"import": 2136,"src": 5218,"name": "ZULU_SOUTH_AFRICA"},{"import": 2136,"src": 5219,"name": "TURKMEN_TURKMENISTAN"},{"import": 2136,"src": 5220,"name": "TURKISH_TURKEY"},{"import": 2136,"src": 5221,"name": "SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC"},{"import": 2136,"src": 5222,"name": "ROMANIAN_ROMANIA"},{"import": 2136,"src": 5223,"name": "BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC"},{"import": 2136,"src": 5224,"name": "NEPALI_NEPAL"},{"import": 2136,"src": 5225,"name": "SWEDISH_FINLAND"},{"import": 2136,"src": 5226,"name": "GUJARATI_INDIA"},{"import": 2136,"src": 5227,"name": "QUECHUA_BOLIVIA"},{"import": 2136,"src": 5228,"name": "INDONESIAN_INDONESIA"},{"import": 2136,"src": 5229,"name": "SAMI_SKOLT_FINLAND"},{"import": 2136,"src": 5230,"name": "SAMI_INARI_FINLAND"},{"import": 2136,"src": 5231,"name": "CHEROKEE_CHEROKEE"},{"import": 2136,"src": 5232,"name": "SCOTTISH_GAELIC"},{"import": 2136,"src": 5233,"name": "SOTHO_NORTHERN_SOUTH_AFRICA"},{"import": 2136,"src": 5234,"name": "KASHMIRI_SASIA"},{"import": 2136,"src": 5235,"name": "BENGALI_INDIA"},{"import": 2136,"src": 5236,"name": "ARABIC_BAHRAIN"},{"import": 2136,"src": 5237,"name": "FILIPINO_PHILIPPINES"},{"import": 2136,"src": 5238,"name": "DANISH_DENMARK"},{"import": 2136,"src": 5239,"name": "BANGLA_INDIA"},{"import": 2136,"src": 5240,"name": "BRETON_FRANCE"},{"import": 2136,"src": 5241,"name": "FULAH_SENEGAL"},{"import": 2136,"src": 5242,"name": "KOREAN"},{"import": 2136,"src": 5243,"name": "SERBIAN_CYRILLIC"},{"import": 2136,"src": 5244,"name": "UZBEK_LATIN"},{"import": 2136,"src": 5245,"name": "FRENCH_LUXEMBOURG"},{"import": 2136,"src": 5246,"name": "TAMAZIGHT_ALGERIA_LATIN"},{"import": 2136,"src": 5247,"name": "SLOVAK_SLOVAKIA"},{"import": 2136,"src": 5248,"name": "SERBIAN_SERBIA_CYRILLIC"},{"import": 2136,"src": 5249,"name": "ARABIC_EGYPT"},{"import": 2136,"src": 5250,"name": "SPANISH_CHILE"},{"import": 2136,"src": 5251,"name": "ENGLISH_JAMAICA"},{"import": 2136,"src": 5252,"name": "BENGALI_BANGLADESH"},{"import": 2136,"src": 5253,"name": "TIGRINYA_ETHIOPIA"},{"import": 2136,"src": 5254,"name": "UZBEK_CYRILLIC"},{"import": 2136,"src": 5255,"name": "AFRIKAANS_SOUTH_AFRICA"},{"import": 2136,"src": 5256,"name": "SANSKRIT_INDIA"},{"import": 2136,"src": 5257,"name": "ARABIC_QATAR"},{"import": 2136,"src": 5258,"name": "SAMI_LULE_NORWAY"},{"import": 2136,"src": 5259,"name": "VIETNAMESE_VIETNAM"},{"import": 2136,"src": 5260,"name": "SERBIAN_BOSNIA_HERZEGOVINA_LATIN"},{"import": 2136,"src": 5261,"name": "ENGLISH_TRINIDAD"},{"import": 2136,"src": 5262,"name": "TAJIK_TAJIKISTAN"},{"import": 2136,"src": 5263,"name": "SWAHILI_KENYA"},{"import": 2136,"src": 5264,"name": "BOSNIAN_BOSNIA_HERZEGOVINA_LATIN"},{"import": 2136,"src": 5265,"name": "ARABIC_ALGERIA"},{"import": 2136,"src": 5266,"name": "TSWANA_SOUTH_AFRICA"},{"import": 2136,"src": 5267,"name": "ITALIAN"},{"import": 2136,"src": 5268,"name": "CENTRAL_KURDISH_IRAQ"},{"import": 2136,"src": 5269,"name": "VALENCIAN_VALENCIA"},{"import": 2136,"src": 5270,"name": "SPANISH_ECUADOR"},{"import": 2136,"src": 5271,"name": "THAI_THAILAND"},{"import": 2136,"src": 5272,"name": "SPANISH_HONDURAS"},{"import": 2136,"src": 5273,"name": "CATALAN_CATALAN"},{"import": 2136,"src": 5274,"name": "ARMENIAN_ARMENIA"},{"import": 2136,"src": 5275,"name": "ENGLISH_US"},{"import": 2136,"src": 5276,"name": "CHINESE_SIMPLIFIED"},{"import": 2136,"src": 5277,"name": "AZERBAIJANI_AZERBAIJAN_LATIN"},{"import": 2136,"src": 5278,"name": "TAMIL_SRI_LANKA"},{"import": 2136,"src": 5279,"name": "TIGRINYA_ERITREA"},{"import": 2136,"src": 5280,"name": "SPANISH_MEXICAN"},{"import": 2136,"src": 5281,"name": "CUSTOM_UNSPECIFIED"},{"import": 2136,"src": 5282,"name": "AZERBAIJANI_AZERBAIJAN_CYRILLIC"},{"import": 2136,"src": 5283,"name": "ARABIC_MOROCCO"},{"import": 2136,"src": 5284,"name": "UIGHUR_PRC"},{"import": 2136,"src": 5285,"name": "DUTCH"},{"import": 2136,"src": 5286,"name": "GERMAN"},{"import": 2136,"src": 5287,"name": "WELSH_UNITED_KINGDOM"},{"import": 2136,"src": 5288,"name": "SPANISH_DOMINICAN_REPUBLIC"},{"import": 2136,"src": 5289,"name": "TSWANA_BOTSWANA"},{"import": 2136,"src": 5290,"name": "SPANISH_VENEZUELA"},{"import": 2136,"src": 5291,"name": "SPANISH_PERU"},{"import": 2136,"src": 5292,"name": "WOLOF_SENEGAL"},{"import": 2136,"src": 5293,"name": "MOHAWK_MOHAWK"},{"import": 2136,"src": 5294,"name": "CHINESE_MACAU"},{"import": 2136,"src": 5295,"name": "HUNGARIAN_HUNGARY"},{"import": 2136,"src": 5296,"name": "LAO_LAO"},{"import": 2136,"src": 5297,"name": "AZERI_CYRILLIC"},{"import": 2136,"src": 5298,"name": "UPPER_SORBIAN_GERMANY"},{"import": 2136,"src": 5299,"name": "FAEROESE_FAROE_ISLANDS"},{"import": 2136,"src": 5300,"name": "NEUTRAL"},{"import": 2136,"src": 5301,"name": "KINYARWANDA_RWANDA"},{"import": 2136,"src": 5302,"name": "PULAR_SENEGAL"},{"import": 2136,"src": 5303,"name": "GALICIAN_GALICIAN"},{"import": 2136,"src": 5304,"name": "LATVIAN_LATVIA"},{"import": 2136,"src": 5305,"name": "ARABIC_OMAN"},{"import": 2136,"src": 5306,"name": "UKRAINIAN_UKRAINE"},{"import": 2136,"src": 5307,"name": "KASHMIRI_INDIA"},{"import": 2136,"src": 5308,"name": "IGBO_NIGERIA"},{"import": 2136,"src": 5309,"name": "SPANISH_COLOMBIA"},{"import": 2136,"src": 5310,"name": "KICHE_GUATEMALA"},{"import": 2136,"src": 5311,"name": "DIVEHI_MALDIVES"},{"import": 2136,"src": 5312,"name": "DUTCH_BELGIAN"},{"import": 2136,"src": 5313,"name": "SYRIAC_SYRIA"},{"import": 2136,"src": 5314,"name": "PASHTO_AFGHANISTAN"},{"import": 2136,"src": 5315,"name": "KYRGYZ_KYRGYZSTAN"},{"import": 2136,"src": 5316,"name": "SAMI_NORTHERN_SWEDEN"},{"import": 2136,"src": 5317,"name": "SAMI_SOUTHERN_NORWAY"},{"import": 2136,"src": 5318,"name": "ARABIC_YEMEN"},{"import": 2136,"src": 5319,"name": "BULGARIAN_BULGARIA"},{"import": 2136,"src": 5320,"name": "NORWEGIAN_NYNORSK"},{"import": 2136,"src": 5321,"name": "FRISIAN_NETHERLANDS"},{"import": 2136,"src": 5322,"name": "URDU_PAKISTAN"},{"import": 2136,"src": 5323,"name": "SPANISH_MODERN"},{"import": 2136,"src": 5324,"name": "ENGLISH_AUS"},{"import": 2136,"src": 5325,"name": "ESTONIAN_ESTONIA"},{"import": 2136,"src": 5326,"name": "NEPALI_INDIA"},{"import": 2136,"src": 5327,"name": "SLOVENIAN_SLOVENIA"},{"import": 2136,"src": 5328,"name": "YI_PRC"},{"import": 2136,"src": 5329,"name": "LOWER_SORBIAN_GERMANY"},{"import": 2136,"src": 5330,"name": "GERMAN_SWISS"},{"import": 2136,"src": 5331,"name": "SERBIAN_SERBIA_LATIN"},{"import": 2136,"src": 5332,"name": "AMHARIC_ETHIOPIA"},{"import": 2136,"src": 5333,"name": "SWEDISH"},{"import": 2136,"src": 5334,"name": "KAZAK_KAZAKHSTAN"},{"import": 2136,"src": 5335,"name": "UI_CUSTOM_DEFAULT"},{"import": 2136,"src": 5336,"name": "PUNJABI_PAKISTAN"},{"import": 2136,"src": 5337,"name": "ARABIC_TUNISIA"},{"import": 2136,"src": 5338,"name": "ROMANSH_SWITZERLAND"},{"import": 2136,"src": 5339,"name": "SPANISH_NICARAGUA"},{"import": 2136,"src": 5340,"name": "ENGLISH_CAN"},{"import": 2136,"src": 5341,"name": "ENGLISH_UK"},{"import": 2136,"src": 5342,"name": "SPANISH_PUERTO_RICO"},{"import": 2136,"src": 5343,"name": "ARABIC_LEBANON"},{"import": 2136,"src": 5344,"name": "ENGLISH_EIRE"},{"import": 2136,"src": 5345,"name": "ALSATIAN_FRANCE"},{"import": 2136,"src": 5346,"name": "TIBETAN_PRC"},{"import": 2136,"src": 5347,"name": "CORSICAN_FRANCE"},{"import": 2136,"src": 5348,"name": "OCCITAN_FRANCE"},{"import": 2136,"src": 5349,"name": "CHINESE_HONGKONG"},{"import": 2136,"src": 5350,"name": "LITHUANIAN"},{"import": 2136,"src": 5351,"name": "GEORGIAN_GEORGIA"},{"import": 2136,"src": 5352,"name": "TAMIL_INDIA"},{"import": 2136,"src": 5353,"name": "SAMI_NORTHERN_NORWAY"},{"import": 2136,"src": 5354,"name": "MALAY_MALAYSIA"},{"import": 2136,"src": 5355,"name": "HAUSA_NIGERIA_LATIN"},{"import": 2136,"src": 5356,"name": "NORWEGIAN_BOKMAL"},{"import": 2136,"src": 5357,"name": "FINNISH_FINLAND"},{"import": 2136,"src": 5358,"name": "CHINESE_TRADITIONAL"},{"import": 2136,"src": 5359,"name": "ITALIAN_SWISS"},{"import": 2136,"src": 5360,"name": "ARABIC_SAUDI_ARABIA"},{"import": 2136,"src": 5361,"name": "ENGLISH_MALAYSIA"},{"import": 2136,"src": 5362,"name": "MALAYALAM_INDIA"},{"import": 2136,"src": 5363,"name": "ASSAMESE_INDIA"},{"import": 2136,"src": 5364,"name": "YAKUT_RUSSIA"},{"import": 2136,"src": 5365,"name": "PORTUGUESE"},{"import": 2136,"src": 5366,"name": "ARABIC_KUWAIT"},{"import": 2136,"src": 5367,"name": "SPANISH_PANAMA"},{"import": 2136,"src": 5368,"name": "GREEK_GREECE"},{"import": 2136,"src": 5369,"name": "SINDHI_AFGHANISTAN"},{"import": 2136,"src": 5370,"name": "QUECHUA_ECUADOR"},{"import": 2136,"src": 5371,"name": "ORIYA_INDIA"},{"import": 2136,"src": 5372,"name": "ENGLISH_PHILIPPINES"},{"import": 2136,"src": 5373,"name": "SPANISH_ARGENTINA"},{"import": 2136,"src": 5374,"name": "JAPANESE_JAPAN"},{"import": 2136,"src": 5375,"name": "ENGLISH_CARIBBEAN"},{"import": 2136,"src": 5376,"name": "MACEDONIAN_MACEDONIA"},{"import": 2136,"src": 5377,"name": "MONGOLIAN_CYRILLIC_MONGOLIA"},{"import": 2136,"src": 5378,"name": "KHMER_CAMBODIA"},{"import": 2136,"src": 5379,"name": "HEBREW_ISRAEL"},{"import": 2136,"src": 5380,"name": "URDU_INDIA"},{"import": 2136,"src": 5381,"name": "SAMI_SOUTHERN_SWEDEN"},{"import": 2136,"src": 5382,"name": "ENGLISH_BELIZE"},{"import": 2136,"src": 5383,"name": "BASQUE_BASQUE"},{"import": 2136,"src": 5384,"name": "TAMAZIGHT_MOROCCO_TIFINAGH"},{"import": 2136,"src": 5385,"name": "RUSSIAN_RUSSIA"},{"import": 2136,"src": 5386,"name": "BASHKIR_RUSSIA"},{"import": 2136,"src": 5387,"name": "AZERI_LATIN"},{"import": 2136,"src": 5388,"name": "DEFAULT","kind": "const","type": 843,"value": null},{"import": 2136,"src": 5389,"name": "GERMAN_AUSTRIAN"},{"import": 2139,"src": 5390,"name": "LUIDS_EXHAUSTED"},{"import": 2139,"src": 5391,"name": "INTERRUPT_STILL_CONNECTED"},{"import": 2139,"src": 5392,"name": "PRINTER_NOT_SHAREABLE"},{"import": 2139,"src": 5393,"name": "FATAL_APP_EXIT"},{"import": 2139,"src": 5394,"name": "LOGON_SESSION_COLLISION"},{"import": 2139,"src": 5395,"name": "XMLDSIG_ERROR"},{"import": 2139,"src": 5396,"name": "CONTEXT_EXPIRED"},{"import": 2139,"src": 5397,"name": "SEM_TIMEOUT"},{"import": 2139,"src": 5398,"name": "MOD_NOT_FOUND"},{"import": 2139,"src": 5399,"name": "DATA_CHECKSUM_ERROR"},{"import": 2139,"src": 5400,"name": "INVALID_LDT_SIZE"},{"import": 2139,"src": 5401,"name": "NO_MORE_SEARCH_HANDLES"},{"import": 2139,"src": 5402,"name": "INVALID_LDT_OFFSET"},{"import": 2139,"src": 5403,"name": "SYSTEM_SHUTDOWN"},{"import": 2139,"src": 5404,"name": "EAS_DIDNT_FIT"},{"import": 2139,"src": 5405,"name": "TOO_MANY_THREADS"},{"import": 2139,"src": 5406,"name": "PRINT_MONITOR_ALREADY_INSTALLED"},{"import": 2139,"src": 5407,"name": "USER_PROFILE_LOAD"},{"import": 2139,"src": 5408,"name": "LISTBOX_ID_NOT_FOUND"},{"import": 2139,"src": 5409,"name": "RPC_S_UNKNOWN_IF"},{"import": 2139,"src": 5410,"name": "BAD_MCFG_TABLE"},{"import": 2139,"src": 5411,"name": "VERSION_PARSE_ERROR"},{"import": 2139,"src": 5412,"name": "NOT_TINY_STREAM"},{"import": 2139,"src": 5413,"name": "LOG_HARD_ERROR"},{"import": 2139,"src": 5414,"name": "UNABLE_TO_UNLOAD_MEDIA"},{"import": 2139,"src": 5415,"name": "EXCL_SEM_ALREADY_OWNED"},{"import": 2139,"src": 5416,"name": "RPC_X_BYTE_COUNT_TOO_SMALL"},{"import": 2139,"src": 5417,"name": "NO_VOLUME_LABEL"},{"import": 2139,"src": 5418,"name": "RPC_S_UNKNOWN_AUTHN_SERVICE"},{"import": 2139,"src": 5419,"name": "POPUP_ALREADY_ACTIVE"},{"import": 2139,"src": 5420,"name": "RPC_S_GRP_ELT_NOT_REMOVED"},{"import": 2139,"src": 5421,"name": "PWD_TOO_LONG"},{"import": 2139,"src": 5422,"name": "SEM_USER_LIMIT"},{"import": 2139,"src": 5423,"name": "SYSTEM_POWERSTATE_TRANSITION"},{"import": 2139,"src": 5424,"name": "DISK_QUOTA_EXCEEDED"},{"import": 2139,"src": 5425,"name": "CANTWRITE"},{"import": 2139,"src": 5426,"name": "NO_WILDCARD_CHARACTERS"},{"import": 2139,"src": 5427,"name": "INSTALL_PACKAGE_INVALID"},{"import": 2139,"src": 5428,"name": "DISK_REPAIR_REDIRECTED"},{"import": 2139,"src": 5429,"name": "HOOK_NOT_INSTALLED"},{"import": 2139,"src": 5430,"name": "DUP_NAME"},{"import": 2139,"src": 5431,"name": "OBJECT_NAME_EXISTS"},{"import": 2139,"src": 5432,"name": "INVALID_FORM_NAME"},{"import": 2139,"src": 5433,"name": "LOCK_VIOLATION"},{"import": 2139,"src": 5434,"name": "ACCESS_DISABLED_BY_POLICY"},{"import": 2139,"src": 5435,"name": "SERVICE_START_HANG"},{"import": 2139,"src": 5436,"name": "ALL_USER_TRUST_QUOTA_EXCEEDED"},{"import": 2139,"src": 5437,"name": "ILLEGAL_ELEMENT_ADDRESS"},{"import": 2139,"src": 5438,"name": "INVALID_FLAG_NUMBER"},{"import": 2139,"src": 5439,"name": "SCOPE_NOT_FOUND"},{"import": 2139,"src": 5440,"name": "INVALID_COMPUTERNAME"},{"import": 2139,"src": 5441,"name": "MORE_WRITES"},{"import": 2139,"src": 5442,"name": "INVALID_MESSAGENAME"},{"import": 2139,"src": 5443,"name": "PATCH_REMOVAL_DISALLOWED"},{"import": 2139,"src": 5444,"name": "PRINT_JOB_RESTART_REQUIRED"},{"import": 2139,"src": 5445,"name": "INVALID_ACCOUNT_NAME"},{"import": 2139,"src": 5446,"name": "BAD_DESCRIPTOR_FORMAT"},{"import": 2139,"src": 5447,"name": "DBG_EXCEPTION_HANDLED"},{"import": 2139,"src": 5448,"name": "INVALID_UNWIND_TARGET"},{"import": 2139,"src": 5449,"name": "CALL_NOT_IMPLEMENTED"},{"import": 2139,"src": 5450,"name": "BOOT_ALREADY_ACCEPTED"},{"import": 2139,"src": 5451,"name": "PAGE_FAULT_DEMAND_ZERO"},{"import": 2139,"src": 5452,"name": "SPECIAL_GROUP"},{"import": 2139,"src": 5453,"name": "WINDOW_NOT_COMBOBOX"},{"import": 2139,"src": 5454,"name": "PIPE_LOCAL"},{"import": 2139,"src": 5455,"name": "RPC_S_UNSUPPORTED_NAME_SYNTAX"},{"import": 2139,"src": 5456,"name": "RPC_X_NO_MORE_ENTRIES"},{"import": 2139,"src": 5457,"name": "THREAD_1_INACTIVE"},{"import": 2139,"src": 5458,"name": "SEEK"},{"import": 2139,"src": 5459,"name": "NO_TOKEN"},{"import": 2139,"src": 5460,"name": "WAIT_63"},{"import": 2139,"src": 5461,"name": "OPERATION_ABORTED","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5462,"name": "NOT_ENOUGH_QUOTA","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5463,"name": "DEVICE_FEATURE_NOT_SUPPORTED"},{"import": 2139,"src": 5464,"name": "NOT_SUBSTED"},{"import": 2139,"src": 5465,"name": "UNKNOWN_PORT"},{"import": 2139,"src": 5466,"name": "INVALID_PRINTER_DRIVER_MANIFEST"},{"import": 2139,"src": 5467,"name": "NETLOGON_NOT_STARTED"},{"import": 2139,"src": 5468,"name": "RPC_S_CANNOT_SUPPORT"},{"import": 2139,"src": 5469,"name": "ALREADY_ASSIGNED"},{"import": 2139,"src": 5470,"name": "INVALID_INDEX"},{"import": 2139,"src": 5471,"name": "INVALID_GW_COMMAND"},{"import": 2139,"src": 5472,"name": "CANNOT_LOAD_REGISTRY_FILE"},{"import": 2139,"src": 5473,"name": "DISK_RESET_FAILED"},{"import": 2139,"src": 5474,"name": "RPC_X_ENUM_VALUE_OUT_OF_RANGE"},{"import": 2139,"src": 5475,"name": "PAGEFILE_QUOTA_EXCEEDED"},{"import": 2139,"src": 5476,"name": "UNKNOWN_COMPONENT"},{"import": 2139,"src": 5477,"name": "RPC_S_NO_MORE_BINDINGS"},{"import": 2139,"src": 5478,"name": "DLL_INIT_FAILED"},{"import": 2139,"src": 5479,"name": "UNIDENTIFIED_ERROR"},{"import": 2139,"src": 5480,"name": "RPC_S_CANT_CREATE_ENDPOINT"},{"import": 2139,"src": 5481,"name": "GRACEFUL_DISCONNECT"},{"import": 2139,"src": 5482,"name": "NO_NET_OR_BAD_PATH"},{"import": 2139,"src": 5483,"name": "INCOMPATIBLE_SERVICE_SID_TYPE"},{"import": 2139,"src": 5484,"name": "TOO_MANY_LUIDS_REQUESTED"},{"import": 2139,"src": 5485,"name": "INVALID_CAP"},{"import": 2139,"src": 5486,"name": "SEGMENT_NOTIFICATION"},{"import": 2139,"src": 5487,"name": "EA_FILE_CORRUPT"},{"import": 2139,"src": 5488,"name": "NO_MATCH"},{"import": 2139,"src": 5489,"name": "NO_SUCH_GROUP"},{"import": 2139,"src": 5490,"name": "BAD_TOKEN_TYPE"},{"import": 2139,"src": 5491,"name": "INSTALL_PACKAGE_OPEN_FAILED"},{"import": 2139,"src": 5492,"name": "PRINTQ_FULL"},{"import": 2139,"src": 5493,"name": "TOO_MANY_POSTS"},{"import": 2139,"src": 5494,"name": "INTERRUPT_VECTOR_ALREADY_CONNECTED"},{"import": 2139,"src": 5495,"name": "UNEXP_NET_ERR"},{"import": 2139,"src": 5496,"name": "SERVICE_NOT_ACTIVE"},{"import": 2139,"src": 5497,"name": "INVALID_DATATYPE"},{"import": 2139,"src": 5498,"name": "NO_MORE_FILES"},{"import": 2139,"src": 5499,"name": "INVALID_DOMAIN_ROLE"},{"import": 2139,"src": 5500,"name": "INSTALL_NOTUSED"},{"import": 2139,"src": 5501,"name": "BUS_RESET"},{"import": 2139,"src": 5502,"name": "DISK_FULL"},{"import": 2139,"src": 5503,"name": "SYSTEM_POWERSTATE_COMPLEX_TRANSITION"},{"import": 2139,"src": 5504,"name": "WINDOW_OF_OTHER_THREAD"},{"import": 2139,"src": 5505,"name": "RPC_S_INVALID_VERS_OPTION"},{"import": 2139,"src": 5506,"name": "LOST_WRITEBEHIND_DATA"},{"import": 2139,"src": 5507,"name": "INSTALL_LANGUAGE_UNSUPPORTED"},{"import": 2139,"src": 5508,"name": "MP_PROCESSOR_MISMATCH"},{"import": 2139,"src": 5509,"name": "WAIT_1"},{"import": 2139,"src": 5510,"name": "BAD_ACCESSOR_FLAGS"},{"import": 2139,"src": 5511,"name": "NO_DATA_DETECTED"},{"import": 2139,"src": 5512,"name": "ALREADY_WIN32"},{"import": 2139,"src": 5513,"name": "RPC_S_NOT_CANCELLED"},{"import": 2139,"src": 5514,"name": "PROC_NOT_FOUND"},{"import": 2139,"src": 5515,"name": "ARENA_TRASHED"},{"import": 2139,"src": 5516,"name": "KEY_HAS_CHILDREN"},{"import": 2139,"src": 5517,"name": "POTENTIAL_FILE_FOUND"},{"import": 2139,"src": 5518,"name": "BADDB"},{"import": 2139,"src": 5519,"name": "INVALID_PASSWORDNAME"},{"import": 2139,"src": 5520,"name": "PAGEFILE_QUOTA"},{"import": 2139,"src": 5521,"name": "INVALID_LOCK_RANGE"},{"import": 2139,"src": 5522,"name": "PIPE_NOT_CONNECTED"},{"import": 2139,"src": 5523,"name": "CREATE_FAILED"},{"import": 2139,"src": 5524,"name": "NONPAGED_SYSTEM_RESOURCES"},{"import": 2139,"src": 5525,"name": "MAX_SESSIONS_REACHED"},{"import": 2139,"src": 5526,"name": "RPC_S_NOT_ALL_OBJS_UNEXPORTED"},{"import": 2139,"src": 5527,"name": "DRIVE_LOCKED"},{"import": 2139,"src": 5528,"name": "RPC_S_ADDRESS_ERROR"},{"import": 2139,"src": 5529,"name": "JOIN_TO_JOIN"},{"import": 2139,"src": 5530,"name": "FAIL_I24"},{"import": 2139,"src": 5531,"name": "BAD_FILE_TYPE"},{"import": 2139,"src": 5532,"name": "TOO_MANY_SESS"},{"import": 2139,"src": 5533,"name": "SEEK_ON_DEVICE"},{"import": 2139,"src": 5534,"name": "INSTALL_TRANSFORM_FAILURE"},{"import": 2139,"src": 5535,"name": "RPC_S_DUPLICATE_ENDPOINT"},{"import": 2139,"src": 5536,"name": "BAD_VALIDATION_CLASS"},{"import": 2139,"src": 5537,"name": "ACTIVE_CONNECTIONS"},{"import": 2139,"src": 5538,"name": "EXCEPTION_IN_SERVICE"},{"import": 2139,"src": 5539,"name": "SERVICE_LOGON_FAILED"},{"import": 2139,"src": 5540,"name": "SHORT_NAMES_NOT_ENABLED_ON_VOLUME"},{"import": 2139,"src": 5541,"name": "RPC_S_ALREADY_LISTENING"},{"import": 2139,"src": 5542,"name": "INTERMIXED_KERNEL_EA_OPERATION"},{"import": 2139,"src": 5543,"name": "DC_NOT_FOUND"},{"import": 2139,"src": 5544,"name": "SINGLE_INSTANCE_APP"},{"import": 2139,"src": 5545,"name": "INSTALL_SERVICE_FAILURE"},{"import": 2139,"src": 5546,"name": "INVALID_CURSOR_HANDLE"},{"import": 2139,"src": 5547,"name": "JOURNAL_HOOK_SET"},{"import": 2139,"src": 5548,"name": "HOST_UNREACHABLE"},{"import": 2139,"src": 5549,"name": "USER_EXISTS"},{"import": 2139,"src": 5550,"name": "INVALID_BLOCK"},{"import": 2139,"src": 5551,"name": "DEVICE_NOT_CONNECTED"},{"import": 2139,"src": 5552,"name": "PNP_INVALID_ID"},{"import": 2139,"src": 5553,"name": "BAD_QUERY_SYNTAX"},{"import": 2139,"src": 5554,"name": "REGISTRY_CORRUPT"},{"import": 2139,"src": 5555,"name": "MUTUAL_AUTH_FAILED"},{"import": 2139,"src": 5556,"name": "DDE_FAIL"},{"import": 2139,"src": 5557,"name": "RPC_S_PROTOCOL_ERROR"},{"import": 2139,"src": 5558,"name": "INVALID_FILTER_PROC"},{"import": 2139,"src": 5559,"name": "CORRUPT_LOG_OVERFULL"},{"import": 2139,"src": 5560,"name": "NO_SUCH_PRIVILEGE"},{"import": 2139,"src": 5561,"name": "DELETE_PENDING"},{"import": 2139,"src": 5562,"name": "UNHANDLED_EXCEPTION"},{"import": 2139,"src": 5563,"name": "INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING"},{"import": 2139,"src": 5564,"name": "UNKNOWN_PRINT_MONITOR"},{"import": 2139,"src": 5565,"name": "CORRUPT_LOG_UNAVAILABLE"},{"import": 2139,"src": 5566,"name": "OPLOCK_NOT_GRANTED"},{"import": 2139,"src": 5567,"name": "KERNEL_APC"},{"import": 2139,"src": 5568,"name": "DISK_REPAIR_DISABLED"},{"import": 2139,"src": 5569,"name": "IMAGE_MACHINE_TYPE_MISMATCH"},{"import": 2139,"src": 5570,"name": "BADSTARTPOSITION"},{"import": 2139,"src": 5571,"name": "ACCESS_DENIED","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5572,"name": "NOT_REDUNDANT_STORAGE"},{"import": 2139,"src": 5573,"name": "PROFILING_AT_LIMIT"},{"import": 2139,"src": 5574,"name": "NOACCESS"},{"import": 2139,"src": 5575,"name": "PLUGPLAY_QUERY_VETOED"},{"import": 2139,"src": 5576,"name": "BAD_INHERITANCE_ACL"},{"import": 2139,"src": 5577,"name": "PRINTER_DRIVER_WARNED"},{"import": 2139,"src": 5578,"name": "PATH_NOT_FOUND","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5579,"name": "RPC_S_ZERO_DIVIDE"},{"import": 2139,"src": 5580,"name": "RPC_X_WRONG_PIPE_VERSION"},{"import": 2139,"src": 5581,"name": "DUPLICATE_SERVICE_NAME"},{"import": 2139,"src": 5582,"name": "RPC_X_BAD_STUB_DATA"},{"import": 2139,"src": 5583,"name": "XML_PARSE_ERROR"},{"import": 2139,"src": 5584,"name": "PASSWORD_RESTRICTION"},{"import": 2139,"src": 5585,"name": "VDM_DISALLOWED"},{"import": 2139,"src": 5586,"name": "INVALID_STARTING_CODESEG"},{"import": 2139,"src": 5587,"name": "TIMER_RESOLUTION_NOT_SET"},{"import": 2139,"src": 5588,"name": "CONNECTION_ACTIVE"},{"import": 2139,"src": 5589,"name": "PATCH_PACKAGE_UNSUPPORTED"},{"import": 2139,"src": 5590,"name": "CLASS_DOES_NOT_EXIST"},{"import": 2139,"src": 5591,"name": "RING2SEG_MUST_BE_MOVABLE"},{"import": 2139,"src": 5592,"name": "OPLOCK_SWITCHED_TO_NEW_HANDLE"},{"import": 2139,"src": 5593,"name": "SET_POWER_STATE_FAILED"},{"import": 2139,"src": 5594,"name": "INVALID_HOOK_FILTER"},{"import": 2139,"src": 5595,"name": "UNWIND_CONSOLIDATE"},{"import": 2139,"src": 5596,"name": "NO_MEDIA_IN_DRIVE"},{"import": 2139,"src": 5597,"name": "PROCESS_MODE_NOT_BACKGROUND"},{"import": 2139,"src": 5598,"name": "INVALID_WINDOW_STYLE"},{"import": 2139,"src": 5599,"name": "RPC_S_INVALID_NETWORK_OPTIONS"},{"import": 2139,"src": 5600,"name": "UNKNOWN_PROPERTY"},{"import": 2139,"src": 5601,"name": "FILE_NOT_FOUND","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5602,"name": "REDIR_PAUSED"},{"import": 2139,"src": 5603,"name": "POINT_NOT_FOUND"},{"import": 2139,"src": 5604,"name": "RPC_S_NO_CONTEXT_AVAILABLE"},{"import": 2139,"src": 5605,"name": "NOT_READ_FROM_COPY"},{"import": 2139,"src": 5606,"name": "ACCESS_DISABLED_WEBBLADE"},{"import": 2139,"src": 5607,"name": "RPC_S_UNKNOWN_AUTHN_TYPE"},{"import": 2139,"src": 5608,"name": "OPERATION_IN_PROGRESS"},{"import": 2139,"src": 5609,"name": "CORRUPT_LOG_CORRUPTED"},{"import": 2139,"src": 5610,"name": "INVALID_PRIMARY_GROUP"},{"import": 2139,"src": 5611,"name": "AUTHENTICATION_FIREWALL_FAILED"},{"import": 2139,"src": 5612,"name": "INVALID_QUOTA_LOWER"},{"import": 2139,"src": 5613,"name": "VDM_HARD_ERROR"},{"import": 2139,"src": 5614,"name": "RPC_S_NOT_ALL_OBJS_EXPORTED"},{"import": 2139,"src": 5615,"name": "IMAGE_SUBSYSTEM_NOT_PRESENT"},{"import": 2139,"src": 5616,"name": "INVALID_CATEGORY"},{"import": 2139,"src": 5617,"name": "SERVICE_EXISTS"},{"import": 2139,"src": 5618,"name": "DEVICE_ENUMERATION_ERROR"},{"import": 2139,"src": 5619,"name": "RPC_S_NO_ENDPOINT_FOUND"},{"import": 2139,"src": 5620,"name": "TOO_MANY_CONTEXT_IDS"},{"import": 2139,"src": 5621,"name": "RPC_S_PRF_ELT_NOT_REMOVED"},{"import": 2139,"src": 5622,"name": "BAD_PROFILE"},{"import": 2139,"src": 5623,"name": "INVALID_PORT_ATTRIBUTES"},{"import": 2139,"src": 5624,"name": "LOG_FILE_FULL"},{"import": 2139,"src": 5625,"name": "PNP_RESTART_ENUMERATION"},{"import": 2139,"src": 5626,"name": "FSFILTER_OP_COMPLETED_SUCCESSFULLY"},{"import": 2139,"src": 5627,"name": "LB_WITHOUT_TABSTOPS"},{"import": 2139,"src": 5628,"name": "RPC_S_INVALID_TAG"},{"import": 2139,"src": 5629,"name": "ALIAS_EXISTS"},{"import": 2139,"src": 5630,"name": "RPC_S_NO_PROTSEQS"},{"import": 2139,"src": 5631,"name": "CONTENT_BLOCKED"},{"import": 2139,"src": 5632,"name": "REM_NOT_LIST"},{"import": 2139,"src": 5633,"name": "SHARING_PAUSED"},{"import": 2139,"src": 5634,"name": "CORE_DRIVER_PACKAGE_NOT_FOUND"},{"import": 2139,"src": 5635,"name": "DRIVER_FAILED_SLEEP"},{"import": 2139,"src": 5636,"name": "RELOC_CHAIN_XEEDS_SEGLIM"},{"import": 2139,"src": 5637,"name": "RPC_S_ALREADY_REGISTERED"},{"import": 2139,"src": 5638,"name": "RPC_S_BINDING_HAS_NO_AUTH"},{"import": 2139,"src": 5639,"name": "REQUEST_ABORTED"},{"import": 2139,"src": 5640,"name": "NETWORK_BUSY"},{"import": 2139,"src": 5641,"name": "JOIN_TO_SUBST"},{"import": 2139,"src": 5642,"name": "EXE_MACHINE_TYPE_MISMATCH"},{"import": 2139,"src": 5643,"name": "JOURNAL_NOT_ACTIVE"},{"import": 2139,"src": 5644,"name": "BAD_LOGON_SESSION_STATE"},{"import": 2139,"src": 5645,"name": "IO_INCOMPLETE"},{"import": 2139,"src": 5646,"name": "MULTIPLE_FAULT_VIOLATION"},{"import": 2139,"src": 5647,"name": "INVALID_SHARENAME"},{"import": 2139,"src": 5648,"name": "PIPE_LISTENING"},{"import": 2139,"src": 5649,"name": "NT_CROSS_ENCRYPTION_REQUIRED"},{"import": 2139,"src": 5650,"name": "CANTREAD"},{"import": 2139,"src": 5651,"name": "ELEVATION_REQUIRED"},{"import": 2139,"src": 5652,"name": "SMARTCARD_SUBSYSTEM_FAILURE"},{"import": 2139,"src": 5653,"name": "MACHINE_LOCKED"},{"import": 2139,"src": 5654,"name": "KEY_DELETED"},{"import": 2139,"src": 5655,"name": "BUSY"},{"import": 2139,"src": 5656,"name": "RPC_S_NO_PROTSEQS_REGISTERED"},{"import": 2139,"src": 5657,"name": "INVALID_DOMAINNAME"},{"import": 2139,"src": 5658,"name": "INSTRUCTION_MISALIGNMENT"},{"import": 2139,"src": 5659,"name": "NETWORK_ACCESS_DENIED"},{"import": 2139,"src": 5660,"name": "ALREADY_RUNNING_LKG"},{"import": 2139,"src": 5661,"name": "MEMBER_NOT_IN_ALIAS"},{"import": 2139,"src": 5662,"name": "DBG_CONTINUE"},{"import": 2139,"src": 5663,"name": "REMOTE_PRINT_CONNECTIONS_BLOCKED"},{"import": 2139,"src": 5664,"name": "INSTALL_TRANSFORM_REJECTED"},{"import": 2139,"src": 5665,"name": "RESIDENT_FILE_NOT_SUPPORTED"},{"import": 2139,"src": 5666,"name": "CHILD_MUST_BE_VOLATILE"},{"import": 2139,"src": 5667,"name": "PORT_UNREACHABLE"},{"import": 2139,"src": 5668,"name": "DRIVER_FAILED_PRIOR_UNLOAD"},{"import": 2139,"src": 5669,"name": "BAD_LENGTH"},{"import": 2139,"src": 5670,"name": "SECTOR_NOT_FOUND"},{"import": 2139,"src": 5671,"name": "INVALID_GROUP_ATTRIBUTES"},{"import": 2139,"src": 5672,"name": "DIFFERENT_SERVICE_ACCOUNT"},{"import": 2139,"src": 5673,"name": "NO_PROC_SLOTS"},{"import": 2139,"src": 5674,"name": "DESTROY_OBJECT_OF_OTHER_THREAD"},{"import": 2139,"src": 5675,"name": "UNEXPECTED_MM_CREATE_ERR"},{"import": 2139,"src": 5676,"name": "COMPRESSED_FILE_NOT_SUPPORTED"},{"import": 2139,"src": 5677,"name": "DRIVER_BLOCKED"},{"import": 2139,"src": 5678,"name": "LOGON_NOT_GRANTED"},{"import": 2139,"src": 5679,"name": "RPC_S_CALL_FAILED_DNE"},{"import": 2139,"src": 5680,"name": "LOGIN_WKSTA_RESTRICTION"},{"import": 2139,"src": 5681,"name": "RESTART_APPLICATION"},{"import": 2139,"src": 5682,"name": "DEVICE_DOOR_OPEN"},{"import": 2139,"src": 5683,"name": "RPC_S_SEND_INCOMPLETE"},{"import": 2139,"src": 5684,"name": "INVALID_SCROLLBAR_RANGE"},{"import": 2139,"src": 5685,"name": "ALREADY_THREAD"},{"import": 2139,"src": 5686,"name": "CANCELLED"},{"import": 2139,"src": 5687,"name": "ALREADY_INITIALIZED"},{"import": 2139,"src": 5688,"name": "APPHELP_BLOCK"},{"import": 2139,"src": 5689,"name": "SEM_OWNER_DIED"},{"import": 2139,"src": 5690,"name": "BAD_COMPRESSION_BUFFER"},{"import": 2139,"src": 5691,"name": "SUCCESS_REBOOT_REQUIRED"},{"import": 2139,"src": 5692,"name": "INVALID_LOGON_TYPE"},{"import": 2139,"src": 5693,"name": "FAIL_RESTART"},{"import": 2139,"src": 5694,"name": "INVALID_PRINTER_NAME"},{"import": 2139,"src": 5695,"name": "CHECKOUT_REQUIRED"},{"import": 2139,"src": 5696,"name": "FOUND_OUT_OF_SCOPE"},{"import": 2139,"src": 5697,"name": "VC_DISCONNECTED"},{"import": 2139,"src": 5698,"name": "RPC_S_FP_DIV_ZERO"},{"import": 2139,"src": 5699,"name": "CANT_RESOLVE_FILENAME"},{"import": 2139,"src": 5700,"name": "INVALID_PRINT_MONITOR"},{"import": 2139,"src": 5701,"name": "DISK_OPERATION_FAILED"},{"import": 2139,"src": 5702,"name": "INVALID_PIXEL_FORMAT"},{"import": 2139,"src": 5703,"name": "SHARING_BUFFER_EXCEEDED"},{"import": 2139,"src": 5704,"name": "UNKNOWN_PATCH"},{"import": 2139,"src": 5705,"name": "BAD_CONFIGURATION"},{"import": 2139,"src": 5706,"name": "TAG_NOT_FOUND"},{"import": 2139,"src": 5707,"name": "PRINTER_DRIVER_BLOCKED"},{"import": 2139,"src": 5708,"name": "INVALID_GROUPNAME"},{"import": 2139,"src": 5709,"name": "OUT_OF_STRUCTURES"},{"import": 2139,"src": 5710,"name": "ARITHMETIC_OVERFLOW"},{"import": 2139,"src": 5711,"name": "INSTALL_REMOTE_DISALLOWED"},{"import": 2139,"src": 5712,"name": "IP_ADDRESS_CONFLICT1"},{"import": 2139,"src": 5713,"name": "RPC_X_INVALID_ES_ACTION"},{"import": 2139,"src": 5714,"name": "ALREADY_REGISTERED"},{"import": 2139,"src": 5715,"name": "RECEIVE_PARTIAL_EXPEDITED"},{"import": 2139,"src": 5716,"name": "NO_TRACKING_SERVICE"},{"import": 2139,"src": 5717,"name": "RPC_X_SS_CONTEXT_DAMAGED"},{"import": 2139,"src": 5718,"name": "NO_USER_SESSION_KEY"},{"import": 2139,"src": 5719,"name": "HANDLE_DISK_FULL"},{"import": 2139,"src": 5720,"name": "DBG_CONTROL_C"},{"import": 2139,"src": 5721,"name": "ILL_FORMED_PASSWORD"},{"import": 2139,"src": 5722,"name": "WAS_UNLOCKED"},{"import": 2139,"src": 5723,"name": "INVALID_BLOCK_LENGTH"},{"import": 2139,"src": 5724,"name": "RPC_S_CALL_IN_PROGRESS"},{"import": 2139,"src": 5725,"name": "DISK_REPAIR_UNSUCCESSFUL"},{"import": 2139,"src": 5726,"name": "SUCCESS"},{"import": 2139,"src": 5727,"name": "DEVICE_REINITIALIZATION_NEEDED"},{"import": 2139,"src": 5728,"name": "OPLOCK_BREAK_IN_PROGRESS"},{"import": 2139,"src": 5729,"name": "INVALID_ID_AUTHORITY"},{"import": 2139,"src": 5730,"name": "REQUIRES_INTERACTIVE_WINDOWSTATION"},{"import": 2139,"src": 5731,"name": "MUTANT_LIMIT_EXCEEDED"},{"import": 2139,"src": 5732,"name": "DLL_NOT_FOUND"},{"import": 2139,"src": 5733,"name": "INVALID_MINALLOCSIZE"},{"import": 2139,"src": 5734,"name": "BAD_ARGUMENTS"},{"import": 2139,"src": 5735,"name": "NO_YIELD_PERFORMED"},{"import": 2139,"src": 5736,"name": "INSTALL_REJECTED"},{"import": 2139,"src": 5737,"name": "RPC_S_NO_MORE_MEMBERS"},{"import": 2139,"src": 5738,"name": "INVALID_LEVEL"},{"import": 2139,"src": 5739,"name": "ILLEGAL_DLL_RELOCATION"},{"import": 2139,"src": 5740,"name": "RPC_X_PIPE_EMPTY"},{"import": 2139,"src": 5741,"name": "INVALID_FIELD_IN_PARAMETER_LIST"},{"import": 2139,"src": 5742,"name": "REGISTRY_IO_FAILED"},{"import": 2139,"src": 5743,"name": "INTERNAL_DB_CORRUPTION"},{"import": 2139,"src": 5744,"name": "WRONG_PASSWORD"},{"import": 2139,"src": 5745,"name": "SERVICE_NOTIFICATION"},{"import": 2139,"src": 5746,"name": "ABANDONED_WAIT_63"},{"import": 2139,"src": 5747,"name": "RPC_S_INVALID_BOUND"},{"import": 2139,"src": 5748,"name": "RPC_S_ENTRY_ALREADY_EXISTS"},{"import": 2139,"src": 5749,"name": "PROCESS_ABORTED"},{"import": 2139,"src": 5750,"name": "DOMAIN_EXISTS"},{"import": 2139,"src": 5751,"name": "RPC_S_INVALID_ASYNC_HANDLE"},{"import": 2139,"src": 5752,"name": "HOTKEY_NOT_REGISTERED"},{"import": 2139,"src": 5753,"name": "INVALID_EA_NAME"},{"import": 2139,"src": 5754,"name": "EXTENDED_ERROR"},{"import": 2139,"src": 5755,"name": "CONNECTION_INVALID"},{"import": 2139,"src": 5756,"name": "REG_NAT_CONSUMPTION"},{"import": 2139,"src": 5757,"name": "SYSTEM_TRACE"},{"import": 2139,"src": 5758,"name": "GENERIC_NOT_MAPPED"},{"import": 2139,"src": 5759,"name": "INVALID_ADDRESS"},{"import": 2139,"src": 5760,"name": "LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR"},{"import": 2139,"src": 5761,"name": "NO_UNICODE_TRANSLATION"},{"import": 2139,"src": 5762,"name": "NO_CALLBACK_ACTIVE"},{"import": 2139,"src": 5763,"name": "INVALID_SERVER_STATE"},{"import": 2139,"src": 5764,"name": "ERRORS_ENCOUNTERED"},{"import": 2139,"src": 5765,"name": "FILE_CORRUPT"},{"import": 2139,"src": 5766,"name": "INVALID_ENVIRONMENT"},{"import": 2139,"src": 5767,"name": "DBG_COMMAND_EXCEPTION"},{"import": 2139,"src": 5768,"name": "RPC_X_SS_IN_NULL_CONTEXT"},{"import": 2139,"src": 5769,"name": "INVALID_WORKSTATION"},{"import": 2139,"src": 5770,"name": "SIGNAL_PENDING"},{"import": 2139,"src": 5771,"name": "PIPE_BUSY","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5772,"name": "INVALID_TARGET_HANDLE"},{"import": 2139,"src": 5773,"name": "BUFFER_ALL_ZEROS"},{"import": 2139,"src": 5774,"name": "PRINT_CANCELLED"},{"import": 2139,"src": 5775,"name": "PER_USER_TRUST_QUOTA_EXCEEDED"},{"import": 2139,"src": 5776,"name": "INSTALL_UI_FAILURE"},{"import": 2139,"src": 5777,"name": "CLIENT_SERVER_PARAMETERS_INVALID"},{"import": 2139,"src": 5778,"name": "NET_OPEN_FAILED"},{"import": 2139,"src": 5779,"name": "RPC_S_PROTSEQ_NOT_SUPPORTED"},{"import": 2139,"src": 5780,"name": "DBG_TERMINATE_THREAD"},{"import": 2139,"src": 5781,"name": "TOO_MANY_TCBS"},{"import": 2139,"src": 5782,"name": "BAD_PROVIDER"},{"import": 2139,"src": 5783,"name": "DEVICE_ALREADY_ATTACHED"},{"import": 2139,"src": 5784,"name": "CONTROL_C_EXIT"},{"import": 2139,"src": 5785,"name": "MEDIA_CHANGED"},{"import": 2139,"src": 5786,"name": "NON_MDICHILD_WINDOW"},{"import": 2139,"src": 5787,"name": "INVALID_PRINTER_COMMAND"},{"import": 2139,"src": 5788,"name": "ABIOS_ERROR"},{"import": 2139,"src": 5789,"name": "PATCH_NO_SEQUENCE"},{"import": 2139,"src": 5790,"name": "INVALID_EXCEPTION_HANDLER"},{"import": 2139,"src": 5791,"name": "OPLOCK_HANDLE_CLOSED"},{"import": 2139,"src": 5792,"name": "INVALID_TASK_INDEX"},{"import": 2139,"src": 5793,"name": "INVALID_PATCH_XML"},{"import": 2139,"src": 5794,"name": "OR_INVALID_OID"},{"import": 2139,"src": 5795,"name": "BAD_IMPERSONATION_LEVEL"},{"import": 2139,"src": 5796,"name": "NOT_ENOUGH_SERVER_MEMORY"},{"import": 2139,"src": 5797,"name": "NOT_FOUND"},{"import": 2139,"src": 5798,"name": "BAD_FORMAT"},{"import": 2139,"src": 5799,"name": "ICM_NOT_ENABLED"},{"import": 2139,"src": 5800,"name": "NETWORK_UNREACHABLE"},{"import": 2139,"src": 5801,"name": "CRC"},{"import": 2139,"src": 5802,"name": "SERVICE_CANNOT_ACCEPT_CTRL"},{"import": 2139,"src": 5803,"name": "RPC_S_BINDING_INCOMPLETE"},{"import": 2139,"src": 5804,"name": "HOST_DOWN"},{"import": 2139,"src": 5805,"name": "SCRUB_DATA_DISABLED"},{"import": 2139,"src": 5806,"name": "UNEXPECTED_MM_MAP_ERROR"},{"import": 2139,"src": 5807,"name": "WRONG_DISK"},{"import": 2139,"src": 5808,"name": "INVALID_SEGMENT_NUMBER"},{"import": 2139,"src": 5809,"name": "INVALID_ACCESS"},{"import": 2139,"src": 5810,"name": "DYNLINK_FROM_INVALID_RING"},{"import": 2139,"src": 5811,"name": "SPECIAL_ACCOUNT"},{"import": 2139,"src": 5812,"name": "NO_SYSTEM_RESOURCES"},{"import": 2139,"src": 5813,"name": "BAD_DRIVER_LEVEL"},{"import": 2139,"src": 5814,"name": "NO_TRUST_LSA_SECRET"},{"import": 2139,"src": 5815,"name": "SPECIAL_USER"},{"import": 2139,"src": 5816,"name": "ACCESS_DISABLED_WEBBLADE_TAMPER"},{"import": 2139,"src": 5817,"name": "RESOURCE_DATA_NOT_FOUND"},{"import": 2139,"src": 5818,"name": "TRANSFORM_NOT_SUPPORTED"},{"import": 2139,"src": 5819,"name": "INVALID_COLORINDEX"},{"import": 2139,"src": 5820,"name": "RPC_X_PIPE_DISCIPLINE_ERROR"},{"import": 2139,"src": 5821,"name": "LOGIN_TIME_RESTRICTION"},{"import": 2139,"src": 5822,"name": "NOT_SAFE_MODE_DRIVER"},{"import": 2139,"src": 5823,"name": "SETCOUNT_ON_BAD_LB"},{"import": 2139,"src": 5824,"name": "REGISTRY_QUOTA_LIMIT"},{"import": 2139,"src": 5825,"name": "UNABLE_TO_REMOVE_REPLACED"},{"import": 2139,"src": 5826,"name": "INTERNAL_ERROR"},{"import": 2139,"src": 5827,"name": "RXACT_INVALID_STATE"},{"import": 2139,"src": 5828,"name": "RPC_X_SS_HANDLES_MISMATCH"},{"import": 2139,"src": 5829,"name": "TOO_MANY_SEMAPHORES"},{"import": 2139,"src": 5830,"name": "NOINTERFACE"},{"import": 2139,"src": 5831,"name": "CLASS_ALREADY_EXISTS"},{"import": 2139,"src": 5832,"name": "PRINTER_ALREADY_EXISTS"},{"import": 2139,"src": 5833,"name": "MARSHALL_OVERFLOW"},{"import": 2139,"src": 5834,"name": "RMODE_APP"},{"import": 2139,"src": 5835,"name": "SERVICE_ALREADY_RUNNING"},{"import": 2139,"src": 5836,"name": "CANT_ACCESS_DOMAIN_INFO"},{"import": 2139,"src": 5837,"name": "INVALID_ORDINAL"},{"import": 2139,"src": 5838,"name": "TIMER_NOT_CANCELED"},{"import": 2139,"src": 5839,"name": "SERVICE_DOES_NOT_EXIST"},{"import": 2139,"src": 5840,"name": "RPC_S_INTERFACE_NOT_EXPORTED"},{"import": 2139,"src": 5841,"name": "NEGATIVE_SEEK"},{"import": 2139,"src": 5842,"name": "NO_SPOOL_SPACE"},{"import": 2139,"src": 5843,"name": "PROCESS_MODE_ALREADY_BACKGROUND"},{"import": 2139,"src": 5844,"name": "PRINTER_DRIVER_IN_USE"},{"import": 2139,"src": 5845,"name": "PATCH_PACKAGE_REJECTED"},{"import": 2139,"src": 5846,"name": "INSTALL_ALREADY_RUNNING"},{"import": 2139,"src": 5847,"name": "CONVERT_TO_LARGE"},{"import": 2139,"src": 5848,"name": "SUCCESS_REBOOT_INITIATED"},{"import": 2139,"src": 5849,"name": "INVALID_AT_INTERRUPT_TIME"},{"import": 2139,"src": 5850,"name": "NOT_SUPPORTED_ON_SBS"},{"import": 2139,"src": 5851,"name": "UNABLE_TO_LOCK_MEDIA"},{"import": 2139,"src": 5852,"name": "TOO_MANY_MUXWAITERS"},{"import": 2139,"src": 5853,"name": "DBG_RIPEXCEPTION"},{"import": 2139,"src": 5854,"name": "INVALID_IMPORT_OF_NON_DLL"},{"import": 2139,"src": 5855,"name": "SPL_NO_STARTDOC"},{"import": 2139,"src": 5856,"name": "RECEIVE_PARTIAL"},{"import": 2139,"src": 5857,"name": "MEMBERS_PRIMARY_GROUP"},{"import": 2139,"src": 5858,"name": "MEMBER_NOT_IN_GROUP"},{"import": 2139,"src": 5859,"name": "BAD_DLL_ENTRYPOINT"},{"import": 2139,"src": 5860,"name": "CONNECTED_OTHER_PASSWORD_DEFAULT"},{"import": 2139,"src": 5861,"name": "SERVICE_SPECIFIC_ERROR"},{"import": 2139,"src": 5862,"name": "INVALID_MESSAGEDEST"},{"import": 2139,"src": 5863,"name": "MEMBER_IN_ALIAS"},{"import": 2139,"src": 5864,"name": "FLOPPY_UNKNOWN_ERROR"},{"import": 2139,"src": 5865,"name": "OR_INVALID_OXID"},{"import": 2139,"src": 5866,"name": "SERVICE_NOT_FOUND"},{"import": 2139,"src": 5867,"name": "BAD_DEV_TYPE"},{"import": 2139,"src": 5868,"name": "PARAMETER_QUOTA_EXCEEDED"},{"import": 2139,"src": 5869,"name": "MCA_OCCURED"},{"import": 2139,"src": 5870,"name": "DEVICE_REQUIRES_CLEANING"},{"import": 2139,"src": 5871,"name": "QUOTA_LIST_INCONSISTENT"},{"import": 2139,"src": 5872,"name": "EA_ACCESS_DENIED"},{"import": 2139,"src": 5873,"name": "INSTALL_SOURCE_ABSENT"},{"import": 2139,"src": 5874,"name": "CORRUPT_SYSTEM_FILE"},{"import": 2139,"src": 5875,"name": "INVALID_LABEL"},{"import": 2139,"src": 5876,"name": "PRINT_PROCESSOR_ALREADY_INSTALLED"},{"import": 2139,"src": 5877,"name": "NO_SIGNAL_SENT"},{"import": 2139,"src": 5878,"name": "BAD_SERVICE_ENTRYPOINT"},{"import": 2139,"src": 5879,"name": "SERVICE_NOT_IN_EXE"},{"import": 2139,"src": 5880,"name": "NOT_CONTAINER"},{"import": 2139,"src": 5881,"name": "DATATYPE_MISMATCH"},{"import": 2139,"src": 5882,"name": "SYSTEM_HIVE_TOO_LARGE"},{"import": 2139,"src": 5883,"name": "INVALID_VARIANT"},{"import": 2139,"src": 5884,"name": "INVALID_SPI_VALUE"},{"import": 2139,"src": 5885,"name": "FAILED_SERVICE_CONTROLLER_CONNECT"},{"import": 2139,"src": 5886,"name": "INVALID_ACCEL_HANDLE"},{"import": 2139,"src": 5887,"name": "PWD_HISTORY_CONFLICT"},{"import": 2139,"src": 5888,"name": "INVALID_HW_PROFILE"},{"import": 2139,"src": 5889,"name": "INCOMPATIBLE_SERVICE_PRIVILEGE"},{"import": 2139,"src": 5890,"name": "NO_MORE_ITEMS"},{"import": 2139,"src": 5891,"name": "GLOBAL_ONLY_HOOK"},{"import": 2139,"src": 5892,"name": "NO_QUOTAS_FOR_ACCOUNT"},{"import": 2139,"src": 5893,"name": "RPC_S_STRING_TOO_LONG"},{"import": 2139,"src": 5894,"name": "ILLEGAL_CHARACTER"},{"import": 2139,"src": 5895,"name": "RPC_X_WRONG_STUB_VERSION"},{"import": 2139,"src": 5896,"name": "ACCOUNT_EXPIRED"},{"import": 2139,"src": 5897,"name": "SPL_NO_ADDJOB"},{"import": 2139,"src": 5898,"name": "CHECKING_FILE_SYSTEM"},{"import": 2139,"src": 5899,"name": "ALREADY_FIBER"},{"import": 2139,"src": 5900,"name": "STACK_BUFFER_OVERRUN"},{"import": 2139,"src": 5901,"name": "NO_MORE_USER_HANDLES"},{"import": 2139,"src": 5902,"name": "HANDLES_CLOSED"},{"import": 2139,"src": 5903,"name": "USER_APC"},{"import": 2139,"src": 5904,"name": "CLIPPING_NOT_SUPPORTED"},{"import": 2139,"src": 5905,"name": "SEM_NOT_FOUND"},{"import": 2139,"src": 5906,"name": "MENU_ITEM_NOT_FOUND"},{"import": 2139,"src": 5907,"name": "TAG_NOT_PRESENT"},{"import": 2139,"src": 5908,"name": "NOLOGON_INTERDOMAIN_TRUST_ACCOUNT"},{"import": 2139,"src": 5909,"name": "SERVICE_DATABASE_LOCKED"},{"import": 2139,"src": 5910,"name": "ALREADY_WAITING"},{"import": 2139,"src": 5911,"name": "ALREADY_EXISTS","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5912,"name": "APP_INIT_FAILURE"},{"import": 2139,"src": 5913,"name": "NO_TRUST_SAM_ACCOUNT"},{"import": 2139,"src": 5914,"name": "DOMAIN_CONTROLLER_NOT_FOUND"},{"import": 2139,"src": 5915,"name": "NO_INHERITANCE"},{"import": 2139,"src": 5916,"name": "BAD_USER_PROFILE"},{"import": 2139,"src": 5917,"name": "NOLOGON_SERVER_TRUST_ACCOUNT"},{"import": 2139,"src": 5918,"name": "TIMER_RESUME_IGNORED"},{"import": 2139,"src": 5919,"name": "DUP_DOMAINNAME"},{"import": 2139,"src": 5920,"name": "NOTIFY_CLEANUP"},{"import": 2139,"src": 5921,"name": "DRIVERS_LEAKING_LOCKED_PAGES"},{"import": 2139,"src": 5922,"name": "INVALID_SERVICE_CONTROL"},{"import": 2139,"src": 5923,"name": "GEN_FAILURE"},{"import": 2139,"src": 5924,"name": "DEVICE_NOT_PARTITIONED"},{"import": 2139,"src": 5925,"name": "NO_LOGON_SERVERS"},{"import": 2139,"src": 5926,"name": "NOT_ALL_ASSIGNED"},{"import": 2139,"src": 5927,"name": "INVALID_WINDOW_HANDLE"},{"import": 2139,"src": 5928,"name": "RETRY"},{"import": 2139,"src": 5929,"name": "EVENTLOG_FILE_CORRUPT"},{"import": 2139,"src": 5930,"name": "CANNOT_MAKE"},{"import": 2139,"src": 5931,"name": "NOT_READY"},{"import": 2139,"src": 5932,"name": "INVALID_THREAD_ID"},{"import": 2139,"src": 5933,"name": "INVALID_EDIT_HEIGHT"},{"import": 2139,"src": 5934,"name": "FIRMWARE_UPDATED"},{"import": 2139,"src": 5935,"name": "INVALID_USER_BUFFER","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5936,"name": "NO_RECOVERY_PROGRAM"},{"import": 2139,"src": 5937,"name": "WORKING_SET_QUOTA"},{"import": 2139,"src": 5938,"name": "THREAD_ALREADY_IN_TASK"},{"import": 2139,"src": 5939,"name": "ALERTED"},{"import": 2139,"src": 5940,"name": "CHILD_WINDOW_MENU"},{"import": 2139,"src": 5941,"name": "NO_PAGEFILE"},{"import": 2139,"src": 5942,"name": "INVALID_NETNAME"},{"import": 2139,"src": 5943,"name": "IS_SUBSTED"},{"import": 2139,"src": 5944,"name": "CONNECTION_REFUSED"},{"import": 2139,"src": 5945,"name": "FLOPPY_BAD_REGISTERS"},{"import": 2139,"src": 5946,"name": "NON_ACCOUNT_SID"},{"import": 2139,"src": 5947,"name": "INFLOOP_IN_RELOC_CHAIN"},{"import": 2139,"src": 5948,"name": "ACCESS_AUDIT_BY_POLICY"},{"import": 2139,"src": 5949,"name": "SYNCHRONIZATION_REQUIRED"},{"import": 2139,"src": 5950,"name": "NO_ACE_CONDITION"},{"import": 2139,"src": 5951,"name": "HOTKEY_ALREADY_REGISTERED"},{"import": 2139,"src": 5952,"name": "WRITE_FAULT"},{"import": 2139,"src": 5953,"name": "DIRECTORY_NOT_SUPPORTED"},{"import": 2139,"src": 5954,"name": "DOMAIN_LIMIT_EXCEEDED"},{"import": 2139,"src": 5955,"name": "CANNOT_GRANT_REQUESTED_OPLOCK"},{"import": 2139,"src": 5956,"name": "WAKE_SYSTEM_DEBUGGER"},{"import": 2139,"src": 5957,"name": "DEVICE_SUPPORT_IN_PROGRESS"},{"import": 2139,"src": 5958,"name": "INVALID_EA_HANDLE"},{"import": 2139,"src": 5959,"name": "EOM_OVERFLOW"},{"import": 2139,"src": 5960,"name": "CANNOT_FIND_WND_CLASS"},{"import": 2139,"src": 5961,"name": "RPC_S_CALL_CANCELLED"},{"import": 2139,"src": 5962,"name": "TRUSTED_RELATIONSHIP_FAILURE"},{"import": 2139,"src": 5963,"name": "LOGON_SESSION_EXISTS"},{"import": 2139,"src": 5964,"name": "RANGE_NOT_FOUND"},{"import": 2139,"src": 5965,"name": "APP_WRONG_OS"},{"import": 2139,"src": 5966,"name": "UNABLE_TO_MOVE_REPLACEMENT"},{"import": 2139,"src": 5967,"name": "TOO_MANY_MODULES"},{"import": 2139,"src": 5968,"name": "INVALID_PROFILE"},{"import": 2139,"src": 5969,"name": "IMAGE_MACHINE_TYPE_MISMATCH_EXE"},{"import": 2139,"src": 5970,"name": "PASSWORD_CHANGE_REQUIRED"},{"import": 2139,"src": 5971,"name": "RPC_S_INVALID_ENDPOINT_FORMAT"},{"import": 2139,"src": 5972,"name": "TRUSTED_DOMAIN_FAILURE"},{"import": 2139,"src": 5973,"name": "LICENSE_QUOTA_EXCEEDED"},{"import": 2139,"src": 5974,"name": "UNRECOGNIZED_MEDIA"},{"import": 2139,"src": 5975,"name": "HANDLE_EOF"},{"import": 2139,"src": 5976,"name": "ALLOTTED_SPACE_EXCEEDED"},{"import": 2139,"src": 5977,"name": "DOMAIN_CTRLR_CONFIG_ERROR"},{"import": 2139,"src": 5978,"name": "RECOVERY_FAILURE"},{"import": 2139,"src": 5979,"name": "INVALID_MEMBER"},{"import": 2139,"src": 5980,"name": "RXACT_STATE_CREATED"},{"import": 2139,"src": 5981,"name": "PRODUCT_UNINSTALLED"},{"import": 2139,"src": 5982,"name": "INVALID_MSGBOX_STYLE"},{"import": 2139,"src": 5983,"name": "MAPPED_ALIGNMENT"},{"import": 2139,"src": 5984,"name": "RPC_S_GROUP_MEMBER_NOT_FOUND"},{"import": 2139,"src": 5985,"name": "MAGAZINE_NOT_PRESENT"},{"import": 2139,"src": 5986,"name": "EVENTLOG_FILE_CHANGED"},{"import": 2139,"src": 5987,"name": "SERVICE_DISABLED"},{"import": 2139,"src": 5988,"name": "MOUNT_POINT_NOT_RESOLVED"},{"import": 2139,"src": 5989,"name": "RPC_S_NOTHING_TO_EXPORT"},{"import": 2139,"src": 5990,"name": "RPC_X_INVALID_PIPE_OBJECT"},{"import": 2139,"src": 5991,"name": "INVALID_PARAMETER","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5992,"name": "PROFILING_NOT_STOPPED"},{"import": 2139,"src": 5993,"name": "EVALUATION_EXPIRATION"},{"import": 2139,"src": 5994,"name": "IO_PENDING","kind": "const","type": 843,"value": null},{"import": 2139,"src": 5995,"name": "PASSWORD_MUST_CHANGE"},{"import": 2139,"src": 5996,"name": "BEYOND_VDL"},{"import": 2139,"src": 5997,"name": "CANNOT_BREAK_OPLOCK"},{"import": 2139,"src": 5998,"name": "OLD_WIN_VERSION"},{"import": 2139,"src": 5999,"name": "PASSWORD_EXPIRED"},{"import": 2139,"src": 6000,"name": "NULL_LM_PASSWORD"},{"import": 2139,"src": 6001,"name": "RPC_S_INCOMPLETE_NAME"},{"import": 2139,"src": 6002,"name": "DELAY_LOAD_FAILED"},{"import": 2139,"src": 6003,"name": "WAKE_SYSTEM"},{"import": 2139,"src": 6004,"name": "NO_NETWORK"},{"import": 2139,"src": 6005,"name": "INCORRECT_SIZE"},{"import": 2139,"src": 6006,"name": "VERIFIER_STOP"},{"import": 2139,"src": 6007,"name": "RING2_STACK_IN_USE"},{"import": 2139,"src": 6008,"name": "MR_MID_NOT_FOUND"},{"import": 2139,"src": 6009,"name": "VOLSNAP_PREPARE_HIBERNATE"},{"import": 2139,"src": 6010,"name": "COULD_NOT_INTERPRET"},{"import": 2139,"src": 6011,"name": "INSTALL_PACKAGE_VERSION"},{"import": 2139,"src": 6012,"name": "UNKNOWN_PRINTER_DRIVER"},{"import": 2139,"src": 6013,"name": "RPC_S_INVALID_ASYNC_CALL"},{"import": 2139,"src": 6014,"name": "PNP_BAD_MPS_TABLE"},{"import": 2139,"src": 6015,"name": "ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY"},{"import": 2139,"src": 6016,"name": "RPC_S_UNKNOWN_AUTHN_LEVEL"},{"import": 2139,"src": 6017,"name": "SYMLINK_CLASS_DISABLED"},{"import": 2139,"src": 6018,"name": "COMPRESSION_DISABLED"},{"import": 2139,"src": 6019,"name": "DLL_MIGHT_BE_INSECURE"},{"import": 2139,"src": 6020,"name": "WAIT_3"},{"import": 2139,"src": 6021,"name": "MEDIA_CHECK"},{"import": 2139,"src": 6022,"name": "RPC_S_INVALID_STRING_BINDING"},{"import": 2139,"src": 6023,"name": "FILE_TOO_LARGE"},{"import": 2139,"src": 6024,"name": "RXACT_COMMIT_FAILURE"},{"import": 2139,"src": 6025,"name": "RESOURCE_NAME_NOT_FOUND"},{"import": 2139,"src": 6026,"name": "INVALID_CMM"},{"import": 2139,"src": 6027,"name": "COMMITMENT_MINIMUM"},{"import": 2139,"src": 6028,"name": "INVALID_COMBOBOX_MESSAGE"},{"import": 2139,"src": 6029,"name": "OPEN_FAILED"},{"import": 2139,"src": 6030,"name": "SCREEN_ALREADY_LOCKED"},{"import": 2139,"src": 6031,"name": "SERVER_SID_MISMATCH"},{"import": 2139,"src": 6032,"name": "BAD_CURRENT_DIRECTORY"},{"import": 2139,"src": 6033,"name": "ONLY_IF_CONNECTED"},{"import": 2139,"src": 6034,"name": "RPC_X_WRONG_ES_VERSION"},{"import": 2139,"src": 6035,"name": "USER_DELETE_TRUST_QUOTA_EXCEEDED"},{"import": 2139,"src": 6036,"name": "NOT_SUPPORTED"},{"import": 2139,"src": 6037,"name": "FS_DRIVER_REQUIRED"},{"import": 2139,"src": 6038,"name": "CANNOT_DETECT_PROCESS_ABORT"},{"import": 2139,"src": 6039,"name": "INVALID_VERIFY_SWITCH"},{"import": 2139,"src": 6040,"name": "WAIT_FOR_OPLOCK"},{"import": 2139,"src": 6041,"name": "FILE_LEVEL_TRIM_NOT_SUPPORTED"},{"import": 2139,"src": 6042,"name": "INVALID_HOOK_HANDLE"},{"import": 2139,"src": 6043,"name": "DRIVER_PROCESS_TERMINATED"},{"import": 2139,"src": 6044,"name": "UNDEFINED_SCOPE"},{"import": 2139,"src": 6045,"name": "CONNECTION_COUNT_LIMIT"},{"import": 2139,"src": 6046,"name": "LOCK_FAILED"},{"import": 2139,"src": 6047,"name": "WINDOW_NOT_DIALOG"},{"import": 2139,"src": 6048,"name": "PRINTER_DRIVER_ALREADY_INSTALLED"},{"import": 2139,"src": 6049,"name": "INVALID_SECURITY_DESCR"},{"import": 2139,"src": 6050,"name": "EPT_S_CANT_CREATE"},{"import": 2139,"src": 6051,"name": "PAGE_FAULT_COPY_ON_WRITE"},{"import": 2139,"src": 6052,"name": "RPC_S_TYPE_ALREADY_REGISTERED"},{"import": 2139,"src": 6053,"name": "FLOPPY_WRONG_CYLINDER"},{"import": 2139,"src": 6054,"name": "DIRECT_ACCESS_HANDLE"},{"import": 2139,"src": 6055,"name": "INVALID_LB_MESSAGE"},{"import": 2139,"src": 6056,"name": "SET_NOT_FOUND"},{"import": 2139,"src": 6057,"name": "IS_SUBST_PATH"},{"import": 2139,"src": 6058,"name": "CSCSHARE_OFFLINE"},{"import": 2139,"src": 6059,"name": "EVENTLOG_CANT_START"},{"import": 2139,"src": 6060,"name": "RPC_S_PROFILE_NOT_ADDED"},{"import": 2139,"src": 6061,"name": "SET_POWER_STATE_VETOED"},{"import": 2139,"src": 6062,"name": "CORRUPT_LOG_DELETED_FULL"},{"import": 2139,"src": 6063,"name": "RPC_S_UNKNOWN_MGR_TYPE"},{"import": 2139,"src": 6064,"name": "FAILED_DRIVER_ENTRY"},{"import": 2139,"src": 6065,"name": "EXE_MARKED_INVALID"},{"import": 2139,"src": 6066,"name": "LOGON_SERVER_CONFLICT"},{"import": 2139,"src": 6067,"name": "VIRUS_DELETED"},{"import": 2139,"src": 6068,"name": "INVALID_MESSAGE"},{"import": 2139,"src": 6069,"name": "CANT_TERMINATE_SELF"},{"import": 2139,"src": 6070,"name": "ENVVAR_NOT_FOUND","kind": "const","type": 843,"value": null},{"import": 2139,"src": 6071,"name": "INVALID_DOMAIN_STATE"},{"import": 2139,"src": 6072,"name": "COMMITMENT_LIMIT"},{"import": 2139,"src": 6073,"name": "BAD_NETPATH"},{"import": 2139,"src": 6074,"name": "BROKEN_PIPE","kind": "const","type": 843,"value": null},{"import": 2139,"src": 6075,"name": "JOURNAL_ENTRY_DELETED"},{"import": 2139,"src": 6076,"name": "DEV_NOT_EXIST"},{"import": 2139,"src": 6077,"name": "BAD_DEVICE"},{"import": 2139,"src": 6078,"name": "UNSUPPORTED_TYPE"},{"import": 2139,"src": 6079,"name": "NOTIFICATION_GUID_ALREADY_DEFINED"},{"import": 2139,"src": 6080,"name": "INVALID_KEYBOARD_HANDLE"},{"import": 2139,"src": 6081,"name": "INVALID_TABLE"},{"import": 2139,"src": 6082,"name": "NOLOGON_WORKSTATION_TRUST_ACCOUNT"},{"import": 2139,"src": 6083,"name": "WX86_ERROR"},{"import": 2139,"src": 6084,"name": "BAD_USERNAME"},{"import": 2139,"src": 6085,"name": "PROFILE_NOT_FOUND"},{"import": 2139,"src": 6086,"name": "INVALID_OWNER"},{"import": 2139,"src": 6087,"name": "EA_TABLE_FULL"},{"import": 2139,"src": 6088,"name": "EXTRANEOUS_INFORMATION"},{"import": 2139,"src": 6089,"name": "LOGON_FAILURE"},{"import": 2139,"src": 6090,"name": "CANT_DISABLE_MANDATORY"},{"import": 2139,"src": 6091,"name": "RPC_S_UNSUPPORTED_TRANS_SYN"},{"import": 2139,"src": 6092,"name": "UNKNOWN_PRINTPROCESSOR"},{"import": 2139,"src": 6093,"name": "SHUTDOWN_IS_SCHEDULED"},{"import": 2139,"src": 6094,"name": "EPT_S_NOT_REGISTERED"},{"import": 2139,"src": 6095,"name": "RPC_S_CALL_FAILED"},{"import": 2139,"src": 6096,"name": "DBG_TERMINATE_PROCESS"},{"import": 2139,"src": 6097,"name": "OPEN_FILES"},{"import": 2139,"src": 6098,"name": "TRANSLATION_COMPLETE"},{"import": 2139,"src": 6099,"name": "INVALID_EXE_SIGNATURE"},{"import": 2139,"src": 6100,"name": "UNDEFINED_CHARACTER"},{"import": 2139,"src": 6101,"name": "MEMORY_HARDWARE"},{"import": 2139,"src": 6102,"name": "VALIDATE_CONTINUE"},{"import": 2139,"src": 6103,"name": "RESOURCE_REQUIREMENTS_CHANGED"},{"import": 2139,"src": 6104,"name": "AUDIT_FAILED"},{"import": 2139,"src": 6105,"name": "ALLOCATE_BUCKET"},{"import": 2139,"src": 6106,"name": "CRASH_DUMP"},{"import": 2139,"src": 6107,"name": "PATCH_TARGET_NOT_FOUND"},{"import": 2139,"src": 6108,"name": "BAD_NET_RESP"},{"import": 2139,"src": 6109,"name": "CONTROL_ID_NOT_FOUND"},{"import": 2139,"src": 6110,"name": "INSUFFICIENT_BUFFER"},{"import": 2139,"src": 6111,"name": "THREAD_NOT_IN_PROCESS"},{"import": 2139,"src": 6112,"name": "PATH_BUSY"},{"import": 2139,"src": 6113,"name": "INVALID_IMAGE_HASH"},{"import": 2139,"src": 6114,"name": "ROWSNOTRELEASED"},{"import": 2139,"src": 6115,"name": "IS_JOINED"},{"import": 2139,"src": 6116,"name": "NO_IMPERSONATION_TOKEN"},{"import": 2139,"src": 6117,"name": "PROFILE_DOES_NOT_MATCH_DEVICE"},{"import": 2139,"src": 6118,"name": "DATABASE_DOES_NOT_EXIST"},{"import": 2139,"src": 6119,"name": "DISK_CORRUPT"},{"import": 2139,"src": 6120,"name": "CARDBUS_NOT_SUPPORTED"},{"import": 2139,"src": 6121,"name": "TOO_MANY_OPEN_FILES"},{"import": 2139,"src": 6122,"name": "STACK_OVERFLOW"},{"import": 2139,"src": 6123,"name": "PROTOCOL_UNREACHABLE"},{"import": 2139,"src": 6124,"name": "RPC_S_SEC_PKG_ERROR"},{"import": 2139,"src": 6125,"name": "BAD_REM_ADAP"},{"import": 2139,"src": 6126,"name": "SERIAL_NO_DEVICE"},{"import": 2139,"src": 6127,"name": "INVALID_PRINTER_STATE"},{"import": 2139,"src": 6128,"name": "NO_SUCH_SITE"},{"import": 2139,"src": 6129,"name": "NO_SITENAME"},{"import": 2139,"src": 6130,"name": "INVALID_FORM_SIZE"},{"import": 2139,"src": 6131,"name": "SAME_DRIVE"},{"import": 2139,"src": 6132,"name": "INVALID_MONITOR_HANDLE"},{"import": 2139,"src": 6133,"name": "INVALID_SUB_AUTHORITY"},{"import": 2139,"src": 6134,"name": "EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY"},{"import": 2139,"src": 6135,"name": "INSTALL_TEMP_UNWRITABLE"},{"import": 2139,"src": 6136,"name": "TOO_MANY_SECRETS"},{"import": 2139,"src": 6137,"name": "DIR_NOT_EMPTY"},{"import": 2139,"src": 6138,"name": "UNWIND"},{"import": 2139,"src": 6139,"name": "END_OF_MEDIA"},{"import": 2139,"src": 6140,"name": "NET_WRITE_FAULT"},{"import": 2139,"src": 6141,"name": "FILEMARK_DETECTED"},{"import": 2139,"src": 6142,"name": "USER_MAPPED_FILE"},{"import": 2139,"src": 6143,"name": "CURRENT_DOMAIN_NOT_ALLOWED"},{"import": 2139,"src": 6144,"name": "CAN_NOT_COMPLETE"},{"import": 2139,"src": 6145,"name": "INVALID_CRUNTIME_PARAMETER"},{"import": 2139,"src": 6146,"name": "IMPLEMENTATION_LIMIT"},{"import": 2139,"src": 6147,"name": "CANT_ENABLE_DENY_ONLY"},{"import": 2139,"src": 6148,"name": "CANTFETCHBACKWARDS"},{"import": 2139,"src": 6149,"name": "RANGE_LIST_CONFLICT"},{"import": 2139,"src": 6150,"name": "GUID_SUBSTITUTION_MADE"},{"import": 2139,"src": 6151,"name": "CONTINUE"},{"import": 2139,"src": 6152,"name": "BAD_NET_NAME"},{"import": 2139,"src": 6153,"name": "NOT_SAFEBOOT_SERVICE"},{"import": 2139,"src": 6154,"name": "RPC_S_NO_BINDINGS"},{"import": 2139,"src": 6155,"name": "PNP_REBOOT_REQUIRED"},{"import": 2139,"src": 6156,"name": "HOOK_NEEDS_HMOD"},{"import": 2139,"src": 6157,"name": "RPC_S_UNSUPPORTED_TYPE"},{"import": 2139,"src": 6158,"name": "TOO_MANY_NAMES"},{"import": 2139,"src": 6159,"name": "FULLSCREEN_MODE"},{"import": 2139,"src": 6160,"name": "SUBST_TO_SUBST"},{"import": 2139,"src": 6161,"name": "BAD_FUNCTION_TABLE"},{"import": 2139,"src": 6162,"name": "SERVICE_REQUEST_TIMEOUT"},{"import": 2139,"src": 6163,"name": "NON_DOMAIN_SID"},{"import": 2139,"src": 6164,"name": "NO_SECURITY_ON_OBJECT"},{"import": 2139,"src": 6165,"name": "FUNCTION_NOT_CALLED"},{"import": 2139,"src": 6166,"name": "META_EXPANSION_TOO_LONG"},{"import": 2139,"src": 6167,"name": "TOO_MANY_LINKS"},{"import": 2139,"src": 6168,"name": "REQUEST_OUT_OF_SEQUENCE"},{"import": 2139,"src": 6169,"name": "ORPHAN_NAME_EXHAUSTED"},{"import": 2139,"src": 6170,"name": "ACPI_ERROR"},{"import": 2139,"src": 6171,"name": "RPC_S_PROCNUM_OUT_OF_RANGE"},{"import": 2139,"src": 6172,"name": "NOT_REGISTRY_FILE"},{"import": 2139,"src": 6173,"name": "RPC_S_GRP_ELT_NOT_ADDED"},{"import": 2139,"src": 6174,"name": "RPC_S_NO_ENTRY_NAME"},{"import": 2139,"src": 6175,"name": "UNABLE_TO_MOVE_REPLACEMENT_2"},{"import": 2139,"src": 6176,"name": "EA_LIST_INCONSISTENT"},{"import": 2139,"src": 6177,"name": "PROFILING_NOT_STARTED"},{"import": 2139,"src": 6178,"name": "UNRECOGNIZED_VOLUME"},{"import": 2139,"src": 6179,"name": "INVALID_OPLOCK_PROTOCOL"},{"import": 2139,"src": 6180,"name": "MAX_THRDS_REACHED"},{"import": 2139,"src": 6181,"name": "PARTITION_FAILURE"},{"import": 2139,"src": 6182,"name": "WAS_LOCKED"},{"import": 2139,"src": 6183,"name": "FAIL_REBOOT_INITIATED"},{"import": 2139,"src": 6184,"name": "NO_NVRAM_RESOURCES"},{"import": 2139,"src": 6185,"name": "FAIL_FAST_EXCEPTION"},{"import": 2139,"src": 6186,"name": "INSTALL_SERVICE_SAFEBOOT"},{"import": 2139,"src": 6187,"name": "RPC_S_UNKNOWN_AUTHZ_SERVICE"},{"import": 2139,"src": 6188,"name": "SUCCESS_RESTART_REQUIRED"},{"import": 2139,"src": 6189,"name": "PRINTER_DELETED"},{"import": 2139,"src": 6190,"name": "FLOPPY_VOLUME"},{"import": 2139,"src": 6191,"name": "MCA_EXCEPTION"},{"import": 2139,"src": 6192,"name": "SHARING_VIOLATION","kind": "const","type": 843,"value": null},{"import": 2139,"src": 6193,"name": "COUNTER_TIMEOUT"},{"import": 2139,"src": 6194,"name": "RECEIVE_EXPEDITED"},{"import": 2139,"src": 6195,"name": "LABEL_TOO_LONG"},{"import": 2139,"src": 6196,"name": "HIBERNATED"},{"import": 2139,"src": 6197,"name": "RPC_S_ENTRY_TYPE_MISMATCH"},{"import": 2139,"src": 6198,"name": "CANNOT_IMPERSONATE"},{"import": 2139,"src": 6199,"name": "TOO_MANY_DESCRIPTORS"},{"import": 2139,"src": 6200,"name": "NETNAME_DELETED"},{"import": 2139,"src": 6201,"name": "UNEXPECTED_MM_EXTEND_ERR"},{"import": 2139,"src": 6202,"name": "INVALID_SHOWWIN_COMMAND"},{"import": 2139,"src": 6203,"name": "INVALID_DATA"},{"import": 2139,"src": 6204,"name": "DBG_EXCEPTION_NOT_HANDLED"},{"import": 2139,"src": 6205,"name": "INVALID_NAME"},{"import": 2139,"src": 6206,"name": "REPARSE"},{"import": 2139,"src": 6207,"name": "VOLSNAP_HIBERNATE_READY"},{"import": 2139,"src": 6208,"name": "DRIVER_DATABASE_ERROR"},{"import": 2139,"src": 6209,"name": "SPOOL_FILE_NOT_FOUND"},{"import": 2139,"src": 6210,"name": "REDIRECTOR_HAS_OPEN_HANDLES"},{"import": 2139,"src": 6211,"name": "CANT_WAIT"},{"import": 2139,"src": 6212,"name": "RPC_S_UUID_LOCAL_ONLY"},{"import": 2139,"src": 6213,"name": "IP_ADDRESS_CONFLICT2"},{"import": 2139,"src": 6214,"name": "INTERNAL_DB_ERROR"},{"import": 2139,"src": 6215,"name": "CHILD_NOT_COMPLETE"},{"import": 2139,"src": 6216,"name": "SECRET_TOO_LONG"},{"import": 2139,"src": 6217,"name": "NOT_LOGON_PROCESS"},{"import": 2139,"src": 6218,"name": "CANTSCROLLBACKWARDS"},{"import": 2139,"src": 6219,"name": "LM_CROSS_ENCRYPTION_REQUIRED"},{"import": 2139,"src": 6220,"name": "PWD_TOO_SHORT"},{"import": 2139,"src": 6221,"name": "RPC_S_FP_UNDERFLOW"},{"import": 2139,"src": 6222,"name": "INVALID_LIST_FORMAT"},{"import": 2139,"src": 6223,"name": "PROFILE_NOT_ASSOCIATED_WITH_DEVICE"},{"import": 2139,"src": 6224,"name": "PORT_MESSAGE_TOO_LONG"},{"import": 2139,"src": 6225,"name": "INVALID_SERVICENAME"},{"import": 2139,"src": 6226,"name": "OFFSET_ALIGNMENT_VIOLATION"},{"import": 2139,"src": 6227,"name": "INVALID_ACL"},{"import": 2139,"src": 6228,"name": "CONNECTED_OTHER_PASSWORD"},{"import": 2139,"src": 6229,"name": "SERVICE_DEPENDENCY_FAIL"},{"import": 2139,"src": 6230,"name": "BUSY_DRIVE"},{"import": 2139,"src": 6231,"name": "REGISTRY_HIVE_RECOVERED"},{"import": 2139,"src": 6232,"name": "SERVER_NOT_DISABLED"},{"import": 2139,"src": 6233,"name": "NO_GUID_TRANSLATION"},{"import": 2139,"src": 6234,"name": "ABANDONED_WAIT_0"},{"import": 2139,"src": 6235,"name": "DIR_NOT_ROOT"},{"import": 2139,"src": 6236,"name": "NONE_MAPPED"},{"import": 2139,"src": 6237,"name": "WAIT_2"},{"import": 2139,"src": 6238,"name": "NOT_JOINED"},{"import": 2139,"src": 6239,"name": "LONGJUMP"},{"import": 2139,"src": 6240,"name": "FT_WRITE_RECOVERY"},{"import": 2139,"src": 6241,"name": "FLOAT_MULTIPLE_TRAPS"},{"import": 2139,"src": 6242,"name": "UNKNOWN_PRODUCT"},{"import": 2139,"src": 6243,"name": "BAD_COMMAND"},{"import": 2139,"src": 6244,"name": "TOO_MANY_SIDS"},{"import": 2139,"src": 6245,"name": "WOW_ASSERTION"},{"import": 2139,"src": 6246,"name": "RPC_S_UNSUPPORTED_AUTHN_LEVEL"},{"import": 2139,"src": 6247,"name": "RPC_X_SS_CANNOT_GET_CALL_HANDLE"},{"import": 2139,"src": 6248,"name": "DISK_CHANGE"},{"import": 2139,"src": 6249,"name": "CANNOT_DETECT_DRIVER_FAILURE"},{"import": 2139,"src": 6250,"name": "RPC_S_COMM_FAILURE"},{"import": 2139,"src": 6251,"name": "RXACT_COMMIT_NECESSARY"},{"import": 2139,"src": 6252,"name": "PRINTER_NOT_FOUND"},{"import": 2139,"src": 6253,"name": "SERVER_DISABLED"},{"import": 2139,"src": 6254,"name": "BACKUP_CONTROLLER"},{"import": 2139,"src": 6255,"name": "NO_ASSOCIATION"},{"import": 2139,"src": 6256,"name": "RPC_S_PRF_ELT_NOT_ADDED"},{"import": 2139,"src": 6257,"name": "EVENT_PENDING"},{"import": 2139,"src": 6258,"name": "INVALID_SEGDPL"},{"import": 2139,"src": 6259,"name": "DRIVER_CANCEL_TIMEOUT"},{"import": 2139,"src": 6260,"name": "PATCH_PACKAGE_INVALID"},{"import": 2139,"src": 6261,"name": "RPC_S_PROXY_ACCESS_DENIED"},{"import": 2139,"src": 6262,"name": "IRQ_BUSY"},{"import": 2139,"src": 6263,"name": "SYMLINK_NOT_SUPPORTED"},{"import": 2139,"src": 6264,"name": "WX86_WARNING"},{"import": 2139,"src": 6265,"name": "REGISTRY_RECOVERED"},{"import": 2139,"src": 6266,"name": "SERVICE_MARKED_FOR_DELETE"},{"import": 2139,"src": 6267,"name": "RESUME_HIBERNATION"},{"import": 2139,"src": 6268,"name": "DISK_RECALIBRATE_FAILED"},{"import": 2139,"src": 6269,"name": "AUTHIP_FAILURE"},{"import": 2139,"src": 6270,"name": "INVALID_DLL"},{"import": 2139,"src": 6271,"name": "IMAGE_NOT_AT_BASE"},{"import": 2139,"src": 6272,"name": "PKINIT_FAILURE"},{"import": 2139,"src": 6273,"name": "TOO_MANY_SEM_REQUESTS"},{"import": 2139,"src": 6274,"name": "RXACT_COMMITTED"},{"import": 2139,"src": 6275,"name": "RPC_S_INVALID_NAME_SYNTAX"},{"import": 2139,"src": 6276,"name": "BAD_UNIT"},{"import": 2139,"src": 6277,"name": "INVALID_LOGON_HOURS"},{"import": 2139,"src": 6278,"name": "RPC_S_OBJECT_NOT_FOUND"},{"import": 2139,"src": 6279,"name": "PORT_NOT_SET"},{"import": 2139,"src": 6280,"name": "EVENT_DONE"},{"import": 2139,"src": 6281,"name": "NOT_DOS_DISK"},{"import": 2139,"src": 6282,"name": "TLW_WITH_WSCHILD"},{"import": 2139,"src": 6283,"name": "INVALID_MENU_HANDLE"},{"import": 2139,"src": 6284,"name": "DLL_MIGHT_BE_INCOMPATIBLE"},{"import": 2139,"src": 6285,"name": "DBG_UNABLE_TO_PROVIDE_HANDLE"},{"import": 2139,"src": 6286,"name": "IO_DEVICE"},{"import": 2139,"src": 6287,"name": "CANT_ACCESS_FILE"},{"import": 2139,"src": 6288,"name": "IMEOUT"},{"import": 2139,"src": 6289,"name": "RPC_S_INTERNAL_ERROR"},{"import": 2139,"src": 6290,"name": "INVALID_LDT_DESCRIPTOR"},{"import": 2139,"src": 6291,"name": "NO_LOG_SPACE"},{"import": 2139,"src": 6292,"name": "INVALID_COLORSPACE"},{"import": 2139,"src": 6293,"name": "FAIL_SHUTDOWN"},{"import": 2139,"src": 6294,"name": "LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR"},{"import": 2139,"src": 6295,"name": "MISSING_SYSTEMFILE"},{"import": 2139,"src": 6296,"name": "RPC_S_ENTRY_NOT_FOUND"},{"import": 2139,"src": 6297,"name": "READ_FAULT"},{"import": 2139,"src": 6298,"name": "NOT_SAME_DEVICE"},{"import": 2139,"src": 6299,"name": "NO_SHUTDOWN_IN_PROGRESS"},{"import": 2139,"src": 6300,"name": "METAFILE_NOT_SUPPORTED"},{"import": 2139,"src": 6301,"name": "RPC_X_SS_CHAR_TRANS_SHORT_FILE"},{"import": 2139,"src": 6302,"name": "POSSIBLE_DEADLOCK"},{"import": 2139,"src": 6303,"name": "REQUEST_PAUSED"},{"import": 2139,"src": 6304,"name": "JOURNAL_DELETE_IN_PROGRESS"},{"import": 2139,"src": 6305,"name": "RPC_S_NO_PRINC_NAME"},{"import": 2139,"src": 6306,"name": "CANNOT_COPY"},{"import": 2139,"src": 6307,"name": "DOMAIN_TRUST_INCONSISTENT"},{"import": 2139,"src": 6308,"name": "NO_VOLUME_ID"},{"import": 2139,"src": 6309,"name": "LOCAL_USER_SESSION_KEY"},{"import": 2139,"src": 6310,"name": "IO_PRIVILEGE_FAILED"},{"import": 2139,"src": 6311,"name": "OR_INVALID_SET"},{"import": 2139,"src": 6312,"name": "RPC_S_INVALID_AUTH_IDENTITY"},{"import": 2139,"src": 6313,"name": "RESOURCE_TYPE_NOT_FOUND"},{"import": 2139,"src": 6314,"name": "FORMS_AUTH_REQUIRED"},{"import": 2139,"src": 6315,"name": "PARTIAL_COPY"},{"import": 2139,"src": 6316,"name": "DEVICE_REMOVED"},{"import": 2139,"src": 6317,"name": "LOCKED"},{"import": 2139,"src": 6318,"name": "VIRUS_INFECTED"},{"import": 2139,"src": 6319,"name": "DELETING_ICM_XFORM"},{"import": 2139,"src": 6320,"name": "REPARSE_OBJECT"},{"import": 2139,"src": 6321,"name": "DBG_CONTROL_BREAK"},{"import": 2139,"src": 6322,"name": "AUTODATASEG_EXCEEDS_64k"},{"import": 2139,"src": 6323,"name": "CANT_OPEN_ANONYMOUS"},{"import": 2139,"src": 6324,"name": "INSTALL_REMOTE_PROHIBITED"},{"import": 2139,"src": 6325,"name": "WRITE_PROTECT"},{"import": 2139,"src": 6326,"name": "IS_JOIN_PATH"},{"import": 2139,"src": 6327,"name": "WRONG_TARGET_NAME"},{"import": 2139,"src": 6328,"name": "INSTALL_SUSPEND"},{"import": 2139,"src": 6329,"name": "PIPE_CONNECTED"},{"import": 2139,"src": 6330,"name": "BAD_DEVICE_PATH"},{"import": 2139,"src": 6331,"name": "BEGINNING_OF_MEDIA"},{"import": 2139,"src": 6332,"name": "RPC_S_NOT_LISTENING"},{"import": 2139,"src": 6333,"name": "APP_HANG"},{"import": 2139,"src": 6334,"name": "PAGEFILE_CREATE_FAILED"},{"import": 2139,"src": 6335,"name": "UNKNOWN_FEATURE"},{"import": 2139,"src": 6336,"name": "WRONG_COMPARTMENT"},{"import": 2139,"src": 6337,"name": "RPC_S_INTERFACE_NOT_FOUND"},{"import": 2139,"src": 6338,"name": "LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED"},{"import": 2139,"src": 6339,"name": "CALLBACK_SUPPLIED_INVALID_DATA"},{"import": 2139,"src": 6340,"name": "PRIVILEGE_NOT_HELD"},{"import": 2139,"src": 6341,"name": "SERVER_SHUTDOWN_IN_PROGRESS"},{"import": 2139,"src": 6342,"name": "RPC_X_PIPE_CLOSED"},{"import": 2139,"src": 6343,"name": "REQ_NOT_ACCEP"},{"import": 2139,"src": 6344,"name": "SERVER_HAS_OPEN_HANDLES"},{"import": 2139,"src": 6345,"name": "FILE_HANDLE_REVOKED"},{"import": 2139,"src": 6346,"name": "BAD_PATHNAME"},{"import": 2139,"src": 6347,"name": "DEPENDENT_SERVICES_RUNNING"},{"import": 2139,"src": 6348,"name": "INCORRECT_ADDRESS"},{"import": 2139,"src": 6349,"name": "DLL_INIT_FAILED_LOGOFF"},{"import": 2139,"src": 6350,"name": "TOKEN_ALREADY_IN_USE"},{"import": 2139,"src": 6351,"name": "BAD_ENVIRONMENT"},{"import": 2139,"src": 6352,"name": "OVERRIDE_NOCHANGES"},{"import": 2139,"src": 6353,"name": "OUT_OF_PAPER"},{"import": 2139,"src": 6354,"name": "NOT_CHILD_WINDOW"},{"import": 2139,"src": 6355,"name": "RPC_S_FP_OVERFLOW"},{"import": 2139,"src": 6356,"name": "PAGE_FAULT_TRANSITION"},{"import": 2139,"src": 6357,"name": "BAD_STACK"},{"import": 2139,"src": 6358,"name": "DEBUG_ATTACH_FAILED"},{"import": 2139,"src": 6359,"name": "DATA_NOT_ACCEPTED"},{"import": 2139,"src": 6360,"name": "INSTALL_PLATFORM_UNSUPPORTED"},{"import": 2139,"src": 6361,"name": "INSUFFICIENT_POWER"},{"import": 2139,"src": 6362,"name": "RPC_S_SERVER_UNAVAILABLE"},{"import": 2139,"src": 6363,"name": "UNSUPPORTED_COMPRESSION"},{"import": 2139,"src": 6364,"name": "HIBERNATION_FAILURE"},{"import": 2139,"src": 6365,"name": "FAIL_REBOOT_REQUIRED"},{"import": 2139,"src": 6366,"name": "INSTALL_USEREXIT"},{"import": 2139,"src": 6367,"name": "INVALID_DEVICE_OBJECT_PARAMETER"},{"import": 2139,"src": 6368,"name": "INVALID_TRANSFORM"},{"import": 2139,"src": 6369,"name": "INSUFFICIENT_LOGON_INFO"},{"import": 2139,"src": 6370,"name": "CONNECTION_ABORTED"},{"import": 2139,"src": 6371,"name": "DOMAIN_CONTROLLER_EXISTS"},{"import": 2139,"src": 6372,"name": "INVALID_SEPARATOR_FILE"},{"import": 2139,"src": 6373,"name": "DBG_PRINTEXCEPTION_C"},{"import": 2139,"src": 6374,"name": "DISCARDED"},{"import": 2139,"src": 6375,"name": "RPC_S_INVALID_NAF_ID"},{"import": 2139,"src": 6376,"name": "HWNDS_HAVE_DIFF_PARENT"},{"import": 2139,"src": 6377,"name": "NO_MORE_MATCHES"},{"import": 2139,"src": 6378,"name": "DBG_REPLY_LATER"},{"import": 2139,"src": 6379,"name": "INVALID_FUNCTION"},{"import": 2139,"src": 6380,"name": "ADAP_HDW_ERR"},{"import": 2139,"src": 6381,"name": "ITERATED_DATA_EXCEEDS_64k"},{"import": 2139,"src": 6382,"name": "DEVICE_IN_USE"},{"import": 2139,"src": 6383,"name": "NOT_ALLOWED_ON_SYSTEM_FILE"},{"import": 2139,"src": 6384,"name": "PRIVATE_DIALOG_INDEX"},{"import": 2139,"src": 6385,"name": "SOME_NOT_MAPPED"},{"import": 2139,"src": 6386,"name": "PAGE_FAULT_PAGING_FILE"},{"import": 2139,"src": 6387,"name": "DEVICE_UNREACHABLE"},{"import": 2139,"src": 6388,"name": "PWD_TOO_RECENT"},{"import": 2139,"src": 6389,"name": "WAIT_NO_CHILDREN"},{"import": 2139,"src": 6390,"name": "ACCOUNT_RESTRICTION"},{"import": 2139,"src": 6391,"name": "DUPLICATE_PRIVILEGES"},{"import": 2139,"src": 6392,"name": "NO_DATA"},{"import": 2139,"src": 6393,"name": "BADKEY"},{"import": 2139,"src": 6394,"name": "PROCESS_IN_JOB"},{"import": 2139,"src": 6395,"name": "INVALID_TOKEN"},{"import": 2139,"src": 6396,"name": "THREAD_MODE_NOT_BACKGROUND"},{"import": 2139,"src": 6397,"name": "CACHE_PAGE_LOCKED"},{"import": 2139,"src": 6398,"name": "CANNOT_OPEN_PROFILE"},{"import": 2139,"src": 6399,"name": "INVALID_HANDLE_STATE"},{"import": 2139,"src": 6400,"name": "NOT_ENOUGH_MEMORY","kind": "const","type": 843,"value": null},{"import": 2139,"src": 6401,"name": "SERVICE_NOTIFY_CLIENT_LAGGING"},{"import": 2139,"src": 6402,"name": "RPC_S_MAX_CALLS_TOO_SMALL"},{"import": 2139,"src": 6403,"name": "STOPPED_ON_SYMLINK"},{"import": 2139,"src": 6404,"name": "INVALID_HANDLE","kind": "const","type": 843,"value": null},{"import": 2139,"src": 6405,"name": "NESTING_NOT_ALLOWED"},{"import": 2139,"src": 6406,"name": "INVALID_TIME"},{"import": 2139,"src": 6407,"name": "LOGON_TYPE_NOT_GRANTED"},{"import": 2139,"src": 6408,"name": "NO_EVENT_PAIR"},{"import": 2139,"src": 6409,"name": "INVALID_SERVICE_ACCOUNT"},{"import": 2139,"src": 6410,"name": "PATCH_PACKAGE_OPEN_FAILED"},{"import": 2139,"src": 6411,"name": "SYSTEM_IMAGE_BAD_SIGNATURE"},{"import": 2139,"src": 6412,"name": "RPC_S_SERVER_TOO_BUSY"},{"import": 2139,"src": 6413,"name": "LAST_ADMIN"},{"import": 2139,"src": 6414,"name": "PNP_IRQ_TRANSLATION_FAILED"},{"import": 2139,"src": 6415,"name": "SHUTDOWN_USERS_LOGGED_ON"},{"import": 2139,"src": 6416,"name": "BAD_EXE_FORMAT"},{"import": 2139,"src": 6417,"name": "EPT_S_CANT_PERFORM_OP"},{"import": 2139,"src": 6418,"name": "RPC_S_INVALID_OBJECT"},{"import": 2139,"src": 6419,"name": "FILE_SYSTEM_LIMITATION"},{"import": 2139,"src": 6420,"name": "PRIMARY_TRANSPORT_CONNECT_FAILED"},{"import": 2139,"src": 6421,"name": "NTLM_BLOCKED"},{"import": 2139,"src": 6422,"name": "PRINTER_HAS_JOBS_QUEUED"},{"import": 2139,"src": 6423,"name": "ADDRESS_NOT_ASSOCIATED"},{"import": 2139,"src": 6424,"name": "INVALID_PASSWORD"},{"import": 2139,"src": 6425,"name": "SESSION_CREDENTIAL_CONFLICT"},{"import": 2139,"src": 6426,"name": "CONNECTION_UNAVAIL"},{"import": 2139,"src": 6427,"name": "INVALID_STACKSEG"},{"import": 2139,"src": 6428,"name": "CANCEL_VIOLATION"},{"import": 2139,"src": 6429,"name": "NOT_LOCKED"},{"import": 2139,"src": 6430,"name": "RPC_S_NOT_RPC_ERROR"},{"import": 2139,"src": 6431,"name": "STACK_OVERFLOW_READ"},{"import": 2139,"src": 6432,"name": "RPC_S_INVALID_NET_ADDR"},{"import": 2139,"src": 6433,"name": "GROUP_EXISTS"},{"import": 2139,"src": 6434,"name": "EPT_S_INVALID_ENTRY"},{"import": 2139,"src": 6435,"name": "IS_JOIN_TARGET"},{"import": 2139,"src": 6436,"name": "INVALID_EVENTNAME"},{"import": 2139,"src": 6437,"name": "NOT_AUTHENTICATED"},{"import": 2139,"src": 6438,"name": "INVALID_EVENT_COUNT"},{"import": 2139,"src": 6439,"name": "THREAD_MODE_ALREADY_BACKGROUND"},{"import": 2139,"src": 6440,"name": "NO_SUCH_ALIAS"},{"import": 2139,"src": 6441,"name": "ACCOUNT_DISABLED"},{"import": 2139,"src": 6442,"name": "BAD_PIPE"},{"import": 2139,"src": 6443,"name": "NOT_OWNER"},{"import": 2139,"src": 6444,"name": "INVALID_PLUGPLAY_DEVICE_PATH"},{"import": 2139,"src": 6445,"name": "INSTALL_LOG_FAILURE"},{"import": 2139,"src": 6446,"name": "RPC_X_SS_CHAR_TRANS_OPEN_FAIL"},{"import": 2139,"src": 6447,"name": "ASSERTION_FAILURE"},{"import": 2139,"src": 6448,"name": "NO_RANGES_PROCESSED"},{"import": 2139,"src": 6449,"name": "CALLBACK_POP_STACK"},{"import": 2139,"src": 6450,"name": "RPC_S_NAME_SERVICE_UNAVAILABLE"},{"import": 2139,"src": 6451,"name": "PAGE_FAULT_GUARD_PAGE"},{"import": 2139,"src": 6452,"name": "CIRCULAR_DEPENDENCY"},{"import": 2139,"src": 6453,"name": "INVALID_ICON_HANDLE"},{"import": 2139,"src": 6454,"name": "SWAPERROR"},{"import": 2139,"src": 6455,"name": "SOURCE_ELEMENT_EMPTY"},{"import": 2139,"src": 6456,"name": "DUPLICATE_TAG"},{"import": 2139,"src": 6457,"name": "BUFFER_OVERFLOW"},{"import": 2139,"src": 6458,"name": "RPC_S_UUID_NO_ADDRESS"},{"import": 2139,"src": 6459,"name": "SERVICE_NO_THREAD"},{"import": 2139,"src": 6460,"name": "TIME_SKEW"},{"import": 2139,"src": 6461,"name": "INSTALL_FAILURE"},{"import": 2139,"src": 6462,"name": "PROCESS_IS_PROTECTED"},{"import": 2139,"src": 6463,"name": "DESTINATION_ELEMENT_FULL"},{"import": 2139,"src": 6464,"name": "RPC_X_WRONG_PIPE_ORDER"},{"import": 2139,"src": 6465,"name": "PRINTER_DRIVER_DOWNLOAD_NEEDED"},{"import": 2139,"src": 6466,"name": "RPC_S_INVALID_TIMEOUT"},{"import": 2139,"src": 6467,"name": "EAS_NOT_SUPPORTED"},{"import": 2139,"src": 6468,"name": "TRUST_FAILURE"},{"import": 2139,"src": 6469,"name": "IOPL_NOT_ENABLED"},{"import": 2139,"src": 6470,"name": "RPC_S_INVALID_RPC_PROTSEQ"},{"import": 2139,"src": 6471,"name": "PATCH_REMOVAL_UNSUPPORTED"},{"import": 2139,"src": 6472,"name": "INVALID_SERVICE_LOCK"},{"import": 2139,"src": 6473,"name": "ABANDON_HIBERFILE"},{"import": 2139,"src": 6474,"name": "PATCH_MANAGED_ADVERTISED_PRODUCT"},{"import": 2139,"src": 6475,"name": "SERVICE_NEVER_STARTED"},{"import": 2139,"src": 6476,"name": "ARBITRATION_UNHANDLED"},{"import": 2139,"src": 6477,"name": "NOT_LOGGED_ON"},{"import": 2139,"src": 6478,"name": "RPC_S_NO_CALL_ACTIVE"},{"import": 2139,"src": 6479,"name": "EXE_CANNOT_MODIFY_SIGNED_BINARY"},{"import": 2139,"src": 6480,"name": "HOOK_TYPE_NOT_ALLOWED"},{"import": 2139,"src": 6481,"name": "RESOURCE_LANG_NOT_FOUND"},{"import": 2139,"src": 6482,"name": "FAIL_NOACTION_REBOOT"},{"import": 2139,"src": 6483,"name": "VOLUME_MOUNTED"},{"import": 2139,"src": 6484,"name": "PNP_TRANSLATION_FAILED"},{"import": 2139,"src": 6485,"name": "DOWNGRADE_DETECTED"},{"import": 2139,"src": 6486,"name": "INVALID_SID"},{"import": 2139,"src": 6487,"name": "DEVICE_ALREADY_REMEMBERED"},{"import": 2139,"src": 6488,"name": "UNKNOWN_REVISION"},{"import": 2139,"src": 6489,"name": "INVALID_MODULETYPE"},{"import": 2139,"src": 6490,"name": "MORE_DATA"},{"import": 2139,"src": 6491,"name": "MESSAGE_SYNC_ONLY"},{"import": 2139,"src": 6492,"name": "SYSTEM_PROCESS_TERMINATED"},{"import": 2139,"src": 6493,"name": "INSTALL_PACKAGE_REJECTED"},{"import": 2139,"src": 6494,"name": "IMAGE_AT_DIFFERENT_BASE"},{"import": 2139,"src": 6495,"name": "RPC_S_COOKIE_AUTH_FAILED"},{"import": 2139,"src": 6496,"name": "IO_REISSUE_AS_CACHED"},{"import": 2139,"src": 6497,"name": "CURRENT_DIRECTORY"},{"import": 2139,"src": 6498,"name": "SERVICE_DEPENDENCY_DELETED"},{"import": 2139,"src": 6499,"name": "BAD_DRIVER"},{"import": 2139,"src": 6500,"name": "INVALID_PRIORITY"},{"import": 2139,"src": 6501,"name": "FILE_EXISTS","kind": "const","type": 843,"value": null},{"import": 2139,"src": 6502,"name": "NO_SYSTEM_MENU"},{"import": 2139,"src": 6503,"name": "TIMEOUT"},{"import": 2139,"src": 6504,"name": "SIGNAL_REFUSED"},{"import": 2139,"src": 6505,"name": "FT_READ_RECOVERY_FROM_BACKUP"},{"import": 2139,"src": 6506,"name": "KM_DRIVER_BLOCKED"},{"import": 2139,"src": 6507,"name": "NOT_GUI_PROCESS"},{"import": 2139,"src": 6508,"name": "CORRUPT_LOG_CLEARED"},{"import": 2139,"src": 6509,"name": "RPC_S_OUT_OF_RESOURCES"},{"import": 2139,"src": 6510,"name": "OUTOFMEMORY"},{"import": 2139,"src": 6511,"name": "INVALID_DRIVE"},{"import": 2139,"src": 6512,"name": "NO_SUCH_DOMAIN"},{"import": 2139,"src": 6513,"name": "FILENAME_EXCED_RANGE","kind": "const","type": 843,"value": null},{"import": 2139,"src": 6514,"name": "ILLEGAL_FLOAT_CONTEXT"},{"import": 2139,"src": 6515,"name": "RPC_X_NULL_REF_POINTER"},{"import": 2139,"src": 6516,"name": "FILE_INVALID"},{"import": 2139,"src": 6517,"name": "INVALID_DWP_HANDLE"},{"import": 2139,"src": 6518,"name": "PRINTER_DRIVER_PACKAGE_IN_USE"},{"import": 2139,"src": 6519,"name": "SYNC_FOREGROUND_REFRESH_REQUIRED"},{"import": 2139,"src": 6520,"name": "NO_SUCH_MEMBER"},{"import": 2139,"src": 6521,"name": "SEM_IS_SET"},{"import": 2139,"src": 6522,"name": "COLORSPACE_MISMATCH"},{"import": 2139,"src": 6523,"name": "THREAD_WAS_SUSPENDED"},{"import": 2139,"src": 6524,"name": "CLASS_HAS_WINDOWS"},{"import": 2139,"src": 6525,"name": "REPLY_MESSAGE_MISMATCH"},{"import": 2139,"src": 6526,"name": "SETMARK_DETECTED"},{"import": 2139,"src": 6527,"name": "FLOAT_MULTIPLE_FAULTS"},{"import": 2139,"src": 6528,"name": "TOO_MANY_CMDS"},{"import": 2139,"src": 6529,"name": "NOTIFY_ENUM_DIR"},{"import": 2139,"src": 6530,"name": "PAGED_SYSTEM_RESOURCES"},{"import": 2139,"src": 6531,"name": "NOT_CONNECTED"},{"import": 2139,"src": 6532,"name": "FUNCTION_FAILED"},{"import": 2139,"src": 6533,"name": "RPC_S_PROTSEQ_NOT_FOUND"},{"import": 2139,"src": 6534,"name": "INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE"},{"import": 2139,"src": 6535,"name": "RPC_S_WRONG_KIND_OF_BINDING"},{"import": 2139,"src": 6536,"name": "NO_SCROLLBARS"},{"import": 2139,"src": 6537,"name": "INVALID_FLAGS"},{"import": 2139,"src": 6538,"name": "DIRECTORY"},{"import": 2139,"src": 6539,"name": "REMOTE_SESSION_LIMIT_EXCEEDED"},{"import": 2139,"src": 6540,"name": "INDEX_ABSENT"},{"import": 2139,"src": 6541,"name": "DEBUGGER_INACTIVE"},{"import": 2139,"src": 6542,"name": "ADDRESS_ALREADY_ASSOCIATED"},{"import": 2139,"src": 6543,"name": "SHUTDOWN_IN_PROGRESS"},{"import": 2139,"src": 6544,"name": "MEMBER_IN_GROUP"},{"import": 2139,"src": 6545,"name": "INVALID_FIELD"},{"import": 2139,"src": 6546,"name": "RPC_S_INVALID_BINDING"},{"import": 2139,"src": 6547,"name": "RPC_S_INVALID_STRING_UUID"},{"import": 2139,"src": 6548,"name": "IS_SUBST_TARGET"},{"import": 2139,"src": 6549,"name": "NO_SUCH_LOGON_SESSION"},{"import": 2139,"src": 6550,"name": "SECURITY_STREAM_IS_INCONSISTENT"},{"import": 2139,"src": 6551,"name": "RPC_S_NO_INTERFACES"},{"import": 2139,"src": 6552,"name": "PRINT_MONITOR_IN_USE"},{"import": 2139,"src": 6553,"name": "BIOS_FAILED_TO_CONNECT_INTERRUPT"},{"import": 2139,"src": 6554,"name": "INVALID_ACE_CONDITION"},{"import": 2139,"src": 6555,"name": "CANTOPEN"},{"import": 2139,"src": 6556,"name": "DS_VERSION_CHECK_FAILURE"},{"import": 2139,"src": 6557,"name": "REVISION_MISMATCH"},{"import": 2139,"src": 6558,"name": "PRODUCT_VERSION"},{"import": 2139,"src": 6559,"name": "INVALID_SIGNAL_NUMBER"},{"import": 2139,"src": 6560,"name": "DISK_TOO_FRAGMENTED"},{"import": 2139,"src": 6561,"name": "FLOPPY_ID_MARK_NOT_FOUND"},{"import": 2139,"src": 6562,"name": "NO_SUCH_PACKAGE"},{"import": 2139,"src": 6563,"name": "INVALID_COMMAND_LINE"},{"import": 2139,"src": 6564,"name": "PREDEFINED_HANDLE"},{"import": 2139,"src": 6565,"name": "CLIPBOARD_NOT_OPEN"},{"import": 2139,"src": 6566,"name": "DEVICE_NO_RESOURCES"},{"import": 2139,"src": 6567,"name": "PROCESS_NOT_IN_JOB"},{"import": 2139,"src": 6568,"name": "NO_MORE_DEVICES"},{"import": 2139,"src": 6569,"name": "SUBST_TO_JOIN"},{"import": 2139,"src": 6570,"name": "DISK_RESOURCES_EXHAUSTED"},{"import": 2139,"src": 6571,"name": "NOTHING_TO_TERMINATE"},{"import": 2139,"src": 6572,"name": "INVALID_TASK_NAME"},{"import": 2139,"src": 6573,"name": "NO_SUCH_USER"},{"import": 2139,"src": 6574,"name": "FILE_CHECKED_OUT"},{"import": 2139,"src": 6575,"name": "ATOMIC_LOCKS_NOT_SUPPORTED"},{"import": 2139,"src": 6576,"name": "ACCOUNT_LOCKED_OUT"},{"import": 2139,"src": 6577,"name": "NOT_CAPABLE"},{"import": 2139,"src": 6578,"name": "BAD_THREADID_ADDR"},{"import": 2170,"src": 6579,"name": "NtClose"},{"import": 2170,"src": 6580,"name": "NtCreateFile"},{"import": 2170,"src": 6581,"name": "RtlFreeUnicodeString"},{"import": 2170,"src": 6582,"name": "RtlCaptureStackBackTrace","kind": "const","type": 2216,"value": 1500},{"import": 2170,"src": 6583,"name": "RtlDosPathNameToNtPathName_U"},{"import": 2170,"src": 6584,"name": "NtQueryDirectoryFile"},{"import": 2170,"src": 6585,"name": "NtQueryInformationFile"},{"import": 2172,"src": 6586,"name": "CreateIoCompletionPort","kind": "const","type": 2217,"value": 1501},{"import": 2172,"src": 6587,"name": "WriteFile","kind": "const","type": 2218,"value": 1502},{"import": 2172,"src": 6588,"name": "HeapDestroy"},{"import": 2172,"src": 6589,"name": "CloseHandle","kind": "const","type": 2219,"value": 1503},{"import": 2172,"src": 6590,"name": "GetEnvironmentStringsW"},{"import": 2172,"src": 6591,"name": "VirtualFree","kind": "const","type": 2220,"value": 1504},{"import": 2172,"src": 6592,"name": "EnterCriticalSection","kind": "const","type": 2221,"value": 1505},{"import": 2172,"src": 6593,"name": "GetExitCodeProcess"},{"import": 2172,"src": 6594,"name": "SetHandleInformation"},{"import": 2172,"src": 6595,"name": "WaitForSingleObject","kind": "const","type": 2222,"value": 1506},{"import": 2172,"src": 6596,"name": "Sleep"},{"import": 2172,"src": 6597,"name": "GetConsoleMode","kind": "const","type": 2223,"value": 1507},{"import": 2172,"src": 6598,"name": "FindFirstFileW"},{"import": 2172,"src": 6599,"name": "GetFinalPathNameByHandleW"},{"import": 2172,"src": 6600,"name": "GetConsoleScreenBufferInfo","kind": "const","type": 2224,"value": 1508},{"import": 2172,"src": 6601,"name": "VirtualAlloc","kind": "const","type": 2225,"value": 1509},{"import": 2172,"src": 6602,"name": "InitializeCriticalSection","kind": "const","type": 2221,"value": 1510},{"import": 2172,"src": 6603,"name": "AddVectoredExceptionHandler","kind": "const","type": 2226,"value": 1511},{"import": 2172,"src": 6604,"name": "CreateSymbolicLinkW"},{"import": 2172,"src": 6605,"name": "MoveFileExW"},{"import": 2172,"src": 6606,"name": "GetSystemInfo","kind": "const","type": 2227,"value": 1512},{"import": 2172,"src": 6607,"name": "ExitProcess","kind": "const","type": 2228,"value": 1513},{"import": 2172,"src": 6608,"name": "ReadFile","kind": "const","type": 2229,"value": 1514},{"import": 2172,"src": 6609,"name": "RemoveVectoredExceptionHandler","kind": "const","type": 2230,"value": 1515},{"import": 2172,"src": 6610,"name": "GetCurrentDirectoryW","kind": "const","type": 2231,"value": 1516},{"import": 2172,"src": 6611,"name": "TlsAlloc"},{"import": 2172,"src": 6612,"name": "CreatePipe"},{"import": 2172,"src": 6613,"name": "HeapAlloc","kind": "const","type": 2232,"value": 1517},{"import": 2172,"src": 6614,"name": "WriteFileEx"},{"import": 2172,"src": 6615,"name": "HeapCreate"},{"import": 2172,"src": 6616,"name": "RemoveDirectoryW"},{"import": 2172,"src": 6617,"name": "GetFileAttributesW"},{"import": 2172,"src": 6618,"name": "InitOnceExecuteOnce","kind": "const","type": 2233,"value": 1518},{"import": 2172,"src": 6619,"name": "FormatMessageW","kind": "const","type": 2234,"value": 1519},{"import": 2172,"src": 6620,"name": "HeapValidate"},{"import": 2172,"src": 6621,"name": "GetModuleHandleW","kind": "const","type": 2235,"value": 1520},{"import": 2172,"src": 6622,"name": "FreeLibrary"},{"import": 2172,"src": 6623,"name": "FreeEnvironmentStringsW"},{"import": 2172,"src": 6624,"name": "QueryPerformanceFrequency","kind": "const","type": 1921,"value": 1521},{"import": 2172,"src": 6625,"name": "GetModuleFileNameW","kind": "const","type": 2236,"value": 1522},{"import": 2172,"src": 6626,"name": "GetOverlappedResult"},{"import": 2172,"src": 6627,"name": "GetCurrentThread"},{"import": 2172,"src": 6628,"name": "HeapCompact"},{"import": 2172,"src": 6629,"name": "CreateThread","kind": "const","type": 2237,"value": 1523},{"import": 2172,"src": 6630,"name": "FindNextFileW"},{"import": 2172,"src": 6631,"name": "GetProcessHeap","kind": "const","type": 2238,"value": 1524},{"import": 2172,"src": 6632,"name": "HeapSummary"},{"import": 2172,"src": 6633,"name": "TerminateProcess"},{"import": 2172,"src": 6634,"name": "HeapReAlloc"},{"import": 2172,"src": 6635,"name": "QueryPerformanceCounter","kind": "const","type": 1921,"value": 1525},{"import": 2172,"src": 6636,"name": "PostQueuedCompletionStatus","kind": "const","type": 2239,"value": 1526},{"import": 2172,"src": 6637,"name": "GetCurrentThreadId"},{"import": 2172,"src": 6638,"name": "LoadLibraryW"},{"import": 2172,"src": 6639,"name": "ReadDirectoryChangesW"},{"import": 2172,"src": 6640,"name": "CancelIoEx"},{"import": 2172,"src": 6641,"name": "FindClose"},{"import": 2172,"src": 6642,"name": "CreateDirectoryW"},{"import": 2172,"src": 6643,"name": "GetFileInformationByHandleEx","kind": "const","type": 2240,"value": 1527},{"import": 2172,"src": 6644,"name": "SetConsoleTextAttribute","kind": "const","type": 2241,"value": 1528},{"import": 2172,"src": 6645,"name": "TlsFree"},{"import": 2172,"src": 6646,"name": "GetProcAddress","kind": "const","type": 2242,"value": 1529},{"import": 2172,"src": 6647,"name": "HeapSize"},{"import": 2172,"src": 6648,"name": "GetLastError","kind": "const","type": 2243,"value": 1530},{"import": 2172,"src": 6649,"name": "HeapFree","kind": "const","type": 2244,"value": 1531},{"import": 2172,"src": 6650,"name": "LeaveCriticalSection","kind": "const","type": 2221,"value": 1532},{"import": 2172,"src": 6651,"name": "SetFilePointerEx","kind": "const","type": 2245,"value": 1533},{"import": 2172,"src": 6652,"name": "DeleteCriticalSection"},{"import": 2172,"src": 6653,"name": "GetQueuedCompletionStatus"},{"import": 2172,"src": 6654,"name": "GetStdHandle","kind": "const","type": 2246,"value": 1534},{"import": 2172,"src": 6655,"name": "GetSystemTimeAsFileTime"},{"import": 2172,"src": 6656,"name": "GetCommandLineA"},{"import": 2172,"src": 6657,"name": "DeleteFileW"},{"import": 2172,"src": 6658,"name": "GetEnvironmentVariableW","kind": "const","type": 2247,"value": 1535},{"import": 2172,"src": 6659,"name": "SetFileTime"},{"import": 2172,"src": 6660,"name": "CreateFileW","kind": "const","type": 2248,"value": 1536},{"import": 2172,"src": 6661,"name": "GetFileSizeEx","kind": "const","type": 2249,"value": 1537},{"import": 2172,"src": 6662,"name": "GetFileInformationByHandle"},{"import": 2172,"src": 6663,"name": "DuplicateHandle"},{"import": 2172,"src": 6664,"name": "CreateProcessW"},{"import": 957,"src": 6665,"name": "FnDecl","kind": "const","type": 778,"value": 2251},{"import": 2124,"src": 6666,"name": "getOption"},{"import": 2124,"src": 6667,"name": "fromHandle"},{"import": 2124,"src": 6668,"name": "close"},{"import": 2124,"src": 6669,"name": "listen"},{"import": 2124,"src": 6670,"name": "accept"},{"import": 2124,"src": 6671,"name": "recvmsg"},{"import": 2124,"src": 6672,"name": "bind"},{"import": 2124,"src": 6673,"name": "new"},{"import": 2124,"src": 457,"name": "socketOption","kind": "const","type": 2252,"value": 1538},{"import": 2124,"src": 6674,"name": "sendmsg"},{"import": 2124,"src": 6675,"name": "getHandle"},{"import": 2124,"src": 6676,"name": "connect"},{"import": 2124,"src": 6677,"name": "getTokenMask"},{"import": 2124,"src": 6678,"name": "Linger"},{"import": 2124,"src": 6679,"name": "setOption"},{"import": 2124,"src": 6680,"name": "getConnectError"},{"import": 2124,"src": 6681,"name": "transfer"},{"import": 2124,"src": 6682,"name": "Timeval","kind": "const","type": 778,"value": 850},{"import": 957,"src": 6683,"name": "Inline","kind": "const","type": 778,"value": 2262}],"fns": [{"src": 0,"type": 0},{"src": 1,"type": 1},{"src": 2,"type": 2},{"src": 3,"type": 3},{"src": 4,"type": 4},{"src": 5,"type": 5},{"src": 6,"type": 6},{"src": 7,"type": 7},{"src": 8,"type": 8},{"src": 9,"type": 9},{"src": 10,"type": 10},{"src": 11,"type": 11},{"src": 12,"type": 12},{"src": 13,"type": 13},{"src": 14,"type": 8},{"src": 15,"type": 14},{"src": 16,"type": 15},{"src": 17,"type": 16},{"src": 18,"type": 17},{"src": 19,"type": 18},{"src": 20,"type": 19},{"src": 21,"type": 20},{"src": 22,"type": 21},{"src": 23,"type": 22},{"src": 24,"type": 23},{"src": 25,"type": 24},{"src": 26,"type": 25},{"src": 27,"type": 26},{"src": 28,"type": 27},{"src": 29,"type": 28},{"src": 30,"type": 29},{"src": 31,"type": 30},{"src": 32,"type": 31},{"src": 31,"type": 32},{"src": 32,"type": 33},{"src": 33,"type": 34},{"src": 34,"type": 35},{"src": 35,"type": 36},{"src": 36,"type": 37},{"src": 37,"type": 38},{"src": 38,"type": 39},{"src": 39,"type": 40},{"src": 40,"type": 41},{"src": 41,"type": 42},{"src": 42,"type": 43},{"src": 43,"type": 44},{"src": 43,"type": 44},{"src": 44,"type": 45},{"src": 45,"type": 46},{"src": 46,"type": 47},{"src": 47,"type": 48},{"src": 48,"type": 49},{"src": 49,"type": 50},{"src": 50,"type": 51},{"src": 51,"type": 52},{"src": 52,"type": 53},{"src": 53,"type": 54},{"src": 54,"type": 55},{"src": 55,"type": 56},{"src": 56,"type": 57},{"src": 57,"type": 58},{"src": 58,"type": 59},{"src": 59,"type": 60},{"src": 60,"type": 61},{"src": 61,"type": 62},{"src": 62,"type": 63},{"src": 63,"type": 64},{"src": 44,"type": 65},{"src": 64,"type": 66},{"src": 65,"type": 67},{"src": 53,"type": 68},{"src": 66,"type": 69},{"src": 31,"type": 70},{"src": 27,"type": 71},{"src": 28,"type": 72},{"src": 67,"type": 73},{"src": 68,"type": 27},{"src": 59,"type": 74},{"src": 53,"type": 75},{"src": 69,"type": 76},{"src": 44,"type": 77},{"src": 70,"type": 78},{"src": 71,"type": 79},{"src": 72,"type": 80},{"src": 40,"type": 81},{"src": 41,"type": 82},{"src": 37,"type": 83},{"src": 38,"type": 84},{"src": 39,"type": 85},{"src": 42,"type": 86},{"src": 73,"type": 87},{"src": 53,"type": 88},{"src": 74,"type": 89},{"src": 75,"type": 90},{"src": 44,"type": 91},{"src": 72,"type": 92},{"src": 44,"type": 93},{"src": 76,"type": 94},{"src": 72,"type": 95},{"src": 46,"type": 96},{"src": 45,"type": 97},{"src": 40,"type": 98},{"src": 41,"type": 99},{"src": 37,"type": 100},{"src": 38,"type": 101},{"src": 39,"type": 102},{"src": 42,"type": 103},{"src": 77,"type": 104},{"src": 40,"type": 105},{"src": 41,"type": 106},{"src": 37,"type": 107},{"src": 38,"type": 108},{"src": 39,"type": 109},{"src": 42,"type": 110},{"src": 73,"type": 111},{"src": 72,"type": 112},{"src": 41,"type": 113},{"src": 37,"type": 114},{"src": 38,"type": 115},{"src": 39,"type": 116},{"src": 42,"type": 117},{"src": 44,"type": 118},{"src": 73,"type": 119},{"src": 8,"type": 8},{"src": 78,"type": 120},{"src": 79,"type": 121},{"src": 67,"type": 122},{"src": 80,"type": 123},{"src": 81,"type": 124},{"src": 82,"type": 125},{"src": 8,"type": 126},{"src": 83,"type": 127},{"src": 8,"type": 128},{"src": 8,"type": 126},{"src": 8,"type": 128},{"src": 84,"type": 129},{"src": 85,"type": 130},{"src": 86,"type": 131},{"src": 87,"type": 132},{"src": 8,"type": 133},{"src": 8,"type": 126},{"src": 8,"type": 126},{"src": 8,"type": 134},{"src": 8,"type": 126},{"src": 88,"type": 135},{"src": 89,"type": 136},{"src": 90,"type": 137},{"src": 91,"type": 8},{"src": 8,"type": 138},{"src": 8,"type": 134},{"src": 8,"type": 8},{"src": 92,"type": 139},{"src": 93,"type": 140},{"src": 94,"type": 141},{"src": 95,"type": 142},{"src": 96,"type": 143},{"src": 97,"type": 144},{"src": 98,"type": 145},{"src": 99,"type": 146},{"src": 100,"type": 147},{"src": 101,"type": 148},{"src": 102,"type": 122},{"src": 103,"type": 149},{"src": 104,"type": 150},{"src": 53,"type": 151},{"src": 105,"type": 152},{"src": 72,"type": 153},{"src": 106,"type": 27},{"src": 107,"type": 154},{"src": 108,"type": 155},{"src": 109,"type": 40},{"src": 110,"type": 39},{"src": 111,"type": 156},{"src": 112,"type": 28},{"src": 113,"type": 28},{"src": 114,"type": 54},{"src": 115,"type": 157},{"src": 116,"type": 158},{"src": 117,"type": 61},{"src": 118,"type": 159},{"src": 119,"type": 160},{"src": 120,"type": 156},{"src": 54,"type": 161},{"src": 121,"type": 162},{"src": 122,"type": 163},{"src": 123,"type": 164},{"src": 114,"type": 68},{"src": 124,"type": 72},{"src": 68,"type": 72},{"src": 114,"type": 75},{"src": 109,"type": 85},{"src": 110,"type": 84},{"src": 60,"type": 165},{"src": 114,"type": 88},{"src": 125,"type": 166},{"src": 109,"type": 102},{"src": 110,"type": 101},{"src": 109,"type": 109},{"src": 110,"type": 108},{"src": 60,"type": 167},{"src": 109,"type": 116},{"src": 110,"type": 115},{"src": 60,"type": 168},{"src": 15,"type": 14},{"src": 126,"type": 169},{"src": 127,"type": 170},{"src": 128,"type": 171},{"src": 15,"type": 172},{"src": 129,"type": 171},{"src": 130,"type": 173},{"src": 15,"type": 174},{"src": 15,"type": 172},{"src": 15,"type": 174},{"src": 131,"type": 130},{"src": 15,"type": 175},{"src": 15,"type": 172},{"src": 15,"type": 172},{"src": 15,"type": 176},{"src": 15,"type": 172},{"src": 132,"type": 177},{"src": 15,"type": 178},{"src": 15,"type": 176},{"src": 15,"type": 14},{"src": 133,"type": 179},{"src": 134,"type": 180},{"src": 135,"type": 181},{"src": 136,"type": 182},{"src": 137,"type": 183},{"src": 138,"type": 184},{"src": 139,"type": 185},{"src": 140,"type": 186},{"src": 114,"type": 187},{"src": 141,"type": 188},{"src": 142,"type": 147},{"src": 143,"type": 189},{"src": 144,"type": 190},{"src": 145,"type": 122},{"src": 146,"type": 191},{"src": 147,"type": 192},{"src": 114,"type": 151},{"src": 148,"type": 152},{"src": 149,"type": 193},{"src": 150,"type": 194},{"src": 114,"type": 195},{"src": 59,"type": 196},{"src": 151,"type": 197},{"src": 152,"type": 198},{"src": 153,"type": 199},{"src": 154,"type": 200},{"src": 155,"type": 201},{"src": 156,"type": 202},{"src": 157,"type": 203},{"src": 158,"type": 204},{"src": 114,"type": 205},{"src": 59,"type": 206},{"src": 117,"type": 165},{"src": 114,"type": 54},{"src": 114,"type": 207},{"src": 59,"type": 208},{"src": 117,"type": 167},{"src": 114,"type": 209},{"src": 59,"type": 210},{"src": 117,"type": 168},{"src": 96,"type": 143},{"src": 159,"type": 211},{"src": 160,"type": 212},{"src": 161,"type": 147},{"src": 162,"type": 213},{"src": 72,"type": 214},{"src": 37,"type": 215},{"src": 38,"type": 216},{"src": 39,"type": 217},{"src": 163,"type": 218},{"src": 164,"type": 156},{"src": 165,"type": 219},{"src": 166,"type": 220},{"src": 167,"type": 221},{"src": 40,"type": 222},{"src": 41,"type": 223},{"src": 42,"type": 224},{"src": 73,"type": 225},{"src": 53,"type": 226},{"src": 59,"type": 227},{"src": 168,"type": 228},{"src": 169,"type": 229},{"src": 170,"type": 230},{"src": 171,"type": 231},{"src": 172,"type": 232},{"src": 73,"type": 233},{"src": 173,"type": 234},{"src": 174,"type": 234},{"src": 96,"type": 235},{"src": 96,"type": 235},{"src": 96,"type": 143},{"src": 96,"type": 236},{"src": 96,"type": 235},{"src": 96,"type": 143},{"src": 175,"type": 237},{"src": 96,"type": 143},{"src": 96,"type": 236},{"src": 96,"type": 235},{"src": 96,"type": 235},{"src": 96,"type": 143},{"src": 96,"type": 143},{"src": 176,"type": 238},{"src": 177,"type": 239},{"src": 178,"type": 240},{"src": 8,"type": 241},{"src": 179,"type": 242},{"src": 114,"type": 195},{"src": 114,"type": 205},{"src": 114,"type": 207},{"src": 114,"type": 209},{"src": 137,"type": 183},{"src": 109,"type": 217},{"src": 180,"type": 243},{"src": 181,"type": 244},{"src": 110,"type": 216},{"src": 60,"type": 245},{"src": 114,"type": 226},{"src": 182,"type": 246},{"src": 183,"type": 247},{"src": 183,"type": 247},{"src": 137,"type": 183},{"src": 183,"type": 248},{"src": 183,"type": 247},{"src": 137,"type": 183},{"src": 67,"type": 249},{"src": 137,"type": 183},{"src": 183,"type": 248},{"src": 183,"type": 247},{"src": 183,"type": 247},{"src": 137,"type": 183},{"src": 137,"type": 183},{"src": 184,"type": 250},{"src": 185,"type": 251},{"src": 15,"type": 252},{"src": 114,"type": 226},{"src": 117,"type": 245},{"src": 186,"type": 253},{"src": 187,"type": 247},{"src": 187,"type": 247},{"src": 187,"type": 248},{"src": 187,"type": 247},{"src": 187,"type": 248},{"src": 187,"type": 247},{"src": 187,"type": 247},{"src": 96,"type": 254},{"src": 96,"type": 255},{"src": 29,"type": 256},{"src": 188,"type": 257},{"src": 188,"type": 258},{"src": 183,"type": 259},{"src": 137,"type": 183},{"src": 189,"type": 257},{"src": 189,"type": 258},{"src": 187,"type": 259},{"src": 190,"type": 260},{"src": 191,"type": 261},{"src": 188,"type": 262},{"src": 189,"type": 262},{"src": 192,"type": 3},{"src": 193,"type": 3},{"src": 194,"type": 263},{"src": 195,"type": 3},{"src": 196,"type": 3},{"src": 197,"type": 3},{"src": 198,"type": 3},{"src": 199,"type": 3},{"src": 200,"type": 3},{"src": 201,"type": 3},{"src": 202,"type": 3},{"src": 203,"type": 3},{"src": 204,"type": 3},{"src": 205,"type": 3},{"src": 206,"type": 3},{"src": 207,"type": 3},{"src": 208,"type": 264},{"src": 209,"type": 265},{"src": 210,"type": 266},{"src": 211,"type": 28},{"src": 212,"type": 1},{"src": 213,"type": 1},{"src": 214,"type": 1},{"src": 215,"type": 1},{"src": 216,"type": 1},{"src": 217,"type": 1},{"src": 218,"type": 1},{"src": 219,"type": 1},{"src": 220,"type": 1},{"src": 221,"type": 1},{"src": 222,"type": 1},{"src": 223,"type": 1},{"src": 224,"type": 1},{"src": 225,"type": 1},{"src": 226,"type": 1},{"src": 227,"type": 1},{"src": 228,"type": 1},{"src": 229,"type": 1},{"src": 230,"type": 1},{"src": 231,"type": 1},{"src": 232,"type": 1},{"src": 233,"type": 1},{"src": 234,"type": 1},{"src": 235,"type": 1},{"src": 236,"type": 1},{"src": 237,"type": 1},{"src": 238,"type": 11},{"src": 239,"type": 267},{"src": 240,"type": 268},{"src": 240,"type": 269},{"src": 241,"type": 270},{"src": 240,"type": 271},{"src": 242,"type": 272},{"src": 243,"type": 273},{"src": 242,"type": 274},{"src": 243,"type": 275},{"src": 242,"type": 276},{"src": 241,"type": 277},{"src": 244,"type": 278},{"src": 241,"type": 279},{"src": 244,"type": 280},{"src": 241,"type": 281},{"src": 245,"type": 282},{"src": 243,"type": 283},{"src": 245,"type": 284},{"src": 243,"type": 285},{"src": 245,"type": 286},{"src": 246,"type": 287},{"src": 241,"type": 288},{"src": 246,"type": 289},{"src": 241,"type": 290},{"src": 247,"type": 78},{"src": 247,"type": 291},{"src": 151,"type": 292},{"src": 248,"type": 293},{"src": 249,"type": 294},{"src": 250,"type": 295},{"src": 251,"type": 296},{"src": 251,"type": 297},{"src": 241,"type": 298},{"src": 241,"type": 299},{"src": 251,"type": 300},{"src": 241,"type": 301},{"src": 252,"type": 302},{"src": 253,"type": 303},{"src": 253,"type": 304},{"src": 241,"type": 305},{"src": 253,"type": 306},{"src": 254,"type": 307},{"src": 255,"type": 308},{"src": 256,"type": 309},{"src": 256,"type": 310},{"src": 257,"type": 309},{"src": 257,"type": 52},{"src": 258,"type": 311},{"src": 259,"type": 312},{"src": 260,"type": 313},{"src": 261,"type": 314},{"src": 262,"type": 315},{"src": 263,"type": 3},{"src": 264,"type": 316},{"src": 263,"type": 3},{"src": 260,"type": 317},{"src": 261,"type": 318},{"src": 260,"type": 319},{"src": 261,"type": 320},{"src": 265,"type": 321},{"src": 266,"type": 322},{"src": 267,"type": 321},{"src": 268,"type": 323},{"src": 269,"type": 324},{"src": 260,"type": 325},{"src": 270,"type": 326},{"src": 271,"type": 326},{"src": 272,"type": 326},{"src": 273,"type": 326},{"src": 274,"type": 326},{"src": 275,"type": 326},{"src": 276,"type": 326},{"src": 277,"type": 326},{"src": 266,"type": 327},{"src": 265,"type": 328},{"src": 278,"type": 329},{"src": 261,"type": 330},{"src": 279,"type": 331},{"src": 280,"type": 332},{"src": 241,"type": 333},{"src": 281,"type": 316},{"src": 282,"type": 334},{"src": 283,"type": 329},{"src": 266,"type": 335},{"src": 284,"type": 336},{"src": 285,"type": 337},{"src": 286,"type": 338},{"src": 287,"type": 337},{"src": 288,"type": 337},{"src": 289,"type": 339},{"src": 241,"type": 340},{"src": 290,"type": 337},{"src": 282,"type": 341},{"src": 291,"type": 337},{"src": 292,"type": 342},{"src": 293,"type": 343},{"src": 294,"type": 344},{"src": 295,"type": 345},{"src": 296,"type": 345},{"src": 297,"type": 343},{"src": 282,"type": 346},{"src": 298,"type": 343},{"src": 292,"type": 347},{"src": 293,"type": 348},{"src": 299,"type": 349},{"src": 300,"type": 350},{"src": 301,"type": 350},{"src": 297,"type": 348},{"src": 282,"type": 351},{"src": 298,"type": 348},{"src": 302,"type": 125},{"src": 303,"type": 352},{"src": 304,"type": 353},{"src": 305,"type": 354},{"src": 306,"type": 355},{"src": 307,"type": 356},{"src": 308,"type": 357},{"src": 309,"type": 358},{"src": 310,"type": 359},{"src": 311,"type": 360},{"src": 312,"type": 125},{"src": 313,"type": 361},{"src": 314,"type": 362},{"src": 315,"type": 363},{"src": 316,"type": 364},{"src": 317,"type": 365},{"src": 318,"type": 366},{"src": 260,"type": 367},{"src": 261,"type": 368},{"src": 319,"type": 369},{"src": 282,"type": 370},{"src": 266,"type": 371},{"src": 320,"type": 369},{"src": 282,"type": 370},{"src": 241,"type": 372},{"src": 321,"type": 373},{"src": 322,"type": 374},{"src": 323,"type": 375},{"src": 324,"type": 376},{"src": 325,"type": 377},{"src": 326,"type": 378},{"src": 327,"type": 379},{"src": 328,"type": 380},{"src": 329,"type": 381},{"src": 330,"type": 382},{"src": 331,"type": 383},{"src": 332,"type": 384},{"src": 333,"type": 385},{"src": 334,"type": 386},{"src": 335,"type": 387},{"src": 336,"type": 388},{"src": 337,"type": 389},{"src": 338,"type": 390},{"src": 339,"type": 391},{"src": 340,"type": 392},{"src": 341,"type": 393},{"src": 342,"type": 394},{"src": 343,"type": 395},{"src": 344,"type": 396},{"src": 345,"type": 397},{"src": 346,"type": 398},{"src": 329,"type": 399},{"src": 347,"type": 400},{"src": 348,"type": 401},{"src": 349,"type": 402},{"src": 350,"type": 403},{"src": 351,"type": 404},{"src": 352,"type": 395},{"src": 353,"type": 405},{"src": 354,"type": 406},{"src": 355,"type": 407},{"src": 356,"type": 408},{"src": 357,"type": 409},{"src": 358,"type": 410},{"src": 359,"type": 411},{"src": 360,"type": 412},{"src": 359,"type": 411},{"src": 361,"type": 413},{"src": 362,"type": 414},{"src": 363,"type": 415},{"src": 364,"type": 416},{"src": 365,"type": 408},{"src": 366,"type": 417},{"src": 367,"type": 418},{"src": 353,"type": 419},{"src": 354,"type": 420},{"src": 355,"type": 421},{"src": 358,"type": 422},{"src": 360,"type": 423},{"src": 362,"type": 424},{"src": 363,"type": 425},{"src": 364,"type": 426},{"src": 368,"type": 267},{"src": 369,"type": 427},{"src": 369,"type": 428},{"src": 369,"type": 429},{"src": 369,"type": 430},{"src": 369,"type": 431},{"src": 369,"type": 432},{"src": 369,"type": 433},{"src": 369,"type": 434},{"src": 369,"type": 435},{"src": 370,"type": 436},{"src": 371,"type": 308},{"src": 372,"type": 437},{"src": 372,"type": 438},{"src": 373,"type": 439},{"src": 374,"type": 440},{"src": 372,"type": 441},{"src": 372,"type": 442},{"src": 372,"type": 443},{"src": 372,"type": 444},{"src": 375,"type": 323},{"src": 372,"type": 445},{"src": 372,"type": 52},{"src": 375,"type": 326},{"src": 375,"type": 326},{"src": 375,"type": 326},{"src": 375,"type": 326},{"src": 375,"type": 326},{"src": 375,"type": 326},{"src": 375,"type": 326},{"src": 375,"type": 326},{"src": 372,"type": 78},{"src": 376,"type": 446},{"src": 377,"type": 447},{"src": 378,"type": 448},{"src": 369,"type": 449},{"src": 270,"type": 450},{"src": 379,"type": 451},{"src": 380,"type": 451},{"src": 381,"type": 125},{"src": 382,"type": 452},{"src": 383,"type": 446},{"src": 384,"type": 453},{"src": 265,"type": 454},{"src": 266,"type": 455},{"src": 268,"type": 456},{"src": 381,"type": 125},{"src": 382,"type": 457},{"src": 385,"type": 345},{"src": 268,"type": 458},{"src": 267,"type": 459},{"src": 381,"type": 125},{"src": 382,"type": 460},{"src": 386,"type": 345},{"src": 387,"type": 350},{"src": 269,"type": 461},{"src": 268,"type": 462},{"src": 268,"type": 462},{"src": 266,"type": 463},{"src": 388,"type": 3},{"src": 381,"type": 125},{"src": 382,"type": 464},{"src": 389,"type": 350},{"src": 390,"type": 352},{"src": 259,"type": 465},{"src": 260,"type": 466},{"src": 262,"type": 467},{"src": 391,"type": 352},{"src": 259,"type": 468},{"src": 260,"type": 469},{"src": 262,"type": 470},{"src": 392,"type": 353},{"src": 393,"type": 354},{"src": 394,"type": 355},{"src": 395,"type": 471},{"src": 396,"type": 125},{"src": 397,"type": 472},{"src": 398,"type": 473},{"src": 259,"type": 474},{"src": 260,"type": 475},{"src": 373,"type": 476},{"src": 399,"type": 477},{"src": 400,"type": 363},{"src": 401,"type": 364},{"src": 402,"type": 365},{"src": 403,"type": 366},{"src": 372,"type": 478},{"src": 372,"type": 479},{"src": 270,"type": 480},{"src": 381,"type": 125},{"src": 382,"type": 481},{"src": 381,"type": 125},{"src": 382,"type": 481},{"src": 404,"type": 482},{"src": 405,"type": 483},{"src": 406,"type": 484},{"src": 407,"type": 485},{"src": 408,"type": 486},{"src": 409,"type": 487},{"src": 410,"type": 488},{"src": 400,"type": 489},{"src": 411,"type": 490},{"src": 412,"type": 491},{"src": 413,"type": 492},{"src": 414,"type": 493},{"src": 415,"type": 494},{"src": 416,"type": 495},{"src": 417,"type": 496},{"src": 418,"type": 497},{"src": 419,"type": 498},{"src": 420,"type": 395},{"src": 421,"type": 499},{"src": 422,"type": 500},{"src": 423,"type": 501},{"src": 424,"type": 502},{"src": 425,"type": 395},{"src": 426,"type": 503},{"src": 427,"type": 504},{"src": 428,"type": 505},{"src": 428,"type": 505},{"src": 429,"type": 413},{"src": 430,"type": 503},{"src": 431,"type": 417},{"src": 432,"type": 506},{"src": 2,"type": 507},{"src": 2,"type": 508},{"src": 2,"type": 509},{"src": 2,"type": 510},{"src": 2,"type": 511},{"src": 2,"type": 512},{"src": 2,"type": 513},{"src": 2,"type": 514},{"src": 2,"type": 515},{"src": 433,"type": 516},{"src": 434,"type": 517},{"src": 435,"type": 518},{"src": 436,"type": 519},{"src": 437,"type": 520},{"src": 438,"type": 521},{"src": 266,"type": 522},{"src": 269,"type": 523},{"src": 266,"type": 522},{"src": 267,"type": 524},{"src": 439,"type": 525},{"src": 259,"type": 526},{"src": 260,"type": 527},{"src": 262,"type": 528},{"src": 440,"type": 529},{"src": 2,"type": 530},{"src": 375,"type": 450},{"src": 441,"type": 531},{"src": 442,"type": 125},{"src": 443,"type": 452},{"src": 372,"type": 532},{"src": 372,"type": 533},{"src": 375,"type": 456},{"src": 442,"type": 125},{"src": 443,"type": 457},{"src": 265,"type": 459},{"src": 375,"type": 458},{"src": 268,"type": 458},{"src": 442,"type": 125},{"src": 443,"type": 460},{"src": 265,"type": 534},{"src": 372,"type": 535},{"src": 372,"type": 536},{"src": 375,"type": 462},{"src": 375,"type": 462},{"src": 372,"type": 537},{"src": 444,"type": 3},{"src": 442,"type": 125},{"src": 443,"type": 464},{"src": 372,"type": 538},{"src": 373,"type": 539},{"src": 259,"type": 540},{"src": 260,"type": 541},{"src": 262,"type": 542},{"src": 372,"type": 543},{"src": 373,"type": 544},{"src": 445,"type": 78},{"src": 446,"type": 78},{"src": 447,"type": 545},{"src": 448,"type": 546},{"src": 449,"type": 547},{"src": 450,"type": 548},{"src": 449,"type": 549},{"src": 451,"type": 550},{"src": 372,"type": 551},{"src": 266,"type": 552},{"src": 269,"type": 553},{"src": 266,"type": 552},{"src": 267,"type": 554},{"src": 452,"type": 555},{"src": 171,"type": 556},{"src": 399,"type": 557},{"src": 453,"type": 558},{"src": 259,"type": 559},{"src": 260,"type": 560},{"src": 262,"type": 561},{"src": 191,"type": 562},{"src": 375,"type": 480},{"src": 442,"type": 125},{"src": 443,"type": 481},{"src": 442,"type": 125},{"src": 443,"type": 481},{"src": 399,"type": 563},{"src": 453,"type": 67},{"src": 454,"type": 564},{"src": 259,"type": 565},{"src": 260,"type": 566},{"src": 262,"type": 567},{"src": 455,"type": 568},{"src": 456,"type": 569},{"src": 440,"type": 570},{"src": 457,"type": 571},{"src": 457,"type": 572},{"src": 458,"type": 573},{"src": 459,"type": 574},{"src": 460,"type": 575},{"src": 461,"type": 576},{"src": 462,"type": 577},{"src": 463,"type": 578},{"src": 464,"type": 579},{"src": 463,"type": 580},{"src": 465,"type": 581},{"src": 466,"type": 582},{"src": 8,"type": 583},{"src": 8,"type": 584},{"src": 8,"type": 585},{"src": 8,"type": 586},{"src": 8,"type": 587},{"src": 8,"type": 588},{"src": 8,"type": 589},{"src": 8,"type": 590},{"src": 8,"type": 591},{"src": 467,"type": 517},{"src": 468,"type": 520},{"src": 469,"type": 592},{"src": 470,"type": 556},{"src": 470,"type": 556},{"src": 470,"type": 556},{"src": 471,"type": 556},{"src": 472,"type": 592},{"src": 473,"type": 558},{"src": 372,"type": 593},{"src": 268,"type": 594},{"src": 372,"type": 595},{"src": 373,"type": 596},{"src": 474,"type": 529},{"src": 259,"type": 597},{"src": 260,"type": 598},{"src": 262,"type": 599},{"src": 8,"type": 600},{"src": 372,"type": 601},{"src": 475,"type": 602},{"src": 372,"type": 603},{"src": 475,"type": 602},{"src": 372,"type": 604},{"src": 372,"type": 605},{"src": 375,"type": 458},{"src": 372,"type": 606},{"src": 475,"type": 602},{"src": 372,"type": 607},{"src": 475,"type": 602},{"src": 266,"type": 608},{"src": 269,"type": 609},{"src": 266,"type": 608},{"src": 267,"type": 610},{"src": 372,"type": 611},{"src": 373,"type": 612},{"src": 266,"type": 613},{"src": 269,"type": 614},{"src": 266,"type": 613},{"src": 267,"type": 615},{"src": 476,"type": 616},{"src": 449,"type": 617},{"src": 477,"type": 555},{"src": 478,"type": 618},{"src": 372,"type": 619},{"src": 372,"type": 620},{"src": 268,"type": 621},{"src": 32,"type": 622},{"src": 372,"type": 623},{"src": 373,"type": 624},{"src": 372,"type": 625},{"src": 475,"type": 602},{"src": 475,"type": 602},{"src": 171,"type": 266},{"src": 479,"type": 626},{"src": 479,"type": 627},{"src": 479,"type": 628},{"src": 372,"type": 629},{"src": 373,"type": 630},{"src": 474,"type": 570},{"src": 259,"type": 631},{"src": 260,"type": 632},{"src": 262,"type": 633},{"src": 480,"type": 634},{"src": 15,"type": 635},{"src": 15,"type": 636},{"src": 15,"type": 637},{"src": 15,"type": 638},{"src": 15,"type": 639},{"src": 15,"type": 640},{"src": 15,"type": 641},{"src": 15,"type": 642},{"src": 15,"type": 643},{"src": 481,"type": 644},{"src": 482,"type": 645},{"src": 470,"type": 556},{"src": 171,"type": 646},{"src": 483,"type": 647},{"src": 375,"type": 594},{"src": 266,"type": 648},{"src": 269,"type": 649},{"src": 266,"type": 648},{"src": 267,"type": 650},{"src": 372,"type": 651},{"src": 373,"type": 652},{"src": 15,"type": 653},{"src": 372,"type": 654},{"src": 372,"type": 655},{"src": 372,"type": 656},{"src": 372,"type": 657},{"src": 372,"type": 658},{"src": 372,"type": 659},{"src": 268,"type": 660},{"src": 266,"type": 661},{"src": 269,"type": 662},{"src": 266,"type": 661},{"src": 267,"type": 663},{"src": 372,"type": 664},{"src": 372,"type": 665},{"src": 268,"type": 666},{"src": 484,"type": 667},{"src": 485,"type": 668},{"src": 486,"type": 669},{"src": 375,"type": 621},{"src": 266,"type": 670},{"src": 269,"type": 671},{"src": 266,"type": 670},{"src": 267,"type": 672},{"src": 372,"type": 673},{"src": 266,"type": 674},{"src": 269,"type": 675},{"src": 266,"type": 674},{"src": 267,"type": 676},{"src": 372,"type": 677},{"src": 373,"type": 678},{"src": 96,"type": 143},{"src": 96,"type": 679},{"src": 96,"type": 143},{"src": 96,"type": 254},{"src": 96,"type": 680},{"src": 96,"type": 143},{"src": 96,"type": 681},{"src": 96,"type": 143},{"src": 96,"type": 682},{"src": 96,"type": 143},{"src": 96,"type": 683},{"src": 96,"type": 684},{"src": 96,"type": 685},{"src": 32,"type": 686},{"src": 372,"type": 687},{"src": 372,"type": 688},{"src": 268,"type": 689},{"src": 266,"type": 690},{"src": 269,"type": 691},{"src": 266,"type": 690},{"src": 267,"type": 692},{"src": 96,"type": 143},{"src": 96,"type": 693},{"src": 375,"type": 660},{"src": 372,"type": 694},{"src": 372,"type": 695},{"src": 268,"type": 696},{"src": 375,"type": 666},{"src": 487,"type": 697},{"src": 372,"type": 698},{"src": 372,"type": 699},{"src": 268,"type": 700},{"src": 372,"type": 701},{"src": 372,"type": 702},{"src": 268,"type": 703},{"src": 266,"type": 704},{"src": 269,"type": 705},{"src": 266,"type": 704},{"src": 267,"type": 706},{"src": 137,"type": 183},{"src": 183,"type": 707},{"src": 137,"type": 183},{"src": 183,"type": 259},{"src": 183,"type": 708},{"src": 137,"type": 183},{"src": 183,"type": 709},{"src": 137,"type": 183},{"src": 183,"type": 710},{"src": 137,"type": 183},{"src": 183,"type": 711},{"src": 183,"type": 712},{"src": 183,"type": 713},{"src": 375,"type": 689},{"src": 372,"type": 714},{"src": 372,"type": 715},{"src": 268,"type": 716},{"src": 137,"type": 183},{"src": 375,"type": 696},{"src": 488,"type": 697},{"src": 489,"type": 697},{"src": 375,"type": 700},{"src": 375,"type": 703},{"src": 372,"type": 717},{"src": 372,"type": 718},{"src": 268,"type": 719},{"src": 187,"type": 707},{"src": 187,"type": 259},{"src": 187,"type": 708},{"src": 187,"type": 709},{"src": 187,"type": 710},{"src": 490,"type": 711},{"src": 187,"type": 712},{"src": 187,"type": 713},{"src": 375,"type": 716},{"src": 491,"type": 52},{"src": 375,"type": 719},{"src": 188,"type": 720},{"src": 188,"type": 721},{"src": 188,"type": 722},{"src": 188,"type": 723},{"src": 492,"type": 711},{"src": 188,"type": 724},{"src": 188,"type": 725},{"src": 493,"type": 720},{"src": 189,"type": 721},{"src": 189,"type": 722},{"src": 493,"type": 723},{"src": 494,"type": 726},{"src": 495,"type": 726},{"src": 496,"type": 726},{"src": 497,"type": 727},{"src": 498,"type": 728},{"src": 189,"type": 724},{"src": 189,"type": 725},{"src": 189,"type": 729},{"src": 499,"type": 726},{"src": 500,"type": 479},{"src": 501,"type": 730},{"src": 502,"type": 727},{"src": 503,"type": 727},{"src": 504,"type": 727},{"src": 505,"type": 731},{"src": 506,"type": 732},{"src": 507,"type": 733},{"src": 508,"type": 734},{"src": 509,"type": 734},{"src": 510,"type": 732},{"src": 511,"type": 732},{"src": 512,"type": 734},{"src": 513,"type": 735},{"src": 514,"type": 736},{"src": 515,"type": 737},{"src": 516,"type": 731},{"src": 517,"type": 732},{"src": 518,"type": 738},{"src": 519,"type": 726},{"src": 520,"type": 739},{"src": 521,"type": 732},{"src": 522,"type": 740},{"src": 523,"type": 3},{"src": 524,"type": 741},{"src": 525,"type": 3},{"src": 526,"type": 1},{"src": 135,"type": 742},{"src": 527,"type": 743},{"src": 528,"type": 744},{"src": 529,"type": 745},{"src": 530,"type": 746},{"src": 531,"type": 747},{"src": 532,"type": 748},{"src": 135,"type": 749},{"src": 533,"type": 747},{"src": 135,"type": 3},{"src": 534,"type": 748},{"src": 534,"type": 750},{"src": 135,"type": 3},{"src": 135,"type": 3},{"src": 135,"type": 751},{"src": 8,"type": 8},{"src": 2,"type": 752},{"src": 2,"type": 753},{"src": 2,"type": 752},{"src": 2,"type": 752},{"src": 535,"type": 525},{"src": 536,"type": 525},{"src": 537,"type": 754},{"src": 537,"type": 755},{"src": 538,"type": 756},{"src": 538,"type": 757},{"src": 538,"type": 756},{"src": 538,"type": 758},{"src": 538,"type": 759},{"src": 539,"type": 760},{"src": 8,"type": 761},{"src": 540,"type": 748},{"src": 541,"type": 747},{"src": 8,"type": 126},{"src": 8,"type": 126},{"src": 8,"type": 8},{"src": 8,"type": 126},{"src": 8,"type": 126},{"src": 8,"type": 762},{"src": 15,"type": 14},{"src": 8,"type": 126},{"src": 8,"type": 128},{"src": 8,"type": 126},{"src": 8,"type": 126},{"src": 542,"type": 763},{"src": 15,"type": 764},{"src": 15,"type": 765},{"src": 537,"type": 755},{"src": 537,"type": 766},{"src": 537,"type": 755},{"src": 537,"type": 767},{"src": 537,"type": 754},{"src": 543,"type": 525},{"src": 15,"type": 768},{"src": 15,"type": 172},{"src": 15,"type": 172},{"src": 15,"type": 14},{"src": 15,"type": 172},{"src": 15,"type": 172},{"src": 15,"type": 769},{"src": 96,"type": 143},{"src": 15,"type": 172},{"src": 15,"type": 174},{"src": 15,"type": 172},{"src": 15,"type": 172},{"src": 96,"type": 770},{"src": 15,"type": 765},{"src": 15,"type": 771},{"src": 15,"type": 765},{"src": 15,"type": 772},{"src": 15,"type": 764},{"src": 96,"type": 235},{"src": 96,"type": 143},{"src": 96,"type": 143},{"src": 96,"type": 235},{"src": 137,"type": 183},{"src": 96,"type": 235},{"src": 183,"type": 773},{"src": 96,"type": 774},{"src": 96,"type": 770},{"src": 96,"type": 770},{"src": 183,"type": 247},{"src": 137,"type": 183},{"src": 137,"type": 183},{"src": 183,"type": 247},{"src": 183,"type": 247},{"src": 187,"type": 773},{"src": 137,"type": 775},{"src": 183,"type": 773},{"src": 183,"type": 773},{"src": 187,"type": 247},{"src": 187,"type": 247},{"src": 187,"type": 247},{"src": 188,"type": 776},{"src": 187,"type": 773},{"src": 187,"type": 773},{"src": 189,"type": 776},{"src": 544,"type": 777},{"src": 545,"type": 781},{"src": 546,"type": 784},{"src": 547,"type": 786},{"src": 544,"type": 789},{"src": 548,"type": 792},{"src": 372,"type": 796},{"src": 544,"type": 801},{"src": 544,"type": 810},{"src": 549,"type": 822},{"src": 550,"type": 824},{"src": 551,"type": 826},{"src": 552,"type": 828},{"src": 553,"type": 831},{"src": 544,"type": 834},{"src": 554,"type": 835},{"src": 555,"type": 838},{"src": 556,"type": 841},{"src": 557,"type": 847},{"src": 558,"type": 849},{"src": 544,"type": 852},{"src": 559,"type": 853},{"src": 256,"type": 856},{"src": 560,"type": 858},{"src": 561,"type": 861},{"src": 562,"type": 862},{"src": 563,"type": 863},{"src": 564,"type": 865},{"src": 544,"type": 869},{"src": 565,"type": 870},{"src": 566,"type": 871},{"src": 544,"type": 872},{"src": 567,"type": 874},{"src": 544,"type": 876},{"src": 568,"type": 877},{"src": 544,"type": 885},{"src": 544,"type": 886},{"src": 569,"type": 887},{"src": 570,"type": 891},{"src": 571,"type": 893},{"src": 572,"type": 894},{"src": 573,"type": 901},{"src": 574,"type": 858},{"src": 257,"type": 912},{"src": 544,"type": 913},{"src": 544,"type": 914},{"src": 544,"type": 915},{"src": 575,"type": 916},{"src": 544,"type": 917},{"src": 544,"type": 918},{"src": 544,"type": 919},{"src": 544,"type": 921},{"src": 544,"type": 922},{"src": 544,"type": 923},{"src": 247,"type": 927},{"src": 544,"type": 932},{"src": 67,"type": 934},{"src": 576,"type": 938},{"src": 544,"type": 942},{"src": 577,"type": 948},{"src": 578,"type": 949},{"src": 29,"type": 951},{"src": 268,"type": 1385},{"src": 266,"type": 1386},{"src": 267,"type": 1387},{"src": 269,"type": 1388},{"src": 375,"type": 1389},{"src": 44,"type": 1392},{"src": 31,"type": 1393},{"src": 268,"type": 1406},{"src": 266,"type": 1407},{"src": 267,"type": 1408},{"src": 269,"type": 1409},{"src": 375,"type": 1410},{"src": 274,"type": 1411},{"src": 270,"type": 1412},{"src": 272,"type": 1413},{"src": 276,"type": 1414},{"src": 277,"type": 1415},{"src": 273,"type": 1416},{"src": 271,"type": 1417},{"src": 275,"type": 1418},{"src": 266,"type": 1419},{"src": 375,"type": 1420},{"src": 270,"type": 1421},{"src": 266,"type": 1422},{"src": 375,"type": 1423},{"src": 268,"type": 1424},{"src": 266,"type": 1425},{"src": 267,"type": 1426},{"src": 269,"type": 1427},{"src": 375,"type": 1428},{"src": 270,"type": 1429},{"src": 266,"type": 1430},{"src": 375,"type": 1431},{"src": 268,"type": 1432},{"src": 266,"type": 1433},{"src": 267,"type": 1434},{"src": 269,"type": 1435},{"src": 375,"type": 1436},{"src": 268,"type": 1437},{"src": 266,"type": 1438},{"src": 267,"type": 1439},{"src": 269,"type": 1440},{"src": 375,"type": 1441},{"src": 268,"type": 1442},{"src": 266,"type": 1443},{"src": 267,"type": 1444},{"src": 269,"type": 1445},{"src": 375,"type": 1446},{"src": 8,"type": 1451},{"src": 944,"type": 1454},{"src": 946,"type": 1455},{"src": 964,"type": 1469},{"src": 973,"type": 1476},{"src": 976,"type": 1478},{"src": 992,"type": 1493},{"src": 995,"type": 1494},{"src": 1001,"type": 1499},{"src": 1007,"type": 1502},{"src": 1011,"type": 1505},{"src": 268,"type": 1515},{"src": 266,"type": 1516},{"src": 267,"type": 1517},{"src": 269,"type": 1518},{"src": 375,"type": 1519},{"src": 268,"type": 1520},{"src": 266,"type": 1521},{"src": 375,"type": 1522},{"src": 268,"type": 1528},{"src": 267,"type": 1529},{"src": 375,"type": 1530},{"src": 268,"type": 1531},{"src": 266,"type": 1532},{"src": 267,"type": 1533},{"src": 269,"type": 1534},{"src": 375,"type": 1535},{"src": 268,"type": 1536},{"src": 266,"type": 1537},{"src": 267,"type": 1538},{"src": 269,"type": 1539},{"src": 375,"type": 1540},{"src": 268,"type": 1541},{"src": 266,"type": 1542},{"src": 267,"type": 1543},{"src": 269,"type": 1544},{"src": 375,"type": 1545},{"src": 1056,"type": 1557},{"src": 495,"type": 1558},{"src": 1059,"type": 1559},{"src": 1061,"type": 1560},{"src": 506,"type": 1561},{"src": 1066,"type": 1562},{"src": 239,"type": 1563},{"src": 1070,"type": 1564},{"src": 491,"type": 1565},{"src": 1072,"type": 1566},{"src": 1074,"type": 1567},{"src": 240,"type": 1568},{"src": 242,"type": 1569},{"src": 483,"type": 1570},{"src": 1077,"type": 1571},{"src": 489,"type": 1572},{"src": 1080,"type": 1573},{"src": 1082,"type": 1574},{"src": 168,"type": 1575},{"src": 1087,"type": 1577},{"src": 1090,"type": 1578},{"src": 1093,"type": 1579},{"src": 1094,"type": 1580},{"src": 248,"type": 1581},{"src": 1096,"type": 1582},{"src": 1097,"type": 1583},{"src": 1099,"type": 1584},{"src": 244,"type": 1585},{"src": 1104,"type": 1586},{"src": 1106,"type": 1587},{"src": 1108,"type": 1588},{"src": 1112,"type": 1589},{"src": 1113,"type": 1590},{"src": 1120,"type": 1592},{"src": 1122,"type": 1593},{"src": 1125,"type": 1594},{"src": 1129,"type": 1595},{"src": 1132,"type": 1596},{"src": 1134,"type": 1597},{"src": 1136,"type": 1598},{"src": 245,"type": 1599},{"src": 1140,"type": 1600},{"src": 494,"type": 1601},{"src": 250,"type": 1602},{"src": 505,"type": 1603},{"src": 246,"type": 1604},{"src": 249,"type": 1605},{"src": 1148,"type": 1606},{"src": 1151,"type": 1607},{"src": 1154,"type": 1608},{"src": 1157,"type": 1609},{"src": 1160,"type": 1611},{"src": 487,"type": 1612},{"src": 1164,"type": 1613},{"src": 1165,"type": 1614},{"src": 1166,"type": 1615},{"src": 519,"type": 1616},{"src": 151,"type": 1617},{"src": 251,"type": 1618},{"src": 1172,"type": 1619},{"src": 1174,"type": 1620},{"src": 520,"type": 1621},{"src": 1179,"type": 1622},{"src": 488,"type": 1623},{"src": 1183,"type": 1625},{"src": 1188,"type": 1626},{"src": 1190,"type": 1627},{"src": 496,"type": 1628},{"src": 1193,"type": 1629},{"src": 1195,"type": 1630},{"src": 1196,"type": 1631},{"src": 1198,"type": 1632},{"src": 1199,"type": 1633},{"src": 1202,"type": 1634},{"src": 1204,"type": 1635},{"src": 1209,"type": 1637},{"src": 252,"type": 1638},{"src": 253,"type": 1639},{"src": 1211,"type": 1640},{"src": 1213,"type": 1641},{"src": 268,"type": 1642},{"src": 266,"type": 1643},{"src": 267,"type": 1644},{"src": 269,"type": 1645},{"src": 375,"type": 1646},{"src": 268,"type": 1647},{"src": 266,"type": 1648},{"src": 269,"type": 1649},{"src": 375,"type": 1650},{"src": 44,"type": 1651},{"src": 31,"type": 1652},{"src": 43,"type": 1683},{"src": 359,"type": 1854},{"src": 463,"type": 1856},{"src": 428,"type": 1889},{"src": 479,"type": 1891},{"src": 263,"type": 1917},{"src": 1370,"type": 1921},{"src": 1371,"type": 1922},{"src": 1374,"type": 1923},{"src": 1378,"type": 1924},{"src": 1383,"type": 1927},{"src": 1384,"type": 1928},{"src": 1385,"type": 1929},{"src": 1387,"type": 1930},{"src": 1388,"type": 1931},{"src": 1395,"type": 1924},{"src": 1398,"type": 1933},{"src": 1400,"type": 1934},{"src": 1408,"type": 1937},{"src": 1410,"type": 1939},{"src": 1413,"type": 1940},{"src": 1419,"type": 1943},{"src": 1421,"type": 1921},{"src": 1423,"type": 1944},{"src": 74,"type": 1965},{"src": 191,"type": 1966},{"src": 171,"type": 1967},{"src": 125,"type": 1968},{"src": 86,"type": 1969},{"src": 112,"type": 1970},{"src": 182,"type": 1971},{"src": 54,"type": 1972},{"src": 32,"type": 1973},{"src": 482,"type": 1974},{"src": 58,"type": 1975},{"src": 186,"type": 1976},{"src": 458,"type": 1977},{"src": 93,"type": 1993},{"src": 92,"type": 1994},{"src": 79,"type": 1995},{"src": 369,"type": 1996},{"src": 80,"type": 1997},{"src": 2,"type": 1998},{"src": 135,"type": 1999},{"src": 71,"type": 2001},{"src": 88,"type": 2003},{"src": 81,"type": 2005},{"src": 243,"type": 2008},{"src": 241,"type": 2009},{"src": 254,"type": 2018},{"src": 434,"type": 2019},{"src": 537,"type": 2020},{"src": 96,"type": 2021},{"src": 187,"type": 2022},{"src": 492,"type": 2023},{"src": 15,"type": 2024},{"src": 188,"type": 2025},{"src": 137,"type": 2026},{"src": 3079,"type": 2029},{"src": 490,"type": 2030},{"src": 493,"type": 2031},{"src": 189,"type": 2032},{"src": 183,"type": 2033},{"src": 453,"type": 2051},{"src": 3431,"type": 2052},{"src": 534,"type": 2054},{"src": 538,"type": 2055},{"src": 292,"type": 2062},{"src": 39,"type": 2099},{"src": 60,"type": 2100},{"src": 117,"type": 2101},{"src": 114,"type": 2102},{"src": 53,"type": 2103},{"src": 109,"type": 2104},{"src": 59,"type": 2105},{"src": 22,"type": 2106},{"src": 400,"type": 2114},{"src": 315,"type": 2115},{"src": 328,"type": 2116},{"src": 399,"type": 2117},{"src": 329,"type": 2118},{"src": 353,"type": 2121},{"src": 4049,"type": 2126},{"src": 470,"type": 2132},{"src": 442,"type": 2153},{"src": 443,"type": 2154},{"src": 449,"type": 2155},{"src": 119,"type": 2171},{"src": 4601,"type": 823},{"src": 467,"type": 2187},{"src": 381,"type": 2188},{"src": 282,"type": 2189},{"src": 382,"type": 2190},{"src": 6582,"type": 2216},{"src": 6586,"type": 2217},{"src": 6587,"type": 2218},{"src": 6589,"type": 2219},{"src": 6591,"type": 2220},{"src": 6592,"type": 2221},{"src": 6595,"type": 2222},{"src": 6597,"type": 2223},{"src": 6600,"type": 2224},{"src": 6601,"type": 2225},{"src": 6602,"type": 2221},{"src": 6603,"type": 2226},{"src": 6606,"type": 2227},{"src": 6607,"type": 2228},{"src": 6608,"type": 2229},{"src": 6609,"type": 2230},{"src": 6610,"type": 2231},{"src": 6613,"type": 2232},{"src": 6618,"type": 2233},{"src": 6619,"type": 2234},{"src": 6621,"type": 2235},{"src": 6624,"type": 1921},{"src": 6625,"type": 2236},{"src": 6629,"type": 2237},{"src": 6631,"type": 2238},{"src": 6635,"type": 1921},{"src": 6636,"type": 2239},{"src": 6643,"type": 2240},{"src": 6644,"type": 2241},{"src": 6646,"type": 2242},{"src": 6648,"type": 2243},{"src": 6649,"type": 2244},{"src": 6650,"type": 2221},{"src": 6651,"type": 2245},{"src": 6654,"type": 2246},{"src": 6658,"type": 2247},{"src": 6660,"type": 2248},{"src": 6661,"type": 2249},{"src": 457,"type": 2252}],"errors": [{"src": 6684,"name": "InputOutput"},{"src": 6685,"name": "SystemResources"},{"src": 6686,"name": "IsDir"},{"src": 6687,"name": "OperationAborted"},{"src": 6688,"name": "BrokenPipe"},{"src": 6689,"name": "WouldBlock"},{"src": 6690,"name": "Unexpected"},{"src": 6691,"name": "Unseekable"},{"src": 6692,"name": "DiskQuota"},{"src": 6693,"name": "FileTooBig"},{"src": 6694,"name": "InputOutput"},{"src": 6695,"name": "NoSpaceLeft"},{"src": 6696,"name": "AccessDenied"},{"src": 6697,"name": "BrokenPipe"},{"src": 6698,"name": "SystemResources"},{"src": 6699,"name": "OperationAborted"},{"src": 6700,"name": "OutOfMemory"},{"src": 6701,"name": "UnalignedMemory"},{"src": 6702,"name": "NoStandardHandleAttached"},{"src": 6703,"name": "Unexpected"},{"src": 6704,"name": "SharingViolation"},{"src": 6705,"name": "PathAlreadyExists"},{"src": 6706,"name": "FileNotFound"},{"src": 6707,"name": "AccessDenied"},{"src": 6708,"name": "PipeBusy"},{"src": 6709,"name": "NameTooLong"},{"src": 6710,"name": "InvalidUtf8"},{"src": 6711,"name": "BadPathName"},{"src": 6712,"name": "Unexpected"},{"src": 6713,"name": "SymLinkLoop"},{"src": 6714,"name": "ProcessFdQuotaExceeded"},{"src": 6715,"name": "SystemFdQuotaExceeded"},{"src": 6716,"name": "NoDevice"},{"src": 6717,"name": "SystemResources"},{"src": 6718,"name": "FileTooBig"},{"src": 6719,"name": "IsDir"},{"src": 6720,"name": "NoSpaceLeft"},{"src": 6721,"name": "NotDir"},{"src": 6722,"name": "DeviceBusy"},{"src": 6723,"name": "SystemResources"},{"src": 6724,"name": "EOF"},{"src": 6725,"name": "UnmatchingPDB"},{"src": 6726,"name": "MissingDebugInfo"},{"src": 6727,"name": "PDBMismatch"},{"src": 6728,"name": "UnknownPDBVersion"},{"src": 6729,"name": "InvalidStreamDirectory"},{"src": 6730,"name": "InvalidBlockIndex"},{"src": 6731,"name": "OutOfMemory"},{"src": 6732,"name": "UnhandledBigDirectoryStream"},{"src": 6733,"name": "InvalidDebugInfo"},{"src": 6734,"name": "EndOfStream"},{"src": 6735,"name": "CurrentWorkingDirectoryUnlinked"},{"src": 6736,"name": "InvalidPEMagic"},{"src": 6737,"name": "MissingCoffSection"},{"src": 6738,"name": "InvalidMachine"},{"src": 6739,"name": "InvalidPEHeader"},{"src": 6740,"name": "FileSystem"},{"src": 6741,"name": "PermissionDenied"},{"src": 6742,"name": "AccessDenied"},{"src": 6743,"name": "FileNotFound"},{"src": 6744,"name": "NameTooLong"},{"src": 6745,"name": "PathAlreadyExists"},{"src": 6746,"name": "NameTooLong"},{"src": 6747,"name": "EndOfFile"},{"src": 6748,"name": "OutOfMemory"},{"src": 6749,"name": "AccessDenied"},{"src": 6750,"name": "SymLinkLoop"},{"src": 6751,"name": "NameTooLong"},{"src": 6752,"name": "FileNotFound"},{"src": 6753,"name": "SystemResources"},{"src": 6754,"name": "NotDir"},{"src": 6755,"name": "NameTooLong"},{"src": 6756,"name": "Unexpected"},{"src": 6757,"name": "Utf8ExpectedContinuation"},{"src": 6758,"name": "Utf8OverlongEncoding"},{"src": 6759,"name": "Utf8EncodesSurrogateHalf"},{"src": 6760,"name": "Utf8CodepointTooLarge"},{"src": 6761,"name": "Unexpected"},{"src": 6762,"name": "OutOfMemory"},{"src": 6763,"name": "EnvironmentVariableNotFound"},{"src": 6764,"name": "InvalidUtf8"},{"src": 6765,"name": "Unexpected"},{"src": 6766,"name": "Utf8CannotEncodeSurrogateHalf"},{"src": 6767,"name": "CodepointTooLarge"},{"src": 6768,"name": "DanglingSurrogateHalf"},{"src": 6769,"name": "ExpectedSecondSurrogateHalf"},{"src": 6770,"name": "UnexpectedSecondSurrogateHalf"},{"src": 6771,"name": "Unexpected"},{"src": 6772,"name": "Unexpected"},{"src": 6773,"name": "Unexpected"},{"src": 6774,"name": "Overflow"},{"src": 6775,"name": "Utf8ExpectedContinuation"},{"src": 6776,"name": "Utf8OverlongEncoding"},{"src": 6777,"name": "Utf8ExpectedContinuation"},{"src": 6778,"name": "Utf8OverlongEncoding"},{"src": 6779,"name": "Overflow"},{"src": 6780,"name": "EnvironmentVariableNotFound"},{"src": 6781,"name": "Unexpected"},{"src": 6782,"name": "Unexpected"},{"src": 6783,"name": "SystemResources"},{"src": 6784,"name": "OperationAborted"},{"src": 6785,"name": "BrokenPipe"},{"src": 6786,"name": "Unexpected"},{"src": 6787,"name": "Utf8InvalidStartByte"},{"src": 6788,"name": "Overflow"},{"src": 6789,"name": "DivisionByZero"},{"src": 6788,"name": "Overflow"},{"src": 6788,"name": "Overflow"},{"src": 6790,"name": "NegativeDenominator"},{"src": 6774,"name": "Overflow"},{"src": 6791,"name": "Overflow"},{"src": 6792,"name": "Overflow"},{"src": 6793,"name": "UnexpectedRemainder"},{"src": 6794,"name": "TimedOut"},{"src": 6795,"name": "OutOfMemory"},{"src": 6796,"name": "InvalidStack"},{"src": 6797,"name": "TooManyThreads"},{"src": 6798,"name": "TimedOut"},{"src": 6799,"name": "InvalidNode"},{"src": 6800,"name": "InvalidResourceAccess"},{"src": 6801,"name": "InvalidAddress"},{"src": 6802,"name": "OutOfMemory"},{"src": 6803,"name": "InvalidMemory"},{"src": 6804,"name": "InvalidFlags"},{"src": 6805,"name": "InvalidState"},{"src": 6806,"name": "InvalidCpuAffinity"},{"src": 6807,"name": "OutOfResources"},{"src": 6808,"name": "InvalidHandle"},{"src": 6809,"name": "InvalidEvents"},{"src": 6810,"name": "InvalidValue"},{"src": 6811,"name": "InvalidHandle"},{"src": 6812,"name": "OutOfResources"},{"src": 6813,"name": "Closed"},{"src": 6814,"name": "Pending"},{"src": 6815,"name": "InvalidToken"},{"src": 6816,"name": "InvalidState"},{"src": 6817,"name": "InvalidValue"},{"src": 6818,"name": "InvalidHandle"},{"src": 6819,"name": "BufferTooLarge"},{"src": 6820,"name": "OutOfResources"},{"src": 6821,"name": "TimedOut"},{"src": 6822,"name": "InvalidAddress"},{"src": 6823,"name": "AlreadyConnected"},{"src": 6824,"name": "AddressInUse"},{"src": 6825,"name": "InvalidEnd"},{"src": 6826,"name": "InvalidCharacter"},{"src": 6827,"name": "Incomplete"},{"src": 6828,"name": "InvalidValue"},{"src": 6829,"name": "InvalidState"},{"src": 6830,"name": "OutOfResources"},{"src": 6831,"name": "InvalidState"},{"src": 6832,"name": "InvalidValue"},{"src": 6833,"name": "InvalidHandle"},{"src": 6834,"name": "InvalidState"},{"src": 6835,"name": "InvalidHandle"},{"src": 6836,"name": "InvalidState"},{"src": 6837,"name": "InvalidHandle"},{"src": 6838,"name": "InvalidAddress"},{"src": 6839,"name": "OutOfResources"},{"src": 6840,"name": "AddressInUse"},{"src": 6841,"name": "InvalidState"},{"src": 6842,"name": "InvalidHandle"},{"src": 6843,"name": "InvalidState"},{"src": 6844,"name": "InvalidHandle"},{"src": 6845,"name": "InvalidAddress"},{"src": 6846,"name": "InvalidCharacter"},{"src": 6847,"name": "EventPollTimedOut"},{"src": 6848,"name": "InvalidValue"},{"src": 6849,"name": "OutOfResources"},{"src": 6850,"name": "InvalidHandle"},{"src": 6851,"name": "TimerUnsupported"},{"src": 6852,"name": "BufferTooSmall"},{"src": 6853,"name": "SystemResources"},{"src": 6854,"name": "AccessDenied"},{"src": 6855,"name": "InvalidExe"},{"src": 6856,"name": "FileSystem"},{"src": 6857,"name": "IsDir"},{"src": 6858,"name": "FileNotFound"},{"src": 6859,"name": "NotDir"},{"src": 6860,"name": "FileBusy"},{"src": 6861,"name": "ProcessFdQuotaExceeded"},{"src": 6862,"name": "SystemFdQuotaExceeded"},{"src": 6863,"name": "NameTooLong"},{"src": 6864,"name": "ResourceLimitReached"},{"src": 6865,"name": "InvalidUserId"},{"src": 6866,"name": "PermissionDenied"},{"src": 6867,"name": "AccessDenied"},{"src": 6868,"name": "FileSystem"},{"src": 6869,"name": "SymLinkLoop"},{"src": 6870,"name": "NameTooLong"},{"src": 6871,"name": "FileNotFound"},{"src": 6872,"name": "SystemResources"},{"src": 6873,"name": "NotDir"},{"src": 6874,"name": "SystemResources"},{"src": 6875,"name": "NameTooLong"},{"src": 6876,"name": "OutOfMemory"},{"src": 6877,"name": "InvalidName"},{"src": 6878,"name": "FileNotFound"},{"src": 6879,"name": "AccessDenied"},{"src": 6880,"name": "Unexpected"}],"astNodes": [{"file": 89,"line": 8,"col": 4,"fields": [6881,6882]},{"file": 0,"line": 3,"col": 0},{"file": 13,"line": 217,"col": 4,"fields": [6883,6884,6885,6886],"varArgs": true},{"file": 13,"line": 2379,"col": 0,"fields": []},{"file": 12,"line": 159,"col": 4,"docs": " Causes abnormal process termination.\n If linking against libc, this calls the abort() libc function. Otherwise\n it raises SIGABRT followed by SIGKILL and finally lo\n","fields": []},{"file": 13,"line": 54,"col": 4,"fields": []},{"file": 10,"line": 46,"col": 4,"fields": []},{"file": 50,"line": 328,"col": 8,"fields": [6887]},{"file": 10,"line": 74,"col": 12,"fields": [6888,6889,6890],"varArgs": true},{"file": 13,"line": 178,"col": 4,"docs": " Tries to print a stack trace to stderr, unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [6891]},{"file": 13,"line": 86,"col": 4,"docs": " Tries to print the current stack trace to stderr, unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [6892]},{"file": 13,"line": 204,"col": 4,"docs": " This function invokes undefined behavior when `ok` is `false`.\n In Debug and ReleaseSafe modes, calls to this function are always\n generated, and the `unreachable` statement triggers a panic.\n In ReleaseFast and ReleaseSmall modes, calls to this function are\n optimized away, and in fact the optimizer is able to use the assertion\n in its heuristics.\n Inside a test block, it is best to use the `std.testing` module rather\n than this function, because this function may not detect a test failure\n in ReleaseFast and ReleaseSmall mode. Outside of a test block, this assert\n function is the correct function to use.\n","fields": [6893]},{"file": 62,"line": 473,"col": 4,"fields": [6894]},{"file": 50,"line": 139,"col": 8,"fields": [6895]},{"file": 50,"line": 369,"col": 8,"fields": [6896,6897]},{"file": 23,"line": 90,"col": 4,"docs": " Renders fmt string with args, calling output with slices of bytes.\n If `output` returns an error, the error is returned from `format` and\n `output` is not called again.\n\n The format string must be comptime known and may contain placeholders following\n this format:\n `{[position][specifier]:[fill][alignment][width].[precision]}`\n \n Each word between `[` and `]` is a parameter you have to replace with something:\n\n - *position* is the index of the argument that should be inserted\n - *specifier* is a type-dependent formatting option that determines how a type should formatted (see below)\n - *fill* is a single character which is used to pad the formatted text\n - *alignment* is one of the three characters `<`, `^` or `>`. they define if the text is *left*, *center*, or *right* aligned\n - *width* is the total width of the field in characters\n - *precision* specifies how many decimals a formatted number should have\n\n Note that most of the parameters are optional and may be omitted. Also you can leave out separators like `:` and `.` when\n all parameters after the separator are omitted.\n Only exception is the *fill* parameter. If *fill* is required, one has to specify *alignment* as well, as otherwise\n the digits after `:` is interpreted as *width*, not *fill*.\n\n The *specifier* has several options for types:\n - `x` and `X`:\n   - format the non-numeric value as a string of bytes in hexadecimal notation (\"binary dump\") in either lower case or upper case\n   - output numeric value in hexadecimal notation\n - `s`: print a pointer-to-many as a c-string, use zero-termination\n - `B` and `Bi`: output a memory size in either metric (1000) or power-of-two (1024) based notation. works for both float and integer values.\n - `e`: output floating point value in scientific notation\n - `d`: output numeric value in decimal notation\n - `b`: output integer value in binary notation\n - `c`: output integer as an ASCII character. Integer type must have 8 bits at max.\n - `*`: output the address of the value instead of the value itself. \n\n If a formatted user type contains a function of the type\n ```\n fn format(value: ?, comptime fmt: []const u8, options: std.fmt.FormatOptions, context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void) Errors!void\n ```\n with `?` being the type formatted, this function will be called instead of the default implementation.\n This allows user types to be formatted in a logical manner instead of dumping all fields of the type.\n\n A user type may be a `struct`, `union` or `enum` type.\n","fields": [6898,6899,6900,6901,6902],"varArgs": true},{"file": 27,"line": 662,"col": 4,"fields": [6903,6904]},{"file": 13,"line": 69,"col": 4,"fields": []},{"file": 13,"line": 831,"col": 4,"docs": " TODO once https://github.com/ziglang/zig/issues/3157 is fully implemented,\n make this `noasync fn` and remove the individual noasync calls.\n","fields": [6905]},{"file": 13,"line": 2338,"col": 0,"fields": []},{"file": 13,"line": 843,"col": 0,"fields": [6906]},{"file": 38,"line": 1147,"col": 4,"fields": []},{"file": 11,"line": 79,"col": 8,"docs": " Returns a pointer to undefined memory.\n Call `destroy` with the result to free the memory.\n","fields": [6907,6908]},{"file": 50,"line": 164,"col": 8,"docs": " Upon success, the stream is in an uninitialized state. To continue using it,\n you must use the open() function.\n","fields": [6909]},{"file": 28,"line": 43,"col": 8,"fields": [6910,6911]},{"file": 28,"line": 55,"col": 8,"fields": [6912]},{"file": 50,"line": 321,"col": 8,"fields": [6913]},{"file": 6,"line": 58,"col": 12,"docs": " Returns the number of bytes read. If the number read would be smaller than buf.len,\n error.EndOfStream is returned instead.\n","fields": [6914,6915]},{"file": 6,"line": 46,"col": 12,"docs": " Returns the number of bytes read. If the number read is smaller than buf.len, it\n means the stream reached the end. Reaching the end of a stream is not an error\n condition.\n","fields": [6916,6917]},{"file": 11,"line": 339,"col": 4,"docs": " Compares two slices and returns whether they are equal.\n","fields": [6918,6919,6920]},{"file": 50,"line": 195,"col": 8,"docs": " Repositions read/write file offset relative to the beginning.\n","fields": [6921,6922]},{"file": 6,"line": 158,"col": 12,"fields": [6923,6924]},{"file": 11,"line": 527,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n Assumes the endianness of memory is native. This means the function can\n simply pointer cast memory.\n","fields": [6925,6926]},{"file": 28,"line": 94,"col": 4,"fields": [6927,6928]},{"file": 50,"line": 185,"col": 8,"docs": " Repositions read/write file offset relative to the current offset.\n","fields": [6929,6930]},{"file": 28,"line": 122,"col": 8,"fields": [6931,6932]},{"file": 28,"line": 184,"col": 8,"fields": [6933]},{"file": 9,"line": 170,"col": 12,"fields": [6934,6935]},{"file": 9,"line": 72,"col": 12,"fields": [6936]},{"file": 11,"line": 140,"col": 8,"docs": " This function requests a new byte size for an existing allocation,\n which can be larger, smaller, or the same size as the old memory\n allocation.\n This function is preferred over `shrink`, because it can fail, even\n when shrinking. This gives the allocator a chance to perform a\n cheap shrink operation if possible, or otherwise return OutOfMemory,\n indicating that the caller should keep their capacity, for example\n in `std.ArrayList.shrink`.\n If you need guaranteed success, call `shrink`.\n If `new_n` is 0, this is the same as `free` and it always succeeds.\n","fields": [6937,6938,6939]},{"file": 9,"line": 111,"col": 12,"fields": [6940,6941]},{"file": 9,"line": 180,"col": 12,"fields": [6942]},{"file": 9,"line": 186,"col": 12,"fields": [6943]},{"file": 28,"line": 215,"col": 8,"fields": [6944,6945]},{"file": 6,"line": 191,"col": 12,"fields": [6946,6947]},{"file": 9,"line": 43,"col": 12,"fields": [6948]},{"file": 6,"line": 133,"col": 12,"docs": " Reads 1 byte from the stream or returns `error.EndOfStream`.\n","fields": [6949]},{"file": 51,"line": 393,"col": 4,"docs": " On Windows, this calls `resolveWindows` and on POSIX it calls `resolvePosix`.\n","fields": [6950,6951]},{"file": 51,"line": 409,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another.\n It resolves \".\" and \"..\".\n The result does not have a trailing path separator.\n If all paths are relative it uses the current working directory as a starting point.\n Each drive has its own current working directory.\n Path separators are canonicalized to '\\\\' and drives are canonicalized to capital letters.\n Note: all usage of this function should be audited due to the existence of symlinks.\n Without performing actual syscalls, resolving `..` could be incorrect.\n","fields": [6952,6953]},{"file": 44,"line": 23,"col": 4,"docs": " Caller must free the returned memory.\n","fields": [6954]},{"file": 51,"line": 229,"col": 4,"fields": [6955]},{"file": 51,"line": 374,"col": 0,"fields": [6956]},{"file": 51,"line": 351,"col": 0,"fields": [6957,6958,6959]},{"file": 11,"line": 95,"col": 8,"fields": [6960,6961,6962]},{"file": 11,"line": 239,"col": 4,"docs": " Copy all of source into dest at position 0.\n dest.len must be >= source.len.\n dest.ptr must be <= src.ptr.\n","fields": [6963,6964,6965]},{"file": 11,"line": 779,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that are not\n any of the bytes in `delimiter_bytes`.\n tokenize(\"   abc def    ghi  \", \" \")\n Will return slices for \"abc\", \"def\", \"ghi\", null, in that order.\n If `buffer` is empty, the iterator will return null.\n If `delimiter_bytes` does not exist in buffer,\n the iterator will return `buffer`, null, in that order.\n See also the related function `separate`.\n","fields": [6966,6967]},{"file": 11,"line": 906,"col": 8,"docs": " Returns a slice of the next token, or null if tokenization is complete.\n","fields": [6968]},{"file": 12,"line": 829,"col": 4,"docs": " The result is a slice of out_buffer, indexed from 0.\n","fields": [6969]},{"file": 11,"line": 371,"col": 4,"docs": " Copies ::m to newly allocated memory. Caller is responsible to free it.\n","fields": [6970,6971,6972]},{"file": 11,"line": 220,"col": 8,"fields": [6973,6974]},{"file": 11,"line": 182,"col": 8,"docs": " Prefer calling realloc to shrink if you can tolerate failure, such as\n in an ArrayList data structure with a storage capacity.\n Shrink always succeeds, and `new_n` must be <= `old_mem.len`.\n Returned slice has same alignment as old_mem.\n Shrinking to 0 is the same as calling `free`.\n","fields": [6975,6976,6977]},{"file": 27,"line": 470,"col": 8,"fields": [6978,6979,6980]},{"file": 50,"line": 28,"col": 8,"docs": " Call close to clean up.\n","fields": [6981]},{"file": 27,"line": 495,"col": 4,"fields": [6982,6983,6984]},{"file": 50,"line": 205,"col": 8,"fields": [6985]},{"file": 27,"line": 576,"col": 0,"fields": [6986,6987]},{"file": 27,"line": 639,"col": 4,"fields": [6988,6989,6990]},{"file": 4,"line": 255,"col": 4,"docs": " Returns the smaller number. When one of the parameter's type's full range fits in the other,\n the return type is the smaller type.\n","fields": [6991,6992]},{"file": 6,"line": 32,"col": 12,"docs": " Returns the number of bytes read. It may be less than buffer.len.\n If the number of bytes read is 0, it means end of stream.\n End of stream is not an error condition.\n","fields": [6993,6994]},{"file": 27,"line": 484,"col": 8,"fields": [6995,6996]},{"file": 13,"line": 888,"col": 12,"fields": [6997]},{"file": 13,"line": 997,"col": 0,"fields": [6998,6999]},{"file": 9,"line": 31,"col": 12,"docs": " Deinitialize with `deinit` or use `toOwnedSlice`.\n","fields": [7000]},{"file": 9,"line": 88,"col": 12,"docs": " The caller owns the returned memory. ArrayList becomes empty.\n","fields": [7001]},{"file": 11,"line": 358,"col": 4,"fields": [7002,7003]},{"file": 27,"line": 478,"col": 8,"fields": [7004,7005]},{"file": 27,"line": 651,"col": 4,"fields": [7006,7007]},{"file": 27,"line": 692,"col": 4,"fields": [7008,7009]},{"file": 13,"line": 78,"col": 0,"fields": []},{"file": 13,"line": 251,"col": 4,"fields": [7010,7011,7012,7013,7014]},{"file": 13,"line": 343,"col": 4,"docs": " TODO once https://github.com/ziglang/zig/issues/3157 is fully implemented,\n make this `noasync fn` and remove the individual noasync calls.\n","fields": [7015,7016,7017,7018]},{"file": 13,"line": 353,"col": 0,"fields": [7019,7020,7021,7022]},{"file": 44,"line": 599,"col": 4,"fields": []},{"file": 13,"line": 564,"col": 0,"docs": " TODO this is a special case hack right now. clean it up and maybe make it part of std.fmt\n","fields": [7023]},{"file": 13,"line": 623,"col": 0,"fields": [7024,7025]},{"file": 51,"line": 868,"col": 4,"fields": [7026]},{"file": 11,"line": 354,"col": 4,"fields": [7027,7028]},{"file": 27,"line": 698,"col": 4,"fields": [7029,7030]},{"file": 13,"line": 1168,"col": 0,"fields": [7031,7032]},{"file": 50,"line": 303,"col": 8,"fields": [7033,7034]},{"file": 10,"line": 82,"col": 12,"fields": [7035,7036]},{"file": 10,"line": 78,"col": 12,"fields": [7037,7038]},{"file": 13,"line": 311,"col": 4,"fields": [7039,7040,7041,7042]},{"file": 13,"line": 321,"col": 4,"fields": [7043,7044,7045,7046]},{"file": 62,"line": 884,"col": 4,"docs": " Call this when you made a windows DLL call or something that does SetLastError\n and you get an unexpected error.\n","fields": [7047]},{"file": 50,"line": 309,"col": 8,"fields": [7048,7049]},{"file": 23,"line": 314,"col": 4,"fields": [7050,7051,7052,7053,7054,7055,7056]},{"file": 39,"line": 348,"col": 8,"fields": [7057]},{"file": 39,"line": 170,"col": 4,"fields": [7058,7059,7060,7061,7062]},{"file": 39,"line": 42,"col": 4,"fields": [7063,7064,7065]},{"file": 39,"line": 130,"col": 4,"fields": [7066,7067,7068,7069,7070]},{"file": 62,"line": 632,"col": 4,"fields": [7071,7072,7073]},{"file": 11,"line": 1497,"col": 4,"docs": " Round an address up to the nearest aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [7074,7075]},{"file": 38,"line": 1216,"col": 4,"docs": " Same as `selfExePath` except the result is UTF16LE-encoded.\n","fields": [7076]},{"file": 50,"line": 49,"col": 8,"docs": " `openRead` except with a null terminated UTF16LE encoded path\n","fields": [7077]},{"file": 12,"line": 73,"col": 4,"docs": " Closes the file descriptor.\n This function is not capable of returning any indication of failure. An\n application which wants to ensure writes have succeeded before closing\n must call `fsync` before `close`.\n Note: The Zig standard library does not support POSIX thread cancellation.\n","fields": [7078]},{"file": 50,"line": 355,"col": 8,"fields": [7079,7080]},{"file": 12,"line": 2347,"col": 4,"docs": " Repositions read/write file offset relative to the beginning.\n","fields": [7081,7082]},{"file": 12,"line": 2376,"col": 4,"docs": " Repositions read/write file offset relative to the current offset.\n","fields": [7083,7084]},{"file": 11,"line": 151,"col": 8,"docs": " This is the same as `realloc`, except caller may additionally request\n a new alignment, which can be larger, smaller, or the same as the old\n allocation.\n","fields": [7085,7086,7087,7088]},{"file": 9,"line": 68,"col": 12,"fields": [7089]},{"file": 51,"line": 157,"col": 4,"fields": [7090]},{"file": 11,"line": 882,"col": 4,"fields": [7091,7092,7093]},{"file": 51,"line": 381,"col": 0,"fields": [7094,7095]},{"file": 11,"line": 99,"col": 8,"fields": [7096,7097,7098,7099]},{"file": 11,"line": 929,"col": 4,"fields": [7100,7101]},{"file": 62,"line": 337,"col": 4,"docs": " The result is a slice of `buffer`, indexed from 0.\n","fields": [7102]},{"file": 11,"line": 193,"col": 8,"docs": " This is the same as `shrink`, except caller may additionally request\n a new alignment, which must be smaller or the same as the old\n allocation.\n","fields": [7103,7104,7105,7106]},{"file": 62,"line": 847,"col": 4,"fields": [7107]},{"file": 62,"line": 851,"col": 4,"fields": [7108,7109]},{"file": 51,"line": 130,"col": 4,"fields": [7110]},{"file": 17,"line": 564,"col": 4,"docs": " Returns index of next character. If exact fit, returned index equals output slice length.\n Assumes there is enough space for the output.\n TODO support codepoints bigger than 16 bits\n","fields": [7111,7112]},{"file": 17,"line": 68,"col": 4,"docs": " Decodes the UTF-8 codepoint encoded in the given slice of bytes.\n bytes.len must be equal to utf8ByteSequenceLength(bytes[0]) catch unreachable.\n If you already know the length at comptime, you can call one of\n utf8Decode2,utf8Decode3,utf8Decode4 directly instead of this function.\n","fields": [7113]},{"file": 62,"line": 566,"col": 4,"fields": [7114]},{"file": 27,"line": 716,"col": 4,"fields": [7115,7116]},{"file": 11,"line": 348,"col": 4,"fields": [7117,7118]},{"file": 39,"line": 431,"col": 8,"fields": [7119]},{"file": 44,"line": 130,"col": 4,"docs": " Caller must free returned memory.\n TODO make this go through libc when we have it\n","fields": [7120,7121]},{"file": 50,"line": 170,"col": 8,"docs": " Test whether the file refers to a terminal.\n See also `supportsAnsiEscapeCodes`.\n","fields": [7122]},{"file": 50,"line": 175,"col": 8,"docs": " Test whether ANSI escape codes will be treated as such.\n","fields": [7123]},{"file": 62,"line": 638,"col": 4,"fields": [7124,7125]},{"file": 51,"line": 897,"col": 4,"fields": [7126]},{"file": 12,"line": 271,"col": 4,"docs": " Returns the number of bytes that were read, which can be less than\n buf.len. If 0 bytes were read, that means EOF.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [7127,7128]},{"file": 62,"line": 878,"col": 0,"fields": [7129,7130]},{"file": 17,"line": 485,"col": 4,"docs": " Asserts that the output buffer is big enough.\n Returns end byte index into utf8.\n","fields": [7131,7132]},{"file": 13,"line": 47,"col": 4,"fields": [7133,7134],"varArgs": true},{"file": 12,"line": 386,"col": 4,"docs": " Write to a file descriptor. Keeps trying if it gets interrupted.\n This function is for blocking file descriptors only.\n","fields": [7135,7136]},{"file": 23,"line": 547,"col": 4,"fields": [7137,7138,7139,7140,7141,7142]},{"file": 39,"line": 410,"col": 4,"fields": [7143,7144,7145,7146,7147]},{"file": 39,"line": 390,"col": 4,"fields": [7148,7149,7150]},{"file": 39,"line": 370,"col": 4,"fields": [7151,7152,7153]},{"file": 46,"line": 77,"col": 12,"docs": " Insert a new node at the head.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [7154,7155]},{"file": 39,"line": 421,"col": 4,"fields": [7156,7157,7158,7159,7160]},{"file": 46,"line": 58,"col": 12,"docs": " Initialize a linked list.\n\n Returns:\n     An empty linked list.\n","fields": []},{"file": 62,"line": 624,"col": 4,"fields": [7161,7162,7163,7164]},{"file": 11,"line": 1518,"col": 4,"docs": " Round an address up to the previous aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [7165,7166]},{"file": 62,"line": 602,"col": 4,"fields": [7167,7168,7169]},{"file": 62,"line": 87,"col": 4,"fields": [7170,7171,7172,7173,7174,7175,7176]},{"file": 62,"line": 278,"col": 4,"fields": [7177]},{"file": 62,"line": 486,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_BEGIN`.\n","fields": [7178,7179]},{"file": 62,"line": 501,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_CURRENT`.\n","fields": [7180,7181]},{"file": 4,"line": 314,"col": 4,"fields": [7182,7183,7184]},{"file": 17,"line": 241,"col": 8,"fields": [7185]},{"file": 17,"line": 248,"col": 8,"fields": [7186]},{"file": 17,"line": 8,"col": 4,"docs": " Returns how many bytes the UTF-8 representation would require\n for the given codepoint.\n","fields": [7187]},{"file": 17,"line": 32,"col": 4,"docs": " Encodes the given codepoint into a UTF-8 byte sequence.\n c: the codepoint.\n out: the out buffer to write to. Must have a len >= utf8CodepointSequenceLength(c).\n Errors: if c cannot be encoded in UTF-8.\n Returns: the number of bytes written to out.\n","fields": [7188,7189]},{"file": 17,"line": 82,"col": 4,"fields": [7190]},{"file": 17,"line": 101,"col": 4,"fields": [7191]},{"file": 17,"line": 125,"col": 4,"fields": [7192]},{"file": 39,"line": 457,"col": 4,"fields": [7193,7194,7195,7196,7197]},{"file": 39,"line": 442,"col": 4,"fields": [7198,7199,7200]},{"file": 39,"line": 479,"col": 4,"fields": [7201,7202,7203,7204,7205]},{"file": 17,"line": 546,"col": 4,"docs": " TODO support codepoints bigger than 16 bits\n TODO type for null terminated pointer\n","fields": [7206,7207]},{"file": 17,"line": 178,"col": 8,"fields": [7208]},{"file": 17,"line": 148,"col": 4,"fields": [7209]},{"file": 17,"line": 186,"col": 8,"fields": [7210]},{"file": 17,"line": 202,"col": 8,"fields": [7211]},{"file": 17,"line": 224,"col": 8,"fields": [7212]},{"file": 4,"line": 718,"col": 4,"docs": " Cast an integer to a different integer type. If the value doesn't fit,\n return an error.\n","fields": [7213,7214]},{"file": 62,"line": 661,"col": 4,"fields": [7215,7216,7217]},{"file": 17,"line": 467,"col": 4,"docs": " Caller must free returned memory.\n","fields": [7218,7219]},{"file": 11,"line": 554,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n Assumes the endianness of memory is native. This means the function can\n simply pointer cast memory.\n","fields": [7220,7221]},{"file": 9,"line": 157,"col": 12,"fields": [7222,7223]},{"file": 12,"line": 1429,"col": 4,"docs": " Test whether a file descriptor refers to a terminal.\n","fields": [7224]},{"file": 12,"line": 1450,"col": 4,"fields": [7225]},{"file": 62,"line": 288,"col": 4,"fields": [7226,7227]},{"file": 52,"line": 29,"col": 12,"fields": []},{"file": 52,"line": 53,"col": 12,"fields": [7228]},{"file": 52,"line": 24,"col": 16,"fields": [7229]},{"file": 62,"line": 315,"col": 4,"docs": " This function is for blocking file descriptors only. For non-blocking, see\n `WriteFileAsync`.\n","fields": [7230,7231]},{"file": 17,"line": 19,"col": 4,"docs": " Given the first byte of a UTF-8 codepoint,\n returns a number 1-4 indicating the total length of the codepoint in bytes.\n If this byte does not match the form of a UTF-8 start byte, returns Utf8InvalidStartByte.\n","fields": [7232]},{"file": 17,"line": 214,"col": 8,"fields": [7233]},{"file": 11,"line": 455,"col": 4,"fields": [7234,7235,7236]},{"file": 23,"line": 466,"col": 0,"fields": [7237,7238,7239,7240,7241,7242]},{"file": 62,"line": 752,"col": 4,"fields": [7243,7244,7245,7246]},{"file": 52,"line": 36,"col": 8,"fields": [7247,7248,7249]},{"file": 11,"line": 473,"col": 4,"fields": [7250,7251,7252,7253]},{"file": 23,"line": 488,"col": 4,"fields": [7254,7255,7256,7257,7258,7259]},{"file": 23,"line": 879,"col": 4,"fields": [7260,7261,7262,7263,7264,7265,7266]},{"file": 23,"line": 932,"col": 0,"fields": [7267,7268,7269,7270,7271,7272,7273]},{"file": 23,"line": 1083,"col": 0,"fields": [7274,7275]},{"file": 11,"line": 265,"col": 4,"fields": [7276,7277,7278]},{"file": 4,"line": 544,"col": 0,"fields": []},{"file": 4,"line": 581,"col": 0,"fields": []},{"file": 4,"line": 830,"col": 0,"fields": []},{"file": 4,"line": 137,"col": 4,"fields": []},{"file": 4,"line": 627,"col": 0,"fields": []},{"file": 4,"line": 145,"col": 4,"fields": []},{"file": 4,"line": 813,"col": 0,"fields": []},{"file": 4,"line": 650,"col": 0,"fields": []},{"file": 4,"line": 772,"col": 0,"fields": []},{"file": 4,"line": 133,"col": 4,"fields": []},{"file": 4,"line": 509,"col": 0,"fields": []},{"file": 4,"line": 604,"col": 0,"fields": []},{"file": 4,"line": 129,"col": 4,"fields": []},{"file": 4,"line": 141,"col": 4,"fields": []},{"file": 4,"line": 533,"col": 0,"fields": []},{"file": 4,"line": 560,"col": 0,"fields": []},{"file": 22,"line": 522,"col": 8,"fields": [7279]},{"file": 22,"line": 530,"col": 8,"fields": [7280,7281]},{"file": 22,"line": 28,"col": 4,"fields": [7282]},{"file": 22,"line": 24,"col": 4,"fields": [7283,7284]},{"file": 8,"line": 13,"col": 0},{"file": 8,"line": 38,"col": 0},{"file": 8,"line": 53,"col": 0},{"file": 8,"line": 66,"col": 0},{"file": 8,"line": 88,"col": 0},{"file": 8,"line": 134,"col": 0},{"file": 5,"line": 140,"col": 0},{"file": 5,"line": 146,"col": 0},{"file": 5,"line": 158,"col": 0},{"file": 5,"line": 178,"col": 0},{"file": 77,"line": 167,"col": 0},{"file": 47,"line": 56,"col": 0},{"file": 47,"line": 117,"col": 0},{"file": 47,"line": 189,"col": 0},{"file": 80,"line": 28,"col": 0},{"file": 80,"line": 81,"col": 0},{"file": 53,"line": 53,"col": 0},{"file": 81,"line": 107,"col": 0},{"file": 81,"line": 122,"col": 0},{"file": 81,"line": 149,"col": 0},{"file": 54,"line": 33,"col": 0},{"file": 55,"line": 82,"col": 0},{"file": 55,"line": 91,"col": 0},{"file": 55,"line": 108,"col": 0},{"file": 56,"line": 231,"col": 0},{"file": 56,"line": 287,"col": 0},{"file": 15,"line": 147,"col": 4,"docs": " This function is intended to be used only in tests. When `ok` is false, the test fails.\n A message is printed to stderr and then abort is called.\n","fields": [7285]},{"file": 90,"line": 16,"col": 4,"docs": " Returns the absolute value of x.\n\n Special Cases:\n  - fabs(+-inf) = +inf\n  - fabs(nan)   = nan\n","fields": [7286]},{"file": 4,"line": 570,"col": 4,"fields": [7287,7288,7289]},{"file": 15,"line": 6,"col": 4,"docs": " This function is intended to be used only in tests. It prints diagnostics to stderr\n and then aborts when actual_error_union is not expected_error.\n","fields": [7290,7291]},{"file": 4,"line": 796,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two).\n Only unsigned integers can be used. Zero is not an allowed input.\n If the value doesn't fit, returns an error.\n","fields": [7292,7293]},{"file": 15,"line": 25,"col": 4,"docs": " This function is intended to be used only in tests. When the two values are not\n equal, prints diagnostics to stderr to show exactly how they are not equal,\n then aborts.\n The types must match exactly.\n","fields": [7294,7295]},{"file": 4,"line": 616,"col": 4,"fields": [7296,7297,7298]},{"file": 4,"line": 784,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two).\n Only unsigned integers can be used. Zero is not an allowed input.\n Result is a type with 1 more bit than the input type.\n","fields": [7299,7300]},{"file": 4,"line": 639,"col": 4,"fields": [7301,7302,7303]},{"file": 4,"line": 756,"col": 4,"fields": [7304,7305]},{"file": 4,"line": 319,"col": 4,"fields": [7306,7307,7308]},{"file": 4,"line": 324,"col": 4,"fields": [7309,7310,7311]},{"file": 4,"line": 333,"col": 4,"fields": [7312,7313,7314]},{"file": 4,"line": 591,"col": 4,"fields": [7315,7316,7317]},{"file": 4,"line": 516,"col": 4,"fields": [7318]},{"file": 4,"line": 549,"col": 4,"fields": [7319,7320,7321]},{"file": 22,"line": 536,"col": 4,"fields": [7322]},{"file": 59,"line": 170,"col": 8,"fields": [7323,7324]},{"file": 8,"line": 19,"col": 4,"fields": [7325]},{"file": 8,"line": 73,"col": 4,"fields": [7326]},{"file": 8,"line": 137,"col": 8,"fields": []},{"file": 8,"line": 106,"col": 12,"fields": []},{"file": 5,"line": 67,"col": 12,"fields": [7327]},{"file": 5,"line": 71,"col": 12,"fields": [7328]},{"file": 8,"line": 113,"col": 12,"fields": [7329]},{"file": 5,"line": 41,"col": 4,"fields": [7330]},{"file": 5,"line": 6,"col": 4,"fields": [7331]},{"file": 5,"line": 75,"col": 12,"fields": [7332,7333]},{"file": 5,"line": 84,"col": 12,"fields": [7334,7335]},{"file": 5,"line": 79,"col": 12,"fields": [7336,7337,7338]},{"file": 5,"line": 88,"col": 12,"fields": [7339,7340,7341]},{"file": 5,"line": 124,"col": 12,"fields": [7342,7343,7344,7345,7346]},{"file": 5,"line": 92,"col": 12,"fields": [7347,7348,7349]},{"file": 5,"line": 96,"col": 12,"fields": [7350,7351,7352]},{"file": 5,"line": 100,"col": 12,"fields": [7353,7354,7355]},{"file": 5,"line": 104,"col": 12,"fields": [7356,7357,7358]},{"file": 5,"line": 108,"col": 12,"fields": [7359,7360,7361]},{"file": 5,"line": 112,"col": 12,"fields": [7362,7363,7364]},{"file": 5,"line": 120,"col": 12,"fields": [7365,7366,7367]},{"file": 5,"line": 116,"col": 12,"fields": [7368,7369,7370]},{"file": 77,"line": 20,"col": 8,"fields": [7371]},{"file": 81,"line": 27,"col": 8,"docs": " NOTE: Because of linux VDSO shenanigans (https://marcan.st/2017/12/debugging-an-evil-go-runtime-bug/)\n      One should ensure that the stack of this function call has at least 1-2 pages of owned memory.\n","fields": [7372]},{"file": 77,"line": 30,"col": 8,"fields": [7373,7374,7375,7376]},{"file": 77,"line": 193,"col": 12,"fields": [7377]},{"file": 81,"line": 55,"col": 8,"fields": [7378,7379]},{"file": 77,"line": 24,"col": 8,"fields": [7380]},{"file": 81,"line": 77,"col": 12,"fields": [7381,7382]},{"file": 47,"line": 24,"col": 16,"fields": [7383]},{"file": 47,"line": 33,"col": 16,"fields": [7384]},{"file": 47,"line": 37,"col": 16,"fields": [7385]},{"file": 47,"line": 42,"col": 16,"fields": [7386]},{"file": 47,"line": 46,"col": 16,"fields": [7387,7388]},{"file": 47,"line": 80,"col": 12,"fields": [7389]},{"file": 47,"line": 29,"col": 16,"fields": [7390]},{"file": 47,"line": 193,"col": 0,"fields": [7391]},{"file": 47,"line": 198,"col": 12,"fields": [7392]},{"file": 47,"line": 101,"col": 8,"fields": [7393]},{"file": 47,"line": 112,"col": 8,"fields": [7394]},{"file": 47,"line": 105,"col": 8,"fields": [7395]},{"file": 47,"line": 207,"col": 12,"fields": [7396]},{"file": 47,"line": 203,"col": 12,"fields": [7397]},{"file": 47,"line": 144,"col": 8,"fields": [7398]},{"file": 47,"line": 180,"col": 8,"fields": [7399]},{"file": 47,"line": 148,"col": 8,"fields": [7400]},{"file": 80,"line": 18,"col": 4,"fields": []},{"file": 80,"line": 24,"col": 4,"fields": []},{"file": 80,"line": 69,"col": 4,"fields": [7401,7402,7403,7404]},{"file": 80,"line": 77,"col": 4,"fields": [7405,7406,7407]},{"file": 80,"line": 73,"col": 4,"fields": [7408,7409]},{"file": 53,"line": 17,"col": 8,"fields": [7410]},{"file": 53,"line": 22,"col": 8,"fields": [7411]},{"file": 53,"line": 30,"col": 8,"fields": [7412,7413,7414]},{"file": 53,"line": 26,"col": 8,"fields": [7415,7416]},{"file": 53,"line": 44,"col": 8,"fields": [7417,7418]},{"file": 53,"line": 40,"col": 8,"fields": []},{"file": 53,"line": 48,"col": 8,"fields": [7419,7420,7421]},{"file": 81,"line": 21,"col": 8,"fields": []},{"file": 35,"line": 120,"col": 8,"docs": " Constant-time implementation off ::uintAtMost.\n The results of this function may be biased.\n","fields": [7422,7423,7424]},{"file": 81,"line": 31,"col": 8,"fields": [7425]},{"file": 81,"line": 102,"col": 8,"fields": [7426]},{"file": 81,"line": 98,"col": 8,"fields": [7427]},{"file": 81,"line": 156,"col": 12,"fields": [7428]},{"file": 81,"line": 160,"col": 12,"fields": [7429]},{"file": 54,"line": 28,"col": 8,"fields": [7430]},{"file": 54,"line": 24,"col": 8,"fields": [7431]},{"file": 55,"line": 29,"col": 12,"fields": []},{"file": 55,"line": 75,"col": 12,"fields": [7432,7433,7434]},{"file": 55,"line": 34,"col": 12,"fields": [7435]},{"file": 55,"line": 66,"col": 12,"fields": [7436,7437]},{"file": 55,"line": 20,"col": 8,"fields": [7438,7439]},{"file": 35,"line": 143,"col": 8,"docs": " Constant-time implementation off ::intRangeLessThan.\n The results of this function may be biased.\n","fields": [7440,7441,7442,7443]},{"file": 56,"line": 237,"col": 0,"fields": [7444,7445]},{"file": 56,"line": 23,"col": 8,"fields": [7446]},{"file": 56,"line": 68,"col": 8,"fields": [7447,7448]},{"file": 56,"line": 28,"col": 8,"fields": [7449]},{"file": 56,"line": 72,"col": 8,"fields": [7450,7451]},{"file": 56,"line": 208,"col": 8,"fields": [7452]},{"file": 57,"line": 47,"col": 8,"fields": [7453]},{"file": 37,"line": 71,"col": 4,"fields": [7454]},{"file": 57,"line": 33,"col": 8,"fields": [7455,7456]},{"file": 56,"line": 83,"col": 8,"fields": [7457,7458]},{"file": 56,"line": 93,"col": 8,"fields": [7459,7460]},{"file": 56,"line": 106,"col": 8,"fields": [7461,7462,7463]},{"file": 57,"line": 11,"col": 12,"fields": [7464]},{"file": 56,"line": 118,"col": 8,"fields": [7465,7466,7467,7468]},{"file": 56,"line": 213,"col": 8,"fields": [7469]},{"file": 57,"line": 17,"col": 12,"fields": [7470,7471]},{"file": 56,"line": 181,"col": 8,"docs": " Alias for `sendmsg()` using one buffer\n","fields": [7472,7473,7474,7475]},{"file": 56,"line": 175,"col": 8,"docs": " Alias for `recvmsg()` using one buffer\n","fields": [7476,7477,7478,7479]},{"file": 56,"line": 221,"col": 8,"fields": [7480]},{"file": 57,"line": 55,"col": 8,"fields": [7481]},{"file": 37,"line": 116,"col": 4,"fields": [7482]},{"file": 23,"line": 1070,"col": 4,"fields": [7483,7484]},{"file": 57,"line": 40,"col": 8,"fields": [7485,7486,7487]},{"file": 56,"line": 226,"col": 8,"fields": [7488]},{"file": 56,"line": 293,"col": 0,"fields": [7489,7490]},{"file": 56,"line": 303,"col": 12,"fields": [7491,7492,7493]},{"file": 56,"line": 323,"col": 12,"fields": [7494]},{"file": 55,"line": 52,"col": 12,"fields": [7495,7496,7497,7498]},{"file": 56,"line": 36,"col": 8,"fields": [7499]},{"file": 56,"line": 328,"col": 12,"fields": [7500,7501,7502]},{"file": 56,"line": 40,"col": 8,"fields": [7503,7504]},{"file": 56,"line": 353,"col": 12,"fields": [7505,7506,7507]},{"file": 56,"line": 148,"col": 8,"docs": " Alias for `write()`\n","fields": [7508,7509,7510]},{"file": 56,"line": 380,"col": 12,"fields": [7511,7512,7513]},{"file": 56,"line": 396,"col": 12,"fields": [7514]},{"file": 56,"line": 400,"col": 12,"fields": [7515,7516,7517,7518]},{"file": 55,"line": 56,"col": 12,"fields": [7519,7520,7521,7522]},{"file": 56,"line": 143,"col": 8,"docs": " Alias for `read()`\n","fields": [7523,7524,7525]},{"file": 55,"line": 16,"col": 8,"fields": [7526]},{"file": 90,"line": 33,"col": 0,"fields": [7527]},{"file": 13,"line": 208,"col": 4,"fields": [7528,7529],"varArgs": true},{"file": 22,"line": 538,"col": 8,"fields": [7530]},{"file": 59,"line": 119,"col": 8,"fields": [7531,7532]},{"file": 80,"line": 5,"col": 4,"fields": [7533,7534]},{"file": 8,"line": 117,"col": 12,"fields": [7535]},{"file": 5,"line": 29,"col": 8,"fields": [7536]},{"file": 5,"line": 132,"col": 8,"fields": [7537,7538,7539,7540]},{"file": 77,"line": 86,"col": 8,"fields": [7541]},{"file": 7,"line": 141,"col": 8,"fields": [7542]},{"file": 77,"line": 97,"col": 8,"fields": [7543,7544,7545,7546]},{"file": 77,"line": 40,"col": 8,"fields": [7547,7548]},{"file": 77,"line": 36,"col": 8,"fields": [7549,7550]},{"file": 81,"line": 39,"col": 8,"fields": [7551]},{"file": 81,"line": 49,"col": 8,"fields": [7552,7553,7554]},{"file": 77,"line": 87,"col": 8,"fields": [7555]},{"file": 7,"line": 182,"col": 8,"fields": [7556,7557]},{"file": 47,"line": 97,"col": 8,"fields": [7558]},{"file": 47,"line": 96,"col": 8,"fields": [7559]},{"file": 47,"line": 135,"col": 8,"fields": [7560]},{"file": 81,"line": 35,"col": 8,"fields": []},{"file": 47,"line": 140,"col": 8,"fields": [7561]},{"file": 7,"line": 216,"col": 4,"fields": []},{"file": 7,"line": 223,"col": 4,"fields": []},{"file": 7,"line": 252,"col": 4,"fields": [7562,7563,7564,7565]},{"file": 7,"line": 269,"col": 4,"fields": [7566,7567,7568]},{"file": 7,"line": 264,"col": 4,"fields": [7569,7570]},{"file": 7,"line": 17,"col": 8,"fields": [7571,7572]},{"file": 7,"line": 10,"col": 8,"fields": []},{"file": 7,"line": 28,"col": 8,"fields": [7573,7574,7575]},{"file": 81,"line": 16,"col": 4,"fields": []},{"file": 35,"line": 46,"col": 8,"docs": " Returns a random int `i` such that `0 <= i <= maxInt(T)`.\n `i` is evenly distributed.\n","fields": [7576,7577]},{"file": 35,"line": 63,"col": 8,"docs": " Constant-time implementation off ::uintLessThan.\n The results of this function may be biased.\n","fields": [7578,7579,7580]},{"file": 7,"line": 153,"col": 8,"fields": [7581]},{"file": 7,"line": 207,"col": 8,"fields": [7582]},{"file": 7,"line": 198,"col": 8,"fields": [7583]},{"file": 58,"line": 17,"col": 8,"fields": [7584]},{"file": 58,"line": 13,"col": 8,"fields": [7585]},{"file": 58,"line": 76,"col": 12,"fields": []},{"file": 58,"line": 111,"col": 12,"fields": [7586,7587,7588]},{"file": 58,"line": 81,"col": 12,"fields": [7589]},{"file": 58,"line": 104,"col": 12,"fields": [7590,7591]},{"file": 58,"line": 69,"col": 8,"fields": [7592,7593]},{"file": 58,"line": 139,"col": 8,"fields": [7594]},{"file": 58,"line": 228,"col": 8,"fields": [7595,7596]},{"file": 58,"line": 152,"col": 8,"fields": [7597]},{"file": 58,"line": 241,"col": 8,"fields": [7598,7599]},{"file": 58,"line": 34,"col": 8,"fields": [7600,7601]},{"file": 58,"line": 253,"col": 8,"fields": [7602,7603]},{"file": 58,"line": 265,"col": 8,"fields": [7604,7605]},{"file": 58,"line": 281,"col": 8,"fields": [7606,7607,7608]},{"file": 58,"line": 332,"col": 8,"fields": [7609,7610,7611,7612]},{"file": 57,"line": 25,"col": 8,"fields": [7613]},{"file": 56,"line": 32,"col": 8,"fields": [7614,7615]},{"file": 56,"line": 200,"col": 8,"docs": " Tries to write data over the given socket using an array of buffers.\n The optional address specifies the IP address the data is directed to.\n The token represents a contiuation for non blocking IO which can be retrieved\n from `zio.Event.getToken()` after polling for events using `zio.Event.Poller.poll()`.\n If the token is 0, the read request is performed synchronously and blocks until completion.\n","fields": [7616,7617,7618,7619]},{"file": 56,"line": 191,"col": 8,"docs": " Tries to read data over the given socket into an array of buffers.\n The optional address specifies the IP address the data is directed to.\n The token represents a contiuation for non blocking IO which can be retrieved\n from `zio.Event.getToken()` after polling for events using `zio.Event.Poller.poll()`.\n If the token is 0, the read request is performed synchronously and blocks until completion.\n","fields": [7620,7621,7622,7623]},{"file": 58,"line": 47,"col": 8,"fields": [7624,7625,7626,7627]},{"file": 57,"line": 29,"col": 8,"fields": [7628]},{"file": 58,"line": 93,"col": 12,"fields": [7629,7630,7631,7632]},{"file": 58,"line": 166,"col": 8,"fields": [7633]},{"file": 58,"line": 212,"col": 8,"fields": [7634,7635]},{"file": 56,"line": 159,"col": 8,"docs": " Alias for `writev()` using one buffer\n","fields": [7636,7637,7638]},{"file": 58,"line": 99,"col": 12,"fields": [7639,7640,7641,7642]},{"file": 56,"line": 153,"col": 8,"docs": " Alias for `readv()` using one buffer\n","fields": [7643,7644,7645]},{"file": 58,"line": 65,"col": 8,"fields": [7646]},{"file": 59,"line": 136,"col": 8,"fields": [7647]},{"file": 74,"line": 166,"col": 4,"docs": " Provides generic hashing for any eligible type.\n Only hashes `key` itself, pointers are not followed.\n Slices are rejected to avoid ambiguity on the user's intention.\n","fields": [7648,7649]},{"file": 59,"line": 162,"col": 8,"fields": [7650]},{"file": 59,"line": 41,"col": 8,"fields": [7651]},{"file": 59,"line": 62,"col": 8,"fields": [7652,7653]},{"file": 59,"line": 73,"col": 8,"fields": [7654,7655]},{"file": 7,"line": 135,"col": 4,"fields": []},{"file": 7,"line": 323,"col": 12,"fields": []},{"file": 77,"line": 89,"col": 8,"fields": [7656,7657,7658]},{"file": 7,"line": 161,"col": 8,"fields": [7659]},{"file": 7,"line": 165,"col": 8,"fields": [7660,7661,7662]},{"file": 7,"line": 157,"col": 8,"fields": []},{"file": 7,"line": 306,"col": 0,"fields": [7663]},{"file": 7,"line": 297,"col": 0,"fields": [7664]},{"file": 7,"line": 42,"col": 4,"docs": " Find the GROUP_AFFINITY of a NUMA node.\n If it only needs logical cpus, calls GetNumaNodeProcessorMaskEx instead to save on allocation\n","fields": [7665,7666,7667]},{"file": 7,"line": 63,"col": 4,"fields": [7668,7669,7670]},{"file": 7,"line": 101,"col": 4,"fields": [7671,7672,7673],"varArgs": true},{"file": 7,"line": 76,"col": 4,"fields": [7674,7675,7676]},{"file": 35,"line": 619,"col": 8,"fields": [7677]},{"file": 35,"line": 36,"col": 8,"docs": " Read random bytes into the specified buffer until full.\n","fields": [7678,7679]},{"file": 35,"line": 281,"col": 4,"docs": " Convert a random integer 0 <= random_int <= maxValue(T),\n into an integer 0 <= result < less_than.\n This function introduces a minor bias.\n","fields": [7680,7681,7682]},{"file": 58,"line": 171,"col": 4,"fields": []},{"file": 58,"line": 467,"col": 4,"fields": [7683]},{"file": 58,"line": 158,"col": 8,"fields": [7684,7685]},{"file": 82,"line": 274,"col": 8,"fields": [7686,7687,7688,7689]},{"file": 11,"line": 1313,"col": 4,"docs": " Converts an integer which has host endianness to big endian.\n","fields": [7690,7691]},{"file": 58,"line": 452,"col": 4,"fields": [7692,7693,7694]},{"file": 58,"line": 276,"col": 4,"fields": [7695]},{"file": 58,"line": 318,"col": 4,"fields": [7696,7697]},{"file": 58,"line": 410,"col": 8,"fields": [7698,7699,7700,7701]},{"file": 56,"line": 133,"col": 4,"fields": [7702]},{"file": 58,"line": 373,"col": 8,"fields": [7703,7704,7705,7706]},{"file": 56,"line": 170,"col": 8,"docs": " Alias for `sendmsg()` with a null address\n","fields": [7707,7708,7709]},{"file": 56,"line": 165,"col": 8,"docs": " Alias for `recvmsg()` with a null address\n","fields": [7710,7711,7712]},{"file": 74,"line": 75,"col": 4,"docs": " Provides generic hashing for any eligible type.\n Strategy is provided to determine if pointers should be followed or not.\n","fields": [7713,7714,7715]},{"file": 59,"line": 48,"col": 4,"fields": [7716,7717]},{"file": 59,"line": 26,"col": 0,"fields": [7718,7719,7720]},{"file": 59,"line": 11,"col": 0,"fields": [7721,7722]},{"file": 59,"line": 16,"col": 0,"fields": [7723]},{"file": 59,"line": 30,"col": 0,"fields": [7724,7725,7726]},{"file": 59,"line": 20,"col": 0,"fields": [7727,7728]},{"file": 7,"line": 327,"col": 8,"fields": []},{"file": 7,"line": 168,"col": 12,"fields": [7729]},{"file": 7,"line": 50,"col": 4,"fields": [7730,7731,7732]},{"file": 35,"line": 674,"col": 4,"fields": [7733,7734]},{"file": 35,"line": 666,"col": 4,"fields": [7735,7736]},{"file": 58,"line": 194,"col": 4,"fields": [7737,7738,7739]},{"file": 58,"line": 224,"col": 4,"fields": [7740,7741,7742,7743]},{"file": 59,"line": 144,"col": 8,"fields": [7744,7745]},{"file": 11,"line": 1339,"col": 4,"docs": "Given a pointer to a single item, returns a slice of the underlying bytes, preserving constness.\n","fields": [7746]},{"file": 4,"line": 944,"col": 4,"fields": [7747,7748,7749]},{"file": 35,"line": 629,"col": 4,"fields": [7750]},{"file": 35,"line": 487,"col": 8,"fields": [7751]},{"file": 35,"line": 491,"col": 8,"fields": [7752]},{"file": 4,"line": 413,"col": 4,"docs": " Rotates left. Only unsigned values can be rotated.\n Negative shift values results in shift modulo the bit count.\n","fields": [7753,7754,7755]},{"file": 4,"line": 340,"col": 4,"docs": " Shifts left. Overflowed bits are truncated.\n A negative shift amount results in a right shift.\n","fields": [7756,7757,7758]},{"file": 4,"line": 366,"col": 4,"docs": " Shifts right. Overflowed bits are truncated.\n A negative shift amount results in a left shift.\n","fields": [7759,7760,7761]},{"file": 23,"line": 530,"col": 0,"fields": [7762,7763,7764,7765,7766,7767]},{"file": 4,"line": 664,"col": 4,"docs": " Returns the absolute value of the integer parameter.\n Result is an unsigned integer.\n","fields": [7768]},{"file": 23,"line": 599,"col": 4,"fields": [7769,7770,7771,7772,7773]},{"file": 23,"line": 901,"col": 0,"fields": [7774,7775,7776,7777,7778,7779,7780]},{"file": 91,"line": 5,"col": 4,"docs": " Returns whether x is negative or negative 0.\n","fields": [7781]},{"file": 92,"line": 6,"col": 4,"docs": " Returns whether x is a nan.\n","fields": [7782]},{"file": 93,"line": 32,"col": 4,"docs": " Returns whether x is an infinity with a positive sign.\n","fields": [7783]},{"file": 72,"line": 81,"col": 4,"docs": " Corrected Errol3 double to ASCII conversion.\n","fields": [7784,7785]},{"file": 72,"line": 23,"col": 4,"docs": " Round a FloatDecimal as returned by errol3 to the specified fractional precision.\n All digits after the specified precision should be considered invalid.\n","fields": [7786,7787,7788]},{"file": 91,"line": 25,"col": 0,"fields": [7789]},{"file": 72,"line": 199,"col": 0,"fields": [7790]},{"file": 94,"line": 440,"col": 0,"fields": [7791,7792]},{"file": 72,"line": 98,"col": 0,"docs": " Uncorrected Errol3 double to ASCII conversion.\n","fields": [7793,7794]},{"file": 72,"line": 297,"col": 0,"docs": " Integer conversion algorithm, guaranteed correct, optimal, and best.\n  @val: The val.\n  @buf: The output buffer.\n  &return: The exponent.\n","fields": [7795,7796]},{"file": 72,"line": 354,"col": 0,"docs": " Fixed point conversion algorithm, guaranteed correct, optimal, and best.\n  @val: The val.\n  @buf: The output buffer.\n  &return: The exponent.\n","fields": [7797,7798]},{"file": 95,"line": 26,"col": 4,"docs": " Breaks x into a normalized fraction and an integral power of two.\n f == frac * 2^exp, with |frac| in the interval [0.5, 1).\n\n Special Cases:\n  - frexp(+-0)   = +-0, 0\n  - frexp(+-inf) = +-inf, 0\n  - frexp(nan)   = nan, undefined\n","fields": [7799]},{"file": 96,"line": 17,"col": 4,"docs": " Returns the greatest integer value less than or equal to x.\n\n Special Cases:\n  - floor(+-0)   = +-0\n  - floor(+-inf) = +-inf\n  - floor(nan)   = nan\n","fields": [7800]},{"file": 72,"line": 219,"col": 0,"docs": " Compute the product of an HP number and a double.\n   @in: The HP number.\n   @val: The double.\n   &returns: The HP number.\n","fields": [7801,7802]},{"file": 72,"line": 262,"col": 0,"docs": " Divide the high-precision number by ten.\n   @hp: The high-precision number\n","fields": [7803]},{"file": 72,"line": 278,"col": 0,"docs": " Multiply the high-precision number by ten.\n   @hp: The high-precision number\n","fields": [7804]},{"file": 72,"line": 409,"col": 0,"fields": [7805]},{"file": 72,"line": 413,"col": 0,"fields": [7806]},{"file": 72,"line": 254,"col": 0,"docs": " Normalize the number by factoring in the error.\n   @hp: The float pair.\n","fields": [7807]},{"file": 72,"line": 668,"col": 0,"fields": [7808]},{"file": 72,"line": 682,"col": 0,"docs": " Given two different integers with the same length in terms of the number\n of decimal digits, index the digits from the right-most position starting\n from zero, find the first index where the digits in the two integers\n divergent starting from the highest index.\n   @a: Integer a.\n   @b: Integer b.\n   &returns: An index within [0, 19).\n","fields": [7809,7810]},{"file": 72,"line": 435,"col": 0,"fields": [7811,7812]},{"file": 95,"line": 72,"col": 0,"fields": [7813]},{"file": 96,"line": 95,"col": 0,"fields": [7814]},{"file": 72,"line": 241,"col": 0,"docs": " Split a double into two halves.\n   @val: The double.\n   @hi: The high bits.\n   @lo: The low bits.\n","fields": [7815,7816,7817]},{"file": 93,"line": 6,"col": 4,"docs": " Returns whether x is an infinity, ignoring sign.\n","fields": [7818]},{"file": 4,"line": 105,"col": 4,"fields": [7819]},{"file": 72,"line": 246,"col": 0,"fields": [7820]},{"file": 97,"line": 104,"col": 0,"fields": []},{"file": 13,"line": 2353,"col": 4,"fields": []},{"file": 97,"line": 187,"col": 0,"fields": []},{"file": 13,"line": 2362,"col": 4,"docs": " Attaches a global SIGSEGV handler which calls @panic(\"segmentation fault\");\n","fields": []},{"file": 3,"line": 5,"col": 4,"fields": []},{"file": 13,"line": 2433,"col": 0,"fields": [7821]},{"file": 61,"line": 99,"col": 8,"docs": " Create a new progress node.\n Call `Node.end` when done.\n TODO solve https://github.com/ziglang/zig/issues/2765 and then change this\n API to return Progress rather than accept it as a parameter.\n","fields": [7822,7823,7824]},{"file": 40,"line": 125,"col": 8,"docs": " Initialize the timer structure.\n","fields": []},{"file": 61,"line": 57,"col": 12,"docs": " Create a new child progress node.\n Call `Node.end` when done.\n TODO solve https://github.com/ziglang/zig/issues/2765 and then change this\n API to set `self.parent.recently_updated_child` with the return value.\n Until that is fixed you probably want to call `activate` on the return value.\n","fields": [7825,7826,7827]},{"file": 61,"line": 90,"col": 12,"docs": " Tell the parent node that this node is actively being worked on.\n","fields": [7828]},{"file": 61,"line": 128,"col": 8,"docs": " Updates the terminal and resets `self.next_refresh_timestamp`.\n","fields": [7829]},{"file": 61,"line": 74,"col": 12,"fields": [7830]},{"file": 61,"line": 179,"col": 8,"fields": [7831,7832,7833],"varArgs": true},{"file": 62,"line": 734,"col": 4,"fields": []},{"file": 62,"line": 743,"col": 4,"fields": []},{"file": 23,"line": 1108,"col": 4,"fields": [7834,7835,7836],"varArgs": true},{"file": 61,"line": 189,"col": 4,"fields": [7837,7838,7839,7840],"varArgs": true},{"file": 40,"line": 154,"col": 8,"docs": " Reads the timer value since start or the last reset in nanoseconds\n","fields": [7841]},{"file": 61,"line": 120,"col": 8,"docs": " Updates the terminal if enough time has passed since last update.\n","fields": [7842]},{"file": 61,"line": 68,"col": 12,"docs": " This is the same as calling `start` and then `end` on the returned `Node`.\n","fields": [7843]},{"file": 23,"line": 1095,"col": 0,"fields": [7844,7845]},{"file": 40,"line": 178,"col": 4,"fields": []},{"file": 5,"line": 57,"col": 8,"docs": " Used for resolved int/float types with weird bit sizes (e.g. u7)\n and store them in an atomic-type compatible backing with conversions in and out.\n","fields": [7846]},{"file": 5,"line": 45,"col": 4,"fields": [7847]},{"file": 22,"line": 520,"col": 4,"fields": [7848]},{"file": 6,"line": 15,"col": 4,"fields": [7849]},{"file": 7,"line": 319,"col": 4,"fields": [7850,7851]},{"file": 63,"line": 116,"col": 4,"docs": "\n","fields": [7852]},{"file": 63,"line": 118,"col": 12,"fields": [7853]},{"file": 8,"line": 94,"col": 4,"fields": [7854]},{"file": 98,"line": 11,"col": 0,"fields": [7855]},{"file": 9,"line": 7,"col": 4,"fields": [7856]},{"file": 4,"line": 430,"col": 4,"fields": [7857]},{"file": 10,"line": 67,"col": 4,"fields": [7858]},{"file": 8,"line": 44,"col": 4,"fields": [7859,7860]},{"file": 36,"line": 88,"col": 4,"fields": [7861]},{"file": 36,"line": 556,"col": 4,"docs": " Given a type, reference all the declarations inside, so that the semantic analyzer sees them.\n","fields": [7862]},{"file": 46,"line": 14,"col": 4,"docs": " A singly-linked list is headed by a single forward pointer. The elements\n are singly linked for minimum space and pointer manipulation overhead at\n the expense of O(n) removal for arbitrary elements. New elements can be\n added to the list after an existing element or at the head of the list.\n A singly-linked list may only be traversed in the forward direction.\n Singly-linked lists are ideal for applications with large datasets and\n few or no removals or for implementing a LIFO queue.\n","fields": [7863]},{"file": 7,"line": 489,"col": 0,"fields": []},{"file": 4,"line": 236,"col": 4,"docs": " Given two types, returns the smallest one which is capable of holding the\n full range of the minimum value.\n","fields": [7864,7865]},{"file": 8,"line": 60,"col": 4,"fields": [7866]},{"file": 4,"line": 891,"col": 4,"fields": [7867]},{"file": 22,"line": 20,"col": 4,"docs": " Builtin hashmap for strings as keys.\n","fields": [7868]},{"file": 63,"line": 322,"col": 4,"docs": "\n","fields": [7869]},{"file": 4,"line": 884,"col": 4,"fields": [7870]},{"file": 9,"line": 11,"col": 4,"fields": [7871,7872]},{"file": 95,"line": 10,"col": 0,"fields": [7873]},{"file": 11,"line": 1320,"col": 0,"fields": [7874]},{"file": 8,"line": 5,"col": 4,"fields": [7875]},{"file": 4,"line": 306,"col": 4,"fields": [7876,7877]},{"file": 47,"line": 14,"col": 4,"fields": [7878]},{"file": 22,"line": 32,"col": 4,"fields": [7879,7880,7881,7882]},{"file": 7,"line": 488,"col": 0,"fields": []},{"file": 22,"line": 528,"col": 4,"fields": [7883]},{"file": 63,"line": 228,"col": 4,"docs": "\n","fields": [7884]},{"file": 63,"line": 261,"col": 4,"docs": "\n","fields": [7885]},{"file": 36,"line": 102,"col": 4,"fields": [7886]},{"file": 5,"line": 49,"col": 11,"fields": [7887]},{"file": 8,"line": 97,"col": 26,"fields": [7888,7889,7890]},{"file": 6,"line": 16,"col": 11,"fields": [7891]},{"file": 1,"line": 184,"col": 24,"fields": [7892,7893,7894,7895,7896,7897]},{"file": 5,"line": 21,"col": 24,"fields": [7898,7899,7900,7901,7902,7903]},{"file": 7,"line": 320,"col": 11,"fields": []},{"file": 58,"line": 692,"col": 56,"fields": [7904,7905,7906,7907,7908,7909,7910,7911,7912,7913,7914,7915,7916,7917]},{"file": 1,"line": 212,"col": 19,"fields": [7918,7919,7920,7921,7922,7923,7924,7925,7926,7927,7928,7929,7930,7931,7932,7933,7934,7935,7936,7937,7938,7939,7940,7941,7942,7943]},{"file": 8,"line": 95,"col": 11,"fields": [7944,7945]},{"file": 98,"line": 12,"col": 11,"fields": [7946,7947]},{"file": 9,"line": 17,"col": 11,"fields": [7948,7949,7950]},{"file": 27,"line": 39,"col": 32,"fields": [7951,7952,7953,7954,7955,7956,7957,7958,7959]},{"file": 10,"line": 68,"col": 11,"fields": [7960]},{"file": 2,"line": 0,"col": 0,"fields": []},{"file": 46,"line": 15,"col": 11,"fields": [7961]},{"file": 22,"line": 33,"col": 11,"fields": [7962,7963,7964,7965,7966]},{"file": 95,"line": 11,"col": 11,"fields": [7967,7968]},{"file": 5,"line": 147,"col": 18,"fields": [7969]},{"file": 5,"line": 162,"col": 19,"fields": [7970,7971,7972,7973,7974]},{"file": 47,"line": 19,"col": 31,"fields": [7975,7976]},{"file": 28,"line": 256,"col": 20,"fields": [7977]},{"file": 8,"line": 6,"col": 11,"fields": [7978,7979]},{"file": 47,"line": 15,"col": 15,"fields": [7980,7981]},{"file": 13,"line": 1215,"col": 18,"fields": [7982,7983,7984]},{"file": 13,"line": 29,"col": 15,"fields": [7985,7986,7987,7988,7989,7990,7991]},{"file": 77,"line": 112,"col": 89,"fields": [7992,7993,7994]},{"file": 5,"line": 150,"col": 18,"fields": [7995,7996]},{"file": 4,"line": 0,"col": 0,"fields": []},{"file": 47,"line": 129,"col": 23,"fields": [7997,7998,7999]},{"file": 0,"line": 0,"col": 0,"fields": []},{"file": 1,"line": 0,"col": 0,"fields": []},{"file": 3,"line": 0,"col": 0,"fields": []},{"file": 50,"line": 362,"col": 26,"fields": [8000,8001]},{"file": 50,"line": 11,"col": 17,"fields": [8002]},{"file": 1,"line": 0,"col": 23,"fields": [8003,8004]},{"file": 28,"line": 32,"col": 17,"fields": [8005,8006,8007,8008,8009,8010,8011]},{"file": 50,"line": 348,"col": 25,"fields": [8012,8013]},{"file": 51,"line": 217,"col": 24,"fields": [8014,8015,8016]},{"file": 51,"line": 222,"col": 21,"fields": [8017,8018,8019]},{"file": 11,"line": 900,"col": 26,"fields": [8020,8021,8022]},{"file": 27,"line": 627,"col": 18,"fields": [8023,8024,8025,8026,8027]},{"file": 27,"line": 102,"col": 23,"fields": [8028,8029,8030,8031]},{"file": 13,"line": 553,"col": 17,"fields": [8032,8033,8034,8035,8036,8037,8038]},{"file": 13,"line": 1400,"col": 21,"fields": [8039,8040,8041,8042]},{"file": 23,"line": 18,"col": 26,"fields": [8043,8044,8045,8046]},{"file": 39,"line": 339,"col": 27,"fields": [8047,8048,8049,8050]},{"file": 39,"line": 426,"col": 33,"fields": [8051,8052,8053]},{"file": 17,"line": 237,"col": 28,"fields": [8054,8055]},{"file": 17,"line": 175,"col": 21,"fields": [8056]},{"file": 17,"line": 210,"col": 25,"fields": [8057,8058]},{"file": 52,"line": 17,"col": 26,"fields": [8059,8060]},{"file": 52,"line": 21,"col": 25,"fields": [8061]},{"file": 81,"line": 7,"col": 22,"fields": [8062,8063]},{"file": 53,"line": 11,"col": 24,"fields": [8064,8065]},{"file": 53,"line": 6,"col": 20,"fields": [8066,8067]},{"file": 54,"line": 21,"col": 19,"fields": [8068]},{"file": 55,"line": 6,"col": 18,"fields": [8069]},{"file": 56,"line": 46,"col": 23,"fields": [8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082]},{"file": 56,"line": 6,"col": 19,"fields": [8083]},{"file": 57,"line": 5,"col": 20,"fields": [8084,8085]},{"file": 57,"line": 6,"col": 25,"fields": [8086,8087,8088]},{"file": 37,"line": 111,"col": 20,"fields": [8089,8090]},{"file": 35,"line": 614,"col": 25,"fields": [8091,8092]},{"file": 58,"line": 10,"col": 19,"fields": [8093]},{"file": 58,"line": 62,"col": 18,"fields": [8094]},{"file": 58,"line": 133,"col": 19,"fields": [8095,8096,8097,8098]},{"file": 58,"line": 28,"col": 21,"fields": [8099]},{"file": 59,"line": 130,"col": 19,"fields": [8100,8101,8102]},{"file": 59,"line": 37,"col": 24,"fields": [8103,8104]},{"file": 60,"line": 508,"col": 17,"fields": [8105,8106,8107,8108]},{"file": 35,"line": 484,"col": 19,"fields": [8109]},{"file": 72,"line": 9,"col": 25,"fields": [8110,8111]},{"file": 72,"line": 14,"col": 22,"fields": [8112,8113]},{"file": 94,"line": 435,"col": 13,"fields": [8114,8115]},{"file": 99,"line": 0,"col": 15,"fields": [8116,8117]},{"file": 61,"line": 42,"col": 21,"fields": [8118,8119,8120,8121,8122,8123]},{"file": 5,"line": 0,"col": 0,"fields": []},{"file": 45,"line": 251,"col": 21,"fields": [8124,8125,8126,8127,8128]},{"file": 6,"line": 0,"col": 0,"fields": []},{"file": 7,"line": 0,"col": 0,"fields": []},{"file": 8,"line": 0,"col": 0,"fields": []},{"file": 9,"line": 0,"col": 0,"fields": []},{"file": 10,"line": 0,"col": 0,"fields": []},{"file": 11,"line": 0,"col": 0,"fields": []},{"file": 64,"line": 246,"col": 26,"fields": [8129]},{"file": 65,"line": 8,"col": 19,"fields": [8130]},{"file": 66,"line": 6,"col": 19,"fields": [8131]},{"file": 12,"line": 16,"col": 0,"fields": []},{"file": 13,"line": 0,"col": 0,"fields": []},{"file": 70,"line": 9,"col": 19,"fields": [8132]},{"file": 14,"line": 0,"col": 0,"fields": []},{"file": 15,"line": 0,"col": 0,"fields": []},{"file": 10,"line": 686,"col": 28,"fields": [8133,8134]},{"file": 16,"line": 0,"col": 0,"fields": []},{"file": 17,"line": 0,"col": 0,"fields": []},{"file": 18,"line": 0,"col": 0,"fields": []},{"file": 19,"line": 0,"col": 0,"fields": []},{"file": 20,"line": 0,"col": 0,"fields": []},{"file": 21,"line": 9,"col": 0,"fields": []},{"file": 71,"line": 18,"col": 25,"fields": [8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8148,8149,8150,8151,8152]},{"file": 22,"line": 0,"col": 0,"fields": []},{"file": 23,"line": 0,"col": 0,"fields": []},{"file": 24,"line": 0,"col": 0,"fields": []},{"file": 25,"line": 0,"col": 0,"fields": []},{"file": 26,"line": 4,"col": 0,"fields": []},{"file": 27,"line": 0,"col": 0,"fields": []},{"file": 73,"line": 8,"col": 19,"fields": [8153]},{"file": 28,"line": 0,"col": 0,"fields": []},{"file": 29,"line": 0,"col": 0,"fields": []},{"file": 30,"line": 0,"col": 0,"fields": []},{"file": 31,"line": 0,"col": 0,"fields": []},{"file": 32,"line": 0,"col": 0,"fields": []},{"file": 33,"line": 0,"col": 0,"fields": []},{"file": 34,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 16,"col": 0,"fields": []},{"file": 36,"line": 0,"col": 0,"fields": []},{"file": 37,"line": 0,"col": 0,"fields": []},{"file": 38,"line": 0,"col": 0,"fields": []},{"file": 39,"line": 0,"col": 0,"fields": []},{"file": 40,"line": 0,"col": 0,"fields": []},{"file": 61,"line": 9,"col": 21,"fields": [8154,8155,8156,8157,8158,8159,8160,8161,8162]},{"file": 41,"line": 0,"col": 0,"fields": []},{"file": 42,"line": 0,"col": 0,"fields": []},{"file": 43,"line": 0,"col": 0,"fields": []},{"file": 76,"line": 6,"col": 21,"fields": [8163]},{"file": 44,"line": 0,"col": 0,"fields": []},{"file": 45,"line": 0,"col": 0,"fields": []},{"file": 46,"line": 0,"col": 0,"fields": []},{"file": 46,"line": 19,"col": 25,"fields": [8164,8165]},{"file": 22,"line": 44,"col": 23,"fields": [8166,8167]},{"file": 22,"line": 49,"col": 22,"fields": [8168,8169,8170]},{"file": 28,"line": 260,"col": 22,"fields": [8171,8172,8173,8174,8175,8176,8177,8178,8179,8180]},{"file": 47,"line": 0,"col": 0,"fields": []},{"file": 77,"line": 17,"col": 18,"fields": [8181]},{"file": 27,"line": 52,"col": 20,"fields": [8182,8183,8184,8185,8186,8187,8188,8189,8190,8191,8192,8193]},{"file": 48,"line": 0,"col": 0,"fields": []},{"file": 49,"line": 0,"col": 0,"fields": []},{"file": 0,"line": 28,"col": 16,"fields": []},{"file": 0,"line": 16,"col": 17,"fields": []},{"file": 0,"line": 9,"col": 17,"fields": []},{"file": 1,"line": 193,"col": 24,"fields": [8194,8195,8196,8197,8198,8199,8200,8201,8202]},{"file": 1,"line": 47,"col": 17,"fields": [8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252]},{"file": 1,"line": 427,"col": 19,"fields": [8253,8254]},{"file": 1,"line": 205,"col": 17,"fields": [8255,8256,8257,8258]},{"file": 1,"line": 7,"col": 15,"fields": [8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271,8272,8273,8274,8275,8276,8277,8278,8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295]},{"file": 1,"line": 177,"col": 26,"fields": [8296,8297,8298,8299]},{"file": 1,"line": 241,"col": 21,"fields": [8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8319,8320,8321,8322,8323,8324,8325]},{"file": 1,"line": 464,"col": 15,"fields": [8326,8327]},{"file": 50,"line": 0,"col": 0,"fields": []},{"file": 13,"line": 1268,"col": 23,"fields": [8328,8329,8330,8331]},{"file": 11,"line": 15,"col": 22,"fields": [8332,8333]},{"file": 28,"line": 225,"col": 19,"fields": [8334,8335,8336,8337,8338,8339,8340]},{"file": 28,"line": 235,"col": 23,"fields": [8341,8342]},{"file": 28,"line": 245,"col": 28,"fields": [8343,8344,8345,8346,8347,8348,8349,8350]},{"file": 51,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 461,"col": 16,"fields": [8351,8352,8353,8354,8355,8356]},{"file": 27,"line": 491,"col": 12,"fields": [8357,8358]},{"file": 27,"line": 581,"col": 19,"fields": [8359,8360,8361,8362,8363,8364,8365]},{"file": 13,"line": 884,"col": 32,"fields": [8366,8367]},{"file": 27,"line": 16,"col": 28,"fields": [8368,8369,8370,8371,8372,8373,8374,8375,8376,8377,8378,8379,8380,8381,8382,8383,8384,8385,8386,8387]},{"file": 52,"line": 0,"col": 0,"fields": []},{"file": 60,"line": 691,"col": 33,"fields": [8388,8389,8390,8391,8392,8393]},{"file": 60,"line": 705,"col": 25,"fields": [8394]},{"file": 81,"line": 73,"col": 27,"fields": [8395,8396]},{"file": 47,"line": 194,"col": 22,"fields": [8397,8398]},{"file": 47,"line": 93,"col": 21,"fields": [8399]},{"file": 47,"line": 121,"col": 18,"fields": [8400,8401]},{"file": 53,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 32,"col": 19,"fields": [8402]},{"file": 54,"line": 0,"col": 0,"fields": []},{"file": 55,"line": 24,"col": 23,"fields": [8403]},{"file": 55,"line": 0,"col": 0,"fields": []},{"file": 58,"line": 219,"col": 23,"fields": [8404,8405]},{"file": 56,"line": 0,"col": 0,"fields": []},{"file": 57,"line": 0,"col": 0,"fields": []},{"file": 56,"line": 297,"col": 19,"fields": [8406,8407,8408,8409]},{"file": 56,"line": 371,"col": 19,"fields": [8410,8411,8412,8413]},{"file": 77,"line": 85,"col": 16,"fields": []},{"file": 58,"line": 0,"col": 0,"fields": []},{"file": 58,"line": 602,"col": 15,"fields": [8414,8415]},{"file": 58,"line": 73,"col": 23,"fields": [8416]},{"file": 58,"line": 655,"col": 25,"fields": [8417,8418,8419,8420]},{"file": 58,"line": 446,"col": 29,"fields": [8421,8422,8423]},{"file": 60,"line": 214,"col": 23,"fields": [8424,8425,8426,8427,8428]},{"file": 58,"line": 573,"col": 21,"fields": [8429,8430,8431,8432,8433]},{"file": 58,"line": 566,"col": 20,"fields": [8434,8435,8436,8437]},{"file": 58,"line": 552,"col": 17,"fields": [8438,8439]},{"file": 59,"line": 0,"col": 0,"fields": []},{"file": 7,"line": 346,"col": 23,"fields": [8440,8441,8442]},{"file": 7,"line": 409,"col": 48,"fields": [8443,8444,8445]},{"file": 60,"line": 2,"col": 0,"fields": []},{"file": 60,"line": 751,"col": 31,"fields": [8446,8447]},{"file": 40,"line": 99,"col": 18,"fields": [8448,8449,8450]},{"file": 61,"line": 0,"col": 0,"fields": []},{"file": 23,"line": 1091,"col": 24,"fields": [8451]},{"file": 7,"line": 131,"col": 19,"fields": []},{"file": 7,"line": 9,"col": 24,"fields": []},{"file": 7,"line": 371,"col": 29,"fields": [8452,8453,8454,8455]},{"file": 7,"line": 378,"col": 31,"fields": [8456,8457,8458,8459,8460]},{"file": 7,"line": 438,"col": 25,"fields": [8461,8462]},{"file": 7,"line": 386,"col": 31,"fields": [8463,8464,8465]},{"file": 7,"line": 426,"col": 13,"fields": [8466,8467]},{"file": 7,"line": 420,"col": 17,"fields": [8468,8469]},{"file": 7,"line": 431,"col": 28,"fields": [8470,8471]},{"file": 7,"line": 402,"col": 27,"fields": [8472,8473,8474,8475]},{"file": 62,"line": 6,"col": 0,"fields": []},{"file": 7,"line": 392,"col": 27,"fields": [8476,8477,8478,8479,8480,8481,8482]},{"file": 7,"line": 364,"col": 29,"fields": [8483,8484,8485,8486]},{"file": 10,"line": 18,"col": 17,"fields": [8487,8488]},{"file": 3,"line": 0,"col": 0,"fields": []},{"file": 63,"line": 0,"col": 0,"fields": []},{"file": 64,"line": 0,"col": 0,"fields": []},{"file": 65,"line": 0,"col": 0,"fields": []},{"file": 65,"line": 42,"col": 20,"fields": [8489,8490,8491]},{"file": 66,"line": 0,"col": 0,"fields": []},{"file": 67,"line": 2,"col": 0,"fields": []},{"file": 68,"line": 3,"col": 0,"fields": []},{"file": 69,"line": 7,"col": 0,"fields": []},{"file": 13,"line": 1200,"col": 20,"fields": [8492,8493,8494]},{"file": 70,"line": 0,"col": 0,"fields": []},{"file": 71,"line": 0,"col": 0,"fields": []},{"file": 71,"line": 62,"col": 22,"fields": [8495,8496,8497,8498]},{"file": 71,"line": 55,"col": 21,"fields": [8499,8500,8501,8502]},{"file": 23,"line": 12,"col": 22,"fields": [8503,8504,8505]},{"file": 72,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 422,"col": 32,"fields": [8506,8507,8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519]},{"file": 27,"line": 355,"col": 31,"fields": [8520,8521,8522,8523]},{"file": 27,"line": 377,"col": 36,"fields": [8524,8525,8526]},{"file": 27,"line": 450,"col": 33,"fields": [8527,8528,8529]},{"file": 27,"line": 405,"col": 30,"fields": [8530,8531]},{"file": 27,"line": 389,"col": 28,"fields": [8532,8533]},{"file": 27,"line": 442,"col": 34,"fields": [8534,8535]},{"file": 27,"line": 327,"col": 25,"fields": [8536,8537,8538,8539,8540,8541,8542,8543]},{"file": 27,"line": 343,"col": 25,"fields": [8544,8545]},{"file": 27,"line": 111,"col": 23,"fields": [8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,8556,8557,8558,8559,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8574,8575,8576,8577,8578,8579,8580,8581,8582,8583,8584,8585,8586,8587,8588,8589,8590,8591,8592,8593,8594,8595,8596,8597,8598,8599,8600,8601,8602,8603,8604,8605,8606,8607,8608,8609,8610,8611,8612,8613,8614,8615,8616,8617,8618,8619,8620,8621,8622,8623,8624,8625,8626,8627,8628,8629,8630,8631,8632,8633,8634,8635,8636,8637,8638,8639,8640,8641,8642,8643,8644,8645,8646,8647,8648,8649,8650,8651,8652,8653,8654,8655,8656,8657,8658,8659,8660,8661,8662,8663,8664,8665,8666,8667,8668,8669,8670,8671,8672,8673,8674,8675,8676,8677,8678,8679,8680,8681,8682,8683,8684,8685,8686,8687,8688,8689,8690,8691,8692,8693,8694,8695,8696,8697,8698,8699,8700,8701,8702,8703,8704,8705,8706,8707,8708,8709,8710,8711,8712,8713,8714,8715,8716,8717,8718,8719,8720,8721,8722,8723,8724,8725,8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,8736,8737,8738,8739,8740,8741]},{"file": 27,"line": 312,"col": 20,"fields": [8742,8743,8744,8745,8746,8747,8748,8749,8750,8751]},{"file": 27,"line": 411,"col": 36,"fields": [8752,8753,8754]},{"file": 27,"line": 338,"col": 41,"fields": [8755,8756]},{"file": 27,"line": 367,"col": 22,"fields": [8757,8758]},{"file": 73,"line": 0,"col": 0,"fields": []},{"file": 74,"line": 0,"col": 0,"fields": []},{"file": 75,"line": 0,"col": 0,"fields": []},{"file": 39,"line": 41,"col": 24,"fields": []},{"file": 76,"line": 0,"col": 0,"fields": []},{"file": 45,"line": 205,"col": 23,"fields": [8759,8760,8761,8762,8763,8764,8765,8766,8767,8768,8769,8770]},{"file": 45,"line": 10,"col": 27,"fields": [8771,8772,8773,8774,8775,8776,8777,8778]},{"file": 28,"line": 261,"col": 17,"fields": [8779,8780]},{"file": 47,"line": 10,"col": 18,"fields": []},{"file": 77,"line": 0,"col": 0,"fields": []},{"file": 78,"line": 0,"col": 0,"fields": []},{"file": 79,"line": 0,"col": 0,"fields": []},{"file": 54,"line": 9,"col": 18,"fields": []},{"file": 80,"line": 0,"col": 0,"fields": []},{"file": 81,"line": 0,"col": 0,"fields": []},{"file": 81,"line": 12,"col": 19,"fields": []},{"file": 1,"line": 98,"col": 22,"fields": [8781,8782,8783,8784,8785,8786,8787,8788,8789,8790,8791,8792,8793,8794,8795,8796,8797,8798,8799,8800,8801,8802,8803]},{"file": 1,"line": 134,"col": 24,"fields": [8804,8805,8806]},{"file": 1,"line": 123,"col": 22,"fields": [8807,8808,8809,8810,8811,8812,8813,8814,8815]},{"file": 1,"line": 312,"col": 23,"fields": [8816,8817,8818]},{"file": 1,"line": 295,"col": 22,"fields": [8819,8820]},{"file": 1,"line": 322,"col": 27,"fields": [8821,8822]},{"file": 1,"line": 279,"col": 24,"fields": [8823,8824,8825,8826,8827,8828]},{"file": 1,"line": 334,"col": 26,"fields": [8829,8830]},{"file": 1,"line": 300,"col": 32,"fields": [8831,8832,8833]},{"file": 1,"line": 391,"col": 28,"fields": [8834,8835,8836]},{"file": 1,"line": 352,"col": 22,"fields": [8837,8838,8839,8840]},{"file": 1,"line": 318,"col": 25,"fields": [8841]},{"file": 1,"line": 339,"col": 21,"fields": [8842,8843,8844,8845]},{"file": 1,"line": 359,"col": 34,"fields": [8846,8847,8848,8849,8850,8851]},{"file": 1,"line": 386,"col": 23,"fields": [8852,8853]},{"file": 1,"line": 275,"col": 22,"fields": [8854]},{"file": 1,"line": 346,"col": 27,"fields": [8855,8856,8857]},{"file": 1,"line": 306,"col": 28,"fields": [8858,8859,8860]},{"file": 1,"line": 382,"col": 25,"fields": [8861]},{"file": 1,"line": 327,"col": 22,"fields": [8862,8863]},{"file": 1,"line": 374,"col": 19,"fields": [8864,8865,8866,8867,8868]},{"file": 1,"line": 368,"col": 22,"fields": [8869,8870,8871]},{"file": 1,"line": 270,"col": 20,"fields": [8872,8873]},{"file": 28,"line": 236,"col": 26,"fields": [8874,8875]},{"file": 13,"line": 904,"col": 23,"fields": [8876,8877]},{"file": 60,"line": 285,"col": 32,"fields": [8878,8879,8880]},{"file": 56,"line": 205,"col": 20,"fields": []},{"file": 56,"line": 218,"col": 20,"fields": []},{"file": 58,"line": 671,"col": 20,"fields": []},{"file": 82,"line": 0,"col": 0,"fields": []},{"file": 58,"line": 561,"col": 17,"fields": [8881,8882]},{"file": 58,"line": 557,"col": 16,"fields": [8883]},{"file": 58,"line": 607,"col": 16,"fields": [8884,8885,8886,8887,8888,8889,8890]},{"file": 7,"line": 412,"col": 11,"fields": [8891,8892,8893,8894]},{"file": 83,"line": 0,"col": 0,"fields": []},{"file": 84,"line": 0,"col": 0,"fields": []},{"file": 60,"line": 742,"col": 29,"fields": [8895,8896,8897,8898,8899,8900]},{"file": 60,"line": 603,"col": 18,"fields": [8901,8902]},{"file": 85,"line": 0,"col": 0,"fields": []},{"file": 60,"line": 679,"col": 39,"fields": [8903,8904,8905,8906,8907,8908,8909,8910,8911]},{"file": 60,"line": 674,"col": 23,"fields": [8912,8913]},{"file": 60,"line": 486,"col": 24,"fields": [8914,8915,8916,8917,8918,8919,8920,8921,8922,8923]},{"file": 60,"line": 661,"col": 39,"fields": [8924,8925,8926,8927,8928]},{"file": 60,"line": 262,"col": 27,"fields": [8929,8930]},{"file": 60,"line": 596,"col": 23,"fields": [8931,8932,8933,8934]},{"file": 86,"line": 0,"col": 0,"fields": []},{"file": 87,"line": 0,"col": 0,"fields": []},{"file": 88,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 395,"col": 22,"fields": [8935,8936,8937]},{"file": 74,"line": 7,"col": 25,"fields": [8938,8939,8940]},{"file": 1,"line": 287,"col": 25,"fields": [8941,8942,8943,8944]},{"file": 1,"line": 396,"col": 25,"fields": [8945,8946,8947]},{"file": 82,"line": 196,"col": 19,"fields": [8948]},{"file": 60,"line": 487,"col": 11,"fields": [8949,8950]},{"file": 1,"line": 401,"col": 31,"fields": [8951,8952,8953,8954,8955,8956,8957,8958,8959]},{"file": 60,"line": 489,"col": 15,"fields": [8960,8961]},{"file": 1,"line": 412,"col": 35,"fields": [8962,8963,8964]},{"file": 5,"line": 128,"col": 12,"fields": [8965,8966,8967,8968,8969]},{"file": 5,"line": 52,"col": 12},{"file": 5,"line": 53,"col": 12},{"file": 6,"line": 164,"col": 12,"fields": [8970,8971]},{"file": 6,"line": 184,"col": 12,"fields": [8972,8973]},{"file": 6,"line": 90,"col": 12,"docs": " Allocates enough memory to hold all the contents of the stream. If the allocated\n memory would be greater than `max_size`, returns `error.StreamTooLong`.\n Caller owns returned memory.\n If this function returns an error, the contents from the stream read so far are lost.\n","fields": [8974,8975,8976]},{"file": 6,"line": 102,"col": 12,"docs": " Replaces `buffer` contents by reading from the stream until `delimiter` is found.\n Does not include the delimiter in the result.\n If `buffer.len()` would exceed `max_size`, `error.StreamTooLong` is returned and the contents\n read from the stream so far are lost.\n","fields": [8977,8978,8979,8980]},{"file": 6,"line": 152,"col": 12,"docs": " Reads a foreign-endian integer\n","fields": [8981,8982]},{"file": 6,"line": 19,"col": 12},{"file": 6,"line": 145,"col": 12,"docs": " Reads a native-endian integer\n","fields": [8983,8984]},{"file": 6,"line": 140,"col": 12,"docs": " Same as `readByte` except the returned byte is signed.\n","fields": [8985]},{"file": 6,"line": 176,"col": 12,"fields": [8986,8987,8988,8989]},{"file": 6,"line": 18,"col": 12},{"file": 6,"line": 124,"col": 12,"docs": " Allocates enough memory to read until `delimiter`. If the allocated\n memory would be greater than `max_size`, returns `error.StreamTooLong`.\n Caller owns returned memory.\n If this function returns an error, the contents from the stream read so far are lost.\n","fields": [8990,8991,8992,8993]},{"file": 6,"line": 66,"col": 12,"docs": " Replaces `buffer` contents by reading from the stream until it is finished.\n If `buffer.len()` would exceed `max_size`, `error.StreamTooLong` is returned and\n the contents read from the stream are lost.\n","fields": [8994,8995,8996]},{"file": 6,"line": 170,"col": 12,"fields": [8997,8998,8999]},{"file": 6,"line": 17,"col": 8},{"file": 7,"line": 321,"col": 8},{"file": 8,"line": 97,"col": 12},{"file": 8,"line": 96,"col": 12},{"file": 9,"line": 63,"col": 12,"docs": " Sets the value at index `i`, asserting that the value is in range.\n","fields": [9000,9001,9002]},{"file": 9,"line": 57,"col": 12,"docs": " Sets the value at index `i`, or returns `error.OutOfBounds` if\n the index is not in range.\n","fields": [9003,9004,9005]},{"file": 9,"line": 116,"col": 12,"fields": [9006,9007]},{"file": 9,"line": 146,"col": 12,"docs": " Removes the element at the specified index and returns it\n or an error.OutOfBounds is returned. If no error then\n the empty slot is filled from the end of the list.\n","fields": [9008,9009]},{"file": 9,"line": 51,"col": 12,"fields": [9010,9011]},{"file": 9,"line": 134,"col": 12,"docs": " Removes the element at the specified index and returns it.\n The empty slot is filled from the end of the list.\n","fields": [9012,9013]},{"file": 9,"line": 220,"col": 12,"fields": [9014]},{"file": 9,"line": 193,"col": 12,"fields": [9015]},{"file": 9,"line": 47,"col": 12,"fields": [9016]},{"file": 9,"line": 151,"col": 12,"fields": [9017,9018]},{"file": 9,"line": 103,"col": 12,"fields": [9019,9020,9021]},{"file": 9,"line": 79,"col": 12,"docs": " ArrayList takes ownership of the passed in slice. The slice must have been\n allocated with `allocator`.\n Deinitialize with `deinit` or use `toOwnedSlice`.\n","fields": [9022,9023]},{"file": 9,"line": 28,"col": 12},{"file": 9,"line": 39,"col": 12,"fields": [9024]},{"file": 9,"line": 95,"col": 12,"fields": [9025,9026,9027]},{"file": 9,"line": 203,"col": 12},{"file": 9,"line": 162,"col": 12,"fields": [9028,9029]},{"file": 9,"line": 27,"col": 12},{"file": 9,"line": 121,"col": 12,"fields": [9030,9031]},{"file": 9,"line": 198,"col": 12,"fields": [9032]},{"file": 9,"line": 18,"col": 8},{"file": 10,"line": 109,"col": 12,"fields": [9033,9034,9035]},{"file": 10,"line": 121,"col": 12,"fields": [9036,9037,9038,9039]},{"file": 10,"line": 96,"col": 12,"docs": " Write a native-endian integer.\n","fields": [9040,9041,9042]},{"file": 10,"line": 70,"col": 12},{"file": 10,"line": 103,"col": 12,"docs": " Write a foreign-endian integer.\n","fields": [9043,9044,9045]},{"file": 10,"line": 87,"col": 12,"fields": [9046,9047,9048]},{"file": 10,"line": 115,"col": 12,"fields": [9049,9050,9051]},{"file": 10,"line": 69,"col": 8},{"file": 2,"line": 48,"col": 4},{"file": 2,"line": 9,"col": 4},{"file": 2,"line": 19,"col": 4},{"file": 2,"line": 13,"col": 4},{"file": 41,"line": 175,"col": 4,"docs": "Creates a bit-packed array of integers of type Int. Bits\n are packed using specified endianess and without storing any meta\n data.\n","fields": [9052,9053,9054]},{"file": 2,"line": 12,"col": 4},{"file": 41,"line": 168,"col": 4,"docs": "Creates a bit-packed array of integers of type Int. Bits\n are packed using native endianess and without storing any meta\n data. PackedIntArray(i3, 8) will occupy exactly 3 bytes of memory.\n","fields": [9055,9056]},{"file": 2,"line": 47,"col": 4},{"file": 2,"line": 24,"col": 4},{"file": 2,"line": 5,"col": 4},{"file": 2,"line": 51,"col": 4},{"file": 2,"line": 33,"col": 4},{"file": 2,"line": 6,"col": 4},{"file": 2,"line": 34,"col": 4},{"file": 2,"line": 59,"col": 4},{"file": 2,"line": 7,"col": 4},{"file": 2,"line": 36,"col": 4},{"file": 2,"line": 61,"col": 4},{"file": 2,"line": 28,"col": 4},{"file": 2,"line": 0,"col": 4},{"file": 2,"line": 42,"col": 4},{"file": 2,"line": 35,"col": 4},{"file": 2,"line": 21,"col": 4},{"file": 2,"line": 18,"col": 4},{"file": 100,"line": 76,"col": 4,"docs": " This is a stack data structure where pointers to indexes have the same lifetime as the data structure\n itself, unlike ArrayList where push() invalidates all existing element pointers.\n The tradeoff is that elements are not guaranteed to be contiguous. For that, use ArrayList.\n Note however that most elements are contiguous, making this data structure cache-friendly.\n\n Because it never has to copy elements from an old location to a new location, it does not require\n its elements to be copyable, and it avoids wasting memory when backed by an ArenaAllocator.\n Note that the push() and pop() convenience methods perform a copy, but you can instead use\n addOne(), at(), setCapacity(), and shrinkCapacity() to avoid copying items.\n\n This data structure has O(1) push and O(1) pop.\n\n It supports preallocated elements, making it especially well suited when the expected maximum\n size is small. `prealloc_item_count` must be 0, or a power of 2.\n","fields": [9057,9058]},{"file": 2,"line": 58,"col": 4},{"file": 2,"line": 43,"col": 4},{"file": 2,"line": 8,"col": 4},{"file": 2,"line": 40,"col": 4},{"file": 2,"line": 37,"col": 4},{"file": 2,"line": 27,"col": 4},{"file": 2,"line": 26,"col": 4},{"file": 2,"line": 23,"col": 4},{"file": 46,"line": 192,"col": 4,"docs": " A tail queue is headed by a pair of pointers, one to the head of the\n list and the other to the tail of the list. The elements are doubly\n linked so that an arbitrary element can be removed without a need to\n traverse the list. New elements can be added to the list before or\n after an existing element, at the head of the list, or at the end of\n the list. A tail queue may be traversed in either direction.\n","fields": [9059]},{"file": 2,"line": 44,"col": 4},{"file": 2,"line": 45,"col": 4},{"file": 101,"line": 9,"col": 4,"docs": " Thread-safe initialization of global data.\n TODO use a mutex instead of a spinlock\n","fields": [9060]},{"file": 2,"line": 53,"col": 4},{"file": 2,"line": 4,"col": 4},{"file": 2,"line": 30,"col": 4},{"file": 2,"line": 31,"col": 4},{"file": 2,"line": 39,"col": 4},{"file": 2,"line": 57,"col": 4},{"file": 2,"line": 29,"col": 4},{"file": 2,"line": 32,"col": 4},{"file": 2,"line": 56,"col": 4},{"file": 2,"line": 55,"col": 4},{"file": 2,"line": 49,"col": 4},{"file": 2,"line": 50,"col": 4},{"file": 2,"line": 38,"col": 4},{"file": 2,"line": 41,"col": 4},{"file": 2,"line": 2,"col": 4},{"file": 22,"line": 15,"col": 4,"fields": [9061,9062]},{"file": 2,"line": 11,"col": 4},{"file": 2,"line": 16,"col": 4},{"file": 102,"line": 6,"col": 4,"fields": [9063]},{"file": 2,"line": 60,"col": 4},{"file": 2,"line": 17,"col": 4},{"file": 2,"line": 52,"col": 4},{"file": 2,"line": 62,"col": 4},{"file": 2,"line": 15,"col": 4},{"file": 41,"line": 244,"col": 4,"docs": "Uses a slice as a bit-packed block of int_count integers of type Int.\n Bits are packed using specified endianess and without storing any meta\n data.\n","fields": [9064,9065]},{"file": 2,"line": 10,"col": 4},{"file": 2,"line": 63,"col": 4},{"file": 2,"line": 1,"col": 4},{"file": 2,"line": 20,"col": 4},{"file": 2,"line": 14,"col": 4},{"file": 41,"line": 237,"col": 4,"docs": "Uses a slice as a bit-packed block of int_count integers of type Int.\n Bits are packed using native endianess and without storing any meta\n data.\n","fields": [9066]},{"file": 2,"line": 54,"col": 4},{"file": 2,"line": 46,"col": 4},{"file": 2,"line": 3,"col": 4},{"file": 103,"line": 13,"col": 4,"docs": " There is a trade off of how quickly to fill a bloom filter;\n the number of items is:\n     n_items / K * ln(2)\n the rate of false positives is:\n     (1-e^(-K*N/n_items))^K\n where N is the number of items\n","fields": [9067,9068,9069,9070,9071]},{"file": 2,"line": 22,"col": 4},{"file": 46,"line": 136,"col": 12,"docs": " Allocate and initialize a node and its data.\n\n Arguments:\n     data: The data to put inside the node.\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [9072,9073,9074]},{"file": 46,"line": 19,"col": 12,"docs": " Node inside the linked list wrapping the actual data.\n"},{"file": 46,"line": 124,"col": 12,"docs": " Deallocate a node.\n\n Arguments:\n     node: Pointer to the node to deallocate.\n     allocator: Dynamic memory allocator.\n","fields": [9075,9076,9077]},{"file": 46,"line": 69,"col": 12,"docs": " Insert a new node after an existing one.\n\n Arguments:\n     node: Pointer to a node in the list.\n     new_node: Pointer to the new node to insert.\n","fields": [9078,9079,9080]},{"file": 46,"line": 86,"col": 12,"docs": " Remove a node from the list.\n\n Arguments:\n     node: Pointer to the node to be removed.\n","fields": [9081,9082]},{"file": 46,"line": 115,"col": 12,"docs": " Allocate a new node.\n\n Arguments:\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [9083,9084]},{"file": 46,"line": 102,"col": 12,"docs": " Remove and return the first node in the list.\n\n Returns:\n     A pointer to the first node in the list.\n","fields": [9085]},{"file": 46,"line": 16,"col": 8},{"file": 22,"line": 279,"col": 12,"fields": [9086]},{"file": 22,"line": 165,"col": 12,"docs": " Increases capacity so that the hash map will be at most\n 60% full when expected_count items are put into it\n","fields": [9087,9088]},{"file": 22,"line": 127,"col": 12,"docs": " If key exists this function cannot fail.\n If there is an existing item with `key`, then the result\n kv pointer points to it, and found_existing is true.\n Otherwise, puts a new item with undefined value, and\n the kv pointer points to it. Caller should then initialize\n the data.\n","fields": [9089,9090]},{"file": 22,"line": 203,"col": 12,"docs": " Calls put() and asserts that no kv pair is clobbered.\n","fields": [9091,9092,9093]},{"file": 22,"line": 270,"col": 12,"fields": [9094]},{"file": 22,"line": 44,"col": 12},{"file": 22,"line": 216,"col": 12,"fields": [9095,9096]},{"file": 22,"line": 55,"col": 12},{"file": 22,"line": 108,"col": 12,"fields": [9097]},{"file": 22,"line": 207,"col": 12,"fields": [9098,9099,9100]},{"file": 22,"line": 104,"col": 12,"fields": [9101]},{"file": 22,"line": 146,"col": 12,"fields": [9102,9103,9104]},{"file": 22,"line": 223,"col": 12,"fields": [9105,9106]},{"file": 22,"line": 197,"col": 12,"docs": " Returns the kv pair that was already there.\n","fields": [9107,9108,9109]},{"file": 22,"line": 60,"col": 12},{"file": 22,"line": 94,"col": 12,"fields": [9110]},{"file": 22,"line": 117,"col": 12,"fields": [9111]},{"file": 22,"line": 227,"col": 12,"fields": [9112,9113]},{"file": 22,"line": 232,"col": 12,"docs": " Returns any kv pair that was removed.\n","fields": [9114,9115]},{"file": 22,"line": 266,"col": 12,"docs": " Calls remove(), asserts that a kv pair is removed, and discards it.\n","fields": [9116,9117]},{"file": 22,"line": 154,"col": 8,"fields": [9118]},{"file": 22,"line": 299,"col": 8,"fields": [9119,9120]},{"file": 22,"line": 403,"col": 8,"fields": [9121,9122]},{"file": 22,"line": 42,"col": 8},{"file": 22,"line": 289,"col": 8,"fields": [9123]},{"file": 22,"line": 308,"col": 8,"fields": [9124]},{"file": 22,"line": 407,"col": 8,"fields": [9125,9126]},{"file": 22,"line": 314,"col": 8},{"file": 22,"line": 321,"col": 8,"docs": " Returns a pointer to the new entry.\n Asserts that there is enough space for the new item.\n","fields": [9127,9128]},{"file": 22,"line": 49,"col": 8},{"file": 22,"line": 173,"col": 8,"docs": " Sets the capacity to the new capacity if the new\n capacity is greater than the current capacity.\n New capacity must be a power of two.\n","fields": [9129,9130]},{"file": 22,"line": 388,"col": 8,"fields": [9131,9132]},{"file": 47,"line": 19,"col": 12},{"file": 4,"line": 25,"col": 4,"docs": " π/2\n"},{"file": 4,"line": 152,"col": 4},{"file": 104,"line": 17,"col": 4,"docs": " Returns the least integer value greater than of equal to x.\n\n Special Cases:\n  - ceil(+-0)   = +-0\n  - ceil(+-inf) = +-inf\n  - ceil(nan)   = nan\n","fields": [9133]},{"file": 4,"line": 149,"col": 4},{"file": 4,"line": 150,"col": 4},{"file": 92,"line": 11,"col": 4,"docs": " Returns whether x is a signalling nan.\n","fields": [9134]},{"file": 4,"line": 193,"col": 4},{"file": 105,"line": 19,"col": 4,"docs": " Returns the hyperbolic cosine of x.\n\n Special Cases:\n  - cosh(+-0)   = 1\n  - cosh(+-inf) = +inf\n  - cosh(nan)   = nan\n","fields": [9135]},{"file": 4,"line": 153,"col": 4},{"file": 4,"line": 89,"col": 4},{"file": 4,"line": 161,"col": 4},{"file": 4,"line": 178,"col": 4},{"file": 106,"line": 18,"col": 4,"docs": " Returns sqrt(x * x + y * y), avoiding unncessary overflow and underflow.\n\n Special Cases:\n  - hypot(+-inf, y)  = +inf\n  - hypot(x, +-inf)  = +inf\n  - hypot(nan, y)    = nan\n  - hypot(x, nan)    = nan\n","fields": [9136,9137,9138]},{"file": 4,"line": 74,"col": 4},{"file": 4,"line": 538,"col": 4},{"file": 4,"line": 53,"col": 4},{"file": 4,"line": 394,"col": 4,"docs": " Rotates right. Only unsigned values can be rotated.\n Negative shift values results in shift modulo the bit count.\n","fields": [9139,9140,9141]},{"file": 4,"line": 173,"col": 4},{"file": 107,"line": 16,"col": 4,"docs": " Returns the cube root of x.\n\n Special Cases:\n  - cbrt(+-0)   = +-0\n  - cbrt(+-inf) = +-inf\n  - cbrt(nan)   = nan\n","fields": [9142]},{"file": 4,"line": 155,"col": 4},{"file": 108,"line": 17,"col": 4,"docs": " Returns x rounded to the nearest integer, rounding half away from zero.\n\n Special Cases:\n  - round(+-0)   = +-0\n  - round(+-inf) = +-inf\n  - round(nan)   = nan\n","fields": [9143]},{"file": 4,"line": 78,"col": 4},{"file": 4,"line": 192,"col": 4},{"file": 109,"line": 19,"col": 4,"docs": " Returns the hyperbolic sine of x.\n\n Special Cases:\n  - sinh(+-0)   = +-0\n  - sinh(+-inf) = +-inf\n  - sinh(nan)   = nan\n","fields": [9144]},{"file": 4,"line": 80,"col": 4},{"file": 4,"line": 189,"col": 4},{"file": 110,"line": 17,"col": 4,"docs": " Returns the hyperbolic arc-sin of x.\n\n Special Cases:\n  - asinh(+-0)   = +-0\n  - asinh(+-inf) = +-inf\n  - asinh(nan)   = nan\n","fields": [9145]},{"file": 4,"line": 196,"col": 4},{"file": 111,"line": 16,"col": 4,"docs": " Returns the sine of the radian value x.\n\n Special Cases:\n  - sin(+-0)   = +-0\n  - sin(+-inf) = nan\n  - sin(nan)   = nan\n","fields": [9146]},{"file": 4,"line": 57,"col": 4},{"file": 4,"line": 46,"col": 4},{"file": 4,"line": 37,"col": 4,"docs": " 2/sqrt(π)\n"},{"file": 4,"line": 190,"col": 4},{"file": 112,"line": 16,"col": 4,"docs": " Returns the hyperbolic arc-cosine of x.\n\n Special cases:\n  - acosh(x)   = snan if x < 1\n  - acosh(nan) = nan\n","fields": [9147]},{"file": 4,"line": 157,"col": 4},{"file": 4,"line": 200,"col": 4},{"file": 48,"line": 26,"col": 4,"docs": " A complex number consisting of a real an imaginary part. T must be a floating-point value.\n","fields": [9148]},{"file": 4,"line": 93,"col": 4},{"file": 4,"line": 97,"col": 4},{"file": 113,"line": 4,"col": 4,"docs": " Returns value inf for the type T.\n","fields": [9149]},{"file": 4,"line": 842,"col": 4,"fields": [9150,9151]},{"file": 4,"line": 191,"col": 4},{"file": 114,"line": 17,"col": 4,"docs": " Returns the hyperbolic arc-tangent of x.\n\n Special Cases:\n  - atanh(+-1) = +-inf with signal\n  - atanh(x)   = nan if |x| > 1 with signal\n  - atanh(nan) = nan\n","fields": [9152]},{"file": 4,"line": 868,"col": 4,"fields": [9153,9154]},{"file": 4,"line": 159,"col": 4},{"file": 98,"line": 26,"col": 4,"docs": " Returns the integer and fractional floating-point numbers that sum to x. The sign of each\n result is the same as the sign of x.\n\n Special Cases:\n  - modf(+-inf) = +-inf, nan\n  - modf(nan)   = nan, nan\n","fields": [9155]},{"file": 4,"line": 61,"col": 4},{"file": 4,"line": 34,"col": 4,"docs": " 2/π\n"},{"file": 4,"line": 43,"col": 4,"docs": " 1/sqrt(2)\n"},{"file": 4,"line": 197,"col": 4},{"file": 115,"line": 16,"col": 4,"docs": " Returns the tangent of the radian value x.\n\n Special Cases:\n  - tan(+-0)   = +-0\n  - tan(+-inf) = nan\n  - tan(nan)   = nan\n","fields": [9156]},{"file": 4,"line": 182,"col": 4},{"file": 116,"line": 18,"col": 4,"docs": " Returns the binary exponent of x as an integer.\n\n Special Cases:\n  - ilogb(+-inf) = maxInt(i32)\n  - ilogb(0)     = maxInt(i32)\n  - ilogb(nan)   = maxInt(i32)\n","fields": [9157]},{"file": 4,"line": 195,"col": 4},{"file": 117,"line": 15,"col": 4,"docs": " Returns the cosine of the radian value x.\n\n Special Cases:\n  - cos(+-inf) = nan\n  - cos(nan)   = nan\n","fields": [9158]},{"file": 4,"line": 56,"col": 4},{"file": 4,"line": 86,"col": 4},{"file": 4,"line": 175,"col": 4},{"file": 118,"line": 15,"col": 4,"docs": " Returns the arc-sin of x.\n\n Special Cases:\n  - asin(+-0) = +-0\n  - asin(x)   = nan if x < -1 or x > 1\n","fields": [9159]},{"file": 4,"line": 751,"col": 4,"fields": [9160]},{"file": 4,"line": 71,"col": 4},{"file": 4,"line": 81,"col": 4},{"file": 4,"line": 59,"col": 4},{"file": 4,"line": 151,"col": 4},{"file": 4,"line": 199,"col": 4},{"file": 4,"line": 176,"col": 4},{"file": 119,"line": 15,"col": 4,"docs": " Returns the arc-tangent of x.\n\n Special Cases:\n  - atan(+-0)   = +-0\n  - atan(+-inf) = +-pi/2\n","fields": [9161]},{"file": 4,"line": 96,"col": 4},{"file": 120,"line": 14,"col": 4,"docs": " Returns the signalling nan representation for type T.\n","fields": [9162]},{"file": 4,"line": 65,"col": 4},{"file": 4,"line": 166,"col": 4},{"file": 93,"line": 54,"col": 4,"docs": " Returns whether x is an infinity with a negative sign.\n","fields": [9163]},{"file": 4,"line": 16,"col": 4,"docs": " log10(e)\n"},{"file": 4,"line": 63,"col": 4},{"file": 4,"line": 170,"col": 4},{"file": 121,"line": 33,"col": 4,"docs": " Returns x raised to the power of y (x^y).\n\n Special Cases:\n  - pow(x, +-0)    = 1 for any x\n  - pow(1, y)      = 1 for any y\n  - pow(x, 1)      = x for any x\n  - pow(nan, y)    = nan\n  - pow(x, nan)    = nan\n  - pow(+-0, y)    = +-inf for y an odd integer < 0\n  - pow(+-0, -inf) = +inf\n  - pow(+-0, +inf) = +0\n  - pow(+-0, y)    = +inf for finite y < 0 and not an odd integer\n  - pow(+-0, y)    = +-0 for y an odd integer > 0\n  - pow(+-0, y)    = +0 for finite y > 0 and not an odd integer\n  - pow(-1, +-inf) = 1\n  - pow(x, +inf)   = +inf for |x| > 1\n  - pow(x, -inf)   = +0 for |x| > 1\n  - pow(x, +inf)   = +0 for |x| < 1\n  - pow(x, -inf)   = +inf for |x| < 1\n  - pow(+inf, y)   = +inf for y > 0\n  - pow(+inf, y)   = +0 for y < 0\n  - pow(-inf, y)   = pow(-0, -y)\n  - pow(x, y)      = nan for finite x < 0 and finite non-integer y\n","fields": [9164,9165,9166]},{"file": 4,"line": 28,"col": 4,"docs": " π/4\n"},{"file": 4,"line": 185,"col": 4},{"file": 122,"line": 20,"col": 4,"docs": " Returns the base-2 logarithm of x.\n\n Special Cases:\n  - log2(+inf)  = +inf\n  - log2(0)     = -inf\n  - log2(x)     = nan if x < 0\n  - log2(nan)   = nan\n","fields": [9167]},{"file": 4,"line": 87,"col": 4},{"file": 4,"line": 847,"col": 4,"fields": [9168,9169]},{"file": 4,"line": 169,"col": 4},{"file": 123,"line": 11,"col": 4,"docs": " Returns x * 2^n.\n","fields": [9170,9171]},{"file": 4,"line": 7,"col": 4,"docs": " Euler's number (e)\n"},{"file": 4,"line": 66,"col": 4},{"file": 4,"line": 181,"col": 4},{"file": 124,"line": 20,"col": 4,"docs": " Returns e raised to the power of x, minus 1 (e^x - 1). This is more accurate than exp(e, x) - 1\n when x is near 0.\n\n Special Cases:\n  - expm1(+inf) = +inf\n  - expm1(-inf) = -1\n  - expm1(nan)  = nan\n","fields": [9172]},{"file": 4,"line": 168,"col": 4},{"file": 4,"line": 90,"col": 4},{"file": 4,"line": 156,"col": 4},{"file": 4,"line": 60,"col": 4},{"file": 4,"line": 158,"col": 4},{"file": 4,"line": 68,"col": 4},{"file": 4,"line": 22,"col": 4,"docs": " ln(10)\n"},{"file": 4,"line": 208,"col": 4,"fields": [9173]},{"file": 4,"line": 77,"col": 4},{"file": 4,"line": 174,"col": 4},{"file": 125,"line": 14,"col": 4,"docs": " Returns the arc-cosine of x.\n\n Special cases:\n  - acos(x)   = nan if x < -1 or x > 1\n","fields": [9174]},{"file": 4,"line": 67,"col": 4},{"file": 4,"line": 179,"col": 4},{"file": 126,"line": 16,"col": 4,"docs": " Returns e raised to the power of x (e^x).\n\n Special Cases:\n  - exp(+inf) = +inf\n  - exp(nan)  = nan\n","fields": [9175]},{"file": 4,"line": 54,"col": 4},{"file": 4,"line": 186,"col": 4},{"file": 127,"line": 20,"col": 4,"docs": " Returns the base-10 logarithm of x.\n\n Special Cases:\n  - log10(+inf)  = +inf\n  - log10(0)     = -inf\n  - log10(x)     = nan if x < 0\n  - log10(nan)   = nan\n","fields": [9176]},{"file": 4,"line": 72,"col": 4},{"file": 4,"line": 50,"col": 4},{"file": 4,"line": 441,"col": 4,"fields": [9177,9178]},{"file": 4,"line": 83,"col": 4},{"file": 4,"line": 40,"col": 4,"docs": " sqrt(2)\n"},{"file": 4,"line": 184,"col": 4},{"file": 128,"line": 13,"col": 4,"docs": " Returns the logarithm of x for the provided base.\n","fields": [9179,9180,9181]},{"file": 4,"line": 329,"col": 4,"fields": [9182]},{"file": 4,"line": 743,"col": 4,"docs": " Align cast a pointer but return an error if it's the wrong alignment\n","fields": [9183,9184]},{"file": 4,"line": 69,"col": 4},{"file": 4,"line": 164,"col": 4},{"file": 4,"line": 160,"col": 4},{"file": 4,"line": 49,"col": 4},{"file": 4,"line": 47,"col": 4},{"file": 4,"line": 695,"col": 4,"docs": " Returns the negation of the integer parameter.\n Result is a signed integer.\n","fields": [9185]},{"file": 4,"line": 163,"col": 4},{"file": 129,"line": 6,"col": 4,"docs": " Returns whether x is a finite value.\n","fields": [9186]},{"file": 4,"line": 84,"col": 4},{"file": 4,"line": 48,"col": 4},{"file": 4,"line": 62,"col": 4},{"file": 4,"line": 167,"col": 4},{"file": 130,"line": 6,"col": 4,"fields": [9187]},{"file": 4,"line": 19,"col": 4,"docs": " ln(2)\n"},{"file": 4,"line": 202,"col": 4},{"file": 4,"line": 95,"col": 4},{"file": 120,"line": 3,"col": 4,"docs": " Returns the nan representation for type T.\n","fields": [9188]},{"file": 4,"line": 55,"col": 4},{"file": 4,"line": 75,"col": 4},{"file": 4,"line": 92,"col": 4},{"file": 4,"line": 162,"col": 4},{"file": 131,"line": 12,"col": 4,"docs": " Returns a value with the magnitude of x and the sign of y.\n","fields": [9189,9190,9191]},{"file": 4,"line": 188,"col": 4},{"file": 132,"line": 11,"col": 4,"docs": " Returns x * y + z with a single rounding error.\n","fields": [9192,9193,9194,9195]},{"file": 4,"line": 165,"col": 4},{"file": 4,"line": 172,"col": 4},{"file": 133,"line": 14,"col": 4,"docs": " Returns the square root of x.\n\n Special Cases:\n  - sqrt(+inf)  = +inf\n  - sqrt(+-0)   = +-0\n  - sqrt(x)     = nan if x < 0\n  - sqrt(nan)   = nan\n","fields": [9196]},{"file": 4,"line": 194,"col": 4},{"file": 134,"line": 19,"col": 4,"docs": " Returns the hyperbolic tangent of x.\n\n Special Cases:\n  - sinh(+-0)   = +-0\n  - sinh(+-inf) = +-1\n  - sinh(nan)   = nan\n","fields": [9197]},{"file": 4,"line": 99,"col": 4,"fields": [9198,9199,9200,9201]},{"file": 4,"line": 154,"col": 4},{"file": 135,"line": 17,"col": 4,"docs": " Returns the integer value of x.\n\n Special Cases:\n  - trunc(+-0)   = +-0\n  - trunc(+-inf) = +-inf\n  - trunc(nan)   = nan\n","fields": [9202]},{"file": 4,"line": 221,"col": 4,"fields": [9203]},{"file": 4,"line": 31,"col": 4,"docs": " 1/π\n"},{"file": 4,"line": 180,"col": 4},{"file": 136,"line": 15,"col": 4,"docs": " Returns 2 raised to the power of x (2^x).\n\n Special Cases:\n  - exp2(+inf) = +inf\n  - exp2(nan)  = nan\n","fields": [9204]},{"file": 4,"line": 187,"col": 4},{"file": 137,"line": 19,"col": 4,"docs": " Returns the natural logarithm of 1 + x with greater accuracy when x is near zero.\n\n Special Cases:\n  - log1p(+inf)  = +inf\n  - log1p(+-0)   = +-0\n  - log1p(-1)    = -inf\n  - log1p(x)     = nan if x < -1\n  - log1p(nan)   = nan\n","fields": [9205]},{"file": 4,"line": 740,"col": 4},{"file": 4,"line": 10,"col": 4,"docs": " Archimedes' constant (π)\n"},{"file": 4,"line": 13,"col": 4,"docs": " log2(e)\n"},{"file": 4,"line": 171,"col": 4},{"file": 138,"line": 21,"col": 4,"docs": " Returns the power of x raised by the integer y (x^y).\n\n Special Cases:\n  - powi(x, +-0)   = 1 for any x\n  - powi(0, y)     = 0 for any y\n  - powi(1, y)     = 1 for any y\n  - powi(-1, y)    = -1 for y an odd integer\n  - powi(-1, y)    = 1 for y an even integer\n  - powi(x, y)     = Overflow for y >= @sizeOf(x) - 1 or y > 0\n  - powi(x, y)     = Underflow for y > @sizeOf(x) - 1 or y < 0\n","fields": [9206,9207,9208]},{"file": 4,"line": 177,"col": 4},{"file": 139,"line": 30,"col": 4,"docs": " Returns the arc-tangent of y/x.\n\n Special Cases:\n  - atan2(y, nan)     = nan\n  - atan2(nan, x)     = nan\n  - atan2(+0, x>=0)   = +0\n  - atan2(-0, x>=0)   = -0\n  - atan2(+0, x<=-0)  = +pi\n  - atan2(-0, x<=-0)  = -pi\n  - atan2(y>0, 0)     = +pi/2\n  - atan2(y<0, 0)     = -pi/2\n  - atan2(+inf, +inf) = +pi/4\n  - atan2(-inf, +inf) = -pi/4\n  - atan2(+inf, -inf) = 3pi/4\n  - atan2(-inf, -inf) = -3pi/4\n  - atan2(y, +inf)    = 0\n  - atan2(y>0, -inf)  = +pi\n  - atan2(y<0, -inf)  = -pi\n  - atan2(+inf, x)    = +pi/2\n  - atan2(-inf, x)    = -pi/2\n","fields": [9209,9210,9211]},{"file": 4,"line": 183,"col": 4},{"file": 140,"line": 19,"col": 4,"docs": " Returns the natural logarithm of x.\n\n Special Cases:\n  - ln(+inf)  = +inf\n  - ln(0)     = -inf\n  - ln(x)     = nan if x < 0\n  - ln(nan)   = nan\n","fields": [9212]},{"file": 4,"line": 3,"col": 0},{"file": 4,"line": 0,"col": 0},{"file": 4,"line": 2,"col": 0},{"file": 4,"line": 4,"col": 0},{"file": 4,"line": 1,"col": 0},{"file": 0,"line": 42,"col": 4},{"file": 0,"line": 28,"col": 4},{"file": 0,"line": 16,"col": 4},{"file": 0,"line": 9,"col": 4},{"file": 0,"line": 1,"col": 0},{"file": 0,"line": 0,"col": 0},{"file": 1,"line": 468,"col": 4},{"file": 1,"line": 193,"col": 4},{"file": 1,"line": 461,"col": 4},{"file": 1,"line": 458,"col": 4},{"file": 1,"line": 456,"col": 4},{"file": 1,"line": 453,"col": 4},{"file": 1,"line": 422,"col": 4},{"file": 1,"line": 449,"col": 4},{"file": 1,"line": 457,"col": 4},{"file": 1,"line": 452,"col": 4},{"file": 1,"line": 212,"col": 4},{"file": 1,"line": 184,"col": 4},{"file": 1,"line": 169,"col": 4},{"file": 1,"line": 454,"col": 4},{"file": 1,"line": 0,"col": 4},{"file": 1,"line": 450,"col": 4},{"file": 1,"line": 5,"col": 4},{"file": 1,"line": 47,"col": 4},{"file": 1,"line": 455,"col": 4},{"file": 1,"line": 460,"col": 4},{"file": 1,"line": 438,"col": 4},{"file": 1,"line": 463,"col": 4},{"file": 1,"line": 205,"col": 4},{"file": 1,"line": 427,"col": 4},{"file": 1,"line": 462,"col": 4},{"file": 1,"line": 7,"col": 4},{"file": 1,"line": 432,"col": 4},{"file": 1,"line": 451,"col": 4},{"file": 1,"line": 177,"col": 4},{"file": 1,"line": 144,"col": 4},{"file": 1,"line": 459,"col": 4},{"file": 1,"line": 241,"col": 4},{"file": 1,"line": 464,"col": 0},{"file": 3,"line": 2,"col": 0},{"file": 3,"line": 1,"col": 0},{"file": 3,"line": 0,"col": 0},{"file": 3,"line": 3,"col": 0},{"file": 50,"line": 366,"col": 12},{"file": 50,"line": 367,"col": 12},{"file": 50,"line": 335,"col": 8,"fields": [9213]},{"file": 50,"line": 25,"col": 8},{"file": 50,"line": 214,"col": 8,"fields": [9214]},{"file": 50,"line": 237,"col": 8,"fields": [9215]},{"file": 50,"line": 38,"col": 8,"docs": " `openRead` except with a null terminated path\n","fields": [9216]},{"file": 50,"line": 107,"col": 8,"docs": " If the path does not exist it will be created.\n If a file already exists in the destination this returns OpenError.PathAlreadyExists\n Call close to clean up.\n","fields": [9217,9218]},{"file": 50,"line": 63,"col": 8,"docs": " Calls `openWriteMode` with `default_mode` for the mode.\n","fields": [9219]},{"file": 50,"line": 15,"col": 8},{"file": 50,"line": 270,"col": 8},{"file": 50,"line": 221,"col": 8},{"file": 50,"line": 348,"col": 8,"docs": " Implementation of io.InStream trait for File\n"},{"file": 50,"line": 190,"col": 8,"docs": " Repositions read/write file offset relative to the end.\n","fields": [9220,9221]},{"file": 50,"line": 301,"col": 8},{"file": 50,"line": 212,"col": 8},{"file": 50,"line": 182,"col": 8},{"file": 50,"line": 201,"col": 8,"fields": [9222]},{"file": 50,"line": 313,"col": 8,"fields": [9223,9224]},{"file": 50,"line": 20,"col": 8},{"file": 50,"line": 91,"col": 8,"docs": " Same as `openWriteMode` except `path` is null-terminated and UTF16LE encoded\n","fields": [9225,9226]},{"file": 50,"line": 362,"col": 8,"docs": " Implementation of io.OutStream trait for File\n"},{"file": 50,"line": 80,"col": 8,"docs": " Same as `openWriteMode` except `path` is null-terminated.\n","fields": [9227,9228]},{"file": 50,"line": 70,"col": 8,"docs": " If the path does not exist it will be created.\n If a file already exists in the destination it will be truncated.\n Call close to clean up.\n","fields": [9229,9230]},{"file": 50,"line": 126,"col": 8,"fields": [9231,9232]},{"file": 50,"line": 199,"col": 8},{"file": 50,"line": 235,"col": 8},{"file": 50,"line": 376,"col": 8,"docs": " Implementation of io.SeekableStream trait for File\n"},{"file": 50,"line": 307,"col": 8},{"file": 50,"line": 148,"col": 8,"docs": " Test for the existence of `path`.\n `path` is UTF8-encoded.\n In general it is recommended to avoid this function. For example,\n instead of testing if a file exists and then opening it, just\n open it and handle the error for file not found.\n","fields": [9233]},{"file": 50,"line": 276,"col": 8,"docs": " The underlying file system may have a different granularity than nanoseconds,\n and therefore this function cannot guarantee any precision will be stored.\n Further, the maximum value is limited by the system ABI. When a value is provided\n that exceeds this range, the value is clamped to the maximum.\n","fields": [9234,9235,9236]},{"file": 50,"line": 158,"col": 8,"docs": " Same as `access` except the parameter is null-terminated UTF16LE-encoded.\n","fields": [9237]},{"file": 50,"line": 153,"col": 8,"docs": " Same as `access` except the parameter is null-terminated.\n","fields": [9238]},{"file": 50,"line": 116,"col": 8,"fields": [9239,9240]},{"file": 50,"line": 352,"col": 12},{"file": 50,"line": 353,"col": 12},{"file": 51,"line": 222,"col": 8},{"file": 11,"line": 922,"col": 8,"docs": " Returns a slice of the remaining bytes. Does not affect iterator state.\n","fields": [9241]},{"file": 27,"line": 637,"col": 8},{"file": 27,"line": 636,"col": 8},{"file": 27,"line": 704,"col": 4,"fields": [9242]},{"file": 27,"line": 708,"col": 4,"fields": [9243]},{"file": 13,"line": 1406,"col": 4,"fields": [9244]},{"file": 39,"line": 360,"col": 8,"fields": [9245]},{"file": 39,"line": 346,"col": 4},{"file": 39,"line": 483,"col": 8,"fields": [9246]},{"file": 17,"line": 191,"col": 8,"docs": " TODO: https://github.com/ziglang/zig/issues/425\n","fields": [9247]},{"file": 52,"line": 48,"col": 12,"docs": " TODO: once https://github.com/ziglang/zig/issues/287 is solved and std.Mutex has a better\n implementation of a runtime initialized mutex, remove this function.\n","fields": [9248]},{"file": 52,"line": 21,"col": 12},{"file": 53,"line": 38,"col": 8},{"file": 53,"line": 12,"col": 4},{"file": 55,"line": 24,"col": 8},{"file": 55,"line": 14,"col": 8},{"file": 55,"line": 13,"col": 8},{"file": 55,"line": 12,"col": 8},{"file": 55,"line": 11,"col": 8},{"file": 55,"line": 9,"col": 8},{"file": 55,"line": 10,"col": 8},{"file": 56,"line": 123,"col": 8},{"file": 56,"line": 11,"col": 8},{"file": 56,"line": 98,"col": 8},{"file": 56,"line": 15,"col": 8},{"file": 56,"line": 13,"col": 8},{"file": 56,"line": 110,"col": 8},{"file": 56,"line": 12,"col": 8},{"file": 56,"line": 46,"col": 8},{"file": 56,"line": 97,"col": 8},{"file": 56,"line": 14,"col": 8},{"file": 56,"line": 9,"col": 8},{"file": 56,"line": 87,"col": 8},{"file": 56,"line": 10,"col": 8},{"file": 56,"line": 76,"col": 8},{"file": 56,"line": 111,"col": 8},{"file": 56,"line": 62,"col": 8},{"file": 56,"line": 122,"col": 8},{"file": 56,"line": 17,"col": 8},{"file": 56,"line": 132,"col": 16,"docs": " Convert an array of zig buffers into backend buffers\n"},{"file": 56,"line": 45,"col": 4},{"file": 57,"line": 6,"col": 8},{"file": 35,"line": 642,"col": 4,"fields": [9249]},{"file": 58,"line": 73,"col": 8},{"file": 58,"line": 219,"col": 8},{"file": 58,"line": 170,"col": 4},{"file": 58,"line": 446,"col": 4},{"file": 58,"line": 156,"col": 4},{"file": 58,"line": 30,"col": 8},{"file": 58,"line": 29,"col": 8},{"file": 60,"line": 514,"col": 8,"fields": [9250]},{"file": 5,"line": 21,"col": 4},{"file": 5,"line": 1,"col": 0},{"file": 5,"line": 0,"col": 0},{"file": 5,"line": 138,"col": 0},{"file": 5,"line": 4,"col": 0},{"file": 5,"line": 3,"col": 0},{"file": 6,"line": 13,"col": 4},{"file": 6,"line": 8,"col": 4},{"file": 6,"line": 9,"col": 4},{"file": 6,"line": 1,"col": 0},{"file": 6,"line": 2,"col": 0},{"file": 6,"line": 3,"col": 0},{"file": 6,"line": 0,"col": 0},{"file": 6,"line": 4,"col": 0},{"file": 6,"line": 6,"col": 0},{"file": 6,"line": 5,"col": 0},{"file": 7,"line": 131,"col": 4},{"file": 7,"line": 245,"col": 4,"fields": [9251]},{"file": 7,"line": 9,"col": 4},{"file": 7,"line": 371,"col": 0},{"file": 7,"line": 480,"col": 0,"fields": [9252]},{"file": 7,"line": 512,"col": 0,"fields": [9253,9254]},{"file": 7,"line": 344,"col": 0},{"file": 7,"line": 362,"col": 0},{"file": 7,"line": 463,"col": 0,"fields": [9255,9256,9257,9258,9259,9260]},{"file": 7,"line": 352,"col": 0},{"file": 7,"line": 360,"col": 0},{"file": 7,"line": 363,"col": 0},{"file": 7,"line": 448,"col": 0,"fields": [9261]},{"file": 7,"line": 444,"col": 0},{"file": 7,"line": 356,"col": 0},{"file": 7,"line": 378,"col": 0},{"file": 7,"line": 438,"col": 0},{"file": 7,"line": 496,"col": 0,"fields": [9262,9263,9264]},{"file": 7,"line": 484,"col": 0,"fields": [9265]},{"file": 7,"line": 522,"col": 0,"fields": []},{"file": 7,"line": 6,"col": 0},{"file": 7,"line": 508,"col": 0,"fields": [9266]},{"file": 7,"line": 491,"col": 0,"fields": [9267,9268]},{"file": 7,"line": 4,"col": 0},{"file": 7,"line": 353,"col": 0},{"file": 7,"line": 443,"col": 0},{"file": 7,"line": 355,"col": 0},{"file": 7,"line": 358,"col": 0},{"file": 7,"line": 3,"col": 0},{"file": 7,"line": 452,"col": 0,"fields": [9269]},{"file": 7,"line": 361,"col": 0},{"file": 7,"line": 386,"col": 0},{"file": 7,"line": 524,"col": 0,"fields": [9270,9271,9272]},{"file": 7,"line": 345,"col": 0},{"file": 7,"line": 472,"col": 0,"fields": [9273]},{"file": 7,"line": 437,"col": 0},{"file": 7,"line": 0,"col": 0},{"file": 7,"line": 426,"col": 0},{"file": 7,"line": 420,"col": 0},{"file": 7,"line": 343,"col": 0},{"file": 7,"line": 346,"col": 0},{"file": 7,"line": 436,"col": 0},{"file": 7,"line": 530,"col": 0,"fields": [9274,9275,9276]},{"file": 7,"line": 431,"col": 0},{"file": 7,"line": 486,"col": 0,"fields": []},{"file": 7,"line": 517,"col": 0,"fields": [9277,9278]},{"file": 7,"line": 342,"col": 0,"docs": "-----------------------------------------------------------------------------///\n                                API Definitions                              ///\n-----------------------------------------------------------------------------///\n"},{"file": 7,"line": 536,"col": 0,"fields": [9279,9280,9281,9282,9283,9284]},{"file": 7,"line": 354,"col": 0},{"file": 7,"line": 402,"col": 0},{"file": 7,"line": 1,"col": 0},{"file": 7,"line": 7,"col": 12},{"file": 7,"line": 445,"col": 0},{"file": 7,"line": 456,"col": 0,"fields": [9285,9286,9287,9288]},{"file": 7,"line": 425,"col": 0},{"file": 7,"line": 476,"col": 0,"fields": [9289]},{"file": 7,"line": 357,"col": 0},{"file": 7,"line": 502,"col": 0,"fields": [9290,9291,9292]},{"file": 7,"line": 392,"col": 0},{"file": 7,"line": 446,"col": 0},{"file": 7,"line": 409,"col": 0},{"file": 7,"line": 364,"col": 0},{"file": 8,"line": 4,"col": 4},{"file": 8,"line": 1,"col": 0},{"file": 8,"line": 2,"col": 0},{"file": 8,"line": 0,"col": 0},{"file": 8,"line": 12,"col": 0},{"file": 9,"line": 0,"col": 0},{"file": 9,"line": 5,"col": 0},{"file": 9,"line": 450,"col": 0},{"file": 9,"line": 1,"col": 0},{"file": 9,"line": 2,"col": 0},{"file": 9,"line": 3,"col": 0},{"file": 9,"line": 4,"col": 0},{"file": 10,"line": 157,"col": 4,"fields": [9293]},{"file": 10,"line": 947,"col": 4},{"file": 10,"line": 28,"col": 4,"docs": " The application's chosen I/O mode. This defaults to `Mode.blocking` but can be overridden\n by `root.event_loop`.\n"},{"file": 10,"line": 64,"col": 4},{"file": 10,"line": 686,"col": 4,"docs": " Implementation of OutStream trait for Buffer\n"},{"file": 10,"line": 38,"col": 4,"fields": []},{"file": 10,"line": 1142,"col": 4,"docs": " Creates a serializer that serializes types to any stream.\n  If `is_packed` is true, the data will be bit-packed into the stream.\n  Note that the you must call `serializer.flush()` when you are done\n  writing bit-packed data in order ensure any unwritten bits are committed.\n  If `is_packed` is false, data is packed to the smallest byte. In the case\n  of packed structs, the struct will written bit-packed and with the specified\n  endianess, after which data will resume being written at the next byte boundary.\n  Types may implement a custom serialization routine with a\n  function named `serialize` in the form of:\n    pub fn serialize(self: Self, serializer: var) !void\n  which will be called when the serializer is used to serialize that type. It will\n  pass a const pointer to the type instance to be serialized and a pointer\n  to the serializer struct.\n","fields": [9294,9295,9296]},{"file": 10,"line": 707,"col": 4,"docs": " Creates a stream which allows for writing bit fields to another stream\n","fields": [9297,9298]},{"file": 10,"line": 630,"col": 4,"fields": [9299]},{"file": 10,"line": 367,"col": 4,"docs": " Creates a stream which allows for reading bit fields from another stream\n","fields": [9300,9301]},{"file": 10,"line": 18,"col": 4},{"file": 10,"line": 569,"col": 4},{"file": 10,"line": 835,"col": 4},{"file": 10,"line": 572,"col": 4,"docs": " An OutStream that doesn't write to anything.\n"},{"file": 10,"line": 884,"col": 4,"docs": " Reads all characters until the next newline into buf, and returns\n a slice of the characters read (excluding the newline character(s)).\n","fields": [9302,9303]},{"file": 10,"line": 272,"col": 4,"docs": " Creates a stream which supports 'un-reading' data, so that it can be read again.\n This makes look-ahead style parsing much easier.\n","fields": [9304,9305]},{"file": 10,"line": 65,"col": 4},{"file": 10,"line": 34,"col": 4},{"file": 10,"line": 634,"col": 4,"fields": [9306,9307]},{"file": 10,"line": 964,"col": 4,"docs": " Creates a deserializer that deserializes types from any stream.\n  If `is_packed` is true, the data stream is treated as bit-packed,\n  otherwise data is expected to be packed to the smallest byte.\n  Types may implement a custom deserialization routine with a\n  function named `deserialize` in the form of:\n    pub fn deserialize(self: *Self, deserializer: var) !void\n  which will be called when the deserializer is used to deserialize\n  that type. It will pass a pointer to the type instance to deserialize\n  into and a pointer to the deserializer struct.\n","fields": [9308,9309,9310]},{"file": 10,"line": 876,"col": 4,"fields": [9311]},{"file": 10,"line": 336,"col": 4},{"file": 10,"line": 926,"col": 4,"docs": " Reads all characters until the next newline into slice, and returns\n a slice of the characters read (excluding the newline character(s)).\n","fields": [9312,9313]},{"file": 10,"line": 161,"col": 4,"fields": [9314,9315]},{"file": 10,"line": 63,"col": 4},{"file": 10,"line": 515,"col": 4,"docs": " This is a simple OutStream that writes to a fixed buffer, and returns an error\n when it runs out of space.\n"},{"file": 10,"line": 138,"col": 4,"docs": " On success, caller owns returned buffer.\n TODO move this to `std.fs` and add a version to `std.fs.Dir`.\n","fields": [9316,9317]},{"file": 10,"line": 62,"col": 4},{"file": 10,"line": 130,"col": 4,"docs": " TODO move this to `std.fs` and add a version to `std.fs.Dir`.\n","fields": [9318,9319]},{"file": 10,"line": 36,"col": 4},{"file": 10,"line": 918,"col": 4,"fields": [9320]},{"file": 10,"line": 594,"col": 4,"docs": " An OutStream that counts how many bytes has been written to it.\n","fields": [9321]},{"file": 10,"line": 54,"col": 4,"fields": []},{"file": 10,"line": 144,"col": 4,"docs": " On success, caller owns returned buffer.\n TODO move this to `std.fs` and add a version to `std.fs.Dir`.\n","fields": [9322,9323,9324]},{"file": 10,"line": 1,"col": 0},{"file": 10,"line": 5,"col": 0},{"file": 10,"line": 8,"col": 0},{"file": 10,"line": 6,"col": 0},{"file": 10,"line": 13,"col": 0},{"file": 10,"line": 16,"col": 0},{"file": 10,"line": 568,"col": 0},{"file": 10,"line": 12,"col": 0},{"file": 10,"line": 14,"col": 0},{"file": 10,"line": 2,"col": 0},{"file": 10,"line": 0,"col": 0},{"file": 10,"line": 3,"col": 0},{"file": 10,"line": 11,"col": 0},{"file": 10,"line": 9,"col": 0},{"file": 10,"line": 15,"col": 0},{"file": 10,"line": 7,"col": 0},{"file": 10,"line": 10,"col": 0},{"file": 11,"line": 1474,"col": 4,"docs": "Given a pointer to an array, returns a pointer to a portion of that array, preserving constness.\n","fields": [9325,9326,9327]},{"file": 11,"line": 1218,"col": 4,"docs": " In-place order reversal of a slice\n","fields": [9328,9329]},{"file": 11,"line": 696,"col": 4,"docs": " Writes a twos-complement big-endian integer to memory.\n Asserts that buffer.len >= T.bit_count / 8.\n The bit count of T must be divisible by 8.\n Any extra bytes in buffer before writing the integer are set to zero. To\n avoid the branch to check for extra buffer bytes, use writeIntBig instead.\n","fields": [9330,9331,9332]},{"file": 11,"line": 1379,"col": 4,"docs": "Given any value, returns a copy of its bytes in an array.\n","fields": [9333]},{"file": 11,"line": 1247,"col": 4,"docs": " In-place rotation of the values in an array ([0 1 2 3] becomes [1 2 3 0] if we rotate by 1)\n Assumes 0 <= amount <= items.len\n","fields": [9334,9335,9336]},{"file": 11,"line": 1454,"col": 4,"docs": "Given a pointer to an array of bytes, returns a value of the specified type backed by a\n copy of those bytes.\n","fields": [9337,9338]},{"file": 11,"line": 648,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, but\n the integer bit width must be divisible by 8.\n This function stores in foreign endian, which means it does a @byteSwap first.\n","fields": [9339,9340,9341]},{"file": 11,"line": 841,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that\n are separated by bytes in `delimiter`.\n separate(\"abc|def||ghi\", \"|\")\n will return slices for \"abc\", \"def\", \"\", \"ghi\", null, in that order.\n If `delimiter` does not exist in buffer,\n the iterator will return `buffer`, null, in that order.\n The delimiter length must not be zero.\n See also the related function `tokenize`.\n It is planned to rename this function to `split` before 1.0.0, like this:\n pub fn split(buffer: []const u8, delimiter: []const u8) SplitIterator {\n","fields": [9342,9343]},{"file": 11,"line": 939,"col": 4},{"file": 11,"line": 1199,"col": 4,"fields": [9344,9345]},{"file": 11,"line": 422,"col": 4,"fields": [9346,9347,9348,9349]},{"file": 11,"line": 710,"col": 4},{"file": 11,"line": 665,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, but\n the integer bit width must be divisible by 8.\n","fields": [9350,9351,9352,9353]},{"file": 11,"line": 1211,"col": 4,"fields": [9354,9355,9356]},{"file": 11,"line": 413,"col": 4,"docs": " Linear search for the last index of a scalar value inside a slice.\n","fields": [9357,9358,9359]},{"file": 11,"line": 230,"col": 4},{"file": 11,"line": 679,"col": 4,"docs": " Writes a twos-complement little-endian integer to memory.\n Asserts that buf.len >= T.bit_count / 8.\n The bit count of T must be divisible by 8.\n Any extra bytes in buffer after writing the integer are set to zero. To\n avoid the branch to check for extra buffer bytes, use writeIntLittle\n instead.\n","fields": [9360,9361,9362]},{"file": 11,"line": 1187,"col": 4,"fields": [9363,9364]},{"file": 11,"line": 574,"col": 4},{"file": 11,"line": 445,"col": 4,"fields": [9365,9366,9367,9368]},{"file": 11,"line": 652,"col": 4},{"file": 11,"line": 378,"col": 4,"docs": " Remove values from the beginning of a slice.\n","fields": [9369,9370,9371]},{"file": 11,"line": 504,"col": 4,"docs": " Reads an integer from memory with size equal to bytes.len.\n T specifies the return type, which must be large enough to store\n the result.\n","fields": [9372,9373,9374]},{"file": 11,"line": 1528,"col": 4,"docs": " Given an address and an alignment, return true if the address is a multiple of the alignment\n The alignment must be a power of 2 and greater than 0.\n","fields": [9375,9376]},{"file": 11,"line": 726,"col": 4,"docs": " Writes a twos-complement integer to memory, with the specified endianness.\n Asserts that buf.len >= T.bit_count / 8.\n The bit count of T must be evenly divisible by 8.\n Any extra bytes in buffer not part of the integer are set to zero, with\n respect to endianness. To avoid the branch to check for extra buffer bytes,\n use writeInt instead.\n","fields": [9377,9378,9379,9380]},{"file": 11,"line": 967,"col": 4,"docs": " Naively combines a series of slices with a separator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [9381,9382,9383]},{"file": 11,"line": 1002,"col": 4,"docs": " Copies each T from slices into a new slice that exactly holds all the elements.\n","fields": [9384,9385,9386]},{"file": 11,"line": 1411,"col": 4,"docs": "Given a pointer to an array of bytes, returns a pointer to a value of the specified type\n backed by those bytes, preserving constness.\n","fields": [9387,9388]},{"file": 11,"line": 1289,"col": 4,"docs": " Converts an integer from specified endianness to host endianness.\n","fields": [9389,9390,9391]},{"file": 11,"line": 1305,"col": 4,"docs": " Converts an integer which has host endianness to little endian.\n","fields": [9392,9393]},{"file": 11,"line": 593,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n","fields": [9394,9395,9396]},{"file": 11,"line": 1297,"col": 4,"docs": " Converts an integer which has host endianness to the desired endianness.\n","fields": [9397,9398,9399]},{"file": 11,"line": 434,"col": 4,"fields": [9400,9401,9402]},{"file": 11,"line": 900,"col": 4},{"file": 11,"line": 1273,"col": 4,"docs": " Converts a little-endian integer to host endianness.\n","fields": [9403,9404]},{"file": 11,"line": 1281,"col": 4,"docs": " Converts a big-endian integer to host endianness.\n","fields": [9405,9406]},{"file": 11,"line": 408,"col": 4,"docs": " Linear search for the index of a scalar value inside a slice.\n","fields": [9407,9408,9409]},{"file": 11,"line": 640,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, and\n accepts any integer bit width.\n This function stores in native endian, which means it is implemented as a simple\n memory store.\n","fields": [9410,9411,9412]},{"file": 11,"line": 15,"col": 4},{"file": 11,"line": 288,"col": 4,"fields": [9413,9414,9415]},{"file": 11,"line": 430,"col": 4,"fields": [9416,9417,9418]},{"file": 11,"line": 544,"col": 4},{"file": 11,"line": 322,"col": 4,"docs": " Returns true if lhs < rhs, false otherwise\n","fields": [9419,9420,9421]},{"file": 11,"line": 891,"col": 4,"fields": [9422,9423,9424]},{"file": 11,"line": 392,"col": 4,"docs": " Remove values from the beginning and end of a slice.\n","fields": [9425,9426,9427]},{"file": 11,"line": 535,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n Assumes the endianness of memory is foreign, so it must byte-swap.\n","fields": [9428,9429]},{"file": 11,"line": 715,"col": 4},{"file": 11,"line": 569,"col": 4},{"file": 11,"line": 385,"col": 4,"docs": " Remove values from the end of a slice.\n","fields": [9430,9431,9432]},{"file": 11,"line": 270,"col": 4,"fields": [9433,9434]},{"file": 11,"line": 657,"col": 4},{"file": 11,"line": 10,"col": 4},{"file": 11,"line": 462,"col": 4,"docs": " Find the index in a slice of a sub-slice, searching from the end backwards.\n To start looking at a different index, slice the haystack first.\n TODO is there even a better algorithm for this?\n","fields": [9435,9436,9437]},{"file": 11,"line": 539,"col": 4},{"file": 11,"line": 565,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n Assumes the endianness of memory is foreign, so it must byte-swap.\n","fields": [9438,9439]},{"file": 11,"line": 252,"col": 4,"docs": " Copy all of source into dest at position 0.\n dest.len must be >= source.len.\n dest.ptr must be >= src.ptr.\n","fields": [9440,9441,9442]},{"file": 11,"line": 363,"col": 4,"docs": " Returns true if all elements in a slice are equal to the scalar value provided\n","fields": [9443,9444,9445]},{"file": 11,"line": 582,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n","fields": [9446,9447,9448]},{"file": 11,"line": 1397,"col": 0,"fields": [9449,9450]},{"file": 11,"line": 1099,"col": 0,"fields": []},{"file": 11,"line": 6,"col": 0},{"file": 11,"line": 1467,"col": 0,"fields": [9451,9452]},{"file": 11,"line": 2,"col": 0},{"file": 11,"line": 4,"col": 0},{"file": 11,"line": 3,"col": 0},{"file": 11,"line": 1,"col": 0},{"file": 11,"line": 8,"col": 0},{"file": 11,"line": 7,"col": 0},{"file": 11,"line": 1048,"col": 0,"fields": []},{"file": 11,"line": 0,"col": 0},{"file": 11,"line": 5,"col": 0},{"file": 64,"line": 249,"col": 8,"fields": [9453]},{"file": 64,"line": 262,"col": 8,"fields": [9454,9455]},{"file": 64,"line": 257,"col": 8,"fields": [9456]},{"file": 65,"line": 27,"col": 8,"docs": " Represents a unique ID per thread.\n May be an integer or pointer depending on the platform.\n On Linux and POSIX, this is the same as Handle.\n"},{"file": 65,"line": 74,"col": 8,"fields": [9457]},{"file": 65,"line": 32,"col": 8},{"file": 65,"line": 343,"col": 8,"fields": []},{"file": 65,"line": 16,"col": 8,"docs": " Represents a kernel thread handle.\n May be an integer or a pointer depending on the platform.\n On Linux and POSIX, this is the same as Id.\n"},{"file": 65,"line": 70,"col": 8,"docs": " Returns the handle of this thread.\n On Linux and POSIX, this is the same as Id.\n On Linux, it is possible that the thread spawned with `spawn`\n finishes executing entirely before the clone syscall completes. In this\n case, this function will return 0 rather than the no-longer-existing thread's\n pid.\n","fields": [9458]},{"file": 65,"line": 53,"col": 8,"docs": " Returns the ID of the calling thread.\n Makes a syscall every time the function is called.\n On Linux and POSIX, this Id is the same as a Handle.\n","fields": []},{"file": 65,"line": 336,"col": 8},{"file": 65,"line": 11,"col": 8},{"file": 65,"line": 143,"col": 8,"docs": " caller must call wait on the returned thread\n fn startFn(@typeOf(context)) T\n where T is u8, noreturn, void, or !void\n caller must call wait on the returned thread\n","fields": [9459,9460]},{"file": 65,"line": 109,"col": 8},{"file": 66,"line": 16,"col": 8,"fields": [9461]},{"file": 66,"line": 38,"col": 8,"fields": [9462,9463]},{"file": 66,"line": 26,"col": 8,"fields": [9464,9465]},{"file": 66,"line": 47,"col": 8,"fields": [9466]},{"file": 66,"line": 51,"col": 8,"fields": [9467]},{"file": 66,"line": 11,"col": 8,"fields": [9468]},{"file": 66,"line": 43,"col": 8,"fields": [9469]},{"file": 66,"line": 34,"col": 8,"fields": [9470,9471]},{"file": 66,"line": 9,"col": 4},{"file": 66,"line": 59,"col": 4,"fields": [9472,9473]},{"file": 66,"line": 55,"col": 4,"fields": [9474,9475]},{"file": 67,"line": 130,"col": 4},{"file": 12,"line": 2055,"col": 4},{"file": 67,"line": 90,"col": 4},{"file": 67,"line": 87,"col": 4},{"file": 67,"line": 140,"col": 4},{"file": 12,"line": 658,"col": 4},{"file": 12,"line": 1000,"col": 4,"docs": " Delete a file name and possibly the file it refers to, based on an open directory handle.\n","fields": [9476,9477,9478]},{"file": 67,"line": 36,"col": 4,"docs": " Software termination signal from kill\n"},{"file": 67,"line": 122,"col": 4},{"file": 12,"line": 2193,"col": 4,"docs": " Deletes the mappings for the specified address range, causing\n further references to addresses within the range to generate invalid memory references.\n Note that while POSIX allows unmapping a region in the middle of an existing mapping,\n Zig's munmap function does not, for two reasons:\n * It violates the Zig principle that resource deallocation must succeed.\n * The Windows function, VirtualFree, has this restriction.\n","fields": [9479]},{"file": 67,"line": 59,"col": 4,"docs": " signal gets error\n"},{"file": 12,"line": 529,"col": 4},{"file": 67,"line": 9,"col": 4},{"file": 12,"line": 762,"col": 4,"fields": [9480,9481]},{"file": 67,"line": 162,"col": 4,"docs": " Remove directory instead of unlinking file\n"},{"file": 12,"line": 1340,"col": 4,"docs": " Same as `readlink` except `file_path` is null-terminated.\n","fields": [9482,9483]},{"file": 12,"line": 2124,"col": 4,"fields": []},{"file": 67,"line": 123,"col": 4},{"file": 67,"line": 121,"col": 4},{"file": 12,"line": 2404,"col": 4,"docs": " Repositions read/write file offset relative to the end.\n","fields": [9484,9485]},{"file": 12,"line": 2043,"col": 4,"docs": " initialize an inotify instance\n","fields": [9486]},{"file": 12,"line": 1693,"col": 4,"fields": [9487]},{"file": 68,"line": 18,"col": 4},{"file": 12,"line": 702,"col": 4,"docs": " Like `execvpe` except the parameters are null-terminated,\n matching the syscall API on all targets. This removes the need for an allocator.\n This function also uses the PATH environment variable to get the full path to the executable.\n If `file` is an absolute path, this is the same as `execveC`.\n","fields": [9488,9489,9490]},{"file": 12,"line": 1978,"col": 4,"fields": []},{"file": 12,"line": 2267,"col": 4},{"file": 12,"line": 1361,"col": 4,"fields": [9491,9492,9493]},{"file": 67,"line": 132,"col": 4},{"file": 12,"line": 53,"col": 4,"docs": " See also `getenv`. Populated by startup code before main().\n"},{"file": 67,"line": 117,"col": 4},{"file": 67,"line": 81,"col": 4},{"file": 67,"line": 95,"col": 4},{"file": 12,"line": 1988,"col": 4},{"file": 12,"line": 2750,"col": 4},{"file": 12,"line": 959,"col": 4,"docs": " Delete a name and possibly the file it refers to.\n See also `unlinkC`.\n","fields": [9494]},{"file": 12,"line": 2344,"col": 4},{"file": 67,"line": 80,"col": 4},{"file": 67,"line": 151,"col": 4},{"file": 12,"line": 815,"col": 4,"docs": " Get an environment variable with a null-terminated name.\n See also `getenv`.\n TODO https://github.com/ziglang/zig/issues/265\n","fields": [9495]},{"file": 67,"line": 99,"col": 4},{"file": 12,"line": 2111,"col": 4,"docs": " `memory.len` must be page-aligned.\n","fields": [9496,9497]},{"file": 12,"line": 1329,"col": 4,"docs": " Read value of a symbolic link.\n The return value is a slice of `out_buffer` from index 0.\n","fields": [9498,9499]},{"file": 67,"line": 155,"col": 4},{"file": 12,"line": 1497,"col": 4,"fields": [9500,9501,9502]},{"file": 67,"line": 56,"col": 4,"docs": " return current value\n"},{"file": 12,"line": 30,"col": 4},{"file": 12,"line": 2227,"col": 4,"docs": " Same as `access` except `path` is null-terminated.\n","fields": [9503,9504]},{"file": 68,"line": 23,"col": 4},{"file": 67,"line": 71,"col": 4},{"file": 12,"line": 910,"col": 4,"fields": [9505,9506,9507]},{"file": 12,"line": 849,"col": 4},{"file": 12,"line": 58,"col": 4,"docs": " Populated by startup code before main().\n Not available on Windows. See `std.process.args`\n for obtaining the process arguments.\n"},{"file": 68,"line": 16,"col": 4},{"file": 12,"line": 230,"col": 4,"docs": " Exits the program cleanly with the specified status code.\n","fields": [9508]},{"file": 12,"line": 2122,"col": 4},{"file": 12,"line": 2087,"col": 4,"docs": " remove an existing watch from an inotify instance\n","fields": [9509,9510]},{"file": 67,"line": 136,"col": 4},{"file": 67,"line": 91,"col": 4},{"file": 12,"line": 1317,"col": 4},{"file": 12,"line": 2285,"col": 4,"fields": [9511]},{"file": 67,"line": 116,"col": 4},{"file": 12,"line": 101,"col": 4,"docs": " Obtain a series of random bytes. These bytes can be used to seed user-space\n random number generators or for cryptographic purposes.\n When linking against libc, this calls the\n appropriate OS-specific library call. Otherwise it uses the zig standard\n library implementation.\n","fields": [9512]},{"file": 12,"line": 2789,"col": 4,"fields": [9513]},{"file": 67,"line": 24,"col": 4,"docs": " interrupt\n"},{"file": 67,"line": 145,"col": 4},{"file": 12,"line": 39,"col": 4,"docs": " When linking libc, this is the C API. Otherwise, it is the OS-specific system interface.\n"},{"file": 12,"line": 2320,"col": 4,"fields": [9514,9515,9516,9517,9518]},{"file": 67,"line": 156,"col": 4},{"file": 67,"line": 89,"col": 4},{"file": 12,"line": 29,"col": 4},{"file": 12,"line": 2718,"col": 4},{"file": 12,"line": 33,"col": 4},{"file": 12,"line": 1584,"col": 4,"fields": [9519,9520]},{"file": 67,"line": 76,"col": 4},{"file": 67,"line": 134,"col": 4},{"file": 67,"line": 92,"col": 4},{"file": 12,"line": 1898,"col": 4,"fields": [9521]},{"file": 67,"line": 65,"col": 4,"docs": " Signal error value (returned by signal call on error)\n"},{"file": 67,"line": 75,"col": 4},{"file": 12,"line": 2155,"col": 4,"docs": " Map files or devices into memory.\n Use of a mapped region can result in these signals:\n * SIGSEGV - Attempted write into a region mapped as read-only.\n * SIGBUS - Attempted  access to a portion of the buffer that does not correspond to the file\n","fields": [9522,9523,9524,9525,9526,9527]},{"file": 12,"line": 2562,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.\n","fields": [9528,9529]},{"file": 12,"line": 2134,"col": 4},{"file": 12,"line": 2787,"col": 4},{"file": 67,"line": 125,"col": 4},{"file": 12,"line": 94,"col": 4},{"file": 67,"line": 139,"col": 4},{"file": 12,"line": 970,"col": 4,"docs": " Same as `unlink` except the parameter is a null terminated UTF8-encoded string.\n","fields": [9530]},{"file": 67,"line": 120,"col": 4},{"file": 67,"line": 159,"col": 4},{"file": 12,"line": 675,"col": 4,"docs": " Like `execve` except the parameters are null-terminated,\n matching the syscall API on all targets. This removes the need for an allocator.\n This function ignores PATH environment variable. See `execvpeC` for that.\n","fields": [9531,9532,9533]},{"file": 67,"line": 138,"col": 4},{"file": 12,"line": 567,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n See also `openC`.\n","fields": [9534,9535,9536]},{"file": 67,"line": 5,"col": 4},{"file": 12,"line": 1167,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated UTF16LE encoded byte arrays.\n Assumes target is Windows.\n","fields": [9537,9538]},{"file": 12,"line": 1388,"col": 4,"fields": [9539]},{"file": 12,"line": 1298,"col": 4,"docs": " Same as `chdir` except the parameter is null-terminated.\n","fields": [9540]},{"file": 12,"line": 2336,"col": 4,"fields": [9541,9542]},{"file": 67,"line": 86,"col": 4},{"file": 12,"line": 994,"col": 4},{"file": 12,"line": 1732,"col": 4,"fields": [9543,9544,9545,9546]},{"file": 12,"line": 2096,"col": 4},{"file": 12,"line": 2303,"col": 4,"fields": [9547,9548,9549,9550,9551]},{"file": 12,"line": 2650,"col": 4},{"file": 12,"line": 1949,"col": 4,"fields": [9552]},{"file": 12,"line": 2726,"col": 4,"fields": [9553,9554]},{"file": 67,"line": 53,"col": 4,"docs": " ignore signal\n"},{"file": 67,"line": 72,"col": 4},{"file": 12,"line": 1240,"col": 4,"docs": " Deletes an empty directory.\n","fields": [9555]},{"file": 12,"line": 608,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n `file_path` is relative to the open directory handle `dir_fd`.\n See also `openatC`.\n","fields": [9556,9557,9558,9559]},{"file": 12,"line": 616,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n `file_path` is relative to the open directory handle `dir_fd`.\n See also `openat`.\n","fields": [9560,9561,9562,9563]},{"file": 12,"line": 1872,"col": 4,"docs": " Same as `connect` except it is for non-blocking socket file descriptors.\n It expects to receive EINPROGRESS`.\n","fields": [9564,9565,9566]},{"file": 12,"line": 1970,"col": 4},{"file": 12,"line": 35,"col": 4},{"file": 12,"line": 1787,"col": 4},{"file": 12,"line": 2216,"col": 4,"docs": " check user's permissions for a file\n TODO currently this assumes `mode` is `F_OK` on Windows.\n","fields": [9567,9568]},{"file": 67,"line": 96,"col": 4},{"file": 67,"line": 107,"col": 4},{"file": 67,"line": 129,"col": 4},{"file": 67,"line": 152,"col": 4},{"file": 12,"line": 1844,"col": 4,"docs": " Initiate a connection on a socket.\n This is for blocking file descriptors only.\n For non-blocking, see `connect_async`.\n","fields": [9569,9570,9571]},{"file": 67,"line": 135,"col": 4},{"file": 67,"line": 33,"col": 4,"docs": " segment violation\n"},{"file": 12,"line": 2064,"col": 4,"docs": " add a watch to an initialized inotify instance\n","fields": [9572,9573,9574]},{"file": 67,"line": 157,"col": 4},{"file": 67,"line": 131,"col": 4},{"file": 12,"line": 34,"col": 4},{"file": 12,"line": 1201,"col": 4,"docs": " Same as `mkdir` but the parameter is a null-terminated UTF8-encoded string.\n","fields": [9575,9576]},{"file": 12,"line": 2586,"col": 4,"fields": [9577,9578,9579]},{"file": 67,"line": 7,"col": 4},{"file": 67,"line": 126,"col": 4},{"file": 67,"line": 148,"col": 4},{"file": 67,"line": 113,"col": 4},{"file": 12,"line": 185,"col": 4},{"file": 12,"line": 1010,"col": 4,"docs": " Same as `unlinkat` but `file_path` is a null-terminated string.\n","fields": [9580,9581,9582]},{"file": 67,"line": 19,"col": 4,"docs": " maximum signal number + 1\n"},{"file": 12,"line": 2741,"col": 4,"docs": " Examine and change a signal action.\n","fields": [9583,9584,9585]},{"file": 12,"line": 1225,"col": 4},{"file": 67,"line": 85,"col": 4},{"file": 67,"line": 74,"col": 4},{"file": 12,"line": 2070,"col": 4,"docs": " Same as `inotify_add_watch` except pathname is null-terminated.\n","fields": [9586,9587,9588]},{"file": 67,"line": 105,"col": 4},{"file": 12,"line": 217,"col": 4},{"file": 12,"line": 31,"col": 4},{"file": 12,"line": 438,"col": 4,"docs": " Write multiple buffers to a file descriptor. Keeps trying if it gets interrupted.\n This function is for blocking file descriptors only. For non-blocking, see\n `writevAsync`.\n","fields": [9589,9590]},{"file": 12,"line": 2493,"col": 4,"docs": " Return the canonicalized absolute pathname.\n Expands all symbolic links and resolves references to `.`, `..`, and\n extra `/` characters in `pathname`.\n The return value is a slice of `out_buffer`, but not necessarily from the beginning.\n See also `realpathC` and `realpathW`.\n","fields": [9591,9592]},{"file": 12,"line": 187,"col": 4,"fields": [9593]},{"file": 12,"line": 2774,"col": 4,"fields": [9594,9595]},{"file": 67,"line": 42,"col": 4,"docs": " abnormal termination triggered by abort call\n"},{"file": 67,"line": 16,"col": 4},{"file": 67,"line": 98,"col": 4},{"file": 12,"line": 1596,"col": 4},{"file": 12,"line": 1932,"col": 4,"fields": [9596,9597]},{"file": 67,"line": 102,"col": 4},{"file": 12,"line": 1548,"col": 4,"docs": " addr is `*const T` where T is one of the sockaddr\n","fields": [9598,9599]},{"file": 67,"line": 147,"col": 4},{"file": 12,"line": 884,"col": 4,"docs": " This is the same as `symlink` except the parameters are null-terminated pointers.\n See also `symlink`.\n","fields": [9600,9601]},{"file": 67,"line": 108,"col": 4},{"file": 12,"line": 2701,"col": 4},{"file": 67,"line": 153,"col": 4},{"file": 67,"line": 104,"col": 4},{"file": 12,"line": 575,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n See also `open`.\n TODO https://github.com/ziglang/zig/issues/265\n","fields": [9602,9603,9604]},{"file": 67,"line": 128,"col": 4},{"file": 12,"line": 1947,"col": 4},{"file": 67,"line": 30,"col": 4,"docs": " floating point exception\n"},{"file": 67,"line": 150,"col": 4},{"file": 12,"line": 1773,"col": 4,"fields": [9605,9606]},{"file": 12,"line": 255,"col": 4},{"file": 12,"line": 870,"col": 4,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`.\n A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent\n one; the latter case is known as a dangling link.\n If `sym_link_path` exists, it will not be overwritten.\n See also `symlinkC` and `symlinkW`.\n","fields": [9607,9608]},{"file": 67,"line": 83,"col": 4},{"file": 12,"line": 1382,"col": 4},{"file": 12,"line": 1512,"col": 4},{"file": 12,"line": 2432,"col": 4,"docs": " Returns the read/write file offset relative to the beginning.\n","fields": [9609]},{"file": 12,"line": 1275,"col": 4},{"file": 12,"line": 796,"col": 4,"docs": " Get an environment variable.\n See also `getenvC`.\n TODO make this go through libc when we have it\n","fields": [9610]},{"file": 12,"line": 1752,"col": 4,"docs": " Waits for an I/O event on an epoll file descriptor.\n Returns the number of file descriptors ready for the requested I/O,\n or zero if no file descriptor became ready during the requested timeout milliseconds.\n","fields": [9611,9612,9613]},{"file": 67,"line": 118,"col": 4},{"file": 67,"line": 97,"col": 4},{"file": 67,"line": 100,"col": 4},{"file": 12,"line": 733,"col": 4,"docs": " This function must allocate memory to add a null terminating bytes on path and each arg.\n It must also convert to KEY=VALUE\\0 format for environment variables, and include null\n pointers after the args and after the environment variables.\n `argv_slice[0]` is the executable path.\n This function also uses the PATH environment variable to get the full path to the executable.\n","fields": [9614,9615,9616]},{"file": 12,"line": 1408,"col": 4,"fields": [9617]},{"file": 12,"line": 2652,"col": 4,"fields": [9618,9619]},{"file": 12,"line": 1287,"col": 4,"docs": " Changes the current working directory of the calling process.\n `dir_path` is recommended to be a UTF-8 encoded string.\n","fields": [9620]},{"file": 12,"line": 916,"col": 4,"fields": [9621,9622,9623]},{"file": 67,"line": 141,"col": 4},{"file": 12,"line": 2503,"col": 4,"docs": " Same as `realpath` except `pathname` is null-terminated.\n","fields": [9624,9625]},{"file": 12,"line": 2460,"col": 4},{"file": 12,"line": 373,"col": 4},{"file": 67,"line": 93,"col": 4},{"file": 12,"line": 785,"col": 4,"fields": [9626,9627]},{"file": 12,"line": 1172,"col": 4},{"file": 12,"line": 1767,"col": 4},{"file": 12,"line": 646,"col": 4,"fields": [9628,9629]},{"file": 68,"line": 15,"col": 4},{"file": 12,"line": 36,"col": 4},{"file": 12,"line": 2036,"col": 4},{"file": 12,"line": 2006,"col": 4,"fields": [9630,9631,9632,9633]},{"file": 12,"line": 2710,"col": 4,"docs": " Call this when you made a syscall or something that sets errno\n and you get an unexpected error.\n","fields": [9634]},{"file": 67,"line": 73,"col": 4},{"file": 67,"line": 67,"col": 4},{"file": 67,"line": 143,"col": 4},{"file": 67,"line": 146,"col": 4},{"file": 67,"line": 127,"col": 4},{"file": 12,"line": 1679,"col": 4},{"file": 67,"line": 149,"col": 4},{"file": 12,"line": 937,"col": 4},{"file": 12,"line": 1251,"col": 4,"docs": " Same as `rmdir` except the parameter is null-terminated.\n","fields": [9635]},{"file": 67,"line": 84,"col": 4},{"file": 67,"line": 94,"col": 4},{"file": 12,"line": 2699,"col": 4,"docs": " Whether or not error.Unexpected will print its value and a stack trace.\n if this happens the fix is to add the error code to the corresponding\n switch expression, possibly introduce a new error in the error set, and\n send a patch to Zig.\n"},{"file": 67,"line": 11,"col": 4},{"file": 67,"line": 77,"col": 4},{"file": 67,"line": 62,"col": 4,"docs": " acknowledge\n"},{"file": 12,"line": 219,"col": 4,"fields": [9636,9637]},{"file": 12,"line": 315,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned.\n This function is for blocking file descriptors only.\n","fields": [9638,9639,9640]},{"file": 12,"line": 1398,"col": 4,"fields": [9641,9642]},{"file": 67,"line": 110,"col": 4},{"file": 12,"line": 1624,"col": 4,"docs": " Accept a connection on a socket.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [9643,9644,9645,9646]},{"file": 12,"line": 2672,"col": 4,"fields": [9647]},{"file": 67,"line": 144,"col": 4},{"file": 12,"line": 66,"col": 4,"docs": " To obtain errno, call this function with the return value of the\n system function call. For some systems this will obtain the value directly\n from the return code; for others it will use a thread-local errno variable.\n Therefore, this function only returns a well-defined value when it is called\n directly after the system function call which one wants to learn the errno\n value of.\n"},{"file": 12,"line": 465,"col": 4,"docs": " Write multiple buffers to a file descriptor, with a position offset.\n Keeps trying if it gets interrupted.\n This function is for blocking file descriptors only. For non-blocking, see\n `pwritevAsync`.\n","fields": [9648,9649,9650]},{"file": 67,"line": 82,"col": 4},{"file": 67,"line": 88,"col": 4},{"file": 12,"line": 1135,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated byte arrays.\n","fields": [9651,9652]},{"file": 67,"line": 27,"col": 4,"docs": " illegal instruction - invalid function image\n"},{"file": 12,"line": 1472,"col": 4},{"file": 67,"line": 119,"col": 4},{"file": 12,"line": 1807,"col": 4},{"file": 12,"line": 1418,"col": 4,"fields": [9653,9654]},{"file": 12,"line": 1706,"col": 4},{"file": 12,"line": 2297,"col": 4},{"file": 67,"line": 39,"col": 4,"docs": " Ctrl-Break sequence\n"},{"file": 67,"line": 45,"col": 4,"docs": " SIGABRT compatible with other platforms, same as SIGABRT\n"},{"file": 67,"line": 103,"col": 4},{"file": 12,"line": 1122,"col": 4,"docs": " Change the name or location of a file.\n","fields": [9655,9656]},{"file": 67,"line": 50,"col": 4,"docs": " default signal action\n"},{"file": 67,"line": 142,"col": 4},{"file": 12,"line": 2661,"col": 4,"fields": [9657,9658]},{"file": 12,"line": 1190,"col": 4,"docs": " Create a directory.\n `mode` is ignored on Windows.\n","fields": [9659,9660]},{"file": 12,"line": 32,"col": 4},{"file": 67,"line": 154,"col": 4},{"file": 67,"line": 133,"col": 4},{"file": 12,"line": 1792,"col": 4,"fields": [9661]},{"file": 12,"line": 823,"col": 4},{"file": 12,"line": 2534,"col": 4,"docs": " Same as `realpath` except `pathname` is null-terminated and UTF16LE-encoded.\n","fields": [9662,9663]},{"file": 67,"line": 79,"col": 4},{"file": 12,"line": 1039,"col": 4,"docs": " Same as `unlinkat` but `sub_path_w` is UTF16LE, NT prefixed. Windows only.\n","fields": [9664,9665,9666]},{"file": 12,"line": 2686,"col": 4,"docs": " Used to convert a slice to a null terminated slice on the stack.\n TODO https://github.com/ziglang/zig/issues/287\n","fields": [9667]},{"file": 67,"line": 124,"col": 4},{"file": 67,"line": 78,"col": 4},{"file": 12,"line": 2202,"col": 4},{"file": 67,"line": 137,"col": 4},{"file": 12,"line": 2254,"col": 4,"docs": " Call from Windows-specific code if you already have a UTF-16LE encoded, null terminated string.\n Otherwise use `access` or `accessC`.\n TODO currently this ignores `mode`.\n","fields": [9668,9669]},{"file": 67,"line": 4,"col": 4},{"file": 67,"line": 101,"col": 4},{"file": 67,"line": 69,"col": 4},{"file": 67,"line": 68,"col": 4},{"file": 12,"line": 2273,"col": 4,"docs": " Creates a unidirectional data channel that can be used for interprocess communication.\n","fields": []},{"file": 67,"line": 109,"col": 4},{"file": 12,"line": 2670,"col": 4},{"file": 12,"line": 18,"col": 0},{"file": 12,"line": 17,"col": 0},{"file": 12,"line": 23,"col": 0},{"file": 12,"line": 22,"col": 0},{"file": 12,"line": 1569,"col": 0},{"file": 12,"line": 21,"col": 0},{"file": 12,"line": 19,"col": 0},{"file": 12,"line": 143,"col": 0,"fields": [9670]},{"file": 12,"line": 1102,"col": 0},{"file": 12,"line": 16,"col": 0},{"file": 12,"line": 20,"col": 0},{"file": 13,"line": 1400,"col": 4},{"file": 13,"line": 134,"col": 4,"docs": " Returns a slice with the same pointer as addresses, with a potentially smaller len.\n On Windows, when first_address is not null, we ask for at least 32 stack frames,\n and then try to find the first address. If addresses.len is more than 32, we\n capture that many stack frames exactly, and then look for the first address,\n chopping off the irrelevant frames and shifting so that the returned addresses pointer\n equals the passed in addresses pointer.\n","fields": [9671,9672]},{"file": 13,"line": 2347,"col": 4,"docs": " Whether or not the current target can print useful debug information when a segfault occurs.\n"},{"file": 13,"line": 1251,"col": 4},{"file": 13,"line": 2348,"col": 4},{"file": 13,"line": 1224,"col": 4},{"file": 13,"line": 1222,"col": 4},{"file": 13,"line": 1221,"col": 4},{"file": 13,"line": 271,"col": 4},{"file": 13,"line": 823,"col": 4},{"file": 13,"line": 21,"col": 4},{"file": 13,"line": 24,"col": 4},{"file": 13,"line": 105,"col": 4,"docs": " Tries to print the stack trace starting from the supplied base pointer to stderr,\n unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [9673,9674]},{"file": 13,"line": 2444,"col": 4,"fields": [9675]},{"file": 13,"line": 22,"col": 4},{"file": 13,"line": 770,"col": 4,"fields": [9676,9677,9678,9679]},{"file": 13,"line": 1026,"col": 4,"docs": " Initialize DWARF info. The caller has the responsibility to initialize most\n the DwarfInfo fields before calling. These fields can be left undefined:\n * abbrev_table_list\n * compile_unit_list\n","fields": [9680,9681]},{"file": 13,"line": 730,"col": 4,"docs": " This function works in freestanding mode.\n fn printLineFromFile(out_stream: var, line_info: LineInfo) !void\n","fields": [9682,9683,9684,9685,9686]},{"file": 13,"line": 2331,"col": 4,"docs": " This should only be used in temporary test programs.\n"},{"file": 13,"line": 1034,"col": 4,"fields": [9687,9688,9689]},{"file": 13,"line": 1507,"col": 0,"fields": [9690,9691,9692]},{"file": 13,"line": 2,"col": 0},{"file": 13,"line": 247,"col": 0},{"file": 13,"line": 1658,"col": 0,"docs": " Gets an already existing AbbrevTable given the abbrev_offset, or if not found,\n seeks in the stream and parses it.\n","fields": [9693,9694]},{"file": 13,"line": 2279,"col": 0,"fields": [9695,9696,9697]},{"file": 13,"line": 1557,"col": 0,"fields": [9698]},{"file": 13,"line": 8,"col": 0},{"file": 13,"line": 1490,"col": 0,"fields": [9699,9700]},{"file": 13,"line": 215,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 13,"line": 4,"col": 0},{"file": 13,"line": 1393,"col": 0},{"file": 13,"line": 43,"col": 0},{"file": 13,"line": 249,"col": 0},{"file": 13,"line": 7,"col": 0},{"file": 13,"line": 1091,"col": 0,"fields": [9701]},{"file": 13,"line": 2063,"col": 0},{"file": 13,"line": 2293,"col": 0,"fields": [9702]},{"file": 13,"line": 2297,"col": 0,"fields": [9703,9704]},{"file": 13,"line": 1200,"col": 0},{"file": 13,"line": 1520,"col": 0,"fields": [9705,9706,9707]},{"file": 13,"line": 3,"col": 0},{"file": 13,"line": 1412,"col": 0},{"file": 13,"line": 246,"col": 0},{"file": 13,"line": 14,"col": 0},{"file": 13,"line": 1323,"col": 0},{"file": 13,"line": 15,"col": 0},{"file": 13,"line": 1631,"col": 0,"fields": [9708]},{"file": 13,"line": 10,"col": 0},{"file": 13,"line": 2182,"col": 0,"fields": [9709]},{"file": 13,"line": 1679,"col": 0,"fields": [9710,9711,9712]},{"file": 13,"line": 1525,"col": 0,"fields": [9713,9714,9715,9716]},{"file": 13,"line": 19,"col": 0},{"file": 13,"line": 248,"col": 0},{"file": 13,"line": 245,"col": 0},{"file": 13,"line": 2068,"col": 0,"fields": [9717,9718]},{"file": 13,"line": 5,"col": 0},{"file": 13,"line": 16,"col": 0},{"file": 13,"line": 1514,"col": 0,"fields": [9719,9720,9721]},{"file": 13,"line": 774,"col": 0,"fields": [9722,9723,9724,9725,9726,9727,9728]},{"file": 13,"line": 1290,"col": 0},{"file": 13,"line": 1333,"col": 0},{"file": 13,"line": 6,"col": 0},{"file": 13,"line": 9,"col": 0},{"file": 13,"line": 13,"col": 0},{"file": 13,"line": 2359,"col": 0},{"file": 13,"line": 2336,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 13,"line": 1283,"col": 0},{"file": 13,"line": 553,"col": 0},{"file": 13,"line": 1568,"col": 0,"fields": [9729,9730,9731]},{"file": 13,"line": 1,"col": 0},{"file": 13,"line": 2332,"col": 0},{"file": 13,"line": 42,"col": 0,"docs": " Tries to write to stderr, unbuffered, and ignores any error returned.\n Does not append a newline.\n"},{"file": 13,"line": 1310,"col": 0},{"file": 13,"line": 1059,"col": 0,"fields": [9732]},{"file": 13,"line": 2333,"col": 0},{"file": 13,"line": 2247,"col": 0,"fields": [9733,9734]},{"file": 13,"line": 2319,"col": 0,"fields": [9735,9736,9737]},{"file": 13,"line": 1298,"col": 0},{"file": 13,"line": 1699,"col": 0,"fields": [9738,9739,9740]},{"file": 13,"line": 29,"col": 0},{"file": 13,"line": 45,"col": 0},{"file": 13,"line": 46,"col": 0},{"file": 13,"line": 2080,"col": 0,"fields": [9741]},{"file": 13,"line": 11,"col": 0},{"file": 13,"line": 1278,"col": 0},{"file": 13,"line": 2313,"col": 0,"fields": [9742]},{"file": 13,"line": 2287,"col": 0,"fields": [9743]},{"file": 13,"line": 1014,"col": 0,"fields": [9744,9745]},{"file": 13,"line": 0,"col": 0},{"file": 13,"line": 1552,"col": 0,"fields": [9746,9747]},{"file": 13,"line": 669,"col": 0,"fields": [9748,9749]},{"file": 13,"line": 1305,"col": 0},{"file": 13,"line": 1500,"col": 0,"fields": [9750,9751]},{"file": 13,"line": 2395,"col": 0,"fields": [9752,9753,9754]},{"file": 13,"line": 687,"col": 0,"fields": [9755,9756,9757,9758]},{"file": 13,"line": 1292,"col": 0},{"file": 13,"line": 1672,"col": 0,"fields": [9759,9760]},{"file": 13,"line": 17,"col": 0},{"file": 13,"line": 67,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 13,"line": 1897,"col": 0,"fields": [9761,9762,9763]},{"file": 13,"line": 12,"col": 0},{"file": 13,"line": 1582,"col": 0,"fields": [9764,9765,9766,9767]},{"file": 13,"line": 1215,"col": 0},{"file": 13,"line": 2337,"col": 0},{"file": 13,"line": 244,"col": 0},{"file": 70,"line": 122,"col": 8,"fields": [9768,9769]},{"file": 70,"line": 35,"col": 8,"docs": " Must deinitialize with deinit.\n","fields": [9770]},{"file": 70,"line": 135,"col": 8,"docs": " For passing to C functions.\n","fields": [9771]},{"file": 70,"line": 97,"col": 8,"fields": [9772]},{"file": 70,"line": 57,"col": 8,"fields": [9773,9774,9775],"varArgs": true},{"file": 70,"line": 20,"col": 8,"docs": " Must deinitialize with deinit.\n","fields": [9776,9777]},{"file": 70,"line": 78,"col": 8,"fields": [9778]},{"file": 70,"line": 129,"col": 8,"fields": [9779,9780]},{"file": 70,"line": 107,"col": 8,"fields": [9781,9782]},{"file": 70,"line": 42,"col": 8,"docs": " Buffer takes ownership of the passed in slice. The slice must have been\n allocated with `allocator`.\n Must deinitialize with deinit.\n","fields": [9783,9784]},{"file": 70,"line": 117,"col": 8,"fields": [9785,9786]},{"file": 70,"line": 88,"col": 8,"fields": [9787,9788]},{"file": 70,"line": 101,"col": 8,"fields": [9789,9790]},{"file": 70,"line": 30,"col": 8,"docs": " Must deinitialize with deinit.\n None of the other operations are valid until you do one of these:\n * ::replaceContents\n * ::resize\n","fields": [9791]},{"file": 70,"line": 70,"col": 8,"fields": [9792]},{"file": 70,"line": 82,"col": 8,"fields": [9793,9794]},{"file": 70,"line": 50,"col": 8,"docs": " The caller owns the returned memory. The Buffer becomes null and\n is safe to `deinit`.\n","fields": [9795]},{"file": 70,"line": 13,"col": 8,"docs": " Must deinitialize with deinit.\n","fields": [9796,9797]},{"file": 70,"line": 93,"col": 8,"fields": [9798]},{"file": 70,"line": 113,"col": 8,"fields": [9799,9800]},{"file": 70,"line": 74,"col": 8,"fields": [9801]},{"file": 14,"line": 577,"col": 4},{"file": 14,"line": 302,"col": 4},{"file": 14,"line": 386,"col": 4},{"file": 14,"line": 615,"col": 4},{"file": 14,"line": 603,"col": 4},{"file": 14,"line": 350,"col": 4},{"file": 14,"line": 508,"col": 4},{"file": 14,"line": 490,"col": 4},{"file": 14,"line": 148,"col": 4},{"file": 14,"line": 567,"col": 4},{"file": 14,"line": 121,"col": 4},{"file": 14,"line": 515,"col": 4},{"file": 14,"line": 609,"col": 4},{"file": 14,"line": 622,"col": 4},{"file": 14,"line": 449,"col": 4},{"file": 14,"line": 421,"col": 4},{"file": 14,"line": 141,"col": 4},{"file": 14,"line": 389,"col": 4},{"file": 14,"line": 643,"col": 4},{"file": 14,"line": 303,"col": 4},{"file": 14,"line": 430,"col": 4},{"file": 14,"line": 447,"col": 4},{"file": 14,"line": 406,"col": 4},{"file": 14,"line": 325,"col": 4},{"file": 14,"line": 330,"col": 4},{"file": 14,"line": 210,"col": 4},{"file": 14,"line": 437,"col": 4},{"file": 14,"line": 232,"col": 4},{"file": 14,"line": 223,"col": 4},{"file": 14,"line": 269,"col": 4},{"file": 14,"line": 285,"col": 4},{"file": 14,"line": 660,"col": 4},{"file": 14,"line": 418,"col": 4},{"file": 14,"line": 534,"col": 4},{"file": 14,"line": 399,"col": 4},{"file": 14,"line": 474,"col": 4},{"file": 14,"line": 25,"col": 4},{"file": 14,"line": 222,"col": 4},{"file": 14,"line": 341,"col": 4},{"file": 14,"line": 433,"col": 4},{"file": 14,"line": 362,"col": 4},{"file": 14,"line": 292,"col": 4},{"file": 14,"line": 371,"col": 4},{"file": 14,"line": 174,"col": 4},{"file": 14,"line": 74,"col": 4},{"file": 14,"line": 94,"col": 4},{"file": 14,"line": 197,"col": 4},{"file": 14,"line": 340,"col": 4},{"file": 14,"line": 191,"col": 4},{"file": 14,"line": 273,"col": 4},{"file": 14,"line": 344,"col": 4},{"file": 14,"line": 464,"col": 4},{"file": 14,"line": 7,"col": 4},{"file": 14,"line": 568,"col": 4},{"file": 14,"line": 161,"col": 4},{"file": 14,"line": 552,"col": 4},{"file": 14,"line": 471,"col": 4},{"file": 14,"line": 674,"col": 4},{"file": 14,"line": 650,"col": 4},{"file": 14,"line": 81,"col": 4},{"file": 14,"line": 34,"col": 4},{"file": 14,"line": 357,"col": 4},{"file": 14,"line": 611,"col": 4},{"file": 14,"line": 649,"col": 4},{"file": 14,"line": 145,"col": 4},{"file": 14,"line": 46,"col": 4},{"file": 14,"line": 102,"col": 4},{"file": 14,"line": 107,"col": 4},{"file": 14,"line": 237,"col": 4},{"file": 14,"line": 142,"col": 4},{"file": 14,"line": 467,"col": 4},{"file": 14,"line": 29,"col": 4},{"file": 14,"line": 270,"col": 4},{"file": 14,"line": 669,"col": 4},{"file": 14,"line": 54,"col": 4},{"file": 14,"line": 673,"col": 4},{"file": 14,"line": 663,"col": 4},{"file": 14,"line": 110,"col": 4},{"file": 14,"line": 335,"col": 4},{"file": 14,"line": 492,"col": 4},{"file": 14,"line": 566,"col": 4},{"file": 14,"line": 45,"col": 4},{"file": 14,"line": 641,"col": 4},{"file": 14,"line": 153,"col": 4},{"file": 14,"line": 597,"col": 4},{"file": 14,"line": 547,"col": 4},{"file": 14,"line": 192,"col": 4},{"file": 14,"line": 205,"col": 4},{"file": 14,"line": 163,"col": 4},{"file": 14,"line": 177,"col": 4},{"file": 14,"line": 272,"col": 4},{"file": 14,"line": 578,"col": 4},{"file": 14,"line": 27,"col": 4},{"file": 14,"line": 290,"col": 4},{"file": 14,"line": 247,"col": 4},{"file": 14,"line": 347,"col": 4},{"file": 14,"line": 653,"col": 4},{"file": 14,"line": 584,"col": 4},{"file": 14,"line": 0,"col": 4},{"file": 14,"line": 323,"col": 4},{"file": 14,"line": 127,"col": 4},{"file": 14,"line": 204,"col": 4},{"file": 14,"line": 137,"col": 4},{"file": 14,"line": 87,"col": 4},{"file": 14,"line": 40,"col": 4},{"file": 14,"line": 358,"col": 4},{"file": 14,"line": 644,"col": 4},{"file": 14,"line": 588,"col": 4},{"file": 14,"line": 284,"col": 4},{"file": 14,"line": 365,"col": 4},{"file": 14,"line": 257,"col": 4},{"file": 14,"line": 31,"col": 4},{"file": 14,"line": 634,"col": 4},{"file": 14,"line": 93,"col": 4},{"file": 14,"line": 67,"col": 4},{"file": 14,"line": 445,"col": 4},{"file": 14,"line": 309,"col": 4},{"file": 14,"line": 280,"col": 4},{"file": 14,"line": 657,"col": 4},{"file": 14,"line": 454,"col": 4},{"file": 14,"line": 47,"col": 4},{"file": 14,"line": 426,"col": 4},{"file": 14,"line": 367,"col": 4},{"file": 14,"line": 392,"col": 4},{"file": 14,"line": 318,"col": 4},{"file": 14,"line": 100,"col": 4},{"file": 14,"line": 409,"col": 4},{"file": 14,"line": 607,"col": 4},{"file": 14,"line": 28,"col": 4},{"file": 14,"line": 316,"col": 4},{"file": 14,"line": 639,"col": 4},{"file": 14,"line": 672,"col": 4},{"file": 14,"line": 575,"col": 4},{"file": 14,"line": 442,"col": 4},{"file": 14,"line": 374,"col": 4},{"file": 14,"line": 52,"col": 4},{"file": 14,"line": 203,"col": 4},{"file": 14,"line": 556,"col": 4},{"file": 14,"line": 451,"col": 4},{"file": 14,"line": 666,"col": 4},{"file": 14,"line": 679,"col": 4},{"file": 14,"line": 368,"col": 4},{"file": 14,"line": 423,"col": 4},{"file": 14,"line": 612,"col": 4},{"file": 14,"line": 369,"col": 4},{"file": 14,"line": 396,"col": 4},{"file": 14,"line": 626,"col": 4},{"file": 14,"line": 432,"col": 4},{"file": 14,"line": 119,"col": 4},{"file": 14,"line": 408,"col": 4},{"file": 14,"line": 506,"col": 4},{"file": 14,"line": 668,"col": 4},{"file": 14,"line": 15,"col": 4},{"file": 14,"line": 640,"col": 4},{"file": 14,"line": 439,"col": 4},{"file": 14,"line": 520,"col": 4},{"file": 14,"line": 416,"col": 4},{"file": 14,"line": 628,"col": 4},{"file": 14,"line": 542,"col": 4},{"file": 14,"line": 459,"col": 4},{"file": 14,"line": 480,"col": 4},{"file": 14,"line": 565,"col": 4},{"file": 14,"line": 420,"col": 4},{"file": 14,"line": 401,"col": 4},{"file": 14,"line": 261,"col": 4},{"file": 14,"line": 476,"col": 4},{"file": 14,"line": 561,"col": 4},{"file": 14,"line": 132,"col": 4},{"file": 14,"line": 496,"col": 4},{"file": 14,"line": 326,"col": 4},{"file": 14,"line": 256,"col": 4},{"file": 14,"line": 133,"col": 4},{"file": 14,"line": 554,"col": 4},{"file": 14,"line": 502,"col": 4},{"file": 14,"line": 678,"col": 4},{"file": 14,"line": 23,"col": 4},{"file": 14,"line": 114,"col": 4},{"file": 14,"line": 466,"col": 4},{"file": 14,"line": 328,"col": 4},{"file": 14,"line": 629,"col": 4},{"file": 14,"line": 260,"col": 4},{"file": 14,"line": 602,"col": 4},{"file": 14,"line": 373,"col": 4},{"file": 14,"line": 665,"col": 4},{"file": 14,"line": 18,"col": 4},{"file": 14,"line": 245,"col": 4},{"file": 14,"line": 199,"col": 4},{"file": 14,"line": 160,"col": 4},{"file": 14,"line": 241,"col": 4},{"file": 14,"line": 537,"col": 4},{"file": 14,"line": 631,"col": 4},{"file": 14,"line": 509,"col": 4},{"file": 14,"line": 543,"col": 4},{"file": 14,"line": 659,"col": 4},{"file": 14,"line": 317,"col": 4},{"file": 14,"line": 590,"col": 4},{"file": 14,"line": 258,"col": 4},{"file": 14,"line": 478,"col": 4},{"file": 14,"line": 10,"col": 4},{"file": 14,"line": 546,"col": 4},{"file": 14,"line": 627,"col": 4},{"file": 14,"line": 654,"col": 4},{"file": 14,"line": 283,"col": 4},{"file": 14,"line": 343,"col": 4},{"file": 14,"line": 293,"col": 4},{"file": 14,"line": 670,"col": 4},{"file": 14,"line": 187,"col": 4},{"file": 14,"line": 282,"col": 4},{"file": 14,"line": 630,"col": 4},{"file": 14,"line": 545,"col": 4},{"file": 14,"line": 572,"col": 4},{"file": 14,"line": 24,"col": 4},{"file": 14,"line": 324,"col": 4},{"file": 14,"line": 349,"col": 4},{"file": 14,"line": 164,"col": 4},{"file": 14,"line": 591,"col": 4},{"file": 14,"line": 186,"col": 4},{"file": 14,"line": 128,"col": 4},{"file": 14,"line": 348,"col": 4},{"file": 14,"line": 551,"col": 4},{"file": 14,"line": 486,"col": 4},{"file": 14,"line": 38,"col": 4},{"file": 14,"line": 254,"col": 4},{"file": 14,"line": 570,"col": 4},{"file": 14,"line": 22,"col": 4},{"file": 14,"line": 64,"col": 4},{"file": 14,"line": 26,"col": 4},{"file": 14,"line": 623,"col": 4},{"file": 14,"line": 255,"col": 4},{"file": 14,"line": 17,"col": 4},{"file": 14,"line": 315,"col": 4},{"file": 14,"line": 387,"col": 4},{"file": 14,"line": 404,"col": 4},{"file": 14,"line": 185,"col": 4},{"file": 14,"line": 193,"col": 4},{"file": 14,"line": 339,"col": 4},{"file": 14,"line": 182,"col": 4},{"file": 14,"line": 130,"col": 4},{"file": 14,"line": 208,"col": 4},{"file": 14,"line": 131,"col": 4},{"file": 14,"line": 44,"col": 4},{"file": 14,"line": 168,"col": 4},{"file": 14,"line": 294,"col": 4},{"file": 14,"line": 57,"col": 4},{"file": 14,"line": 652,"col": 4},{"file": 14,"line": 481,"col": 4},{"file": 14,"line": 539,"col": 4},{"file": 14,"line": 456,"col": 4},{"file": 14,"line": 9,"col": 4},{"file": 14,"line": 184,"col": 4},{"file": 14,"line": 216,"col": 4},{"file": 14,"line": 242,"col": 4},{"file": 14,"line": 189,"col": 4},{"file": 14,"line": 259,"col": 4},{"file": 14,"line": 390,"col": 4},{"file": 14,"line": 646,"col": 4},{"file": 14,"line": 11,"col": 4},{"file": 14,"line": 427,"col": 4},{"file": 14,"line": 448,"col": 4},{"file": 14,"line": 411,"col": 4},{"file": 14,"line": 213,"col": 4},{"file": 14,"line": 226,"col": 4},{"file": 14,"line": 444,"col": 4},{"file": 14,"line": 321,"col": 4},{"file": 14,"line": 165,"col": 4},{"file": 14,"line": 176,"col": 4},{"file": 14,"line": 126,"col": 4},{"file": 14,"line": 637,"col": 4},{"file": 14,"line": 56,"col": 4},{"file": 14,"line": 55,"col": 4},{"file": 14,"line": 417,"col": 4},{"file": 14,"line": 377,"col": 4},{"file": 14,"line": 393,"col": 4},{"file": 14,"line": 398,"col": 4},{"file": 14,"line": 473,"col": 4},{"file": 14,"line": 167,"col": 4},{"file": 14,"line": 434,"col": 4},{"file": 14,"line": 532,"col": 4},{"file": 14,"line": 58,"col": 4},{"file": 14,"line": 562,"col": 4},{"file": 14,"line": 233,"col": 4},{"file": 14,"line": 461,"col": 4},{"file": 14,"line": 458,"col": 4},{"file": 14,"line": 238,"col": 4},{"file": 14,"line": 470,"col": 4},{"file": 14,"line": 494,"col": 4},{"file": 14,"line": 149,"col": 4},{"file": 14,"line": 608,"col": 4},{"file": 14,"line": 383,"col": 4},{"file": 14,"line": 619,"col": 4},{"file": 14,"line": 239,"col": 4},{"file": 14,"line": 413,"col": 4},{"file": 14,"line": 379,"col": 4},{"file": 14,"line": 156,"col": 4},{"file": 14,"line": 266,"col": 4},{"file": 14,"line": 120,"col": 4},{"file": 14,"line": 14,"col": 4},{"file": 14,"line": 231,"col": 4},{"file": 14,"line": 173,"col": 4},{"file": 14,"line": 355,"col": 4},{"file": 14,"line": 381,"col": 4},{"file": 14,"line": 468,"col": 4},{"file": 14,"line": 60,"col": 4},{"file": 14,"line": 221,"col": 4},{"file": 14,"line": 219,"col": 4},{"file": 14,"line": 582,"col": 4},{"file": 14,"line": 667,"col": 4},{"file": 14,"line": 162,"col": 4},{"file": 14,"line": 195,"col": 4},{"file": 14,"line": 152,"col": 4},{"file": 14,"line": 312,"col": 4},{"file": 14,"line": 271,"col": 4},{"file": 14,"line": 118,"col": 4},{"file": 14,"line": 589,"col": 4},{"file": 14,"line": 76,"col": 4},{"file": 14,"line": 636,"col": 4},{"file": 14,"line": 354,"col": 4},{"file": 14,"line": 635,"col": 4},{"file": 14,"line": 345,"col": 4},{"file": 14,"line": 179,"col": 4},{"file": 14,"line": 499,"col": 4},{"file": 14,"line": 671,"col": 4},{"file": 14,"line": 267,"col": 4},{"file": 14,"line": 209,"col": 4},{"file": 14,"line": 281,"col": 4},{"file": 14,"line": 175,"col": 4},{"file": 14,"line": 655,"col": 4},{"file": 14,"line": 146,"col": 4},{"file": 14,"line": 587,"col": 4},{"file": 14,"line": 363,"col": 4},{"file": 14,"line": 633,"col": 4},{"file": 14,"line": 435,"col": 4},{"file": 14,"line": 201,"col": 4},{"file": 14,"line": 533,"col": 4},{"file": 14,"line": 352,"col": 4},{"file": 14,"line": 576,"col": 4},{"file": 14,"line": 606,"col": 4},{"file": 14,"line": 334,"col": 4},{"file": 14,"line": 656,"col": 4},{"file": 14,"line": 196,"col": 4},{"file": 14,"line": 526,"col": 4},{"file": 14,"line": 453,"col": 4},{"file": 14,"line": 559,"col": 4},{"file": 14,"line": 83,"col": 4},{"file": 14,"line": 425,"col": 4},{"file": 14,"line": 385,"col": 4},{"file": 14,"line": 39,"col": 4},{"file": 14,"line": 172,"col": 4},{"file": 14,"line": 382,"col": 4},{"file": 14,"line": 327,"col": 4},{"file": 14,"line": 410,"col": 4},{"file": 14,"line": 306,"col": 4},{"file": 14,"line": 5,"col": 4},{"file": 14,"line": 180,"col": 4},{"file": 14,"line": 2,"col": 4},{"file": 14,"line": 485,"col": 4},{"file": 14,"line": 159,"col": 4},{"file": 14,"line": 360,"col": 4},{"file": 14,"line": 441,"col": 4},{"file": 14,"line": 484,"col": 4},{"file": 14,"line": 530,"col": 4},{"file": 14,"line": 12,"col": 4},{"file": 14,"line": 124,"col": 4},{"file": 14,"line": 519,"col": 4},{"file": 14,"line": 450,"col": 4},{"file": 14,"line": 13,"col": 4},{"file": 14,"line": 664,"col": 4},{"file": 14,"line": 522,"col": 4},{"file": 14,"line": 662,"col": 4},{"file": 14,"line": 422,"col": 4},{"file": 14,"line": 4,"col": 4},{"file": 14,"line": 395,"col": 4},{"file": 14,"line": 41,"col": 4},{"file": 14,"line": 229,"col": 4},{"file": 14,"line": 429,"col": 4},{"file": 14,"line": 378,"col": 4},{"file": 14,"line": 405,"col": 4},{"file": 14,"line": 277,"col": 4},{"file": 14,"line": 438,"col": 4},{"file": 14,"line": 415,"col": 4},{"file": 14,"line": 540,"col": 4},{"file": 14,"line": 460,"col": 4},{"file": 14,"line": 129,"col": 4},{"file": 14,"line": 36,"col": 4},{"file": 14,"line": 337,"col": 4},{"file": 14,"line": 677,"col": 4},{"file": 14,"line": 604,"col": 4},{"file": 14,"line": 419,"col": 4},{"file": 14,"line": 400,"col": 4},{"file": 14,"line": 75,"col": 4},{"file": 14,"line": 475,"col": 4},{"file": 14,"line": 99,"col": 4},{"file": 14,"line": 136,"col": 4},{"file": 14,"line": 21,"col": 4},{"file": 14,"line": 16,"col": 4},{"file": 14,"line": 518,"col": 4},{"file": 14,"line": 3,"col": 4},{"file": 14,"line": 32,"col": 4},{"file": 14,"line": 359,"col": 4},{"file": 14,"line": 144,"col": 4},{"file": 14,"line": 483,"col": 4},{"file": 14,"line": 181,"col": 4},{"file": 14,"line": 109,"col": 4},{"file": 14,"line": 463,"col": 4},{"file": 14,"line": 53,"col": 4},{"file": 14,"line": 658,"col": 4},{"file": 14,"line": 147,"col": 4},{"file": 14,"line": 211,"col": 4},{"file": 14,"line": 171,"col": 4},{"file": 14,"line": 472,"col": 4},{"file": 14,"line": 202,"col": 4},{"file": 14,"line": 68,"col": 4},{"file": 14,"line": 274,"col": 4},{"file": 14,"line": 230,"col": 4},{"file": 14,"line": 170,"col": 4},{"file": 14,"line": 212,"col": 4},{"file": 14,"line": 366,"col": 4},{"file": 14,"line": 59,"col": 4},{"file": 14,"line": 527,"col": 4},{"file": 14,"line": 500,"col": 4},{"file": 14,"line": 512,"col": 4},{"file": 14,"line": 234,"col": 4},{"file": 14,"line": 113,"col": 4},{"file": 14,"line": 279,"col": 4},{"file": 14,"line": 625,"col": 4},{"file": 14,"line": 80,"col": 4},{"file": 14,"line": 301,"col": 4},{"file": 14,"line": 356,"col": 4},{"file": 14,"line": 477,"col": 4},{"file": 14,"line": 291,"col": 4},{"file": 14,"line": 297,"col": 4},{"file": 14,"line": 240,"col": 4},{"file": 14,"line": 155,"col": 4},{"file": 14,"line": 681,"col": 4},{"file": 14,"line": 265,"col": 4},{"file": 14,"line": 574,"col": 4},{"file": 14,"line": 580,"col": 4},{"file": 14,"line": 573,"col": 4},{"file": 14,"line": 376,"col": 4},{"file": 14,"line": 675,"col": 4},{"file": 14,"line": 346,"col": 4},{"file": 14,"line": 43,"col": 4},{"file": 14,"line": 103,"col": 4},{"file": 14,"line": 598,"col": 4},{"file": 14,"line": 594,"col": 4},{"file": 14,"line": 298,"col": 4},{"file": 14,"line": 529,"col": 4},{"file": 14,"line": 388,"col": 4},{"file": 14,"line": 403,"col": 4},{"file": 14,"line": 252,"col": 4},{"file": 14,"line": 115,"col": 4},{"file": 14,"line": 370,"col": 4},{"file": 14,"line": 104,"col": 4},{"file": 14,"line": 351,"col": 4},{"file": 14,"line": 583,"col": 4},{"file": 14,"line": 65,"col": 4},{"file": 14,"line": 446,"col": 4},{"file": 14,"line": 217,"col": 4},{"file": 14,"line": 596,"col": 4},{"file": 14,"line": 63,"col": 4},{"file": 14,"line": 183,"col": 4},{"file": 14,"line": 380,"col": 4},{"file": 14,"line": 541,"col": 4},{"file": 14,"line": 125,"col": 4},{"file": 14,"line": 228,"col": 4},{"file": 14,"line": 79,"col": 4},{"file": 14,"line": 455,"col": 4},{"file": 14,"line": 647,"col": 4},{"file": 14,"line": 535,"col": 4},{"file": 14,"line": 214,"col": 4},{"file": 14,"line": 487,"col": 4},{"file": 14,"line": 391,"col": 4},{"file": 14,"line": 676,"col": 4},{"file": 14,"line": 428,"col": 4},{"file": 14,"line": 35,"col": 4},{"file": 14,"line": 412,"col": 4},{"file": 14,"line": 248,"col": 4},{"file": 14,"line": 443,"col": 4},{"file": 14,"line": 150,"col": 4},{"file": 14,"line": 268,"col": 4},{"file": 14,"line": 595,"col": 4},{"file": 14,"line": 224,"col": 4},{"file": 14,"line": 452,"col": 4},{"file": 14,"line": 593,"col": 4},{"file": 14,"line": 106,"col": 4},{"file": 14,"line": 375,"col": 4},{"file": 14,"line": 158,"col": 4},{"file": 14,"line": 424,"col": 4},{"file": 14,"line": 586,"col": 4},{"file": 14,"line": 521,"col": 4},{"file": 14,"line": 394,"col": 4},{"file": 14,"line": 397,"col": 4},{"file": 14,"line": 19,"col": 4},{"file": 14,"line": 555,"col": 4},{"file": 14,"line": 585,"col": 4},{"file": 14,"line": 314,"col": 4},{"file": 14,"line": 431,"col": 4},{"file": 14,"line": 154,"col": 4},{"file": 14,"line": 407,"col": 4},{"file": 14,"line": 319,"col": 4},{"file": 14,"line": 227,"col": 4},{"file": 14,"line": 37,"col": 4},{"file": 14,"line": 493,"col": 4},{"file": 14,"line": 495,"col": 4},{"file": 14,"line": 440,"col": 4},{"file": 14,"line": 462,"col": 4},{"file": 14,"line": 482,"col": 4},{"file": 14,"line": 479,"col": 4},{"file": 14,"line": 457,"col": 4},{"file": 14,"line": 200,"col": 4},{"file": 14,"line": 42,"col": 4},{"file": 14,"line": 169,"col": 4},{"file": 14,"line": 372,"col": 4},{"file": 14,"line": 503,"col": 4},{"file": 14,"line": 651,"col": 4},{"file": 14,"line": 402,"col": 4},{"file": 14,"line": 469,"col": 4},{"file": 14,"line": 642,"col": 4},{"file": 14,"line": 648,"col": 4},{"file": 14,"line": 288,"col": 4},{"file": 14,"line": 253,"col": 4},{"file": 14,"line": 618,"col": 4},{"file": 14,"line": 82,"col": 4},{"file": 14,"line": 414,"col": 4},{"file": 14,"line": 300,"col": 4},{"file": 14,"line": 48,"col": 4},{"file": 14,"line": 531,"col": 4},{"file": 14,"line": 1,"col": 4},{"file": 14,"line": 215,"col": 4},{"file": 14,"line": 151,"col": 4},{"file": 14,"line": 299,"col": 4},{"file": 14,"line": 30,"col": 4},{"file": 14,"line": 264,"col": 4},{"file": 14,"line": 465,"col": 4},{"file": 14,"line": 550,"col": 4},{"file": 14,"line": 661,"col": 4},{"file": 14,"line": 289,"col": 4},{"file": 14,"line": 632,"col": 4},{"file": 14,"line": 353,"col": 4},{"file": 14,"line": 599,"col": 4},{"file": 14,"line": 33,"col": 4},{"file": 14,"line": 8,"col": 4},{"file": 14,"line": 579,"col": 4},{"file": 14,"line": 218,"col": 4},{"file": 14,"line": 384,"col": 4},{"file": 14,"line": 71,"col": 4},{"file": 14,"line": 276,"col": 4},{"file": 14,"line": 111,"col": 4},{"file": 14,"line": 491,"col": 4},{"file": 14,"line": 364,"col": 4},{"file": 14,"line": 361,"col": 4},{"file": 14,"line": 524,"col": 4},{"file": 14,"line": 194,"col": 4},{"file": 14,"line": 188,"col": 4},{"file": 14,"line": 112,"col": 4},{"file": 14,"line": 680,"col": 4},{"file": 14,"line": 178,"col": 4},{"file": 14,"line": 157,"col": 4},{"file": 14,"line": 20,"col": 4},{"file": 14,"line": 117,"col": 4},{"file": 14,"line": 571,"col": 4},{"file": 14,"line": 592,"col": 4},{"file": 14,"line": 190,"col": 4},{"file": 14,"line": 544,"col": 4},{"file": 14,"line": 605,"col": 4},{"file": 14,"line": 313,"col": 4},{"file": 14,"line": 166,"col": 4},{"file": 14,"line": 275,"col": 4},{"file": 14,"line": 278,"col": 4},{"file": 14,"line": 51,"col": 4},{"file": 14,"line": 225,"col": 4},{"file": 14,"line": 6,"col": 4},{"file": 14,"line": 436,"col": 4},{"file": 14,"line": 122,"col": 4},{"file": 14,"line": 620,"col": 4},{"file": 14,"line": 198,"col": 4},{"file": 14,"line": 116,"col": 4},{"file": 14,"line": 220,"col": 4},{"file": 14,"line": 251,"col": 4},{"file": 14,"line": 123,"col": 4},{"file": 14,"line": 553,"col": 4},{"file": 14,"line": 569,"col": 4},{"file": 15,"line": 129,"col": 4,"docs": " This function is intended to be used only in tests. When the two slices are not\n equal, prints diagnostics to stderr to show exactly how they are not equal,\n then aborts.\n","fields": [9802,9803,9804]},{"file": 15,"line": 0,"col": 0},{"file": 15,"line": 2,"col": 0},{"file": 15,"line": 1,"col": 0},{"file": 10,"line": 690,"col": 8},{"file": 10,"line": 693,"col": 8,"fields": [9805]},{"file": 10,"line": 691,"col": 8},{"file": 10,"line": 700,"col": 4,"fields": [9806,9807]},{"file": 16,"line": 3,"col": 4},{"file": 16,"line": 0,"col": 4},{"file": 16,"line": 6,"col": 4},{"file": 16,"line": 7,"col": 4},{"file": 16,"line": 2,"col": 4},{"file": 16,"line": 5,"col": 4},{"file": 16,"line": 4,"col": 4},{"file": 16,"line": 1,"col": 4},{"file": 16,"line": 9,"col": 4},{"file": 16,"line": 8,"col": 4},{"file": 17,"line": 210,"col": 4},{"file": 17,"line": 175,"col": 4,"docs": " Utf8View iterates the code points of a utf-8 encoded string.\n\n ```\n var utf8 = (try std.unicode.Utf8View.init(\"hi there\")).iterator();\n while (utf8.nextCodepointSlice()) |codepoint| {\n   std.debug.warn(\"got codepoint {}\\n\", codepoint);\n }\n ```\n"},{"file": 17,"line": 237,"col": 4},{"file": 17,"line": 1,"col": 0},{"file": 17,"line": 395,"col": 0,"fields": []},{"file": 17,"line": 440,"col": 0,"fields": []},{"file": 17,"line": 299,"col": 0,"fields": []},{"file": 17,"line": 459,"col": 0,"fields": [9808]},{"file": 17,"line": 451,"col": 0,"fields": [9809,9810]},{"file": 17,"line": 0,"col": 0},{"file": 17,"line": 78,"col": 0},{"file": 17,"line": 315,"col": 0,"fields": []},{"file": 17,"line": 345,"col": 0,"fields": []},{"file": 17,"line": 376,"col": 0,"fields": []},{"file": 17,"line": 3,"col": 0},{"file": 17,"line": 62,"col": 0},{"file": 17,"line": 120,"col": 0},{"file": 17,"line": 273,"col": 0,"fields": []},{"file": 17,"line": 307,"col": 0,"fields": [9811,9812,9813]},{"file": 17,"line": 365,"col": 0,"fields": []},{"file": 17,"line": 96,"col": 0},{"file": 17,"line": 455,"col": 0,"fields": [9814,9815]},{"file": 17,"line": 2,"col": 0},{"file": 17,"line": 427,"col": 0,"fields": []},{"file": 17,"line": 4,"col": 0},{"file": 17,"line": 335,"col": 0,"fields": []},{"file": 18,"line": 979,"col": 4},{"file": 18,"line": 2672,"col": 4},{"file": 18,"line": 1420,"col": 4},{"file": 18,"line": 2545,"col": 4},{"file": 18,"line": 2369,"col": 4},{"file": 18,"line": 2576,"col": 4},{"file": 18,"line": 2653,"col": 4},{"file": 18,"line": 20,"col": 4},{"file": 18,"line": 2583,"col": 4},{"file": 18,"line": 2759,"col": 4},{"file": 18,"line": 985,"col": 4},{"file": 18,"line": 2623,"col": 4},{"file": 18,"line": 2696,"col": 4},{"file": 18,"line": 973,"col": 4},{"file": 18,"line": 2753,"col": 4},{"file": 18,"line": 18,"col": 4},{"file": 18,"line": 1,"col": 0},{"file": 18,"line": 14,"col": 0},{"file": 18,"line": 15,"col": 0},{"file": 18,"line": 1401,"col": 0},{"file": 18,"line": 0,"col": 0},{"file": 18,"line": 13,"col": 0},{"file": 18,"line": 5,"col": 0},{"file": 18,"line": 3,"col": 0},{"file": 18,"line": 1406,"col": 0},{"file": 18,"line": 16,"col": 0},{"file": 18,"line": 2730,"col": 0,"fields": [9816,9817,9818,9819]},{"file": 18,"line": 2483,"col": 0},{"file": 18,"line": 2,"col": 0},{"file": 18,"line": 8,"col": 0},{"file": 18,"line": 9,"col": 0},{"file": 18,"line": 11,"col": 0},{"file": 18,"line": 6,"col": 0},{"file": 18,"line": 1411,"col": 0,"fields": [9820]},{"file": 18,"line": 12,"col": 0},{"file": 18,"line": 7,"col": 0},{"file": 18,"line": 10,"col": 0},{"file": 18,"line": 4,"col": 0},{"file": 19,"line": 4,"col": 4},{"file": 20,"line": 261,"col": 4},{"file": 20,"line": 786,"col": 4},{"file": 20,"line": 183,"col": 4},{"file": 20,"line": 122,"col": 4},{"file": 20,"line": 196,"col": 4},{"file": 20,"line": 156,"col": 4},{"file": 20,"line": 15,"col": 4},{"file": 20,"line": 228,"col": 4},{"file": 20,"line": 558,"col": 4},{"file": 20,"line": 269,"col": 4},{"file": 20,"line": 170,"col": 4},{"file": 20,"line": 175,"col": 4},{"file": 20,"line": 103,"col": 4},{"file": 20,"line": 258,"col": 4},{"file": 20,"line": 29,"col": 4},{"file": 20,"line": 574,"col": 4},{"file": 20,"line": 204,"col": 4},{"file": 20,"line": 633,"col": 4},{"file": 20,"line": 24,"col": 4},{"file": 20,"line": 51,"col": 4},{"file": 20,"line": 302,"col": 4},{"file": 20,"line": 109,"col": 4},{"file": 20,"line": 825,"col": 4},{"file": 20,"line": 106,"col": 4},{"file": 20,"line": 97,"col": 4},{"file": 20,"line": 61,"col": 4},{"file": 20,"line": 572,"col": 4},{"file": 20,"line": 621,"col": 4},{"file": 20,"line": 874,"col": 4},{"file": 20,"line": 295,"col": 4},{"file": 20,"line": 292,"col": 4},{"file": 20,"line": 255,"col": 4},{"file": 20,"line": 160,"col": 4},{"file": 20,"line": 686,"col": 4},{"file": 20,"line": 565,"col": 4},{"file": 20,"line": 321,"col": 4,"docs": " A core file.\n"},{"file": 20,"line": 200,"col": 4},{"file": 20,"line": 652,"col": 4},{"file": 20,"line": 118,"col": 4},{"file": 20,"line": 165,"col": 4},{"file": 20,"line": 241,"col": 4},{"file": 20,"line": 137,"col": 4},{"file": 20,"line": 202,"col": 4},{"file": 20,"line": 78,"col": 4},{"file": 20,"line": 79,"col": 4},{"file": 20,"line": 92,"col": 4},{"file": 20,"line": 746,"col": 4},{"file": 20,"line": 570,"col": 4},{"file": 20,"line": 119,"col": 4},{"file": 20,"line": 260,"col": 4},{"file": 20,"line": 849,"col": 4},{"file": 20,"line": 154,"col": 4},{"file": 20,"line": 40,"col": 4},{"file": 20,"line": 234,"col": 4},{"file": 20,"line": 54,"col": 4},{"file": 20,"line": 159,"col": 4},{"file": 20,"line": 276,"col": 4},{"file": 20,"line": 43,"col": 4},{"file": 20,"line": 356,"col": 4},{"file": 20,"line": 64,"col": 4},{"file": 20,"line": 53,"col": 4},{"file": 20,"line": 214,"col": 4},{"file": 20,"line": 115,"col": 4},{"file": 20,"line": 203,"col": 4},{"file": 20,"line": 248,"col": 4},{"file": 20,"line": 343,"col": 4},{"file": 20,"line": 240,"col": 4},{"file": 20,"line": 90,"col": 4},{"file": 20,"line": 257,"col": 4},{"file": 20,"line": 576,"col": 4},{"file": 20,"line": 330,"col": 4},{"file": 20,"line": 194,"col": 4},{"file": 20,"line": 713,"col": 4},{"file": 20,"line": 123,"col": 4},{"file": 20,"line": 263,"col": 4},{"file": 20,"line": 10,"col": 4},{"file": 20,"line": 293,"col": 4},{"file": 20,"line": 831,"col": 4},{"file": 20,"line": 305,"col": 4},{"file": 20,"line": 290,"col": 4},{"file": 20,"line": 638,"col": 4},{"file": 20,"line": 742,"col": 4},{"file": 20,"line": 287,"col": 4},{"file": 20,"line": 124,"col": 4},{"file": 20,"line": 167,"col": 4},{"file": 20,"line": 16,"col": 4},{"file": 20,"line": 879,"col": 4},{"file": 20,"line": 144,"col": 4},{"file": 20,"line": 27,"col": 4},{"file": 20,"line": 32,"col": 4},{"file": 20,"line": 73,"col": 4},{"file": 20,"line": 36,"col": 4},{"file": 20,"line": 121,"col": 4},{"file": 20,"line": 215,"col": 4},{"file": 20,"line": 80,"col": 4},{"file": 20,"line": 114,"col": 4},{"file": 20,"line": 131,"col": 4},{"file": 20,"line": 774,"col": 4},{"file": 20,"line": 56,"col": 4},{"file": 20,"line": 796,"col": 4},{"file": 20,"line": 62,"col": 4},{"file": 20,"line": 267,"col": 4},{"file": 20,"line": 889,"col": 4},{"file": 20,"line": 753,"col": 4},{"file": 20,"line": 20,"col": 4},{"file": 20,"line": 315,"col": 4,"docs": " An executable file.\n"},{"file": 20,"line": 231,"col": 4},{"file": 20,"line": 283,"col": 4},{"file": 20,"line": 101,"col": 4},{"file": 20,"line": 850,"col": 4},{"file": 20,"line": 39,"col": 4},{"file": 20,"line": 30,"col": 4},{"file": 20,"line": 286,"col": 4},{"file": 20,"line": 84,"col": 4},{"file": 20,"line": 309,"col": 4,"docs": " An unknown type.\n"},{"file": 20,"line": 116,"col": 4},{"file": 20,"line": 894,"col": 4},{"file": 20,"line": 738,"col": 4},{"file": 20,"line": 89,"col": 4},{"file": 20,"line": 46,"col": 4},{"file": 20,"line": 98,"col": 4},{"file": 20,"line": 31,"col": 4},{"file": 20,"line": 266,"col": 4},{"file": 20,"line": 49,"col": 4},{"file": 20,"line": 323,"col": 4},{"file": 20,"line": 59,"col": 4},{"file": 20,"line": 810,"col": 4},{"file": 20,"line": 303,"col": 4},{"file": 20,"line": 83,"col": 4},{"file": 20,"line": 128,"col": 4},{"file": 20,"line": 153,"col": 4},{"file": 20,"line": 220,"col": 4},{"file": 20,"line": 312,"col": 4,"docs": " A relocatable file.\n"},{"file": 20,"line": 249,"col": 4},{"file": 20,"line": 75,"col": 4},{"file": 20,"line": 129,"col": 4},{"file": 20,"line": 192,"col": 4},{"file": 20,"line": 213,"col": 4},{"file": 20,"line": 152,"col": 4},{"file": 20,"line": 791,"col": 4},{"file": 20,"line": 91,"col": 4},{"file": 20,"line": 19,"col": 4},{"file": 20,"line": 185,"col": 4},{"file": 20,"line": 55,"col": 4},{"file": 20,"line": 291,"col": 4},{"file": 20,"line": 95,"col": 4},{"file": 20,"line": 306,"col": 4},{"file": 20,"line": 99,"col": 4},{"file": 20,"line": 186,"col": 4},{"file": 20,"line": 35,"col": 4},{"file": 20,"line": 148,"col": 4},{"file": 20,"line": 681,"col": 4},{"file": 20,"line": 28,"col": 4},{"file": 20,"line": 77,"col": 4},{"file": 20,"line": 568,"col": 4},{"file": 20,"line": 111,"col": 4},{"file": 20,"line": 780,"col": 4},{"file": 20,"line": 107,"col": 4},{"file": 20,"line": 230,"col": 4},{"file": 20,"line": 173,"col": 4},{"file": 20,"line": 210,"col": 4},{"file": 20,"line": 182,"col": 4},{"file": 20,"line": 561,"col": 4},{"file": 20,"line": 140,"col": 4},{"file": 20,"line": 299,"col": 4},{"file": 20,"line": 239,"col": 4},{"file": 20,"line": 706,"col": 4},{"file": 20,"line": 71,"col": 4},{"file": 20,"line": 559,"col": 4},{"file": 20,"line": 729,"col": 4},{"file": 20,"line": 48,"col": 4},{"file": 20,"line": 575,"col": 4},{"file": 20,"line": 567,"col": 4},{"file": 20,"line": 33,"col": 4},{"file": 20,"line": 158,"col": 4},{"file": 20,"line": 281,"col": 4},{"file": 20,"line": 102,"col": 4},{"file": 20,"line": 270,"col": 4},{"file": 20,"line": 660,"col": 4},{"file": 20,"line": 155,"col": 4},{"file": 20,"line": 82,"col": 4},{"file": 20,"line": 593,"col": 4},{"file": 20,"line": 74,"col": 4},{"file": 20,"line": 184,"col": 4},{"file": 20,"line": 216,"col": 4},{"file": 20,"line": 222,"col": 4},{"file": 20,"line": 227,"col": 4},{"file": 20,"line": 113,"col": 4},{"file": 20,"line": 560,"col": 4},{"file": 20,"line": 68,"col": 4},{"file": 20,"line": 256,"col": 4},{"file": 20,"line": 226,"col": 4},{"file": 20,"line": 566,"col": 4},{"file": 20,"line": 262,"col": 4},{"file": 20,"line": 272,"col": 4},{"file": 20,"line": 162,"col": 4},{"file": 20,"line": 104,"col": 4},{"file": 20,"line": 217,"col": 4},{"file": 20,"line": 243,"col": 4},{"file": 20,"line": 271,"col": 4},{"file": 20,"line": 135,"col": 4},{"file": 20,"line": 63,"col": 4},{"file": 20,"line": 179,"col": 4},{"file": 20,"line": 835,"col": 4},{"file": 20,"line": 264,"col": 4},{"file": 20,"line": 85,"col": 4},{"file": 20,"line": 23,"col": 4},{"file": 20,"line": 275,"col": 4},{"file": 20,"line": 232,"col": 4},{"file": 20,"line": 869,"col": 4},{"file": 20,"line": 134,"col": 4},{"file": 20,"line": 69,"col": 4},{"file": 20,"line": 206,"col": 4},{"file": 20,"line": 191,"col": 4},{"file": 20,"line": 161,"col": 4},{"file": 20,"line": 87,"col": 4},{"file": 20,"line": 168,"col": 4},{"file": 20,"line": 12,"col": 4},{"file": 20,"line": 229,"col": 4},{"file": 20,"line": 676,"col": 4},{"file": 20,"line": 150,"col": 4},{"file": 20,"line": 26,"col": 4},{"file": 20,"line": 141,"col": 4},{"file": 20,"line": 254,"col": 4},{"file": 20,"line": 564,"col": 4},{"file": 20,"line": 45,"col": 4},{"file": 20,"line": 22,"col": 4},{"file": 20,"line": 279,"col": 4},{"file": 20,"line": 884,"col": 4},{"file": 20,"line": 21,"col": 4},{"file": 20,"line": 237,"col": 4},{"file": 20,"line": 93,"col": 4},{"file": 20,"line": 198,"col": 4},{"file": 20,"line": 37,"col": 4},{"file": 20,"line": 42,"col": 4},{"file": 20,"line": 60,"col": 4},{"file": 20,"line": 58,"col": 4},{"file": 20,"line": 251,"col": 4},{"file": 20,"line": 189,"col": 4},{"file": 20,"line": 70,"col": 4},{"file": 20,"line": 126,"col": 4},{"file": 20,"line": 132,"col": 4},{"file": 20,"line": 100,"col": 4},{"file": 20,"line": 644,"col": 4},{"file": 20,"line": 197,"col": 4},{"file": 20,"line": 235,"col": 4},{"file": 20,"line": 142,"col": 4},{"file": 20,"line": 86,"col": 4},{"file": 20,"line": 117,"col": 4},{"file": 20,"line": 563,"col": 4},{"file": 20,"line": 47,"col": 4},{"file": 20,"line": 41,"col": 4},{"file": 20,"line": 282,"col": 4},{"file": 20,"line": 25,"col": 4},{"file": 20,"line": 318,"col": 4,"docs": " A shared object.\n"},{"file": 20,"line": 96,"col": 4},{"file": 20,"line": 265,"col": 4},{"file": 20,"line": 672,"col": 4},{"file": 20,"line": 236,"col": 4},{"file": 20,"line": 13,"col": 4},{"file": 20,"line": 245,"col": 4},{"file": 20,"line": 224,"col": 4},{"file": 20,"line": 767,"col": 4},{"file": 20,"line": 76,"col": 4},{"file": 20,"line": 253,"col": 4},{"file": 20,"line": 300,"col": 4},{"file": 20,"line": 38,"col": 4},{"file": 20,"line": 145,"col": 4},{"file": 20,"line": 50,"col": 4},{"file": 20,"line": 842,"col": 4},{"file": 20,"line": 284,"col": 4},{"file": 20,"line": 120,"col": 4},{"file": 20,"line": 720,"col": 4},{"file": 20,"line": 209,"col": 4},{"file": 20,"line": 225,"col": 4},{"file": 20,"line": 259,"col": 4},{"file": 20,"line": 285,"col": 4},{"file": 20,"line": 820,"col": 4},{"file": 20,"line": 18,"col": 4},{"file": 20,"line": 219,"col": 4},{"file": 20,"line": 696,"col": 4},{"file": 20,"line": 899,"col": 4},{"file": 20,"line": 188,"col": 4},{"file": 20,"line": 11,"col": 4},{"file": 20,"line": 250,"col": 4},{"file": 20,"line": 273,"col": 4},{"file": 20,"line": 274,"col": 4},{"file": 20,"line": 187,"col": 4},{"file": 20,"line": 108,"col": 4},{"file": 20,"line": 668,"col": 4},{"file": 20,"line": 190,"col": 4},{"file": 20,"line": 57,"col": 4},{"file": 20,"line": 65,"col": 4},{"file": 20,"line": 81,"col": 4},{"file": 20,"line": 88,"col": 4},{"file": 20,"line": 803,"col": 4},{"file": 20,"line": 571,"col": 4},{"file": 20,"line": 760,"col": 4},{"file": 20,"line": 147,"col": 4},{"file": 20,"line": 157,"col": 4},{"file": 20,"line": 112,"col": 4},{"file": 20,"line": 242,"col": 4},{"file": 20,"line": 164,"col": 4},{"file": 20,"line": 151,"col": 4},{"file": 20,"line": 864,"col": 4},{"file": 20,"line": 573,"col": 4},{"file": 20,"line": 562,"col": 4},{"file": 20,"line": 233,"col": 4},{"file": 20,"line": 34,"col": 4},{"file": 20,"line": 149,"col": 4},{"file": 20,"line": 17,"col": 4},{"file": 20,"line": 207,"col": 4},{"file": 20,"line": 163,"col": 4},{"file": 20,"line": 277,"col": 4},{"file": 20,"line": 252,"col": 4},{"file": 20,"line": 289,"col": 4},{"file": 20,"line": 664,"col": 4},{"file": 20,"line": 288,"col": 4},{"file": 20,"line": 44,"col": 4},{"file": 20,"line": 211,"col": 4},{"file": 20,"line": 67,"col": 4},{"file": 20,"line": 171,"col": 4},{"file": 20,"line": 247,"col": 4},{"file": 20,"line": 138,"col": 4},{"file": 20,"line": 246,"col": 4},{"file": 20,"line": 14,"col": 4},{"file": 20,"line": 569,"col": 4},{"file": 20,"line": 181,"col": 4},{"file": 20,"line": 577,"col": 4},{"file": 20,"line": 238,"col": 4},{"file": 20,"line": 297,"col": 4},{"file": 20,"line": 72,"col": 4},{"file": 20,"line": 66,"col": 4},{"file": 20,"line": 177,"col": 4},{"file": 20,"line": 609,"col": 4},{"file": 20,"line": 2,"col": 0},{"file": 20,"line": 4,"col": 0},{"file": 20,"line": 6,"col": 0},{"file": 20,"line": 1,"col": 0},{"file": 20,"line": 8,"col": 0},{"file": 20,"line": 0,"col": 0},{"file": 20,"line": 7,"col": 0},{"file": 20,"line": 3,"col": 0},{"file": 20,"line": 5,"col": 0},{"file": 21,"line": 161,"col": 4,"fields": [9821]},{"file": 21,"line": 260,"col": 4,"docs": " Finds `substr` in `container`, starting at `start_index`.\n TODO boyer-moore algorithm\n","fields": [9822,9823,9824]},{"file": 21,"line": 244,"col": 4,"fields": [9825,9826]},{"file": 21,"line": 177,"col": 4,"fields": [9827]},{"file": 21,"line": 169,"col": 4,"fields": [9828]},{"file": 21,"line": 189,"col": 4,"fields": [9829]},{"file": 21,"line": 197,"col": 4,"fields": [9830]},{"file": 21,"line": 209,"col": 4,"fields": [9831]},{"file": 21,"line": 181,"col": 4,"fields": [9832]},{"file": 21,"line": 165,"col": 4,"fields": [9833]},{"file": 21,"line": 185,"col": 4,"fields": [9834]},{"file": 21,"line": 153,"col": 4,"fields": [9835]},{"file": 21,"line": 272,"col": 4,"docs": " Finds `substr` in `container`, starting at `start_index`.\n","fields": [9836,9837]},{"file": 21,"line": 229,"col": 4,"fields": [9838,9839]},{"file": 21,"line": 193,"col": 4,"fields": [9840]},{"file": 21,"line": 148,"col": 4,"fields": [9841]},{"file": 21,"line": 173,"col": 4,"fields": [9842]},{"file": 21,"line": 201,"col": 4,"fields": [9843]},{"file": 21,"line": 157,"col": 4,"fields": [9844]},{"file": 21,"line": 9,"col": 0},{"file": 21,"line": 144,"col": 0,"fields": [9845,9846]},{"file": 21,"line": 26,"col": 0},{"file": 21,"line": 11,"col": 0},{"file": 71,"line": 97,"col": 8,"fields": [9847,9848]},{"file": 71,"line": 156,"col": 8},{"file": 71,"line": 62,"col": 8},{"file": 71,"line": 104,"col": 8,"docs": " On success must call `kill` or `wait`.\n","fields": [9849]},{"file": 71,"line": 118,"col": 8,"docs": " Forcibly terminates child process and then cleans up all resources.\n","fields": [9850]},{"file": 71,"line": 112,"col": 8,"fields": [9851]},{"file": 71,"line": 137,"col": 8,"fields": [9852]},{"file": 71,"line": 164,"col": 8,"docs": " Spawns a child process, waits for it, collecting stdout and stderr, and then returns.\n If it succeeds, the caller owns result.stdout and result.stderr memory.\n","fields": [9853,9854,9855,9856,9857]},{"file": 71,"line": 52,"col": 8},{"file": 71,"line": 148,"col": 8,"docs": " Blocks until child process terminates and then cleans up all resources.\n","fields": [9858]},{"file": 71,"line": 214,"col": 8,"fields": [9859]},{"file": 71,"line": 126,"col": 8,"fields": [9860,9861]},{"file": 71,"line": 71,"col": 8,"docs": " First argument in argv is the executable.\n On success must call deinit.\n","fields": [9862,9863]},{"file": 71,"line": 55,"col": 8},{"file": 71,"line": 236,"col": 4,"fields": [9864]},{"file": 71,"line": 283,"col": 4,"fields": [9865]},{"file": 71,"line": 204,"col": 4,"fields": [9866]},{"file": 71,"line": 242,"col": 4,"fields": [9867,9868]},{"file": 71,"line": 246,"col": 4,"fields": [9869]},{"file": 71,"line": 294,"col": 4,"fields": [9870]},{"file": 71,"line": 218,"col": 4,"fields": [9871]},{"file": 71,"line": 261,"col": 4,"fields": [9872,9873]},{"file": 71,"line": 405,"col": 4,"fields": [9874]},{"file": 71,"line": 606,"col": 4,"fields": [9875,9876,9877,9878]},{"file": 71,"line": 194,"col": 4,"fields": [9879]},{"file": 22,"line": 546,"col": 4,"fields": [9880]},{"file": 22,"line": 554,"col": 4,"fields": [9881,9882]},{"file": 22,"line": 10,"col": 0},{"file": 22,"line": 8,"col": 0},{"file": 22,"line": 4,"col": 0},{"file": 22,"line": 0,"col": 0},{"file": 22,"line": 1,"col": 0},{"file": 22,"line": 6,"col": 0},{"file": 22,"line": 3,"col": 0},{"file": 22,"line": 13,"col": 0},{"file": 22,"line": 9,"col": 0},{"file": 22,"line": 12,"col": 0},{"file": 22,"line": 7,"col": 0},{"file": 22,"line": 2,"col": 0},{"file": 22,"line": 5,"col": 0},{"file": 23,"line": 10,"col": 4},{"file": 23,"line": 1574,"col": 4,"fields": [9883]},{"file": 23,"line": 569,"col": 4,"fields": [9884,9885,9886,9887,9888]},{"file": 23,"line": 694,"col": 4,"fields": [9889,9890,9891,9892,9893]},{"file": 23,"line": 1548,"col": 4,"fields": [9894]},{"file": 23,"line": 1064,"col": 4},{"file": 23,"line": 839,"col": 4,"fields": [9895,9896,9897,9898,9899,9900]},{"file": 23,"line": 1116,"col": 4,"fields": [9901,9902,9903],"varArgs": true},{"file": 23,"line": 994,"col": 4,"fields": [9904,9905,9906]},{"file": 23,"line": 18,"col": 4},{"file": 23,"line": 1104,"col": 4},{"file": 23,"line": 977,"col": 4,"fields": [9907,9908,9909,9910,9911]},{"file": 23,"line": 1114,"col": 4},{"file": 23,"line": 1581,"col": 4,"fields": [9912,9913]},{"file": 23,"line": 579,"col": 4,"fields": [9914,9915,9916,9917,9918]},{"file": 23,"line": 1024,"col": 4,"fields": [9919,9920,9921]},{"file": 23,"line": 12,"col": 4},{"file": 23,"line": 5,"col": 0},{"file": 23,"line": 6,"col": 0},{"file": 23,"line": 1091,"col": 0},{"file": 23,"line": 1125,"col": 0,"fields": [9922,9923]},{"file": 23,"line": 1,"col": 0},{"file": 23,"line": 7,"col": 0},{"file": 23,"line": 25,"col": 0,"fields": [9924,9925,9926]},{"file": 23,"line": 985,"col": 0},{"file": 23,"line": 2,"col": 0},{"file": 23,"line": 4,"col": 0},{"file": 23,"line": 36,"col": 0,"fields": [9927]},{"file": 23,"line": 1535,"col": 0,"fields": [9928,9929,9930],"varArgs": true},{"file": 23,"line": 1147,"col": 0,"fields": [9931,9932,9933,9934,9935]},{"file": 23,"line": 1016,"col": 0},{"file": 23,"line": 0,"col": 0},{"file": 23,"line": 989,"col": 0,"fields": [9936,9937]},{"file": 23,"line": 8,"col": 0},{"file": 23,"line": 3,"col": 0},{"file": 24,"line": 7,"col": 4},{"file": 24,"line": 9,"col": 4},{"file": 24,"line": 271,"col": 4},{"file": 24,"line": 6,"col": 4},{"file": 24,"line": 156,"col": 4},{"file": 24,"line": 5,"col": 4},{"file": 24,"line": 273,"col": 4},{"file": 24,"line": 78,"col": 4},{"file": 24,"line": 80,"col": 4},{"file": 24,"line": 339,"col": 0,"fields": [9938,9939]},{"file": 24,"line": 435,"col": 0,"fields": [9940,9941]},{"file": 24,"line": 450,"col": 0,"fields": [9942]},{"file": 24,"line": 0,"col": 0},{"file": 24,"line": 427,"col": 0,"fields": [9943,9944]},{"file": 24,"line": 357,"col": 0,"fields": []},{"file": 24,"line": 1,"col": 0},{"file": 24,"line": 2,"col": 0},{"file": 24,"line": 391,"col": 0,"fields": [9945,9946]},{"file": 24,"line": 3,"col": 0},{"file": 25,"line": 1,"col": 4},{"file": 25,"line": 2,"col": 4},{"file": 25,"line": 0,"col": 4},{"file": 26,"line": 92,"col": 4},{"file": 26,"line": 1005,"col": 4},{"file": 26,"line": 971,"col": 4,"fields": [9947]},{"file": 26,"line": 15,"col": 4},{"file": 26,"line": 1134,"col": 4},{"file": 26,"line": 10,"col": 4},{"file": 26,"line": 1004,"col": 4},{"file": 26,"line": 995,"col": 4},{"file": 26,"line": 863,"col": 4},{"file": 26,"line": 1007,"col": 4},{"file": 26,"line": 8,"col": 0},{"file": 26,"line": 4,"col": 0},{"file": 26,"line": 5,"col": 0},{"file": 26,"line": 6,"col": 0},{"file": 26,"line": 991,"col": 0},{"file": 26,"line": 911,"col": 0,"fields": [9948,9949]},{"file": 26,"line": 990,"col": 0},{"file": 26,"line": 992,"col": 0},{"file": 26,"line": 7,"col": 0},{"file": 26,"line": 993,"col": 0},{"file": 27,"line": 422,"col": 4},{"file": 27,"line": 355,"col": 4,"docs": " The following variable length array appears immediately after the header.\n The structure definition follows.\n LineBlockFragmentHeader Blocks[]\n Each `LineBlockFragmentHeader` as specified below.\n"},{"file": 27,"line": 16,"col": 4},{"file": 27,"line": 310,"col": 4},{"file": 27,"line": 52,"col": 4},{"file": 27,"line": 39,"col": 4},{"file": 27,"line": 377,"col": 4,"docs": " The following two variable length arrays appear immediately after the\n header.  The structure definitions follow.\n LineNumberEntry   Lines[NumLines];\n ColumnNumberEntry Columns[NumLines];\n"},{"file": 27,"line": 450,"col": 4},{"file": 27,"line": 405,"col": 4},{"file": 27,"line": 389,"col": 4},{"file": 27,"line": 442,"col": 4},{"file": 27,"line": 327,"col": 4},{"file": 27,"line": 343,"col": 4},{"file": 27,"line": 461,"col": 4},{"file": 27,"line": 70,"col": 4},{"file": 27,"line": 102,"col": 4},{"file": 27,"line": 111,"col": 4,"docs": " Duplicate copy of SymbolRecordKind, but using the official CV names. Useful\n for reference purposes and when dealing with unknown record types.\n"},{"file": 27,"line": 312,"col": 4},{"file": 27,"line": 411,"col": 4,"docs": " Checksum bytes follow.\n"},{"file": 27,"line": 78,"col": 4},{"file": 27,"line": 338,"col": 4},{"file": 27,"line": 367,"col": 4},{"file": 27,"line": 0,"col": 0},{"file": 27,"line": 581,"col": 0},{"file": 27,"line": 7,"col": 0},{"file": 27,"line": 3,"col": 0},{"file": 27,"line": 1,"col": 0},{"file": 27,"line": 627,"col": 0},{"file": 27,"line": 5,"col": 0},{"file": 27,"line": 8,"col": 0},{"file": 27,"line": 6,"col": 0},{"file": 27,"line": 2,"col": 0},{"file": 27,"line": 10,"col": 0},{"file": 27,"line": 491,"col": 0},{"file": 27,"line": 4,"col": 0},{"file": 73,"line": 42,"col": 8,"docs": " `key` and `value` are copied into the BufMap.\n","fields": [9950,9951,9952]},{"file": 73,"line": 18,"col": 8,"fields": [9953]},{"file": 73,"line": 32,"col": 8,"docs": " Same as `set` but the key and value become owned by the BufMap rather\n than being copied.\n If `setMove` fails, the ownership of key and value does not transfer.\n","fields": [9954,9955,9956]},{"file": 73,"line": 61,"col": 8,"fields": [9957,9958]},{"file": 73,"line": 71,"col": 8,"fields": [9959]},{"file": 73,"line": 13,"col": 8,"fields": [9960]},{"file": 73,"line": 67,"col": 8,"fields": [9961]},{"file": 73,"line": 56,"col": 8,"fields": [9962,9963]},{"file": 73,"line": 79,"col": 4,"fields": [9964,9965]},{"file": 73,"line": 11,"col": 4},{"file": 73,"line": 75,"col": 4,"fields": [9966,9967]},{"file": 28,"line": 256,"col": 4},{"file": 28,"line": 32,"col": 4},{"file": 28,"line": 24,"col": 4},{"file": 28,"line": 0,"col": 0},{"file": 28,"line": 21,"col": 0},{"file": 28,"line": 12,"col": 0},{"file": 28,"line": 22,"col": 0},{"file": 28,"line": 20,"col": 0},{"file": 28,"line": 235,"col": 0},{"file": 28,"line": 18,"col": 0},{"file": 28,"line": 11,"col": 0},{"file": 28,"line": 1,"col": 0},{"file": 28,"line": 4,"col": 0},{"file": 28,"line": 260,"col": 0},{"file": 28,"line": 5,"col": 0},{"file": 28,"line": 245,"col": 0},{"file": 28,"line": 225,"col": 0},{"file": 28,"line": 17,"col": 0},{"file": 28,"line": 13,"col": 0},{"file": 28,"line": 2,"col": 0},{"file": 28,"line": 7,"col": 0},{"file": 28,"line": 3,"col": 0},{"file": 29,"line": 12,"col": 4},{"file": 29,"line": 24,"col": 4},{"file": 29,"line": 15,"col": 4},{"file": 29,"line": 7,"col": 4},{"file": 29,"line": 11,"col": 4},{"file": 29,"line": 10,"col": 4},{"file": 29,"line": 19,"col": 4},{"file": 29,"line": 0,"col": 4},{"file": 29,"line": 5,"col": 4},{"file": 29,"line": 13,"col": 4},{"file": 29,"line": 20,"col": 4},{"file": 29,"line": 37,"col": 4},{"file": 29,"line": 21,"col": 4},{"file": 29,"line": 34,"col": 4},{"file": 29,"line": 27,"col": 4},{"file": 29,"line": 30,"col": 4},{"file": 29,"line": 31,"col": 4},{"file": 29,"line": 18,"col": 4},{"file": 29,"line": 1,"col": 4},{"file": 29,"line": 33,"col": 4},{"file": 29,"line": 26,"col": 4},{"file": 29,"line": 6,"col": 4},{"file": 29,"line": 4,"col": 4},{"file": 29,"line": 25,"col": 4},{"file": 29,"line": 17,"col": 0},{"file": 29,"line": 3,"col": 0},{"file": 29,"line": 36,"col": 0},{"file": 29,"line": 29,"col": 0},{"file": 29,"line": 9,"col": 0},{"file": 29,"line": 23,"col": 0},{"file": 30,"line": 6,"col": 4},{"file": 30,"line": 10,"col": 4},{"file": 30,"line": 24,"col": 4},{"file": 30,"line": 32,"col": 4},{"file": 30,"line": 19,"col": 4},{"file": 30,"line": 5,"col": 4},{"file": 30,"line": 21,"col": 4},{"file": 30,"line": 22,"col": 4},{"file": 30,"line": 15,"col": 4},{"file": 30,"line": 27,"col": 4},{"file": 30,"line": 25,"col": 4},{"file": 30,"line": 13,"col": 4},{"file": 30,"line": 14,"col": 4},{"file": 30,"line": 1,"col": 4},{"file": 30,"line": 18,"col": 4},{"file": 30,"line": 28,"col": 4},{"file": 30,"line": 9,"col": 4},{"file": 30,"line": 4,"col": 4},{"file": 30,"line": 29,"col": 4},{"file": 30,"line": 12,"col": 0},{"file": 30,"line": 31,"col": 0},{"file": 30,"line": 0,"col": 0},{"file": 30,"line": 3,"col": 0},{"file": 30,"line": 17,"col": 0},{"file": 31,"line": 111,"col": 4,"docs": " Stable in-place sort. O(n) best case, O(n*log(n)) worst case and average case. O(1) memory (no allocator required).\n Currently implemented as block sort.\n","fields": [9968,9969,9970]},{"file": 31,"line": 1195,"col": 4,"fields": [9971,9972,9973]},{"file": 31,"line": 1206,"col": 4,"fields": [9974,9975,9976]},{"file": 31,"line": 981,"col": 4,"fields": [9977]},{"file": 31,"line": 971,"col": 4,"fields": [9978]},{"file": 31,"line": 8,"col": 4,"docs": " Stable in-place sort. O(n) best case, O(pow(n, 2)) worst case. O(1) memory (no allocator required).\n","fields": [9979,9980,9981]},{"file": 31,"line": 3,"col": 0},{"file": 31,"line": 5,"col": 0},{"file": 31,"line": 1172,"col": 0},{"file": 31,"line": 841,"col": 0,"fields": [9982,9983,9984,9985,9986,9987]},{"file": 31,"line": 1174,"col": 0,"fields": [9988]},{"file": 31,"line": 905,"col": 0,"fields": [9989,9990,9991,9992,9993,9994]},{"file": 31,"line": 1039,"col": 0},{"file": 31,"line": 735,"col": 0,"fields": [9995,9996,9997,9998,9999]},{"file": 31,"line": 887,"col": 0,"fields": [10000,10001,10002,10003,10004]},{"file": 31,"line": 813,"col": 0,"fields": [10005,10006,10007,10008,10009,10010]},{"file": 31,"line": 963,"col": 0,"fields": [10011,10012,10013,10014,10015,10016]},{"file": 31,"line": 4,"col": 0},{"file": 31,"line": 0,"col": 0},{"file": 31,"line": 2,"col": 0},{"file": 31,"line": 935,"col": 0,"fields": [10017,10018,10019,10020,10021,10022]},{"file": 31,"line": 102,"col": 0},{"file": 31,"line": 827,"col": 0,"fields": [10023,10024,10025,10026,10027,10028]},{"file": 31,"line": 855,"col": 0,"fields": [10029,10030,10031,10032,10033,10034]},{"file": 31,"line": 38,"col": 0},{"file": 31,"line": 22,"col": 0},{"file": 31,"line": 869,"col": 0,"fields": [10035,10036,10037,10038,10039]},{"file": 31,"line": 804,"col": 0,"fields": [10040,10041,10042,10043,10044]},{"file": 31,"line": 995,"col": 0,"fields": []},{"file": 31,"line": 1,"col": 0},{"file": 31,"line": 1043,"col": 0,"fields": [10045,10046]},{"file": 31,"line": 777,"col": 0,"fields": [10047,10048,10049,10050,10051,10052]},{"file": 75,"line": 0,"col": 4,"fields": []},{"file": 32,"line": 82,"col": 4,"fields": [10053,10054,10055]},{"file": 32,"line": 79,"col": 4,"fields": [10056,10057]},{"file": 32,"line": 125,"col": 4,"fields": [10058,10059]},{"file": 32,"line": 85,"col": 4,"fields": []},{"file": 32,"line": 94,"col": 4,"fields": [10060]},{"file": 32,"line": 117,"col": 4,"fields": [10061,10062,10063,10064,10065]},{"file": 32,"line": 141,"col": 4,"fields": []},{"file": 32,"line": 81,"col": 4,"fields": [10066]},{"file": 32,"line": 108,"col": 4,"fields": [10067,10068,10069]},{"file": 32,"line": 54,"col": 4,"fields": [10070,10071,10072,10073]},{"file": 32,"line": 80,"col": 4,"fields": [10074,10075,10076]},{"file": 32,"line": 96,"col": 4,"fields": [10077,10078,10079]},{"file": 32,"line": 112,"col": 4,"fields": [10080,10081,10082]},{"file": 32,"line": 119,"col": 4,"fields": [10083,10084,10085,10086]},{"file": 32,"line": 55,"col": 4,"fields": [10087,10088,10089,10090]},{"file": 32,"line": 59,"col": 4,"fields": [10091]},{"file": 32,"line": 65,"col": 4,"fields": [10092,10093,10094]},{"file": 32,"line": 129,"col": 4,"fields": [10095,10096,10097]},{"file": 32,"line": 88,"col": 4,"fields": [10098,10099]},{"file": 32,"line": 135,"col": 4,"fields": [10100]},{"file": 32,"line": 75,"col": 4,"fields": [10101,10102]},{"file": 32,"line": 110,"col": 4,"fields": [10103,10104]},{"file": 32,"line": 113,"col": 4,"fields": [10105,10106]},{"file": 32,"line": 57,"col": 4,"fields": [10107,10108],"varArgs": true},{"file": 32,"line": 78,"col": 4,"fields": [10109,10110,10111,10112,10113,10114]},{"file": 32,"line": 101,"col": 4,"fields": [10115,10116]},{"file": 32,"line": 98,"col": 4,"fields": [10117,10118,10119]},{"file": 32,"line": 134,"col": 4,"fields": [10120,10121,10122,10123]},{"file": 32,"line": 70,"col": 4,"fields": [10124,10125,10126]},{"file": 32,"line": 66,"col": 4,"fields": [10127,10128,10129],"varArgs": true},{"file": 32,"line": 64,"col": 4,"fields": [10130,10131]},{"file": 32,"line": 83,"col": 4,"fields": [10132,10133]},{"file": 32,"line": 121,"col": 4,"fields": [10134]},{"file": 32,"line": 99,"col": 4,"fields": [10135,10136]},{"file": 32,"line": 106,"col": 4,"fields": [10137,10138,10139,10140,10141,10142]},{"file": 32,"line": 138,"col": 4,"fields": []},{"file": 32,"line": 128,"col": 4,"fields": [10143]},{"file": 32,"line": 63,"col": 4,"fields": [10144,10145]},{"file": 32,"line": 104,"col": 4,"fields": [10146]},{"file": 32,"line": 67,"col": 4,"fields": [10147,10148,10149,10150],"varArgs": true},{"file": 32,"line": 60,"col": 4,"fields": [10151]},{"file": 32,"line": 15,"col": 4,"fields": [10152]},{"file": 32,"line": 86,"col": 4,"fields": [10153,10154]},{"file": 32,"line": 53,"col": 4,"fields": [10155]},{"file": 32,"line": 115,"col": 4,"fields": [10156,10157,10158]},{"file": 32,"line": 58,"col": 4,"fields": []},{"file": 32,"line": 100,"col": 4,"fields": [10159,10160,10161]},{"file": 32,"line": 139,"col": 4,"fields": [10162,10163]},{"file": 32,"line": 73,"col": 4,"fields": [10164,10165,10166]},{"file": 32,"line": 97,"col": 4,"fields": [10167,10168]},{"file": 32,"line": 68,"col": 4,"fields": [10169]},{"file": 32,"line": 61,"col": 4,"fields": [10170]},{"file": 32,"line": 132,"col": 4,"fields": [10171,10172]},{"file": 32,"line": 84,"col": 4,"fields": [10173,10174,10175]},{"file": 32,"line": 111,"col": 4,"fields": [10176,10177,10178]},{"file": 32,"line": 71,"col": 4,"fields": [10179,10180,10181,10182]},{"file": 32,"line": 127,"col": 4,"fields": [10183,10184]},{"file": 32,"line": 126,"col": 4,"fields": [10185]},{"file": 32,"line": 77,"col": 4,"fields": [10186,10187,10188,10189]},{"file": 32,"line": 90,"col": 4,"fields": [10190,10191]},{"file": 32,"line": 131,"col": 4,"fields": [10192,10193,10194,10195]},{"file": 32,"line": 105,"col": 4,"fields": [10196]},{"file": 32,"line": 76,"col": 4,"fields": [10197,10198,10199]},{"file": 32,"line": 120,"col": 4,"fields": [10200,10201]},{"file": 32,"line": 122,"col": 4,"fields": [10202,10203]},{"file": 32,"line": 92,"col": 4,"fields": [10204]},{"file": 32,"line": 95,"col": 4,"fields": [10205,10206]},{"file": 32,"line": 136,"col": 4,"fields": [10207,10208,10209]},{"file": 32,"line": 137,"col": 4,"fields": [10210]},{"file": 32,"line": 142,"col": 4,"fields": [10211,10212,10213,10214,10215,10216]},{"file": 32,"line": 118,"col": 4,"fields": [10217,10218]},{"file": 32,"line": 72,"col": 4,"fields": [10219,10220,10221,10222]},{"file": 32,"line": 102,"col": 4,"fields": [10223,10224]},{"file": 32,"line": 93,"col": 4,"fields": [10225,10226,10227]},{"file": 32,"line": 116,"col": 4,"fields": [10228,10229,10230,10231]},{"file": 32,"line": 74,"col": 4,"fields": [10232,10233,10234,10235]},{"file": 32,"line": 30,"col": 4,"docs": " The return type is `type` to force comptime function call execution.\n TODO: https://github.com/ziglang/zig/issues/425\n If not linking libc, returns struct{pub const ok = false;}\n If linking musl libc, returns struct{pub const ok = true;}\n If linking gnu libc (glibc), the `ok` value will be true if the target\n version is greater than or equal to `glibc_version`.\n If linking a libc other than these, returns `false`.\n","fields": [10236]},{"file": 32,"line": 103,"col": 4,"fields": [10237,10238]},{"file": 32,"line": 69,"col": 4,"fields": [10239,10240,10241]},{"file": 32,"line": 52,"col": 4,"fields": [10242,10243]},{"file": 32,"line": 91,"col": 4,"fields": [10244,10245]},{"file": 32,"line": 123,"col": 4,"fields": [10246,10247]},{"file": 32,"line": 89,"col": 4,"fields": [10248,10249]},{"file": 32,"line": 114,"col": 4,"fields": [10250,10251,10252]},{"file": 32,"line": 62,"col": 4,"fields": [10253]},{"file": 32,"line": 107,"col": 4,"fields": [10254,10255,10256,10257,10258]},{"file": 32,"line": 87,"col": 4,"fields": [10259]},{"file": 32,"line": 0,"col": 0},{"file": 32,"line": 2,"col": 0},{"file": 32,"line": 1,"col": 0},{"file": 33,"line": 42,"col": 4},{"file": 33,"line": 11,"col": 4,"fields": [10260,10261]},{"file": 33,"line": 6,"col": 4},{"file": 33,"line": 35,"col": 4,"docs": " Returns a mutable slice with 1 more byte of length which is a null byte.\n Caller owns the returned memory.\n","fields": [10262,10263]},{"file": 33,"line": 1,"col": 0},{"file": 33,"line": 28,"col": 0,"fields": []},{"file": 33,"line": 0,"col": 0},{"file": 33,"line": 2,"col": 0},{"file": 33,"line": 4,"col": 0},{"file": 33,"line": 3,"col": 0},{"file": 34,"line": 25,"col": 4,"docs": " Insert this into your struct that you want to add to a red-black tree.\n Do not use a pointer. Turn the *rb.Node results of the functions in rb\n (after resolving optionals) to your structure using @fieldParentPtr(). Example:\n\n const Number = struct {\n     node: rb.Node,\n     value: i32,\n };\n fn number(node: *rb.Node) Number {\n     return @fieldParentPtr(Number, \"node\", node);\n }\n"},{"file": 34,"line": 132,"col": 4},{"file": 34,"line": 489,"col": 0},{"file": 34,"line": 10,"col": 0},{"file": 34,"line": 412,"col": 0,"fields": [10264,10265]},{"file": 34,"line": 12,"col": 0},{"file": 34,"line": 0,"col": 0},{"file": 34,"line": 498,"col": 0,"fields": [10266,10267]},{"file": 34,"line": 494,"col": 0,"fields": [10268]},{"file": 34,"line": 5,"col": 0},{"file": 34,"line": 438,"col": 0,"fields": [10269,10270]},{"file": 34,"line": 464,"col": 0,"fields": [10271,10272,10273,10274]},{"file": 34,"line": 2,"col": 0},{"file": 34,"line": 1,"col": 0},{"file": 34,"line": 9,"col": 0},{"file": 34,"line": 3,"col": 0},{"file": 35,"line": 32,"col": 4},{"file": 35,"line": 741,"col": 4},{"file": 35,"line": 30,"col": 4},{"file": 35,"line": 521,"col": 4},{"file": 35,"line": 27,"col": 4},{"file": 35,"line": 614,"col": 4},{"file": 35,"line": 941,"col": 4,"docs": " Sfc64 pseudo-random number generator from Practically Random.\n Fastest engine of pracrand and smallest footprint.\n See http://pracrand.sourceforge.net/\n"},{"file": 35,"line": 17,"col": 0},{"file": 35,"line": 1072,"col": 0,"fields": [10275]},{"file": 35,"line": 1091,"col": 0,"fields": [10276,10277,10278,10279]},{"file": 35,"line": 23,"col": 0},{"file": 35,"line": 24,"col": 0},{"file": 35,"line": 22,"col": 0},{"file": 35,"line": 16,"col": 0},{"file": 35,"line": 1087,"col": 0,"fields": [10280,10281,10282]},{"file": 35,"line": 416,"col": 0,"fields": []},{"file": 35,"line": 19,"col": 0},{"file": 35,"line": 363,"col": 0,"fields": []},{"file": 35,"line": 292,"col": 0},{"file": 35,"line": 20,"col": 0},{"file": 35,"line": 484,"col": 0},{"file": 35,"line": 376,"col": 0,"fields": []},{"file": 35,"line": 18,"col": 0},{"file": 35,"line": 317,"col": 0,"fields": []},{"file": 35,"line": 21,"col": 0},{"file": 36,"line": 393,"col": 4,"docs": "Compares two of any type for equality. Containers are compared on a field-by-field basis,\n where possible. Pointers are not followed.\n","fields": [10283,10284]},{"file": 36,"line": 74,"col": 4,"fields": [10285]},{"file": 36,"line": 161,"col": 4,"fields": [10286]},{"file": 36,"line": 547,"col": 4,"docs": " Given a type and a name, return the field index according to source order.\n Returns `null` if the field is not found.\n","fields": [10287,10288]},{"file": 36,"line": 532,"col": 4},{"file": 36,"line": 278,"col": 4,"fields": [10289,10290]},{"file": 36,"line": 341,"col": 4,"docs": "Returns the active tag of a tagged union\n","fields": [10291]},{"file": 36,"line": 197,"col": 4,"fields": [10292,10293]},{"file": 36,"line": 7,"col": 4},{"file": 36,"line": 318,"col": 4,"fields": [10294]},{"file": 36,"line": 118,"col": 4,"fields": [10295]},{"file": 36,"line": 12,"col": 4,"fields": [10296]},{"file": 36,"line": 534,"col": 4,"fields": [10297,10298]},{"file": 36,"line": 366,"col": 4,"docs": "Given a tagged union type, and an enum, return the type of the union\n field corresponding to the enum tag.\n","fields": [10299,10300]},{"file": 36,"line": 55,"col": 4,"fields": [10301,10302]},{"file": 36,"line": 233,"col": 4,"fields": [10303]},{"file": 36,"line": 3,"col": 0},{"file": 36,"line": 1,"col": 0},{"file": 36,"line": 4,"col": 0},{"file": 36,"line": 0,"col": 0},{"file": 36,"line": 2,"col": 0},{"file": 36,"line": 9,"col": 0},{"file": 36,"line": 5,"col": 0},{"file": 36,"line": 10,"col": 0},{"file": 37,"line": 12,"col": 4},{"file": 37,"line": 7,"col": 4},{"file": 37,"line": 218,"col": 4,"fields": [10304]},{"file": 37,"line": 17,"col": 4},{"file": 37,"line": 111,"col": 4},{"file": 37,"line": 1,"col": 0},{"file": 37,"line": 203,"col": 0,"fields": [10305,10306]},{"file": 37,"line": 0,"col": 0},{"file": 37,"line": 5,"col": 0},{"file": 37,"line": 3,"col": 0},{"file": 37,"line": 2,"col": 0},{"file": 37,"line": 4,"col": 0},{"file": 38,"line": 1043,"col": 4},{"file": 38,"line": 289,"col": 4,"docs": " Calls makeDir recursively to make an entire path. Returns success if the path\n already exists and is a directory.\n This function is not atomic, and if it returns an error, the file system may\n have been modified regardless.\n TODO determine if we can remove the allocator requirement from this function\n","fields": [10307,10308]},{"file": 38,"line": 29,"col": 4,"docs": " This represents the maximum size of a UTF-8 encoded file path.\n All file system operations which return a path are guaranteed to\n fit into a UTF-8 encoded array of this length.\n"},{"file": 38,"line": 1136,"col": 4,"docs": " Read value of a symbolic link.\n The return value is a slice of buffer, from index `0`.\n","fields": [10309,10310]},{"file": 38,"line": 333,"col": 4,"docs": " Same as `deleteDir` except the parameter is a null-terminated UTF16LE-encoded string.\n","fields": [10311]},{"file": 38,"line": 1112,"col": 4,"docs": " Recursively iterates over a directory.\n Must call `Walker.deinit` when done.\n `dir_path` must not end in a path separator.\n The order of returned file system entries is undefined.\n","fields": [10312,10313]},{"file": 38,"line": 19,"col": 4},{"file": 38,"line": 1181,"col": 4,"docs": " Get the path to the current executable.\n If you only need the directory, use selfExeDirPath.\n If you only want an open file handle, use openSelfExe.\n This function may return an error if the current executable\n was deleted after spawning.\n Returned value is a slice of out_buffer.\n\n On Linux, depends on procfs being mounted. If the currently executing binary has\n been deleted, the file path looks something like `/a/b/c/exe (deleted)`.\n TODO make the return type of this a null terminated pointer\n","fields": [10314]},{"file": 38,"line": 87,"col": 4,"docs": " Check the file size, mtime, and mode of `source_path` and `dest_path`. If they are equal, does nothing.\n Otherwise, atomically copies `source_path` to `dest_path`. The destination file gains the mtime,\n atime, and mode of the source file so that the next call to `updateFile` will not need a copy.\n Returns the previous status of the file before updating.\n If any of the directories do not exist for dest_path, they are created.\n TODO https://github.com/ziglang/zig/issues/2885\n","fields": [10315,10316,10317]},{"file": 38,"line": 24,"col": 4},{"file": 38,"line": 17,"col": 4},{"file": 38,"line": 323,"col": 4,"docs": " Returns `error.DirNotEmpty` if the directory is not empty.\n To delete a directory recursively, see `deleteTree`.\n","fields": [10318]},{"file": 38,"line": 156,"col": 4,"docs": " Guaranteed to be atomic. However until https://patchwork.kernel.org/patch/9636735/ is\n merged and readily available,\n there is a possibility of power loss or application termination leaving temporary files present\n in the same directory as dest_path.\n Destination file will have the same mode as the source file.\n","fields": [10319,10320]},{"file": 38,"line": 359,"col": 4},{"file": 38,"line": 12,"col": 4},{"file": 38,"line": 9,"col": 4},{"file": 38,"line": 179,"col": 4,"docs": " Guaranteed to be atomic. However until https://patchwork.kernel.org/patch/9636735/ is\n merged and readily available,\n there is a possibility of power loss or application termination leaving temporary files present\n","fields": [10321,10322,10323]},{"file": 38,"line": 1247,"col": 4,"docs": " `realpath`, except caller must free the returned memory.\n","fields": [10324,10325]},{"file": 38,"line": 342,"col": 4,"docs": " Removes a symlink, file, or directory.\n If `full_path` is relative, this is equivalent to `Dir.deleteTree` with the\n current working directory as the open directory handle.\n If `full_path` is absolute, this is equivalent to `Dir.deleteTree` with the\n base directory.\n","fields": [10326]},{"file": 38,"line": 1169,"col": 4},{"file": 38,"line": 18,"col": 4},{"file": 38,"line": 270,"col": 4,"docs": " Create a new directory.\n","fields": [10327]},{"file": 38,"line": 1222,"col": 4,"docs": " `selfExeDirPath` except allocates the result on the heap.\n Caller owns returned memory.\n","fields": [10328]},{"file": 38,"line": 16,"col": 4},{"file": 38,"line": 13,"col": 4},{"file": 38,"line": 1145,"col": 4},{"file": 38,"line": 196,"col": 4},{"file": 38,"line": 280,"col": 4,"docs": " Same as `makeDir` except the parameter is a null-terminated UTF16LE-encoded string.\n","fields": [10329]},{"file": 38,"line": 77,"col": 4,"fields": [10330,10331]},{"file": 38,"line": 10,"col": 4},{"file": 38,"line": 20,"col": 4},{"file": 38,"line": 23,"col": 4},{"file": 38,"line": 21,"col": 4},{"file": 38,"line": 1229,"col": 4,"docs": " Get the directory path that contains the current executable.\n Returned value is a slice of out_buffer.\n","fields": [10332]},{"file": 38,"line": 14,"col": 4},{"file": 38,"line": 328,"col": 4,"docs": " Same as `deleteDir` except the parameter is a null-terminated UTF8-encoded string.\n","fields": [10333]},{"file": 38,"line": 275,"col": 4,"docs": " Same as `makeDir` except the parameter is a null-terminated UTF8-encoded string.\n","fields": [10334]},{"file": 38,"line": 43,"col": 4,"docs": " TODO remove the allocator requirement from this API\n","fields": [10335,10336,10337]},{"file": 38,"line": 15,"col": 4},{"file": 38,"line": 1141,"col": 4,"docs": " Same as `readLink`, except the parameter is null-terminated.\n","fields": [10338,10339]},{"file": 38,"line": 0,"col": 0},{"file": 38,"line": 40,"col": 0},{"file": 38,"line": 2,"col": 0},{"file": 38,"line": 6,"col": 0},{"file": 38,"line": 4,"col": 0},{"file": 38,"line": 5,"col": 0},{"file": 38,"line": 1,"col": 0},{"file": 38,"line": 267,"col": 0},{"file": 38,"line": 72,"col": 0},{"file": 38,"line": 7,"col": 0},{"file": 38,"line": 3,"col": 0},{"file": 39,"line": 585,"col": 4},{"file": 39,"line": 10,"col": 4},{"file": 39,"line": 426,"col": 4},{"file": 39,"line": 639,"col": 4,"fields": [10340,10341]},{"file": 39,"line": 339,"col": 4,"docs": " This allocator takes an existing allocator, wraps it, and provides an interface\n where you can allocate without freeing, and then free it all together.\n"},{"file": 39,"line": 493,"col": 4},{"file": 39,"line": 238,"col": 4},{"file": 39,"line": 14,"col": 4},{"file": 39,"line": 35,"col": 4,"docs": " This allocator makes a syscall directly for every allocation and free.\n Thread-safe and lock-free.\n"},{"file": 39,"line": 651,"col": 4,"fields": [10342]},{"file": 39,"line": 6,"col": 0},{"file": 39,"line": 867,"col": 0,"fields": [10343,10344]},{"file": 39,"line": 920,"col": 0,"fields": [10345]},{"file": 39,"line": 490,"col": 0,"fields": [10346]},{"file": 39,"line": 8,"col": 0},{"file": 39,"line": 504,"col": 0},{"file": 39,"line": 0,"col": 0},{"file": 39,"line": 7,"col": 0},{"file": 39,"line": 839,"col": 0,"fields": [10347]},{"file": 39,"line": 27,"col": 0,"fields": [10348,10349,10350,10351,10352]},{"file": 39,"line": 20,"col": 0,"fields": [10353,10354,10355,10356,10357]},{"file": 39,"line": 771,"col": 0},{"file": 39,"line": 494,"col": 0},{"file": 39,"line": 891,"col": 0,"fields": [10358]},{"file": 39,"line": 5,"col": 0},{"file": 39,"line": 1,"col": 0},{"file": 39,"line": 491,"col": 0,"fields": [10359,10360]},{"file": 39,"line": 3,"col": 0},{"file": 39,"line": 15,"col": 0},{"file": 39,"line": 41,"col": 0},{"file": 39,"line": 36,"col": 0},{"file": 39,"line": 12,"col": 0},{"file": 39,"line": 2,"col": 0},{"file": 39,"line": 4,"col": 0},{"file": 40,"line": 99,"col": 4,"docs": " A monotonic high-performance timer.\n Timer.start() must be called to initialize the struct, which captures\n   the counter frequency on windows and darwin, records the resolution,\n   and gives the user an opportunity to check for the existnece of\n   monotonic clocks without forcing them to check for error on each read.\n .resolution is in nanoseconds on all platforms but .start_time's meaning\n   depends on the OS. On Windows and Darwin it is a hardware counter\n   value that requires calculation to convert to a meaninful unit.\n"},{"file": 40,"line": 73,"col": 4},{"file": 40,"line": 31,"col": 4,"docs": " Get the posix timestamp, UTC, in milliseconds\n TODO audit this function. is it possible to return an error?\n","fields": []},{"file": 40,"line": 88,"col": 4},{"file": 40,"line": 10,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.\n","fields": [10361]},{"file": 40,"line": 89,"col": 4},{"file": 40,"line": 77,"col": 4},{"file": 40,"line": 80,"col": 4,"docs": " Divisions of a second\n"},{"file": 40,"line": 87,"col": 4},{"file": 40,"line": 72,"col": 4,"docs": " Multiples of a base unit (nanoseconds)\n"},{"file": 40,"line": 75,"col": 4},{"file": 40,"line": 25,"col": 4,"docs": " Get the posix timestamp, UTC, in seconds\n TODO audit this function. is it possible to return an error?\n","fields": []},{"file": 40,"line": 7,"col": 4},{"file": 40,"line": 76,"col": 4},{"file": 40,"line": 74,"col": 4},{"file": 40,"line": 86,"col": 4,"docs": " Common time divisions\n"},{"file": 40,"line": 82,"col": 4},{"file": 40,"line": 81,"col": 4},{"file": 40,"line": 83,"col": 4},{"file": 40,"line": 0,"col": 0},{"file": 40,"line": 5,"col": 0},{"file": 40,"line": 1,"col": 0},{"file": 40,"line": 4,"col": 0},{"file": 40,"line": 3,"col": 0},{"file": 40,"line": 2,"col": 0},{"file": 61,"line": 42,"col": 8,"docs": " Represents one unit of progress. Each node can have children nodes, or\n one can use integers with `update`.\n"},{"file": 41,"line": 5,"col": 4,"fields": [10362,10363]},{"file": 41,"line": 1,"col": 0},{"file": 41,"line": 0,"col": 0},{"file": 41,"line": 2,"col": 0},{"file": 41,"line": 3,"col": 0},{"file": 42,"line": 144,"col": 4,"docs": " Counts the number of errors that have been recorded by a tool.  Nb:\n the tool must record the errors with VG_(maybe_record_error)() or\n VG_(unique_error)() for them to be counted.\n","fields": []},{"file": 42,"line": 196,"col": 4,"docs": " Resize and/or move a piece associated with a memory pool.\n","fields": [10364,10365,10366]},{"file": 42,"line": 201,"col": 4,"docs": " Return if a mempool exists.\n","fields": [10367]},{"file": 42,"line": 213,"col": 4,"docs": " Unmark the piece of memory associated with a stack id as being a stack.\n","fields": [10368]},{"file": 42,"line": 162,"col": 4,"docs": " Create a memory pool.\n"},{"file": 42,"line": 157,"col": 4,"fields": [10369,10370]},{"file": 42,"line": 153,"col": 4,"fields": [10371,10372,10373]},{"file": 42,"line": 77,"col": 4,"fields": [10374]},{"file": 42,"line": 181,"col": 4,"docs": " Disassociate a piece of memory from a memory pool.\n","fields": [10375,10376]},{"file": 42,"line": 247,"col": 4,"docs": " Disable error reporting for this thread.  Behaves in a stack like\n way, so you can safely call this multiple times provided that\n enableErrorReporting() is called the same number of times\n to re-enable reporting.  The first call of this macro disables\n reporting.  Subsequent calls have no effect except to increase the\n number of enableErrorReporting() calls needed to re-enable\n reporting.  Child threads do not inherit this setting from their\n parents -- they are always created with reporting enabled.\n","fields": []},{"file": 42,"line": 166,"col": 4,"fields": [10377,10378,10379,10380]},{"file": 42,"line": 137,"col": 4,"fields": [10381,10382,10383,10384]},{"file": 42,"line": 265,"col": 4},{"file": 42,"line": 44,"col": 4},{"file": 42,"line": 261,"col": 4,"docs": " Execute a monitor command from the client program.\n If a connection is opened with GDB, the output will be sent\n according to the output mode set for vgdb.\n If no connection is opened, output will go to the log output.\n Returns 1 if command not recognised, 0 otherwise.\n","fields": [10385]},{"file": 42,"line": 176,"col": 4,"docs": " Associate a piece of memory with a memory pool.\n","fields": [10386,10387]},{"file": 42,"line": 266,"col": 4},{"file": 42,"line": 107,"col": 4,"fields": [10388]},{"file": 42,"line": 186,"col": 4,"docs": " Disassociate any pieces outside a particular range.\n","fields": [10389,10390]},{"file": 42,"line": 133,"col": 4,"fields": [10391,10392,10393]},{"file": 42,"line": 235,"col": 4,"docs": " Map a code address to a source file name and line number.  buf64\n must point to a 64-byte buffer in the caller's address space. The\n result will be dumped in there and is guaranteed to be zero\n terminated.  If no info is found, the first byte is set to zero.\n","fields": [10394,10395]},{"file": 42,"line": 129,"col": 4,"fields": [10396,10397]},{"file": 42,"line": 103,"col": 4,"docs": " Discard translation of code in the slice qzz.  Useful if you are debugging\n a JITter or some such, since it provides a way to make sure valgrind will\n retranslate the invalidated area.  Returns no value.\n","fields": [10398]},{"file": 42,"line": 149,"col": 4,"fields": [10399,10400,10401]},{"file": 42,"line": 208,"col": 4,"docs": " Mark a piece of memory as being a stack. Returns a stack id.\n start is the lowest addressable stack byte, end is the highest\n addressable stack byte.\n","fields": [10402]},{"file": 42,"line": 191,"col": 4,"docs": " Resize and/or move a piece associated with a memory pool.\n","fields": [10403,10404]},{"file": 42,"line": 171,"col": 4,"docs": " Destroy a memory pool.\n","fields": [10405]},{"file": 42,"line": 80,"col": 4,"fields": [10406,10407]},{"file": 42,"line": 96,"col": 4,"docs": " Returns the number of Valgrinds this code is running under.  That\n is, 0 if running natively, 1 if running under Valgrind, 2 if\n running under Valgrind which is running under another Valgrind,\n etc.\n","fields": []},{"file": 42,"line": 125,"col": 4,"fields": [10408]},{"file": 42,"line": 220,"col": 4,"docs": " Change the start and end address of the stack id.\n start is the new lowest addressable stack byte, end is the new highest\n addressable stack byte.\n","fields": [10409,10410]},{"file": 42,"line": 3,"col": 4,"fields": [10411,10412,10413,10414,10415,10416,10417]},{"file": 42,"line": 252,"col": 4,"docs": " Re-enable error reporting, (see disableErrorReporting())\n","fields": []},{"file": 42,"line": 0,"col": 0},{"file": 42,"line": 1,"col": 0},{"file": 42,"line": 84,"col": 0,"fields": [10418,10419,10420,10421,10422,10423,10424]},{"file": 42,"line": 88,"col": 0,"fields": [10425,10426,10427,10428,10429,10430]},{"file": 43,"line": 1,"col": 4},{"file": 43,"line": 2,"col": 4},{"file": 43,"line": 6,"col": 4},{"file": 43,"line": 4,"col": 4},{"file": 43,"line": 3,"col": 4},{"file": 43,"line": 5,"col": 4},{"file": 43,"line": 0,"col": 0},{"file": 76,"line": 21,"col": 8,"fields": [10431]},{"file": 76,"line": 17,"col": 8,"fields": []},{"file": 76,"line": 9,"col": 8},{"file": 44,"line": 37,"col": 4,"docs": " Caller must free result when done.\n TODO make this go through libc when we have it\n","fields": [10432]},{"file": 44,"line": 13,"col": 4},{"file": 44,"line": 14,"col": 4},{"file": 44,"line": 347,"col": 4},{"file": 44,"line": 171,"col": 4},{"file": 44,"line": 454,"col": 4,"fields": [10433,10434]},{"file": 44,"line": 515,"col": 4,"docs": " TODO this reads /etc/passwd. But sometimes the user/id mapping is in something else\n like NIS, AD, etc. See `man nss` or look at an strace for `id myuser`.\n","fields": [10435]},{"file": 44,"line": 15,"col": 4},{"file": 44,"line": 389,"col": 4,"docs": " Caller must call argsFree on result.\n","fields": [10436]},{"file": 44,"line": 500,"col": 4},{"file": 44,"line": 18,"col": 4,"docs": " The result is a slice of `out_buffer`, from index `0`.\n","fields": [10437]},{"file": 44,"line": 198,"col": 4},{"file": 44,"line": 120,"col": 4},{"file": 44,"line": 506,"col": 4,"docs": " POSIX function which gets a uid from username.\n","fields": [10438]},{"file": 44,"line": 12,"col": 4},{"file": 44,"line": 384,"col": 4,"fields": []},{"file": 44,"line": 0,"col": 0},{"file": 44,"line": 4,"col": 0},{"file": 44,"line": 7,"col": 0},{"file": 44,"line": 491,"col": 0,"fields": [10439,10440]},{"file": 44,"line": 1,"col": 0},{"file": 44,"line": 2,"col": 0},{"file": 44,"line": 5,"col": 0},{"file": 44,"line": 10,"col": 0},{"file": 44,"line": 3,"col": 0},{"file": 44,"line": 8,"col": 0},{"file": 44,"line": 9,"col": 0},{"file": 44,"line": 6,"col": 0},{"file": 45,"line": 648,"col": 4,"docs": " compiler -O level: name,,NO_SECT,0,0\n"},{"file": 45,"line": 470,"col": 4,"docs": " the object file has no undefined references\n"},{"file": 45,"line": 357,"col": 4,"docs": " local of info to split segments\n"},{"file": 45,"line": 372,"col": 4,"docs": " compressed dyld information only\n"},{"file": 45,"line": 539,"col": 4,"docs": " Contains a section of type S_THREAD_LOCAL_VARIABLES\n"},{"file": 45,"line": 293,"col": 4,"docs": " fixed VM file inclusion (internal use)\n"},{"file": 45,"line": 591,"col": 4,"docs": " global symbol: name,,NO_SECT,type,0\n"},{"file": 45,"line": 570,"col": 4,"docs": " section with only 4 byte literals\n"},{"file": 45,"line": 323,"col": 4,"docs": " sub umbrella\n"},{"file": 45,"line": 384,"col": 4,"docs": " compressed table of function start addresses\n"},{"file": 45,"line": 281,"col": 4,"docs": " unix thread (includes a stack)\n"},{"file": 45,"line": 332,"col": 4,"docs": " two-level namespace lookup hints\n"},{"file": 45,"line": 411,"col": 4,"docs": " build for AppleTV min OS version\n"},{"file": 45,"line": 582,"col": 4,"docs": " private external symbol bit\n"},{"file": 45,"line": 558,"col": 4,"docs": "  24 section attributes\n"},{"file": 45,"line": 660,"col": 4,"docs": " left bracket: 0,,NO_SECT,nesting level,address\n"},{"file": 45,"line": 75,"col": 4,"docs": " The segment load command indicates that a part of this file is to be\n mapped into the task's address space.  The size of this segment in memory,\n vmsize, maybe equal to or larger than the amount to map from this file,\n filesize.  The file is mapped starting at fileoff to the beginning of\n the segment in memory, vmaddr.  The rest of the memory of the segment,\n if any, is allocated zero fill on demand.  The segment's maximum virtual\n memory protection and initial virtual memory protection are specified\n by the maxprot and initprot fields.  If the segment has sections then the\n section structures directly follow the segment command and their size is\n reflected in cmdsize.\n"},{"file": 45,"line": 0,"col": 4},{"file": 45,"line": 657,"col": 4,"docs": " alternate entry: name,,n_sect,linenumber,address\n"},{"file": 45,"line": 314,"col": 4,"docs": " modules prebound for a dynamically\n"},{"file": 45,"line": 527,"col": 4,"docs": " When this bit is set, the binary declares it is safe for use in processes when issetugid() is true\n"},{"file": 45,"line": 476,"col": 4,"docs": " the object file is input for the dynamic linker and can't be staticly link edited again\n"},{"file": 45,"line": 612,"col": 4,"docs": " emitted with gcc2_compiled and in gcc source\n"},{"file": 45,"line": 573,"col": 4,"docs": " section with only 8 byte literals\n"},{"file": 45,"line": 447,"col": 4,"docs": " preloaded executable file\n"},{"file": 45,"line": 678,"col": 4,"docs": " second stab entry with length information\n"},{"file": 45,"line": 450,"col": 4,"docs": " dynamically bound shared library\n"},{"file": 45,"line": 606,"col": 4,"docs": " begin nsect sym: 0,,n_sect,0,address\n"},{"file": 45,"line": 567,"col": 4,"docs": " section with only literal C string\n"},{"file": 45,"line": 205,"col": 4},{"file": 45,"line": 326,"col": 4,"docs": " sub client\n"},{"file": 45,"line": 456,"col": 4,"docs": " dynamically bound bundle file\n"},{"file": 45,"line": 675,"col": 4,"docs": " end common (local name): 0,,n_sect,0,address\n"},{"file": 45,"line": 345,"col": 4,"docs": " 64-bit image routines\n"},{"file": 45,"line": 366,"col": 4,"docs": " encrypted segment information\n"},{"file": 45,"line": 515,"col": 4,"docs": " the final linked image contains external weak symbols\n"},{"file": 45,"line": 494,"col": 4,"docs": " the executable is forcing all images to use flat name space bindings\n"},{"file": 45,"line": 509,"col": 4,"docs": " safe to divide up the sections into sub-sections via symbols for dead code stripping\n"},{"file": 45,"line": 453,"col": 4,"docs": " dynamic link editor\n"},{"file": 45,"line": 536,"col": 4,"docs": " Only for use on dylibs.  When linking against a dylib that has this bit set, the static linker will automatically not create a LC_LOAD_DYLIB load command to the dylib if no symbols are being referenced from the dylib.\n"},{"file": 45,"line": 299,"col": 4,"docs": " dynamic link-edit symbol table info\n"},{"file": 45,"line": 29,"col": 4,"docs": " The symtab_command contains the offsets and sizes of the link-edit 4.3BSD\n \"stab\" style symbol table information as described in the header files\n <nlist.h> and <stab.h>.\n"},{"file": 45,"line": 296,"col": 4,"docs": " prepage command (internal use)\n"},{"file": 45,"line": 530,"col": 4,"docs": " When this bit is set on a dylib, the static linker does not need to examine dependent dylibs to see if any are re-exported\n"},{"file": 45,"line": 278,"col": 4,"docs": " thread\n"},{"file": 45,"line": 588,"col": 4,"docs": " external symbol bit, set for external symbols\n"},{"file": 45,"line": 618,"col": 4,"docs": " src line: 0,,n_sect,linenumber,address\n"},{"file": 45,"line": 405,"col": 4,"docs": " linker options in MH_OBJECT files\n"},{"file": 45,"line": 423,"col": 4,"docs": " the mach magic number\n"},{"file": 45,"line": 597,"col": 4,"docs": " procedure: name,,n_sect,linenumber,address\n"},{"file": 45,"line": 542,"col": 4,"docs": " When this bit is set, the OS will run the main executable with a non-executable heap even on platforms (e.g. i386) that don't require it. Only used in MH_EXECUTE filetypes.\n"},{"file": 45,"line": 690,"col": 4},{"file": 45,"line": 473,"col": 4,"docs": " the object file is the output of an incremental link against a base file and can't be link edited again\n"},{"file": 45,"line": 414,"col": 4,"docs": " build for Watch min OS version\n"},{"file": 45,"line": 545,"col": 4,"docs": " The code was linked for use in an application extension.\n"},{"file": 45,"line": 615,"col": 4,"docs": " register sym: name,,NO_SECT,type,register\n"},{"file": 45,"line": 393,"col": 4,"docs": " table of non-instructions in __text\n"},{"file": 45,"line": 441,"col": 4,"docs": " fixed VM shared library file\n"},{"file": 45,"line": 521,"col": 4,"docs": " When this bit is set, all stacks in the task will be given stack execution privilege.  Only used in MH_EXECUTE filetypes.\n"},{"file": 45,"line": 633,"col": 4,"docs": " local sym: name,,NO_SECT,type,offset\n"},{"file": 45,"line": 360,"col": 4,"docs": " load and re-export dylib\n"},{"file": 45,"line": 600,"col": 4,"docs": " static symbol: name,,n_sect,type,address\n"},{"file": 45,"line": 533,"col": 4,"docs": " When this bit is set, the OS will load the main executable at a random address.  Only used in MH_EXECUTE filetypes.\n"},{"file": 45,"line": 692,"col": 4},{"file": 45,"line": 369,"col": 4,"docs": " compressed dyld information\n"},{"file": 45,"line": 402,"col": 4,"docs": " 64-bit encrypted segment information\n"},{"file": 45,"line": 438,"col": 4,"docs": " demand paged executable file\n"},{"file": 45,"line": 426,"col": 4,"docs": " NXSwapInt(MH_MAGIC)\n"},{"file": 45,"line": 342,"col": 4,"docs": " 64-bit segment of this file to be mapped\n"},{"file": 45,"line": 518,"col": 4,"docs": " the final linked image uses weak symbols\n"},{"file": 45,"line": 284,"col": 4,"docs": " load a specified fixed VM shared library\n"},{"file": 45,"line": 479,"col": 4,"docs": " the object file's undefined references are bound by the dynamic linker when loaded.\n"},{"file": 45,"line": 497,"col": 4,"docs": " this umbrella guarantees no multiple defintions of symbols in its sub-images so the two-level namespace hints can always be used.\n"},{"file": 45,"line": 381,"col": 4,"docs": " build for iPhoneOS min OS version\n"},{"file": 45,"line": 112,"col": 4,"docs": " The 64-bit segment load command indicates that a part of this file is to be\n mapped into a 64-bit task's address space.  If the 64-bit segment has\n sections then section_64 structures directly follow the 64-bit segment\n command and their size is reflected in cmdsize.\n"},{"file": 45,"line": 10,"col": 4},{"file": 45,"line": 420,"col": 4,"docs": " build for platform min OS version\n"},{"file": 45,"line": 663,"col": 4,"docs": " deleted include file: name,,NO_SECT,0,sum\n"},{"file": 45,"line": 491,"col": 4,"docs": " the image is using two-level name space bindings\n"},{"file": 45,"line": 251,"col": 4},{"file": 45,"line": 503,"col": 4,"docs": " the binary is not prebound but can have its prebinding redone. only used when MH_PREBOUND is not set.\n"},{"file": 45,"line": 548,"col": 4,"docs": " The external symbols listed in the nlist symbol table do not include all the symbols listed in the dyld info.\n"},{"file": 45,"line": 688,"col": 4,"docs": " If a segment contains any sections marked with S_ATTR_DEBUG then all\n sections in that segment must have this attribute.  No section other than\n a section marked with this attribute may reference the contents of this\n section.  A section with this attribute may contain no symbols and must have\n a section type S_REGULAR.  The static linker will not copy section contents\n from sections with this attribute into its output file.  These sections\n generally contain DWARF debugging info.\n a debug section\n"},{"file": 45,"line": 329,"col": 4,"docs": " sub library\n"},{"file": 45,"line": 348,"col": 4,"docs": " the uuid\n"},{"file": 45,"line": 459,"col": 4,"docs": " shared library stub for static linking only, no section contents\n"},{"file": 45,"line": 272,"col": 4,"docs": " link-edit stab symbol table info\n"},{"file": 45,"line": 691,"col": 4},{"file": 45,"line": 666,"col": 4,"docs": " right bracket: 0,,NO_SECT,nesting level,address\n"},{"file": 45,"line": 564,"col": 4,"docs": " zero fill on demand section\n"},{"file": 45,"line": 396,"col": 4,"docs": " source version used to build binary\n"},{"file": 45,"line": 311,"col": 4,"docs": " dynamic linker identification\n"},{"file": 45,"line": 378,"col": 4,"docs": " build for MacOSX min OS version\n"},{"file": 45,"line": 243,"col": 4},{"file": 45,"line": 417,"col": 4,"docs": " arbitrary data included within a Mach-O file\n"},{"file": 45,"line": 594,"col": 4,"docs": " procedure name (f77 kludge): name,,NO_SECT,0,0\n"},{"file": 45,"line": 555,"col": 4,"docs": " The flags field of a section structure is separated into two parts a section\n type and section attributes.  The section types are mutually exclusive (it\n can only have one type) but the section attributes are not (it may have more\n than one attribute).\n 256 section types\n"},{"file": 45,"line": 561,"col": 4,"docs": " regular section\n"},{"file": 45,"line": 432,"col": 4,"docs": " NXSwapInt(MH_MAGIC_64)\n"},{"file": 45,"line": 375,"col": 4,"docs": " load upward dylib\n"},{"file": 45,"line": 506,"col": 4,"docs": " indicates that this binary binds to all two-level namespace modules of its dependent libraries. only used when MH_PREBINDABLE and MH_TWOLEVEL are both set.\n"},{"file": 45,"line": 287,"col": 4,"docs": " fixed VM shared library identification\n"},{"file": 45,"line": 485,"col": 4,"docs": " the file has its read-only and read-write segments split\n"},{"file": 45,"line": 488,"col": 4,"docs": " the shared library init routine is to be run lazily via catching memory faults to its writeable segments (obsolete)\n"},{"file": 45,"line": 636,"col": 4,"docs": " include file beginning: name,,NO_SECT,0,sum\n"},{"file": 45,"line": 524,"col": 4,"docs": " When this bit is set, the binary declares it is safe for use in processes with uid zero\n"},{"file": 45,"line": 693,"col": 4},{"file": 45,"line": 387,"col": 4,"docs": " string for dyld to treat like environment variable\n"},{"file": 45,"line": 290,"col": 4,"docs": " object identification info (obsolete)\n"},{"file": 45,"line": 609,"col": 4,"docs": " AST file path: name,,NO_SECT,0,0\n"},{"file": 45,"line": 354,"col": 4,"docs": " local of code signature\n"},{"file": 45,"line": 320,"col": 4,"docs": " sub framework\n"},{"file": 45,"line": 627,"col": 4,"docs": " source file name: name,,n_sect,0,address\n"},{"file": 45,"line": 21,"col": 4},{"file": 45,"line": 429,"col": 4,"docs": " the 64-bit mach magic number\n"},{"file": 45,"line": 305,"col": 4,"docs": " dynamically linked shared lib ident\n"},{"file": 45,"line": 351,"col": 4,"docs": " runpath additions\n"},{"file": 45,"line": 444,"col": 4,"docs": " core file\n"},{"file": 45,"line": 482,"col": 4,"docs": " the file has its dynamic undefined references prebound.\n"},{"file": 45,"line": 500,"col": 4,"docs": " do not have dyld notify the prebinding agent about this executable\n"},{"file": 45,"line": 170,"col": 4,"docs": " A segment is made up of zero or more sections.  Non-MH_OBJECT files have\n all of their segments with the proper sections in each, and padded to the\n specified segment alignment when produced by the link editor.  The first\n segment of a MH_EXECUTE and MH_FVMLIB format file contains the mach_header\n and load commands of the object file before its first section.  The zero\n fill sections are always last in their segment (in all formats).  This\n allows the zeroed segment padding to be mapped into memory where zero fill\n sections might be. The gigabyte zero fill sections, those with the section\n type S_GB_ZEROFILL, can only be in a segment with sections of this type.\n These segments are then placed after all other segments.\n\n The MH_OBJECT format has all of its sections in one segment for\n compactness.  There is no padding to a specified segment boundary and the\n mach_header and load commands are not part of the segment.\n\n Sections with the same section name, sectname, going into the same segment,\n segname, are combined by the link editor.  The resulting section is aligned\n to the maximum alignment of the combined sections and is the new section's\n alignment.  The combined sections are aligned to their original alignment in\n the combined section.  Any padded bytes to get the specified alignment are\n zeroed.\n\n The format of the relocation entries referenced by the reloff and nreloc\n fields of the section structure for mach object files is described in the\n header file <reloc.h>.\n"},{"file": 45,"line": 639,"col": 4,"docs": " #included file name: name,,n_sect,0,address\n"},{"file": 45,"line": 672,"col": 4,"docs": " end common: name,,n_sect,0,0\n"},{"file": 45,"line": 603,"col": 4,"docs": " .lcomm symbol: name,,n_sect,type,address\n"},{"file": 45,"line": 275,"col": 4,"docs": " link-edit gdb symbol table info (obsolete)\n"},{"file": 45,"line": 651,"col": 4,"docs": " parameter: name,,NO_SECT,type,offset\n"},{"file": 45,"line": 645,"col": 4,"docs": " compiler version: name,,NO_SECT,0,0\n"},{"file": 45,"line": 669,"col": 4,"docs": " begin common: name,,NO_SECT,0,0\n"},{"file": 45,"line": 363,"col": 4,"docs": " delay load of dylib until first use\n"},{"file": 45,"line": 654,"col": 4,"docs": " include file end: name,,NO_SECT,0,0\n"},{"file": 45,"line": 462,"col": 4,"docs": " companion file with only debug sections\n"},{"file": 45,"line": 579,"col": 4,"docs": " if any of these bits set, a symbolic debugging entry\n"},{"file": 45,"line": 266,"col": 4,"docs": " After MacOS X 10.1 when a new load command is added that is required to be\n understood by the dynamic linker for the image to execute properly the\n LC_REQ_DYLD bit will be or'ed into the load command constant.  If the dynamic\n linker sees such a load command it it does not understand will issue a\n \"unknown load command required for execution\" error and refuse to use the\n image.  Other load commands without this bit that are not understood will\n simply be ignored.\n"},{"file": 45,"line": 269,"col": 4,"docs": " segment of this file to be mapped\n"},{"file": 45,"line": 335,"col": 4,"docs": " prebind checksum\n"},{"file": 45,"line": 390,"col": 4,"docs": " replacement for LC_UNIXTHREAD\n"},{"file": 45,"line": 621,"col": 4,"docs": " end nsect sym: 0,,n_sect,0,address\n"},{"file": 45,"line": 408,"col": 4,"docs": " optimization hints in MH_OBJECT files\n"},{"file": 45,"line": 585,"col": 4,"docs": " mask for the type bits\n"},{"file": 45,"line": 399,"col": 4,"docs": " Code signing DRs copied from linked dylibs\n"},{"file": 45,"line": 317,"col": 4,"docs": " image routines\n"},{"file": 45,"line": 576,"col": 4,"docs": " section with only pointers to\n"},{"file": 45,"line": 630,"col": 4,"docs": " object file name: name,,0,0,st_mtime\n"},{"file": 45,"line": 435,"col": 4,"docs": " relocatable object file\n"},{"file": 45,"line": 308,"col": 4,"docs": " load a dynamic linker\n"},{"file": 45,"line": 302,"col": 4,"docs": " load a dynamically linked shared library\n"},{"file": 45,"line": 642,"col": 4,"docs": " compiler parameters: name,,NO_SECT,0,0\n"},{"file": 45,"line": 465,"col": 4,"docs": " x86_64 kexts\n"},{"file": 45,"line": 624,"col": 4,"docs": " structure elt: name,,NO_SECT,type,struct_offset\n"},{"file": 45,"line": 512,"col": 4,"docs": " the binary has been canonicalized via the unprebind operation\n"},{"file": 45,"line": 339,"col": 4,"docs": " load a dynamically linked shared library that is allowed to be missing\n (all symbols are weak imported).\n"},{"file": 45,"line": 51,"col": 0,"docs": " The linkedit_data_command contains the offsets and sizes of a blob\n of data in the __LINKEDIT segment.\n"},{"file": 46,"line": 0,"col": 0},{"file": 46,"line": 5,"col": 0},{"file": 46,"line": 1,"col": 0},{"file": 46,"line": 2,"col": 0},{"file": 46,"line": 3,"col": 0},{"file": 46,"line": 4,"col": 0},{"file": 46,"line": 45,"col": 16,"docs": " Remove a node from the list.\n\n Arguments:\n     node: Pointer to the node to be removed.\n Returns:\n     node removed\n","fields": [10441]},{"file": 46,"line": 34,"col": 16,"docs": " Insert a new node after the current one.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [10442,10443]},{"file": 46,"line": 23,"col": 16,"fields": [10444]},{"file": 28,"line": 261,"col": 4},{"file": 47,"line": 121,"col": 4},{"file": 47,"line": 93,"col": 4},{"file": 47,"line": 10,"col": 4},{"file": 47,"line": 1,"col": 0},{"file": 47,"line": 3,"col": 0},{"file": 47,"line": 0,"col": 0},{"file": 47,"line": 6,"col": 0},{"file": 47,"line": 7,"col": 0},{"file": 47,"line": 4,"col": 0},{"file": 47,"line": 8,"col": 0},{"file": 77,"line": 28,"col": 8},{"file": 48,"line": 19,"col": 4},{"file": 48,"line": 8,"col": 4},{"file": 48,"line": 20,"col": 4},{"file": 48,"line": 21,"col": 4},{"file": 48,"line": 22,"col": 4},{"file": 48,"line": 16,"col": 4},{"file": 48,"line": 5,"col": 4},{"file": 48,"line": 17,"col": 4},{"file": 48,"line": 23,"col": 4},{"file": 48,"line": 13,"col": 4},{"file": 48,"line": 14,"col": 4},{"file": 48,"line": 6,"col": 4},{"file": 48,"line": 9,"col": 4},{"file": 48,"line": 7,"col": 4},{"file": 48,"line": 15,"col": 4},{"file": 48,"line": 12,"col": 4},{"file": 48,"line": 10,"col": 4},{"file": 48,"line": 18,"col": 4},{"file": 48,"line": 4,"col": 4},{"file": 48,"line": 11,"col": 4},{"file": 48,"line": 2,"col": 0},{"file": 48,"line": 0,"col": 0},{"file": 48,"line": 1,"col": 0},{"file": 48,"line": 104,"col": 0},{"file": 78,"line": 23,"col": 4,"docs": " An arbitrary-precision rational number.\n\n Memory is allocated as needed for operations to ensure full precision is kept. The precision\n of a Rational is only bounded by memory.\n\n Rational's are always normalized. That is, for a Rational r = p/q where p and q are integers,\n gcd(p, q) = 1 always.\n"},{"file": 79,"line": 13,"col": 4},{"file": 79,"line": 14,"col": 4},{"file": 79,"line": 15,"col": 4},{"file": 79,"line": 27,"col": 4,"docs": " An arbitrary-precision big integer.\n\n Memory is allocated by an Int as needed to ensure operations never overflow. The range of an\n Int is bounded only by available memory.\n"},{"file": 55,"line": 6,"col": 4},{"file": 54,"line": 9,"col": 4},{"file": 54,"line": 4,"col": 4},{"file": 57,"line": 5,"col": 4},{"file": 54,"line": 7,"col": 4},{"file": 54,"line": 21,"col": 4},{"file": 54,"line": 6,"col": 4},{"file": 56,"line": 6,"col": 4},{"file": 0,"line": 34,"col": 8},{"file": 80,"line": 47,"col": 4},{"file": 80,"line": 61,"col": 4},{"file": 80,"line": 43,"col": 4,"fields": [10445]},{"file": 0,"line": 21,"col": 8},{"file": 81,"line": 12,"col": 4},{"file": 80,"line": 63,"col": 4},{"file": 53,"line": 11,"col": 4},{"file": 80,"line": 57,"col": 4},{"file": 80,"line": 59,"col": 4},{"file": 80,"line": 52,"col": 4,"fields": [10446]},{"file": 53,"line": 6,"col": 4},{"file": 80,"line": 60,"col": 4},{"file": 80,"line": 14,"col": 4,"docs": " Constant representing assumed page size\n"},{"file": 80,"line": 56,"col": 4},{"file": 80,"line": 41,"col": 4},{"file": 81,"line": 7,"col": 4},{"file": 80,"line": 58,"col": 4},{"file": 77,"line": 17,"col": 4},{"file": 1,"line": 98,"col": 8},{"file": 1,"line": 134,"col": 8},{"file": 1,"line": 139,"col": 8},{"file": 1,"line": 123,"col": 8},{"file": 1,"line": 312,"col": 8},{"file": 1,"line": 295,"col": 8},{"file": 1,"line": 322,"col": 8},{"file": 1,"line": 279,"col": 8},{"file": 1,"line": 334,"col": 8},{"file": 1,"line": 300,"col": 8},{"file": 1,"line": 391,"col": 8},{"file": 1,"line": 352,"col": 8},{"file": 1,"line": 332,"col": 8},{"file": 1,"line": 318,"col": 8},{"file": 1,"line": 339,"col": 8},{"file": 1,"line": 359,"col": 8},{"file": 1,"line": 386,"col": 8},{"file": 1,"line": 275,"col": 8},{"file": 1,"line": 346,"col": 8},{"file": 1,"line": 306,"col": 8},{"file": 1,"line": 382,"col": 8},{"file": 1,"line": 327,"col": 8},{"file": 1,"line": 374,"col": 8},{"file": 1,"line": 368,"col": 8},{"file": 1,"line": 270,"col": 8},{"file": 50,"line": 11,"col": 4},{"file": 50,"line": 1,"col": 0},{"file": 50,"line": 7,"col": 0},{"file": 50,"line": 9,"col": 0},{"file": 50,"line": 5,"col": 0},{"file": 50,"line": 3,"col": 0},{"file": 50,"line": 0,"col": 0},{"file": 50,"line": 2,"col": 0},{"file": 50,"line": 8,"col": 0},{"file": 50,"line": 6,"col": 0},{"file": 50,"line": 4,"col": 0},{"file": 11,"line": 87,"col": 8,"docs": " `ptr` should be the return value of `create`, or otherwise\n have the same address and alignment property.\n","fields": [10447,10448]},{"file": 11,"line": 16,"col": 8},{"file": 28,"line": 236,"col": 4},{"file": 51,"line": 138,"col": 4,"fields": [10449]},{"file": 51,"line": 19,"col": 4},{"file": 51,"line": 176,"col": 4,"fields": [10450]},{"file": 51,"line": 736,"col": 4,"docs": " If the path is a file in the current directory (no directory component)\n then returns null\n","fields": [10451]},{"file": 51,"line": 984,"col": 4,"docs": " Returns the relative path from `from` to `to`. If `from` and `to` each\n resolve to the same path (after calling `resolve` on each), a zero-length\n string is returned.\n On Windows this canonicalizes the drive to a capital letter and paths to `\\\\`.\n","fields": [10452,10453,10454]},{"file": 51,"line": 590,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another.\n It resolves \".\" and \"..\".\n The result does not have a trailing path separator.\n If all paths are relative it uses the current working directory as a starting point.\n Note: all usage of this function should be audited due to the existence of symlinks.\n Without performing actual syscalls, resolving `..` could be incorrect.\n","fields": [10455,10456]},{"file": 51,"line": 744,"col": 4,"fields": [10457]},{"file": 51,"line": 84,"col": 4,"docs": " Naively combines a series of paths with the native path seperator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [10458,10459]},{"file": 51,"line": 778,"col": 4,"fields": [10460]},{"file": 51,"line": 992,"col": 4,"fields": [10461,10462,10463]},{"file": 51,"line": 20,"col": 4},{"file": 51,"line": 78,"col": 4,"docs": " Naively combines a series of paths with the native path seperator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [10464,10465]},{"file": 51,"line": 15,"col": 4},{"file": 51,"line": 328,"col": 4,"fields": [10466]},{"file": 51,"line": 217,"col": 4},{"file": 51,"line": 336,"col": 4,"fields": [10467]},{"file": 51,"line": 17,"col": 4},{"file": 51,"line": 23,"col": 4,"fields": [10468]},{"file": 51,"line": 1065,"col": 4,"fields": [10469,10470,10471]},{"file": 51,"line": 13,"col": 4},{"file": 51,"line": 14,"col": 4},{"file": 51,"line": 74,"col": 4},{"file": 51,"line": 21,"col": 4},{"file": 51,"line": 876,"col": 4,"fields": [10472]},{"file": 51,"line": 0,"col": 0},{"file": 51,"line": 33,"col": 0,"docs": " This is different from mem.join in that the separator will not be repeated if\n it is found at the end or beginning of a pair of consecutive paths.\n","fields": [10473,10474,10475]},{"file": 51,"line": 8,"col": 0},{"file": 51,"line": 213,"col": 0,"fields": [10476,10477]},{"file": 51,"line": 2,"col": 0},{"file": 51,"line": 4,"col": 0},{"file": 51,"line": 730,"col": 0,"fields": [10478]},{"file": 51,"line": 976,"col": 0,"fields": [10479,10480]},{"file": 51,"line": 7,"col": 0},{"file": 51,"line": 860,"col": 0,"fields": [10481,10482]},{"file": 51,"line": 6,"col": 0},{"file": 51,"line": 209,"col": 0,"fields": [10483,10484]},{"file": 51,"line": 968,"col": 0,"fields": [10485,10486]},{"file": 51,"line": 95,"col": 0,"fields": [10487,10488]},{"file": 51,"line": 852,"col": 0,"fields": [10489,10490]},{"file": 51,"line": 340,"col": 0,"fields": [10491,10492]},{"file": 51,"line": 1159,"col": 0,"fields": [10493,10494,10495]},{"file": 51,"line": 88,"col": 0,"fields": [10496,10497]},{"file": 51,"line": 1,"col": 0},{"file": 51,"line": 726,"col": 0,"fields": [10498]},{"file": 51,"line": 10,"col": 0},{"file": 51,"line": 1154,"col": 0,"fields": [10499,10500,10501]},{"file": 51,"line": 9,"col": 0},{"file": 51,"line": 11,"col": 0},{"file": 51,"line": 972,"col": 0,"fields": [10502,10503]},{"file": 51,"line": 3,"col": 0},{"file": 51,"line": 5,"col": 0},{"file": 27,"line": 583,"col": 4,"docs": " The LLVM docs list a space between C / C++ but empirically this is not the case.\n"},{"file": 52,"line": 15,"col": 4,"docs": " Lock may be held only once. If the same thread\n tries to acquire the same mutex twice, it deadlocks.\n This type is intended to be initialized statically. If you don't\n require static initialization, use std.Mutex.\n On Windows, this mutex allocates resources when it is\n first used, and the resources cannot be freed.\n On Linux, this is an alias of std.Mutex.\n"},{"file": 52,"line": 1,"col": 0},{"file": 52,"line": 0,"col": 0},{"file": 52,"line": 3,"col": 0},{"file": 52,"line": 2,"col": 0},{"file": 52,"line": 5,"col": 0},{"file": 52,"line": 6,"col": 0},{"file": 52,"line": 4,"col": 0},{"file": 47,"line": 129,"col": 4},{"file": 47,"line": 124,"col": 4},{"file": 47,"line": 122,"col": 4},{"file": 47,"line": 123,"col": 4},{"file": 53,"line": 0,"col": 0},{"file": 53,"line": 1,"col": 0},{"file": 53,"line": 4,"col": 0},{"file": 53,"line": 3,"col": 0},{"file": 35,"line": 82,"col": 8,"docs": " Returns an evenly distributed random unsigned integer `0 <= i < less_than`.\n This function assumes that the underlying ::fillFn produces evenly distributed values.\n Within this assumption, the runtime of this function is exponentially distributed.\n If ::fillFn were backed by a true random generator,\n the runtime of this function would technically be unbounded.\n However, if ::fillFn is backed by any evenly distributed pseudo random number generator,\n this function is guaranteed to return.\n If you need deterministic runtime bounds, use `::uintLessThanBiased`.\n","fields": [10504,10505,10506]},{"file": 35,"line": 161,"col": 8,"docs": " Returns an evenly distributed random integer `at_least <= i < less_than`.\n See ::uintLessThan, which this function uses in most cases,\n for commentary on the runtime of this function.\n","fields": [10507,10508,10509,10510]},{"file": 35,"line": 196,"col": 8,"docs": " Returns an evenly distributed random integer `at_least <= i <= at_most`.\n See ::uintLessThan, which this function uses in most cases,\n for commentary on the runtime of this function.\n","fields": [10511,10512,10513,10514]},{"file": 35,"line": 222,"col": 8,"docs": " Return a floating point value evenly distributed in the range [0, 1).\n","fields": [10515,10516]},{"file": 35,"line": 255,"col": 8,"docs": " Return an exponentially distributed float with a rate parameter of 1.\n\n To use a different rate parameter, use: floatExp(...) / desiredRate.\n","fields": [10517,10518]},{"file": 35,"line": 265,"col": 8,"docs": " Shuffle a slice into a random order.\n","fields": [10519,10520,10521]},{"file": 35,"line": 243,"col": 8,"docs": " Return a floating point value normally distributed with mean = 0, stddev = 1.\n\n To use different parameters, use: floatNorm(...) * desiredStddev + desiredMean.\n","fields": [10522,10523]},{"file": 35,"line": 217,"col": 8,"docs": " TODO: deprecated. renamed to ::intRangeLessThan\n","fields": [10524,10525,10526,10527]},{"file": 35,"line": 132,"col": 8,"docs": " Returns an evenly distributed random unsigned integer `0 <= i <= at_most`.\n See ::uintLessThan, which this function uses in most cases,\n for commentary on the runtime of this function.\n","fields": [10528,10529,10530]},{"file": 35,"line": 178,"col": 8,"docs": " Constant-time implementation off ::intRangeAtMostBiased.\n The results of this function may be biased.\n","fields": [10531,10532,10533,10534]},{"file": 35,"line": 212,"col": 8,"docs": " TODO: deprecated. use ::boolean or ::int instead.\n","fields": [10535,10536]},{"file": 35,"line": 40,"col": 8,"fields": [10537]},{"file": 54,"line": 0,"col": 0},{"file": 54,"line": 1,"col": 0},{"file": 54,"line": 2,"col": 0},{"file": 55,"line": 38,"col": 12,"fields": [10538]},{"file": 55,"line": 46,"col": 12},{"file": 55,"line": 60,"col": 12},{"file": 55,"line": 27,"col": 12},{"file": 55,"line": 42,"col": 12,"fields": [10539]},{"file": 55,"line": 70,"col": 12},{"file": 55,"line": 0,"col": 0},{"file": 55,"line": 1,"col": 0},{"file": 55,"line": 3,"col": 0},{"file": 55,"line": 4,"col": 0},{"file": 56,"line": 0,"col": 0},{"file": 56,"line": 205,"col": 0},{"file": 56,"line": 1,"col": 0},{"file": 56,"line": 218,"col": 0},{"file": 56,"line": 3,"col": 0},{"file": 56,"line": 4,"col": 0},{"file": 57,"line": 1,"col": 0},{"file": 57,"line": 3,"col": 0},{"file": 57,"line": 0,"col": 0},{"file": 77,"line": 112,"col": 4},{"file": 77,"line": 111,"col": 4},{"file": 58,"line": 62,"col": 4},{"file": 58,"line": 27,"col": 4},{"file": 58,"line": 671,"col": 4},{"file": 58,"line": 133,"col": 4},{"file": 58,"line": 10,"col": 4},{"file": 58,"line": 28,"col": 4},{"file": 58,"line": 8,"col": 4},{"file": 58,"line": 531,"col": 0},{"file": 58,"line": 2,"col": 0},{"file": 58,"line": 573,"col": 0},{"file": 58,"line": 505,"col": 0},{"file": 58,"line": 561,"col": 0},{"file": 58,"line": 541,"col": 0},{"file": 58,"line": 535,"col": 0},{"file": 58,"line": 528,"col": 0},{"file": 58,"line": 548,"col": 0},{"file": 58,"line": 520,"col": 0},{"file": 58,"line": 524,"col": 0},{"file": 58,"line": 526,"col": 0},{"file": 58,"line": 538,"col": 0},{"file": 58,"line": 519,"col": 0},{"file": 58,"line": 662,"col": 0,"fields": [10540,10541,10542,10543,10544,10545]},{"file": 58,"line": 617,"col": 0},{"file": 58,"line": 546,"col": 0},{"file": 58,"line": 496,"col": 0,"docs": "-----------------------------------------------------------------------------///\n                                API Definitions                              ///\n-----------------------------------------------------------------------------///\n"},{"file": 58,"line": 523,"col": 0},{"file": 58,"line": 557,"col": 0},{"file": 58,"line": 566,"col": 0},{"file": 58,"line": 532,"col": 0},{"file": 58,"line": 533,"col": 0},{"file": 58,"line": 518,"col": 0},{"file": 58,"line": 4,"col": 0},{"file": 58,"line": 509,"col": 0},{"file": 58,"line": 511,"col": 0},{"file": 58,"line": 536,"col": 0},{"file": 58,"line": 542,"col": 0},{"file": 58,"line": 595,"col": 0},{"file": 58,"line": 503,"col": 0},{"file": 58,"line": 504,"col": 0},{"file": 58,"line": 500,"col": 0},{"file": 58,"line": 530,"col": 0},{"file": 58,"line": 543,"col": 0},{"file": 58,"line": 510,"col": 0},{"file": 58,"line": 506,"col": 0},{"file": 58,"line": 539,"col": 0},{"file": 58,"line": 547,"col": 0},{"file": 58,"line": 627,"col": 0},{"file": 58,"line": 692,"col": 0},{"file": 58,"line": 499,"col": 0},{"file": 58,"line": 649,"col": 0},{"file": 58,"line": 534,"col": 0},{"file": 58,"line": 498,"col": 0},{"file": 58,"line": 540,"col": 0},{"file": 58,"line": 607,"col": 0},{"file": 58,"line": 655,"col": 0},{"file": 58,"line": 529,"col": 0},{"file": 58,"line": 544,"col": 0},{"file": 58,"line": 5,"col": 0},{"file": 58,"line": 638,"col": 0},{"file": 58,"line": 514,"col": 0},{"file": 58,"line": 517,"col": 0},{"file": 58,"line": 581,"col": 0},{"file": 58,"line": 522,"col": 0},{"file": 58,"line": 545,"col": 0},{"file": 58,"line": 6,"col": 0},{"file": 58,"line": 537,"col": 0},{"file": 58,"line": 515,"col": 0},{"file": 58,"line": 525,"col": 0},{"file": 58,"line": 588,"col": 0},{"file": 58,"line": 497,"col": 0},{"file": 58,"line": 0,"col": 0},{"file": 58,"line": 516,"col": 0},{"file": 58,"line": 602,"col": 0},{"file": 58,"line": 527,"col": 0},{"file": 58,"line": 501,"col": 0},{"file": 58,"line": 512,"col": 0},{"file": 58,"line": 552,"col": 0},{"file": 58,"line": 551,"col": 0},{"file": 58,"line": 507,"col": 0},{"file": 58,"line": 1,"col": 0},{"file": 58,"line": 550,"col": 0},{"file": 58,"line": 513,"col": 0},{"file": 58,"line": 521,"col": 0},{"file": 58,"line": 85,"col": 12,"fields": [10546]},{"file": 58,"line": 89,"col": 12,"fields": [10547]},{"file": 59,"line": 130,"col": 4,"docs": " Fast non-cryptographic 64bit hash function.\n See https://github.com/wangyi-fudan/wyhash\n"},{"file": 59,"line": 3,"col": 0},{"file": 59,"line": 175,"col": 0},{"file": 59,"line": 0,"col": 0},{"file": 59,"line": 37,"col": 0},{"file": 59,"line": 1,"col": 0},{"file": 60,"line": 736,"col": 4},{"file": 60,"line": 461,"col": 4},{"file": 60,"line": 644,"col": 4},{"file": 60,"line": 773,"col": 4},{"file": 60,"line": 397,"col": 4},{"file": 60,"line": 235,"col": 4},{"file": 60,"line": 290,"col": 4},{"file": 60,"line": 608,"col": 4},{"file": 60,"line": 635,"col": 4},{"file": 60,"line": 751,"col": 4},{"file": 60,"line": 841,"col": 4},{"file": 60,"line": 336,"col": 4},{"file": 60,"line": 713,"col": 4},{"file": 60,"line": 568,"col": 4},{"file": 60,"line": 468,"col": 4},{"file": 60,"line": 311,"col": 4},{"file": 60,"line": 241,"col": 4},{"file": 60,"line": 578,"col": 4},{"file": 60,"line": 37,"col": 4},{"file": 60,"line": 737,"col": 4},{"file": 60,"line": 53,"col": 4},{"file": 60,"line": 22,"col": 4},{"file": 60,"line": 125,"col": 4},{"file": 60,"line": 304,"col": 4},{"file": 60,"line": 589,"col": 4},{"file": 60,"line": 109,"col": 4},{"file": 60,"line": 771,"col": 4},{"file": 60,"line": 62,"col": 4},{"file": 60,"line": 628,"col": 4},{"file": 60,"line": 268,"col": 4,"docs": " Return the normalized drive name. This is the default.\n"},{"file": 60,"line": 28,"col": 4},{"file": 60,"line": 9,"col": 4},{"file": 60,"line": 316,"col": 4},{"file": 60,"line": 562,"col": 4},{"file": 60,"line": 283,"col": 4,"docs": " Return the path with the volume device path.\n"},{"file": 60,"line": 756,"col": 4},{"file": 60,"line": 350,"col": 4},{"file": 60,"line": 49,"col": 4},{"file": 60,"line": 328,"col": 4},{"file": 60,"line": 714,"col": 4},{"file": 60,"line": 453,"col": 4},{"file": 60,"line": 358,"col": 4},{"file": 60,"line": 432,"col": 4},{"file": 60,"line": 245,"col": 4},{"file": 60,"line": 41,"col": 4},{"file": 60,"line": 440,"col": 4},{"file": 60,"line": 67,"col": 4},{"file": 60,"line": 326,"col": 4},{"file": 60,"line": 421,"col": 4},{"file": 60,"line": 569,"col": 4},{"file": 60,"line": 564,"col": 4},{"file": 60,"line": 349,"col": 4},{"file": 60,"line": 249,"col": 4},{"file": 60,"line": 239,"col": 4},{"file": 60,"line": 594,"col": 4},{"file": 60,"line": 804,"col": 4},{"file": 60,"line": 312,"col": 4},{"file": 60,"line": 294,"col": 4},{"file": 60,"line": 325,"col": 4},{"file": 60,"line": 703,"col": 4},{"file": 60,"line": 590,"col": 4},{"file": 60,"line": 505,"col": 4},{"file": 60,"line": 223,"col": 4},{"file": 60,"line": 21,"col": 4},{"file": 60,"line": 38,"col": 4},{"file": 60,"line": 610,"col": 4},{"file": 60,"line": 450,"col": 4},{"file": 60,"line": 10,"col": 4},{"file": 60,"line": 335,"col": 4},{"file": 60,"line": 732,"col": 4},{"file": 60,"line": 409,"col": 4},{"file": 60,"line": 575,"col": 4},{"file": 60,"line": 323,"col": 4},{"file": 60,"line": 229,"col": 4},{"file": 60,"line": 652,"col": 4},{"file": 60,"line": 574,"col": 4},{"file": 60,"line": 481,"col": 4},{"file": 60,"line": 769,"col": 4},{"file": 60,"line": 244,"col": 4},{"file": 60,"line": 394,"col": 4},{"file": 60,"line": 69,"col": 4},{"file": 60,"line": 117,"col": 4},{"file": 60,"line": 240,"col": 4},{"file": 60,"line": 742,"col": 4},{"file": 60,"line": 570,"col": 4},{"file": 60,"line": 236,"col": 4},{"file": 60,"line": 354,"col": 4},{"file": 60,"line": 52,"col": 4},{"file": 60,"line": 733,"col": 4},{"file": 60,"line": 776,"col": 4},{"file": 60,"line": 466,"col": 4},{"file": 60,"line": 581,"col": 4},{"file": 60,"line": 35,"col": 4},{"file": 60,"line": 561,"col": 4},{"file": 60,"line": 603,"col": 4},{"file": 60,"line": 399,"col": 4},{"file": 60,"line": 291,"col": 4},{"file": 60,"line": 360,"col": 4},{"file": 60,"line": 734,"col": 4},{"file": 60,"line": 322,"col": 4},{"file": 60,"line": 66,"col": 4},{"file": 60,"line": 221,"col": 4},{"file": 60,"line": 740,"col": 4},{"file": 60,"line": 455,"col": 4},{"file": 60,"line": 313,"col": 4},{"file": 60,"line": 247,"col": 4},{"file": 60,"line": 462,"col": 4},{"file": 60,"line": 767,"col": 4},{"file": 60,"line": 866,"col": 4},{"file": 60,"line": 7,"col": 4},{"file": 60,"line": 679,"col": 4},{"file": 60,"line": 60,"col": 4},{"file": 60,"line": 54,"col": 4},{"file": 60,"line": 353,"col": 4},{"file": 60,"line": 300,"col": 4},{"file": 60,"line": 293,"col": 4},{"file": 60,"line": 567,"col": 4},{"file": 60,"line": 357,"col": 4},{"file": 60,"line": 407,"col": 4},{"file": 60,"line": 584,"col": 4},{"file": 60,"line": 674,"col": 4},{"file": 60,"line": 671,"col": 4},{"file": 60,"line": 113,"col": 4},{"file": 60,"line": 457,"col": 4},{"file": 60,"line": 344,"col": 4},{"file": 60,"line": 331,"col": 4},{"file": 60,"line": 463,"col": 4},{"file": 60,"line": 657,"col": 4},{"file": 60,"line": 438,"col": 4},{"file": 60,"line": 449,"col": 4},{"file": 60,"line": 46,"col": 4},{"file": 60,"line": 456,"col": 4},{"file": 60,"line": 8,"col": 4},{"file": 60,"line": 305,"col": 4},{"file": 60,"line": 758,"col": 4},{"file": 60,"line": 42,"col": 4},{"file": 60,"line": 729,"col": 4},{"file": 60,"line": 338,"col": 4},{"file": 60,"line": 33,"col": 4},{"file": 60,"line": 400,"col": 4},{"file": 60,"line": 303,"col": 4},{"file": 60,"line": 93,"col": 4},{"file": 60,"line": 227,"col": 4},{"file": 60,"line": 655,"col": 4},{"file": 60,"line": 460,"col": 4},{"file": 60,"line": 355,"col": 4},{"file": 60,"line": 768,"col": 4},{"file": 60,"line": 29,"col": 4},{"file": 60,"line": 619,"col": 4},{"file": 60,"line": 658,"col": 4},{"file": 60,"line": 774,"col": 4},{"file": 60,"line": 653,"col": 4},{"file": 60,"line": 32,"col": 4},{"file": 60,"line": 343,"col": 4},{"file": 60,"line": 738,"col": 4},{"file": 60,"line": 572,"col": 4},{"file": 60,"line": 643,"col": 4},{"file": 60,"line": 234,"col": 4},{"file": 60,"line": 731,"col": 4},{"file": 60,"line": 452,"col": 4},{"file": 60,"line": 315,"col": 4},{"file": 60,"line": 422,"col": 4},{"file": 60,"line": 30,"col": 4},{"file": 60,"line": 870,"col": 4},{"file": 60,"line": 715,"col": 4},{"file": 60,"line": 630,"col": 4},{"file": 60,"line": 419,"col": 4},{"file": 60,"line": 73,"col": 4},{"file": 60,"line": 406,"col": 4},{"file": 60,"line": 105,"col": 4},{"file": 60,"line": 576,"col": 4},{"file": 60,"line": 810,"col": 4},{"file": 60,"line": 324,"col": 4},{"file": 60,"line": 59,"col": 4},{"file": 60,"line": 396,"col": 4},{"file": 60,"line": 61,"col": 4},{"file": 60,"line": 45,"col": 4},{"file": 60,"line": 333,"col": 4},{"file": 60,"line": 233,"col": 4},{"file": 60,"line": 728,"col": 4},{"file": 60,"line": 34,"col": 4},{"file": 60,"line": 334,"col": 4},{"file": 60,"line": 451,"col": 4},{"file": 60,"line": 712,"col": 4},{"file": 60,"line": 448,"col": 4},{"file": 60,"line": 16,"col": 4,"docs": " The standard output device. Initially, this is the active console screen buffer, CONOUT$.\n"},{"file": 60,"line": 416,"col": 4},{"file": 60,"line": 346,"col": 4},{"file": 60,"line": 44,"col": 4},{"file": 60,"line": 356,"col": 4},{"file": 60,"line": 43,"col": 4},{"file": 60,"line": 436,"col": 4},{"file": 60,"line": 330,"col": 4},{"file": 60,"line": 417,"col": 4},{"file": 60,"line": 454,"col": 4},{"file": 60,"line": 435,"col": 4},{"file": 60,"line": 850,"col": 4},{"file": 60,"line": 580,"col": 4},{"file": 60,"line": 71,"col": 4},{"file": 60,"line": 591,"col": 4},{"file": 60,"line": 246,"col": 4},{"file": 60,"line": 437,"col": 4},{"file": 60,"line": 412,"col": 4},{"file": 60,"line": 711,"col": 4},{"file": 60,"line": 648,"col": 4},{"file": 60,"line": 566,"col": 4},{"file": 60,"line": 709,"col": 4},{"file": 60,"line": 231,"col": 4},{"file": 60,"line": 659,"col": 4},{"file": 60,"line": 624,"col": 4},{"file": 60,"line": 645,"col": 4},{"file": 60,"line": 427,"col": 4},{"file": 60,"line": 577,"col": 4},{"file": 60,"line": 25,"col": 4},{"file": 60,"line": 314,"col": 4},{"file": 60,"line": 340,"col": 4},{"file": 60,"line": 772,"col": 4},{"file": 60,"line": 398,"col": 4},{"file": 60,"line": 611,"col": 4},{"file": 60,"line": 327,"col": 4},{"file": 60,"line": 875,"col": 4},{"file": 60,"line": 85,"col": 4},{"file": 60,"line": 55,"col": 4},{"file": 60,"line": 230,"col": 4},{"file": 60,"line": 585,"col": 4},{"file": 60,"line": 58,"col": 4},{"file": 60,"line": 277,"col": 4,"docs": " Return the path with a volume GUID path instead of the drive name.\n"},{"file": 60,"line": 296,"col": 4},{"file": 60,"line": 629,"col": 4},{"file": 60,"line": 582,"col": 4},{"file": 60,"line": 739,"col": 4},{"file": 60,"line": 306,"col": 4},{"file": 60,"line": 587,"col": 4},{"file": 60,"line": 23,"col": 4},{"file": 60,"line": 486,"col": 4},{"file": 60,"line": 130,"col": 4},{"file": 60,"line": 226,"col": 4},{"file": 60,"line": 586,"col": 4},{"file": 60,"line": 26,"col": 4},{"file": 60,"line": 121,"col": 4},{"file": 60,"line": 405,"col": 4},{"file": 60,"line": 661,"col": 4},{"file": 60,"line": 558,"col": 4},{"file": 60,"line": 40,"col": 4},{"file": 60,"line": 337,"col": 4},{"file": 60,"line": 332,"col": 4},{"file": 60,"line": 691,"col": 4},{"file": 60,"line": 428,"col": 4},{"file": 60,"line": 302,"col": 4},{"file": 60,"line": 592,"col": 4},{"file": 60,"line": 439,"col": 4},{"file": 60,"line": 401,"col": 4},{"file": 60,"line": 232,"col": 4},{"file": 60,"line": 280,"col": 4,"docs": " Return the path with no drive information.\n"},{"file": 60,"line": 446,"col": 4},{"file": 60,"line": 403,"col": 4},{"file": 60,"line": 701,"col": 4},{"file": 60,"line": 242,"col": 4},{"file": 60,"line": 573,"col": 4},{"file": 60,"line": 579,"col": 4},{"file": 60,"line": 465,"col": 4},{"file": 60,"line": 36,"col": 4},{"file": 60,"line": 135,"col": 4},{"file": 60,"line": 626,"col": 4},{"file": 60,"line": 563,"col": 4},{"file": 60,"line": 347,"col": 4},{"file": 60,"line": 646,"col": 4},{"file": 60,"line": 271,"col": 4,"docs": " Return the opened file name (not normalized).\n"},{"file": 60,"line": 414,"col": 4},{"file": 60,"line": 238,"col": 4},{"file": 60,"line": 565,"col": 4},{"file": 60,"line": 274,"col": 4,"docs": " Return the path with the drive letter. This is the default.\n"},{"file": 60,"line": 402,"col": 4},{"file": 60,"line": 50,"col": 4},{"file": 60,"line": 362,"col": 4},{"file": 60,"line": 413,"col": 4},{"file": 60,"line": 420,"col": 4},{"file": 60,"line": 31,"col": 4},{"file": 60,"line": 366,"col": 4},{"file": 60,"line": 404,"col": 4},{"file": 60,"line": 868,"col": 4},{"file": 60,"line": 702,"col": 4},{"file": 60,"line": 64,"col": 4},{"file": 60,"line": 431,"col": 4},{"file": 60,"line": 310,"col": 4},{"file": 60,"line": 588,"col": 4},{"file": 60,"line": 48,"col": 4},{"file": 60,"line": 285,"col": 4},{"file": 60,"line": 363,"col": 4},{"file": 60,"line": 361,"col": 4},{"file": 60,"line": 441,"col": 4},{"file": 60,"line": 622,"col": 4},{"file": 60,"line": 642,"col": 4},{"file": 60,"line": 321,"col": 4},{"file": 60,"line": 237,"col": 4},{"file": 60,"line": 228,"col": 4},{"file": 60,"line": 508,"col": 4},{"file": 60,"line": 329,"col": 4},{"file": 60,"line": 672,"col": 4},{"file": 60,"line": 57,"col": 4},{"file": 60,"line": 650,"col": 4},{"file": 60,"line": 320,"col": 4},{"file": 60,"line": 770,"col": 4},{"file": 60,"line": 423,"col": 4},{"file": 60,"line": 395,"col": 4},{"file": 60,"line": 299,"col": 4},{"file": 60,"line": 848,"col": 4},{"file": 60,"line": 307,"col": 4},{"file": 60,"line": 19,"col": 4,"docs": " The standard error device. Initially, this is the active console screen buffer, CONOUT$.\n"},{"file": 60,"line": 424,"col": 4},{"file": 60,"line": 670,"col": 4},{"file": 60,"line": 351,"col": 4},{"file": 60,"line": 730,"col": 4},{"file": 60,"line": 298,"col": 4},{"file": 60,"line": 262,"col": 4},{"file": 60,"line": 243,"col": 4},{"file": 60,"line": 56,"col": 4},{"file": 60,"line": 705,"col": 4},{"file": 60,"line": 295,"col": 4},{"file": 60,"line": 39,"col": 4},{"file": 60,"line": 442,"col": 4},{"file": 60,"line": 633,"col": 4},{"file": 60,"line": 24,"col": 4},{"file": 60,"line": 348,"col": 4},{"file": 60,"line": 373,"col": 4},{"file": 60,"line": 430,"col": 4},{"file": 60,"line": 27,"col": 4},{"file": 60,"line": 352,"col": 4},{"file": 60,"line": 507,"col": 4},{"file": 60,"line": 214,"col": 4},{"file": 60,"line": 426,"col": 4},{"file": 60,"line": 51,"col": 4},{"file": 60,"line": 627,"col": 4},{"file": 60,"line": 593,"col": 4},{"file": 60,"line": 341,"col": 4},{"file": 60,"line": 726,"col": 4,"docs": " > The maximum path of 32,767 characters is approximate, because the \"\\\\?\\\"\n > prefix may be expanded to a longer string by the system at run time, and\n > this expansion applies to the total length.\n from https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#maximum-path-length-limitation\n"},{"file": 60,"line": 700,"col": 4},{"file": 60,"line": 342,"col": 4},{"file": 60,"line": 359,"col": 4},{"file": 60,"line": 13,"col": 4,"docs": " The standard input device. Initially, this is the console input buffer, CONIN$.\n"},{"file": 60,"line": 654,"col": 4},{"file": 60,"line": 620,"col": 4},{"file": 60,"line": 47,"col": 4},{"file": 60,"line": 560,"col": 4},{"file": 60,"line": 669,"col": 4},{"file": 60,"line": 656,"col": 4},{"file": 60,"line": 101,"col": 4},{"file": 60,"line": 596,"col": 4},{"file": 60,"line": 445,"col": 4},{"file": 60,"line": 411,"col": 4},{"file": 60,"line": 364,"col": 4},{"file": 60,"line": 782,"col": 4},{"file": 60,"line": 319,"col": 4},{"file": 60,"line": 447,"col": 4},{"file": 60,"line": 4,"col": 0},{"file": 60,"line": 3,"col": 0},{"file": 60,"line": 5,"col": 0},{"file": 60,"line": 2,"col": 0},{"file": 40,"line": 166,"col": 8,"docs": " Resets the timer value to 0/now.\n","fields": [10548]},{"file": 40,"line": 171,"col": 8,"docs": " Returns the current value of the timer in nanoseconds, then resets it\n","fields": [10549]},{"file": 40,"line": 111,"col": 4},{"file": 40,"line": 116,"col": 4,"docs": "At some point we may change our minds on RAW, but for now we're\n  sticking with posix standard MONOTONIC. For more information, see:\n  https://github.com/ziglang/zig/pull/933\n"},{"file": 61,"line": 9,"col": 4,"docs": " This API is non-allocating and non-fallible. The tradeoff is that users of\n this API must provide the storage for each `Progress.Node`.\n Initialize the struct directly, overriding these fields as desired:\n * `refresh_rate_ms`\n * `initial_delay_ms`\n"},{"file": 61,"line": 0,"col": 0},{"file": 61,"line": 2,"col": 0},{"file": 61,"line": 1,"col": 0},{"file": 7,"line": 132,"col": 8},{"file": 7,"line": 134,"col": 4},{"file": 62,"line": 157,"col": 4},{"file": 62,"line": 819,"col": 4,"docs": " A file time is a 64-bit value that represents the number of 100-nanosecond\n intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated\n Universal Time (UTC).\n This function returns the number of nanoseconds since the canonical epoch,\n which is the POSIX one (Jan 01, 1970 AD).\n","fields": [10550]},{"file": 62,"line": 135,"col": 4},{"file": 62,"line": 213,"col": 4,"fields": [10551,10552,10553,10554]},{"file": 62,"line": 183,"col": 4,"fields": [10555,10556]},{"file": 62,"line": 760,"col": 4,"fields": [10557]},{"file": 62,"line": 672,"col": 4},{"file": 62,"line": 648,"col": 4,"fields": []},{"file": 62,"line": 612,"col": 4},{"file": 62,"line": 286,"col": 4},{"file": 62,"line": 127,"col": 4,"fields": [10558,10559,10560]},{"file": 62,"line": 576,"col": 4},{"file": 62,"line": 163,"col": 4,"fields": [10561,10562]},{"file": 62,"line": 544,"col": 4,"fields": [10563,10564,10565,10566]},{"file": 62,"line": 410,"col": 4},{"file": 62,"line": 115,"col": 4},{"file": 62,"line": 412,"col": 4,"fields": [10567,10568,10569]},{"file": 62,"line": 28,"col": 4,"docs": " `builtin` is missing `subsystem` when the subsystem is automatically detected,\n so Zig standard library has the subsystem detection logic here. This should generally be\n used rather than `builtin.subsystem`.\n On non-windows targets, this is `null`.\n"},{"file": 62,"line": 371,"col": 4,"fields": [10570,10571,10572]},{"file": 62,"line": 418,"col": 4,"fields": [10573,10574,10575]},{"file": 62,"line": 537,"col": 4},{"file": 62,"line": 359,"col": 4},{"file": 62,"line": 16,"col": 4},{"file": 62,"line": 201,"col": 4,"docs": " Returns `true` if there was another file, `false` otherwise.\n","fields": [10576,10577]},{"file": 62,"line": 829,"col": 4,"fields": [10578]},{"file": 62,"line": 453,"col": 4,"fields": [10579]},{"file": 62,"line": 117,"col": 4,"fields": [10580,10581,10582]},{"file": 62,"line": 383,"col": 4},{"file": 62,"line": 243,"col": 4},{"file": 62,"line": 306,"col": 4},{"file": 62,"line": 17,"col": 4},{"file": 62,"line": 458,"col": 4,"fields": [10583]},{"file": 62,"line": 587,"col": 4,"fields": [10584]},{"file": 62,"line": 824,"col": 4,"fields": [10585]},{"file": 62,"line": 18,"col": 4},{"file": 62,"line": 730,"col": 4,"fields": [10586]},{"file": 62,"line": 652,"col": 4,"fields": [10587]},{"file": 62,"line": 432,"col": 4,"fields": [10588,10589]},{"file": 62,"line": 447,"col": 4},{"file": 62,"line": 636,"col": 4},{"file": 62,"line": 622,"col": 4},{"file": 62,"line": 614,"col": 4,"fields": [10590,10591]},{"file": 62,"line": 426,"col": 4},{"file": 62,"line": 331,"col": 4},{"file": 62,"line": 230,"col": 4,"fields": [10592,10593,10594,10595]},{"file": 62,"line": 228,"col": 4},{"file": 62,"line": 656,"col": 4},{"file": 62,"line": 22,"col": 4},{"file": 62,"line": 140,"col": 4,"docs": " Call RtlGenRandom() instead of CryptGetRandom() on Windows\n https://github.com/rust-lang-nursery/rand/issues/111\n https://bugzilla.mozilla.org/show_bug.cgi?id=504270\n","fields": [10596]},{"file": 62,"line": 582,"col": 4,"fields": [10597]},{"file": 62,"line": 719,"col": 4,"fields": [10598]},{"file": 62,"line": 175,"col": 4},{"file": 62,"line": 125,"col": 4},{"file": 62,"line": 714,"col": 4},{"file": 62,"line": 795,"col": 4,"fields": []},{"file": 62,"line": 764,"col": 4},{"file": 62,"line": 282,"col": 4,"fields": [10599]},{"file": 62,"line": 437,"col": 4,"fields": [10600,10601]},{"file": 62,"line": 843,"col": 4,"fields": [10602]},{"file": 62,"line": 523,"col": 4,"docs": " The SetFilePointerEx function with parameters to get the current offset.\n","fields": [10603]},{"file": 62,"line": 50,"col": 4},{"file": 62,"line": 779,"col": 4},{"file": 62,"line": 198,"col": 4},{"file": 62,"line": 361,"col": 4,"fields": [10604,10605,10606]},{"file": 62,"line": 835,"col": 4,"docs": " Converts a number of nanoseconds since the POSIX epoch to a Windows FILETIME.\n","fields": [10607]},{"file": 62,"line": 756,"col": 4,"fields": [10608,10609,10610]},{"file": 62,"line": 391,"col": 4,"fields": [10611]},{"file": 62,"line": 250,"col": 4,"fields": [10612,10613,10614,10615,10616]},{"file": 62,"line": 899,"col": 4,"docs": " Call this when you made a windows NtDll call\n and you get an unexpected status.\n","fields": [10617]},{"file": 62,"line": 396,"col": 4,"fields": [10618]},{"file": 62,"line": 211,"col": 4},{"file": 62,"line": 483,"col": 4},{"file": 62,"line": 781,"col": 4,"fields": [10619,10620,10621,10622]},{"file": 62,"line": 564,"col": 4},{"file": 62,"line": 13,"col": 4},{"file": 62,"line": 766,"col": 4,"fields": [10623]},{"file": 62,"line": 14,"col": 4},{"file": 62,"line": 646,"col": 4},{"file": 62,"line": 468,"col": 4},{"file": 62,"line": 512,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_END`.\n","fields": [10624,10625]},{"file": 62,"line": 15,"col": 4},{"file": 62,"line": 74,"col": 4,"fields": [10626,10627,10628,10629,10630,10631,10632]},{"file": 62,"line": 679,"col": 4,"fields": [10633,10634,10635,10636,10637,10638,10639,10640,10641,10642]},{"file": 62,"line": 9,"col": 0},{"file": 62,"line": 10,"col": 0},{"file": 62,"line": 7,"col": 0},{"file": 62,"line": 11,"col": 0},{"file": 62,"line": 6,"col": 0},{"file": 62,"line": 600,"col": 0},{"file": 62,"line": 8,"col": 0},{"file": 3,"line": 5,"col": 4,"fields": []},{"file": 3,"line": 2,"col": 0},{"file": 3,"line": 1,"col": 0},{"file": 3,"line": 0,"col": 0},{"file": 3,"line": 3,"col": 0},{"file": 63,"line": 58,"col": 4,"docs": "\n","fields": [10643]},{"file": 63,"line": 155,"col": 4,"fields": [10644]},{"file": 63,"line": 338,"col": 4,"docs": "\n","fields": [10645]},{"file": 63,"line": 22,"col": 4,"fields": [10646]},{"file": 63,"line": 300,"col": 4,"docs": "\n","fields": [10647]},{"file": 63,"line": 197,"col": 4,"docs": "\n","fields": [10648]},{"file": 63,"line": 15,"col": 4},{"file": 63,"line": 244,"col": 4,"docs": "\n","fields": [10649]},{"file": 63,"line": 212,"col": 4,"docs": "\n","fields": [10650]},{"file": 63,"line": 277,"col": 4,"docs": "\n","fields": [10651]},{"file": 63,"line": 134,"col": 4,"docs": "\n","fields": [10652]},{"file": 63,"line": 176,"col": 4,"docs": "\n","fields": [10653]},{"file": 63,"line": 21,"col": 4,"docs": "\n"},{"file": 63,"line": 82,"col": 4,"docs": "\n","fields": [10654]},{"file": 63,"line": 1,"col": 0},{"file": 63,"line": 0,"col": 0},{"file": 63,"line": 3,"col": 0},{"file": 63,"line": 7,"col": 0},{"file": 63,"line": 4,"col": 0},{"file": 63,"line": 11,"col": 0,"fields": [10655]},{"file": 63,"line": 5,"col": 0},{"file": 63,"line": 2,"col": 0},{"file": 64,"line": 62,"col": 4,"fields": [10656]},{"file": 64,"line": 246,"col": 4},{"file": 64,"line": 141,"col": 4},{"file": 64,"line": 100,"col": 4},{"file": 64,"line": 11,"col": 4},{"file": 64,"line": 0,"col": 0},{"file": 64,"line": 232,"col": 0,"fields": [10657,10658,10659,10660]},{"file": 64,"line": 22,"col": 0},{"file": 64,"line": 7,"col": 0},{"file": 64,"line": 46,"col": 0},{"file": 64,"line": 8,"col": 0},{"file": 64,"line": 9,"col": 0},{"file": 64,"line": 2,"col": 0},{"file": 64,"line": 4,"col": 0},{"file": 64,"line": 53,"col": 0,"fields": [10661]},{"file": 64,"line": 6,"col": 0},{"file": 64,"line": 5,"col": 0},{"file": 64,"line": 3,"col": 0},{"file": 65,"line": 8,"col": 4},{"file": 65,"line": 0,"col": 0},{"file": 65,"line": 1,"col": 0},{"file": 65,"line": 5,"col": 0},{"file": 65,"line": 2,"col": 0},{"file": 65,"line": 4,"col": 0},{"file": 65,"line": 6,"col": 0},{"file": 65,"line": 3,"col": 0},{"file": 66,"line": 6,"col": 4},{"file": 66,"line": 0,"col": 0},{"file": 66,"line": 3,"col": 0},{"file": 66,"line": 4,"col": 0},{"file": 66,"line": 2,"col": 0},{"file": 66,"line": 1,"col": 0},{"file": 68,"line": 3,"col": 0},{"file": 69,"line": 480,"col": 4,"fields": [10662,10663,10664]},{"file": 69,"line": 225,"col": 4,"fields": [10665,10666]},{"file": 69,"line": 978,"col": 4},{"file": 69,"line": 427,"col": 4,"docs": " See also `clone` (from the arch-specific include)\n","fields": [10667,10668]},{"file": 69,"line": 436,"col": 4,"docs": " Can only be called on 32 bit systems. For 64 bit see `lseek`.\n","fields": [10669,10670,10671,10672]},{"file": 88,"line": 92,"col": 4,"fields": []},{"file": 69,"line": 573,"col": 4,"fields": []},{"file": 69,"line": 82,"col": 4,"fields": []},{"file": 69,"line": 1072,"col": 4,"fields": [10673,10674,10675,10676,10677]},{"file": 69,"line": 819,"col": 4,"fields": [10678,10679,10680]},{"file": 88,"line": 10,"col": 4,"fields": [10681,10682]},{"file": 69,"line": 108,"col": 4,"fields": [10683,10684,10685,10686]},{"file": 69,"line": 138,"col": 4,"fields": [10687]},{"file": 69,"line": 525,"col": 4,"fields": [10688,10689]},{"file": 69,"line": 946,"col": 4,"fields": [10690]},{"file": 69,"line": 739,"col": 4,"fields": [10691,10692,10693,10694,10695]},{"file": 69,"line": 862,"col": 4,"fields": [10696,10697,10698,10699,10700]},{"file": 69,"line": 95,"col": 4,"docs": " This must be inline, and inline call the syscall function, because if the\n child does a return it will clobber the parent's stack.\n It is advised to avoid this function and use clone instead, because\n the compiler is not aware of how vfork affects control flow and you may\n see different results in optimized builds.\n","fields": []},{"file": 69,"line": 891,"col": 4,"fields": [10701,10702,10703,10704]},{"file": 69,"line": 926,"col": 4,"fields": [10705,10706]},{"file": 69,"line": 653,"col": 4,"fields": [10707,10708]},{"file": 69,"line": 799,"col": 4,"fields": [10709,10710]},{"file": 69,"line": 471,"col": 4,"fields": [10711]},{"file": 69,"line": 120,"col": 4,"fields": [10712,10713,10714]},{"file": 69,"line": 28,"col": 4,"docs": " Set by startup code, used by `getauxval`.\n"},{"file": 69,"line": 174,"col": 4,"fields": [10715,10716,10717]},{"file": 69,"line": 221,"col": 4,"fields": [10718,10719,10720]},{"file": 69,"line": 151,"col": 4,"fields": [10721,10722,10723]},{"file": 69,"line": 613,"col": 4,"fields": [10724,10725,10726]},{"file": 69,"line": 731,"col": 4,"fields": [10727,10728,10729]},{"file": 69,"line": 73,"col": 4,"fields": [10730]},{"file": 88,"line": 52,"col": 4,"fields": [10731,10732,10733,10734,10735,10736]},{"file": 69,"line": 306,"col": 4,"fields": [10737,10738,10739]},{"file": 69,"line": 129,"col": 4,"fields": [10740,10741,10742]},{"file": 69,"line": 452,"col": 4,"fields": [10743]},{"file": 69,"line": 146,"col": 4,"fields": [10744,10745]},{"file": 69,"line": 448,"col": 4,"docs": " Can only be called on 64 bit systems. For 32 bit see `llseek`.\n","fields": [10746,10747,10748]},{"file": 69,"line": 999,"col": 4,"fields": [10749,10750]},{"file": 69,"line": 339,"col": 4,"fields": [10751,10752]},{"file": 69,"line": 645,"col": 4,"fields": [10753,10754]},{"file": 69,"line": 836,"col": 4,"fields": [10755,10756]},{"file": 69,"line": 462,"col": 4,"fields": [10757,10758,10759]},{"file": 69,"line": 921,"col": 4,"fields": [10760,10761]},{"file": 88,"line": 2,"col": 4,"fields": [10762]},{"file": 69,"line": 629,"col": 4,"fields": [10763,10764,10765]},{"file": 69,"line": 896,"col": 4,"fields": [10766,10767,10768,10769]},{"file": 69,"line": 916,"col": 4,"fields": [10770,10771,10772,10773,10774]},{"file": 69,"line": 701,"col": 4,"fields": [10775]},{"file": 69,"line": 807,"col": 4,"fields": [10776,10777]},{"file": 69,"line": 983,"col": 4,"fields": [10778,10779]},{"file": 69,"line": 193,"col": 4,"fields": [10780,10781,10782,10783,10784,10785]},{"file": 69,"line": 537,"col": 4,"fields": [10786,10787]},{"file": 69,"line": 942,"col": 4,"fields": []},{"file": 69,"line": 533,"col": 4,"fields": [10788,10789]},{"file": 69,"line": 179,"col": 4,"fields": [10790,10791,10792,10793,10794]},{"file": 69,"line": 589,"col": 4,"fields": []},{"file": 69,"line": 669,"col": 4,"fields": [10795,10796,10797]},{"file": 69,"line": 112,"col": 4,"fields": [10798,10799,10800]},{"file": 69,"line": 906,"col": 4,"fields": [10801,10802,10803,10804,10805]},{"file": 69,"line": 815,"col": 4,"fields": [10806,10807,10808,10809]},{"file": 69,"line": 396,"col": 4,"fields": [10810,10811,10812]},{"file": 69,"line": 256,"col": 4,"fields": [10813,10814,10815]},{"file": 69,"line": 597,"col": 4,"fields": []},{"file": 69,"line": 854,"col": 4,"fields": [10816,10817,10818,10819]},{"file": 69,"line": 541,"col": 4,"fields": [10820]},{"file": 69,"line": 116,"col": 4,"fields": [10821,10822]},{"file": 69,"line": 529,"col": 4,"fields": [10823,10824]},{"file": 69,"line": 901,"col": 4,"fields": [10825,10826,10827,10828]},{"file": 69,"line": 950,"col": 4,"fields": [10829,10830,10831,10832]},{"file": 69,"line": 827,"col": 4,"fields": [10833,10834]},{"file": 69,"line": 1003,"col": 4,"fields": [10835,10836]},{"file": 69,"line": 288,"col": 4,"fields": [10837]},{"file": 69,"line": 416,"col": 4,"fields": [10838,10839,10840,10841]},{"file": 69,"line": 362,"col": 4,"fields": [10842,10843,10844,10845]},{"file": 69,"line": 42,"col": 4,"docs": " Get the errno from a syscall return value, or 0 for no error.\n","fields": [10846]},{"file": 69,"line": 791,"col": 4,"fields": [10847,10848,10849]},{"file": 88,"line": 40,"col": 4,"fields": [10850,10851,10852,10853,10854]},{"file": 69,"line": 316,"col": 4,"fields": [10855,10856]},{"file": 69,"line": 882,"col": 4,"fields": [10857,10858,10859]},{"file": 69,"line": 325,"col": 4,"fields": [10860,10861,10862,10863]},{"file": 69,"line": 995,"col": 4,"fields": [10864,10865]},{"file": 69,"line": 787,"col": 4,"fields": [10866,10867,10868]},{"file": 69,"line": 931,"col": 4,"fields": [10869,10870]},{"file": 69,"line": 142,"col": 4,"fields": [10871,10872,10873]},{"file": 69,"line": 184,"col": 4,"fields": [10874]},{"file": 69,"line": 1014,"col": 4,"fields": [10875,10876,10877]},{"file": 88,"line": 29,"col": 4,"fields": [10878,10879,10880,10881]},{"file": 69,"line": 63,"col": 4,"fields": [10882,10883,10884]},{"file": 69,"line": 673,"col": 4,"fields": [10885,10886,10887]},{"file": 69,"line": 877,"col": 4,"fields": [10888,10889,10890]},{"file": 69,"line": 422,"col": 4,"docs": " See also `clone` (from the arch-specific include)\n","fields": [10891,10892,10893,10894,10895]},{"file": 69,"line": 260,"col": 4,"fields": [10896,10897,10898]},{"file": 69,"line": 457,"col": 4,"fields": [10899]},{"file": 69,"line": 431,"col": 4,"fields": [10900]},{"file": 69,"line": 99,"col": 4,"fields": [10901,10902]},{"file": 69,"line": 484,"col": 4,"fields": [10903,10904,10905]},{"file": 69,"line": 803,"col": 4,"fields": [10906,10907,10908]},{"file": 69,"line": 1068,"col": 4,"fields": [10909,10910]},{"file": 69,"line": 311,"col": 4,"fields": [10911,10912,10913,10914]},{"file": 69,"line": 747,"col": 4,"fields": [10915,10916,10917,10918]},{"file": 69,"line": 795,"col": 4,"fields": [10919,10920,10921,10922,10923,10924]},{"file": 69,"line": 974,"col": 4,"fields": [10925,10926]},{"file": 69,"line": 581,"col": 4,"fields": []},{"file": 69,"line": 970,"col": 4,"fields": [10927,10928]},{"file": 69,"line": 31,"col": 4,"docs": " See `std.elf` for the constants.\n","fields": [10929]},{"file": 69,"line": 347,"col": 4,"fields": [10930,10931,10932,10933]},{"file": 69,"line": 297,"col": 4,"fields": [10934,10935]},{"file": 69,"line": 104,"col": 4,"fields": [10936,10937,10938,10939]},{"file": 69,"line": 244,"col": 4,"fields": [10940,10941,10942,10943,10944]},{"file": 69,"line": 954,"col": 4,"fields": [10945,10946,10947,10948]},{"file": 69,"line": 343,"col": 4,"fields": [10949,10950,10951]},{"file": 69,"line": 411,"col": 4,"fields": [10952,10953]},{"file": 69,"line": 549,"col": 4,"fields": [10954]},{"file": 69,"line": 493,"col": 4,"fields": [10955,10956]},{"file": 69,"line": 68,"col": 4,"fields": [10957]},{"file": 69,"line": 713,"col": 4,"fields": [10958,10959]},{"file": 88,"line": 19,"col": 4,"fields": [10960,10961,10962]},{"file": 69,"line": 47,"col": 4,"fields": [10963,10964]},{"file": 69,"line": 621,"col": 4,"fields": [10965,10966,10967]},{"file": 69,"line": 661,"col": 4,"fields": []},{"file": 88,"line": 88,"col": 4,"docs": " This matches the libc clone function.\n","fields": [10968,10969,10970,10971,10972,10973,10974]},{"file": 69,"line": 160,"col": 4,"fields": [10975,10976,10977,10978]},{"file": 69,"line": 637,"col": 4,"fields": [10979,10980,10981]},{"file": 69,"line": 991,"col": 4,"fields": [10982]},{"file": 69,"line": 1007,"col": 4,"fields": [10983]},{"file": 69,"line": 466,"col": 4,"fields": [10984,10985]},{"file": 69,"line": 233,"col": 4,"fields": [10986,10987,10988,10989]},{"file": 69,"line": 557,"col": 4,"fields": [10990,10991]},{"file": 69,"line": 78,"col": 4,"fields": [10992,10993,10994]},{"file": 69,"line": 935,"col": 4,"fields": [10995,10996,10997]},{"file": 69,"line": 823,"col": 4,"fields": [10998,10999,11000,11001]},{"file": 69,"line": 705,"col": 4,"fields": [11002]},{"file": 69,"line": 264,"col": 4,"fields": [11003,11004,11005,11006]},{"file": 69,"line": 911,"col": 4,"fields": [11007,11008,11009,11010,11011]},{"file": 69,"line": 718,"col": 4,"fields": [11012,11013]},{"file": 69,"line": 727,"col": 4,"fields": [11014,11015,11016]},{"file": 69,"line": 743,"col": 4,"fields": [11017,11018,11019]},{"file": 69,"line": 275,"col": 4,"fields": [11020,11021,11022,11023,11024]},{"file": 69,"line": 709,"col": 4,"fields": [11025]},{"file": 69,"line": 384,"col": 4,"fields": [11026,11027,11028,11029,11030]},{"file": 69,"line": 15,"col": 4},{"file": 69,"line": 886,"col": 4,"fields": [11031,11032,11033]},{"file": 69,"line": 605,"col": 4,"fields": [11034]},{"file": 69,"line": 845,"col": 4,"fields": [11035,11036]},{"file": 69,"line": 565,"col": 4,"fields": [11037,11038]},{"file": 88,"line": 65,"col": 4,"fields": [11039,11040,11041,11042,11043,11044,11045]},{"file": 69,"line": 229,"col": 4,"fields": [11046,11047,11048]},{"file": 69,"line": 735,"col": 4,"fields": [11049,11050,11051,11052,11053]},{"file": 88,"line": 90,"col": 4},{"file": 69,"line": 352,"col": 4,"fields": [11054,11055]},{"file": 69,"line": 521,"col": 4,"fields": [11056,11057]},{"file": 69,"line": 165,"col": 4,"fields": [11058,11059]},{"file": 69,"line": 665,"col": 4,"fields": []},{"file": 69,"line": 723,"col": 4,"fields": [11060,11061,11062]},{"file": 69,"line": 189,"col": 4,"fields": [11063,11064]},{"file": 69,"line": 609,"col": 4,"fields": [11065]},{"file": 69,"line": 958,"col": 4,"fields": [11066,11067,11068,11069,11070]},{"file": 69,"line": 25,"col": 4},{"file": 69,"line": 811,"col": 4,"fields": [11071,11072,11073,11074,11075,11076]},{"file": 69,"line": 1076,"col": 4,"fields": [11077,11078,11079,11080]},{"file": 69,"line": 329,"col": 4,"fields": [11081]},{"file": 69,"line": 987,"col": 4,"fields": [11082,11083,11084,11085]},{"file": 69,"line": 10,"col": 0},{"file": 69,"line": 9,"col": 0},{"file": 69,"line": 8,"col": 0},{"file": 69,"line": 491,"col": 0},{"file": 69,"line": 13,"col": 0},{"file": 69,"line": 12,"col": 0},{"file": 69,"line": 1012,"col": 0},{"file": 69,"line": 11,"col": 0},{"file": 69,"line": 508,"col": 0,"fields": [11086,11087]},{"file": 69,"line": 488,"col": 0},{"file": 69,"line": 7,"col": 0},{"file": 13,"line": 1210,"col": 4,"fields": [11088,11089]},{"file": 13,"line": 1206,"col": 4,"docs": " Returns the address from the macho file\n","fields": [11090]},{"file": 70,"line": 9,"col": 4,"docs": " A buffer that allocates memory and maintains a null byte at the end.\n"},{"file": 70,"line": 0,"col": 0},{"file": 70,"line": 3,"col": 0},{"file": 70,"line": 6,"col": 0},{"file": 70,"line": 1,"col": 0},{"file": 70,"line": 4,"col": 0},{"file": 70,"line": 5,"col": 0},{"file": 70,"line": 2,"col": 0},{"file": 71,"line": 736,"col": 4,"docs": " Caller must free result.\n","fields": [11091,11092]},{"file": 71,"line": 18,"col": 4},{"file": 71,"line": 13,"col": 0},{"file": 71,"line": 701,"col": 0,"fields": [11093,11094,11095]},{"file": 71,"line": 15,"col": 0},{"file": 71,"line": 16,"col": 0},{"file": 71,"line": 11,"col": 0},{"file": 71,"line": 0,"col": 0},{"file": 71,"line": 718,"col": 0,"fields": [11096,11097]},{"file": 71,"line": 691,"col": 0,"fields": [11098,11099,11100]},{"file": 71,"line": 616,"col": 0,"fields": [11101,11102,11103,11104,11105,11106]},{"file": 71,"line": 1,"col": 0},{"file": 71,"line": 5,"col": 0},{"file": 71,"line": 10,"col": 0},{"file": 71,"line": 686,"col": 0,"fields": [11107,11108]},{"file": 71,"line": 711,"col": 0,"fields": [11109]},{"file": 71,"line": 12,"col": 0},{"file": 71,"line": 4,"col": 0},{"file": 71,"line": 2,"col": 0},{"file": 71,"line": 7,"col": 0},{"file": 71,"line": 730,"col": 0,"fields": [11110]},{"file": 71,"line": 725,"col": 0,"fields": [11111,11112]},{"file": 71,"line": 8,"col": 0},{"file": 71,"line": 650,"col": 0,"docs": " Caller must dealloc.\n Guarantees a null byte at result[result.len].\n","fields": [11113,11114]},{"file": 71,"line": 3,"col": 0},{"file": 71,"line": 723,"col": 0},{"file": 71,"line": 14,"col": 0},{"file": 71,"line": 6,"col": 0},{"file": 71,"line": 9,"col": 0},{"file": 72,"line": 9,"col": 4},{"file": 72,"line": 14,"col": 4},{"file": 72,"line": 417,"col": 4},{"file": 72,"line": 1,"col": 0},{"file": 72,"line": 5,"col": 0},{"file": 72,"line": 3,"col": 0},{"file": 72,"line": 0,"col": 0},{"file": 72,"line": 4,"col": 0},{"file": 72,"line": 2,"col": 0},{"file": 72,"line": 7,"col": 0},{"file": 72,"line": 6,"col": 0},{"file": 27,"line": 395,"col": 8,"docs": " TODO runtime crash when I make the actual type of Flags this\n"},{"file": 73,"line": 8,"col": 4,"docs": " BufMap copies keys and values before they go into the map, and\n frees them when they get removed.\n"},{"file": 73,"line": 0,"col": 0},{"file": 73,"line": 3,"col": 0},{"file": 73,"line": 4,"col": 0},{"file": 73,"line": 2,"col": 0},{"file": 73,"line": 1,"col": 0},{"file": 74,"line": 7,"col": 4,"docs": " Describes how pointer types should be hashed.\n"},{"file": 74,"line": 55,"col": 4,"docs": " Helper function to hash a set of contiguous objects, from an array or slice.\n","fields": [11115,11116,11117]},{"file": 74,"line": 23,"col": 4,"docs": " Helper function to hash a pointer and mutate the strategy if needed.\n","fields": [11118,11119,11120]},{"file": 74,"line": 1,"col": 0},{"file": 74,"line": 200,"col": 0,"fields": [11121]},{"file": 74,"line": 184,"col": 0},{"file": 74,"line": 186,"col": 0,"fields": [11122]},{"file": 74,"line": 0,"col": 0},{"file": 74,"line": 207,"col": 0,"fields": [11123]},{"file": 74,"line": 193,"col": 0,"fields": [11124]},{"file": 74,"line": 4,"col": 0},{"file": 74,"line": 2,"col": 0},{"file": 74,"line": 183,"col": 0},{"file": 74,"line": 3,"col": 0},{"file": 76,"line": 6,"col": 4},{"file": 76,"line": 1,"col": 0},{"file": 76,"line": 0,"col": 0},{"file": 76,"line": 3,"col": 0},{"file": 76,"line": 2,"col": 0},{"file": 76,"line": 4,"col": 0},{"file": 47,"line": 11,"col": 8},{"file": 47,"line": 12,"col": 8},{"file": 77,"line": 1,"col": 0},{"file": 77,"line": 124,"col": 0},{"file": 77,"line": 85,"col": 0},{"file": 77,"line": 11,"col": 0},{"file": 77,"line": 3,"col": 0},{"file": 77,"line": 0,"col": 0},{"file": 77,"line": 6,"col": 0},{"file": 77,"line": 8,"col": 0},{"file": 77,"line": 4,"col": 0},{"file": 77,"line": 7,"col": 0},{"file": 77,"line": 45,"col": 0},{"file": 77,"line": 9,"col": 0},{"file": 78,"line": 1,"col": 0},{"file": 78,"line": 591,"col": 0},{"file": 78,"line": 469,"col": 0,"fields": [11125,11126,11127]},{"file": 78,"line": 501,"col": 0,"fields": [11128,11129,11130]},{"file": 78,"line": 12,"col": 0},{"file": 78,"line": 467,"col": 0},{"file": 78,"line": 3,"col": 0},{"file": 78,"line": 11,"col": 0},{"file": 78,"line": 0,"col": 0},{"file": 78,"line": 643,"col": 0,"fields": [11131,11132]},{"file": 78,"line": 2,"col": 0},{"file": 78,"line": 9,"col": 0},{"file": 78,"line": 5,"col": 0},{"file": 78,"line": 489,"col": 0,"fields": [11133,11134]},{"file": 78,"line": 6,"col": 0},{"file": 78,"line": 7,"col": 0},{"file": 78,"line": 590,"col": 0},{"file": 78,"line": 589,"col": 0},{"file": 78,"line": 13,"col": 0},{"file": 78,"line": 4,"col": 0},{"file": 78,"line": 14,"col": 0},{"file": 79,"line": 5,"col": 0},{"file": 79,"line": 1,"col": 0},{"file": 79,"line": 1202,"col": 0},{"file": 79,"line": 8,"col": 0},{"file": 79,"line": 4,"col": 0},{"file": 79,"line": 0,"col": 0},{"file": 79,"line": 6,"col": 0},{"file": 79,"line": 7,"col": 0},{"file": 79,"line": 2,"col": 0},{"file": 79,"line": 9,"col": 0},{"file": 79,"line": 11,"col": 0},{"file": 79,"line": 1201,"col": 0},{"file": 79,"line": 1200,"col": 0},{"file": 79,"line": 3,"col": 0},{"file": 54,"line": 14,"col": 8},{"file": 54,"line": 11,"col": 8},{"file": 54,"line": 10,"col": 8},{"file": 54,"line": 12,"col": 8},{"file": 80,"line": 0,"col": 0},{"file": 80,"line": 1,"col": 0},{"file": 80,"line": 23,"col": 0,"docs": " Get the systems huge page size if huge pages are supported, else null\n"},{"file": 80,"line": 3,"col": 0},{"file": 80,"line": 17,"col": 0,"docs": " Dynamic, true system page size\n"},{"file": 80,"line": 2,"col": 0},{"file": 81,"line": 0,"col": 0},{"file": 81,"line": 1,"col": 0},{"file": 81,"line": 5,"col": 0},{"file": 81,"line": 2,"col": 0},{"file": 81,"line": 4,"col": 0},{"file": 81,"line": 43,"col": 8},{"file": 81,"line": 13,"col": 8},{"file": 81,"line": 73,"col": 8},{"file": 81,"line": 89,"col": 8,"fields": [11135,11136]},{"file": 81,"line": 87,"col": 8},{"file": 81,"line": 93,"col": 8},{"file": 81,"line": 15,"col": 16},{"file": 1,"line": 287,"col": 12},{"file": 1,"line": 396,"col": 12},{"file": 56,"line": 206,"col": 8},{"file": 56,"line": 219,"col": 8},{"file": 58,"line": 674,"col": 8},{"file": 58,"line": 678,"col": 8},{"file": 58,"line": 676,"col": 8},{"file": 58,"line": 683,"col": 8},{"file": 58,"line": 672,"col": 8},{"file": 58,"line": 680,"col": 8},{"file": 58,"line": 679,"col": 8},{"file": 58,"line": 677,"col": 8},{"file": 58,"line": 688,"col": 8},{"file": 58,"line": 675,"col": 8},{"file": 58,"line": 684,"col": 8},{"file": 58,"line": 681,"col": 8},{"file": 58,"line": 673,"col": 8},{"file": 58,"line": 685,"col": 8},{"file": 58,"line": 689,"col": 8},{"file": 58,"line": 687,"col": 8},{"file": 58,"line": 682,"col": 8},{"file": 58,"line": 686,"col": 8},{"file": 82,"line": 27,"col": 4},{"file": 82,"line": 196,"col": 4},{"file": 82,"line": 10,"col": 4},{"file": 82,"line": 28,"col": 4},{"file": 82,"line": 8,"col": 4},{"file": 82,"line": 62,"col": 4},{"file": 82,"line": 1,"col": 0},{"file": 82,"line": 516,"col": 0},{"file": 82,"line": 662,"col": 0,"fields": [11137,11138]},{"file": 82,"line": 602,"col": 0,"fields": [11139,11140,11141]},{"file": 82,"line": 640,"col": 0,"fields": [11142,11143,11144]},{"file": 82,"line": 651,"col": 0,"fields": [11145,11146]},{"file": 82,"line": 0,"col": 0},{"file": 82,"line": 4,"col": 0},{"file": 82,"line": 5,"col": 0},{"file": 82,"line": 536,"col": 0},{"file": 82,"line": 629,"col": 0,"fields": [11147,11148,11149]},{"file": 82,"line": 618,"col": 0,"fields": [11150,11151]},{"file": 82,"line": 2,"col": 0},{"file": 82,"line": 576,"col": 0,"fields": [11152,11153,11154,11155,11156]},{"file": 82,"line": 6,"col": 0},{"file": 82,"line": 565,"col": 0,"fields": [11157,11158,11159]},{"file": 82,"line": 589,"col": 0,"fields": [11160,11161,11162,11163,11164]},{"file": 82,"line": 559,"col": 0,"fields": [11165]},{"file": 82,"line": 547,"col": 0},{"file": 82,"line": 537,"col": 0},{"file": 83,"line": 54,"col": 4},{"file": 83,"line": 28,"col": 4},{"file": 83,"line": 72,"col": 4},{"file": 83,"line": 27,"col": 4},{"file": 83,"line": 32,"col": 4},{"file": 83,"line": 68,"col": 4},{"file": 83,"line": 44,"col": 4},{"file": 83,"line": 9,"col": 4},{"file": 83,"line": 16,"col": 4},{"file": 83,"line": 64,"col": 4},{"file": 83,"line": 101,"col": 4},{"file": 83,"line": 52,"col": 4},{"file": 83,"line": 26,"col": 4},{"file": 83,"line": 110,"col": 4},{"file": 83,"line": 76,"col": 4},{"file": 83,"line": 8,"col": 4},{"file": 83,"line": 3,"col": 4},{"file": 83,"line": 99,"col": 4},{"file": 83,"line": 36,"col": 4},{"file": 83,"line": 59,"col": 4},{"file": 83,"line": 2,"col": 4},{"file": 83,"line": 121,"col": 4},{"file": 83,"line": 43,"col": 4},{"file": 83,"line": 90,"col": 4},{"file": 83,"line": 114,"col": 4},{"file": 83,"line": 122,"col": 4},{"file": 83,"line": 49,"col": 4},{"file": 83,"line": 0,"col": 4},{"file": 83,"line": 22,"col": 4},{"file": 83,"line": 131,"col": 4},{"file": 83,"line": 39,"col": 4},{"file": 83,"line": 117,"col": 4},{"file": 83,"line": 123,"col": 4},{"file": 83,"line": 12,"col": 4},{"file": 83,"line": 65,"col": 4},{"file": 83,"line": 5,"col": 4},{"file": 83,"line": 31,"col": 4},{"file": 83,"line": 91,"col": 4},{"file": 83,"line": 70,"col": 4},{"file": 83,"line": 86,"col": 4},{"file": 83,"line": 132,"col": 4},{"file": 83,"line": 124,"col": 4},{"file": 83,"line": 13,"col": 4},{"file": 83,"line": 35,"col": 4},{"file": 83,"line": 48,"col": 4},{"file": 83,"line": 116,"col": 4},{"file": 83,"line": 40,"col": 4},{"file": 83,"line": 107,"col": 4},{"file": 83,"line": 113,"col": 4},{"file": 83,"line": 88,"col": 4},{"file": 83,"line": 37,"col": 4},{"file": 83,"line": 51,"col": 4},{"file": 83,"line": 74,"col": 4},{"file": 83,"line": 18,"col": 4},{"file": 83,"line": 19,"col": 4},{"file": 83,"line": 138,"col": 4},{"file": 83,"line": 119,"col": 4},{"file": 83,"line": 20,"col": 4},{"file": 83,"line": 111,"col": 4},{"file": 83,"line": 112,"col": 4},{"file": 83,"line": 21,"col": 4},{"file": 83,"line": 97,"col": 4},{"file": 83,"line": 7,"col": 4},{"file": 83,"line": 11,"col": 4},{"file": 83,"line": 109,"col": 4},{"file": 83,"line": 98,"col": 4},{"file": 83,"line": 6,"col": 4},{"file": 83,"line": 129,"col": 4},{"file": 83,"line": 81,"col": 4},{"file": 83,"line": 42,"col": 4},{"file": 83,"line": 46,"col": 4},{"file": 83,"line": 108,"col": 4},{"file": 83,"line": 127,"col": 4},{"file": 83,"line": 136,"col": 4},{"file": 83,"line": 1,"col": 4},{"file": 83,"line": 30,"col": 4},{"file": 83,"line": 60,"col": 4},{"file": 83,"line": 17,"col": 4},{"file": 83,"line": 45,"col": 4},{"file": 83,"line": 133,"col": 4},{"file": 83,"line": 55,"col": 4},{"file": 83,"line": 53,"col": 4},{"file": 83,"line": 71,"col": 4},{"file": 83,"line": 102,"col": 4},{"file": 83,"line": 25,"col": 4},{"file": 83,"line": 66,"col": 4},{"file": 83,"line": 77,"col": 4},{"file": 83,"line": 73,"col": 4},{"file": 83,"line": 103,"col": 4},{"file": 83,"line": 104,"col": 4},{"file": 83,"line": 78,"col": 4},{"file": 83,"line": 34,"col": 4},{"file": 83,"line": 92,"col": 4},{"file": 83,"line": 94,"col": 4},{"file": 83,"line": 95,"col": 4},{"file": 83,"line": 67,"col": 4},{"file": 83,"line": 56,"col": 4},{"file": 83,"line": 69,"col": 4},{"file": 83,"line": 106,"col": 4},{"file": 83,"line": 47,"col": 4},{"file": 83,"line": 80,"col": 4},{"file": 83,"line": 125,"col": 4},{"file": 83,"line": 63,"col": 4},{"file": 83,"line": 96,"col": 4},{"file": 83,"line": 85,"col": 4},{"file": 83,"line": 87,"col": 4},{"file": 83,"line": 10,"col": 4},{"file": 83,"line": 105,"col": 4},{"file": 83,"line": 38,"col": 4},{"file": 83,"line": 128,"col": 4},{"file": 83,"line": 29,"col": 4},{"file": 83,"line": 89,"col": 4},{"file": 83,"line": 130,"col": 4},{"file": 83,"line": 134,"col": 4},{"file": 83,"line": 79,"col": 4},{"file": 83,"line": 135,"col": 4},{"file": 83,"line": 139,"col": 4},{"file": 83,"line": 82,"col": 4},{"file": 83,"line": 83,"col": 4},{"file": 83,"line": 75,"col": 4},{"file": 83,"line": 84,"col": 4},{"file": 83,"line": 118,"col": 4},{"file": 83,"line": 62,"col": 4},{"file": 83,"line": 4,"col": 4},{"file": 83,"line": 14,"col": 4},{"file": 83,"line": 137,"col": 4},{"file": 83,"line": 23,"col": 4},{"file": 83,"line": 41,"col": 4},{"file": 83,"line": 57,"col": 4},{"file": 83,"line": 115,"col": 4},{"file": 83,"line": 58,"col": 4},{"file": 83,"line": 100,"col": 4},{"file": 83,"line": 61,"col": 4},{"file": 83,"line": 126,"col": 4},{"file": 83,"line": 93,"col": 4},{"file": 83,"line": 120,"col": 4},{"file": 83,"line": 15,"col": 4},{"file": 83,"line": 24,"col": 4},{"file": 83,"line": 33,"col": 4},{"file": 83,"line": 50,"col": 4},{"file": 84,"line": 54,"col": 4},{"file": 84,"line": 177,"col": 4},{"file": 84,"line": 190,"col": 4},{"file": 84,"line": 20,"col": 4},{"file": 84,"line": 93,"col": 4},{"file": 84,"line": 174,"col": 4},{"file": 84,"line": 99,"col": 4},{"file": 84,"line": 49,"col": 4},{"file": 84,"line": 19,"col": 4},{"file": 84,"line": 64,"col": 4},{"file": 84,"line": 119,"col": 4},{"file": 84,"line": 101,"col": 4},{"file": 84,"line": 187,"col": 4},{"file": 84,"line": 73,"col": 4},{"file": 84,"line": 137,"col": 4},{"file": 84,"line": 173,"col": 4},{"file": 84,"line": 191,"col": 4},{"file": 84,"line": 71,"col": 4},{"file": 84,"line": 94,"col": 4},{"file": 84,"line": 147,"col": 4},{"file": 84,"line": 13,"col": 4},{"file": 84,"line": 164,"col": 4},{"file": 84,"line": 133,"col": 4},{"file": 84,"line": 36,"col": 4},{"file": 84,"line": 155,"col": 4},{"file": 84,"line": 107,"col": 4},{"file": 84,"line": 112,"col": 4},{"file": 84,"line": 131,"col": 4},{"file": 84,"line": 146,"col": 4},{"file": 84,"line": 239,"col": 4},{"file": 84,"line": 85,"col": 4},{"file": 84,"line": 180,"col": 4},{"file": 84,"line": 80,"col": 4},{"file": 84,"line": 53,"col": 4},{"file": 84,"line": 203,"col": 4},{"file": 84,"line": 181,"col": 4},{"file": 84,"line": 82,"col": 4},{"file": 84,"line": 217,"col": 4},{"file": 84,"line": 183,"col": 4},{"file": 84,"line": 159,"col": 4},{"file": 84,"line": 33,"col": 4},{"file": 84,"line": 151,"col": 4},{"file": 84,"line": 207,"col": 4},{"file": 84,"line": 149,"col": 4},{"file": 84,"line": 11,"col": 4},{"file": 84,"line": 218,"col": 4},{"file": 84,"line": 56,"col": 4},{"file": 84,"line": 242,"col": 4},{"file": 84,"line": 132,"col": 4},{"file": 84,"line": 200,"col": 4},{"file": 84,"line": 126,"col": 4},{"file": 84,"line": 7,"col": 4},{"file": 84,"line": 103,"col": 4},{"file": 84,"line": 201,"col": 4},{"file": 84,"line": 162,"col": 4},{"file": 84,"line": 134,"col": 4},{"file": 84,"line": 221,"col": 4},{"file": 84,"line": 202,"col": 4},{"file": 84,"line": 66,"col": 4},{"file": 84,"line": 83,"col": 4},{"file": 84,"line": 108,"col": 4},{"file": 84,"line": 3,"col": 4},{"file": 84,"line": 178,"col": 4},{"file": 84,"line": 81,"col": 4},{"file": 84,"line": 52,"col": 4},{"file": 84,"line": 129,"col": 4},{"file": 84,"line": 23,"col": 4},{"file": 84,"line": 2,"col": 4},{"file": 84,"line": 75,"col": 4},{"file": 84,"line": 143,"col": 4},{"file": 84,"line": 96,"col": 4},{"file": 84,"line": 106,"col": 4},{"file": 84,"line": 243,"col": 4},{"file": 84,"line": 227,"col": 4},{"file": 84,"line": 226,"col": 4},{"file": 84,"line": 172,"col": 4},{"file": 84,"line": 156,"col": 4},{"file": 84,"line": 40,"col": 4},{"file": 84,"line": 139,"col": 4},{"file": 84,"line": 210,"col": 4},{"file": 84,"line": 97,"col": 4},{"file": 84,"line": 153,"col": 4},{"file": 84,"line": 105,"col": 4},{"file": 84,"line": 167,"col": 4},{"file": 84,"line": 168,"col": 4},{"file": 84,"line": 45,"col": 4},{"file": 84,"line": 170,"col": 4},{"file": 84,"line": 184,"col": 4},{"file": 84,"line": 113,"col": 4},{"file": 84,"line": 37,"col": 4},{"file": 84,"line": 24,"col": 4},{"file": 84,"line": 78,"col": 4},{"file": 84,"line": 55,"col": 4},{"file": 84,"line": 32,"col": 4},{"file": 84,"line": 41,"col": 4},{"file": 84,"line": 87,"col": 4},{"file": 84,"line": 120,"col": 4},{"file": 84,"line": 179,"col": 4},{"file": 84,"line": 233,"col": 4},{"file": 84,"line": 84,"col": 4},{"file": 84,"line": 213,"col": 4},{"file": 84,"line": 185,"col": 4},{"file": 84,"line": 176,"col": 4},{"file": 84,"line": 12,"col": 4},{"file": 84,"line": 199,"col": 4},{"file": 84,"line": 67,"col": 4},{"file": 84,"line": 38,"col": 4},{"file": 84,"line": 223,"col": 4},{"file": 84,"line": 234,"col": 4},{"file": 84,"line": 6,"col": 4},{"file": 84,"line": 169,"col": 4},{"file": 84,"line": 25,"col": 4},{"file": 84,"line": 163,"col": 4},{"file": 84,"line": 236,"col": 4},{"file": 84,"line": 171,"col": 4},{"file": 84,"line": 70,"col": 4},{"file": 84,"line": 212,"col": 4},{"file": 84,"line": 208,"col": 4},{"file": 84,"line": 39,"col": 4},{"file": 84,"line": 14,"col": 4},{"file": 84,"line": 225,"col": 4},{"file": 84,"line": 109,"col": 4},{"file": 84,"line": 44,"col": 4},{"file": 84,"line": 235,"col": 4},{"file": 84,"line": 198,"col": 4},{"file": 84,"line": 219,"col": 4},{"file": 84,"line": 204,"col": 4},{"file": 84,"line": 43,"col": 4},{"file": 84,"line": 26,"col": 4},{"file": 84,"line": 60,"col": 4},{"file": 84,"line": 47,"col": 4},{"file": 84,"line": 30,"col": 4},{"file": 84,"line": 216,"col": 4},{"file": 84,"line": 222,"col": 4},{"file": 84,"line": 188,"col": 4},{"file": 84,"line": 4,"col": 4},{"file": 84,"line": 31,"col": 4},{"file": 84,"line": 15,"col": 4},{"file": 84,"line": 228,"col": 4},{"file": 84,"line": 58,"col": 4},{"file": 84,"line": 90,"col": 4},{"file": 84,"line": 237,"col": 4},{"file": 84,"line": 193,"col": 4},{"file": 84,"line": 224,"col": 4},{"file": 84,"line": 194,"col": 4},{"file": 84,"line": 196,"col": 4},{"file": 84,"line": 238,"col": 4},{"file": 84,"line": 135,"col": 4},{"file": 84,"line": 50,"col": 4},{"file": 84,"line": 102,"col": 4},{"file": 84,"line": 122,"col": 4},{"file": 84,"line": 29,"col": 4},{"file": 84,"line": 230,"col": 4},{"file": 84,"line": 77,"col": 4},{"file": 84,"line": 0,"col": 4},{"file": 84,"line": 118,"col": 4},{"file": 84,"line": 150,"col": 4},{"file": 84,"line": 88,"col": 4},{"file": 84,"line": 123,"col": 4},{"file": 84,"line": 17,"col": 4},{"file": 84,"line": 229,"col": 4},{"file": 84,"line": 114,"col": 4},{"file": 84,"line": 104,"col": 4},{"file": 84,"line": 195,"col": 4},{"file": 84,"line": 117,"col": 4},{"file": 84,"line": 57,"col": 4},{"file": 84,"line": 59,"col": 4},{"file": 84,"line": 211,"col": 4},{"file": 84,"line": 145,"col": 4},{"file": 84,"line": 121,"col": 4},{"file": 84,"line": 161,"col": 4},{"file": 84,"line": 165,"col": 4},{"file": 84,"line": 18,"col": 4},{"file": 84,"line": 42,"col": 4},{"file": 84,"line": 141,"col": 4},{"file": 84,"line": 86,"col": 4},{"file": 84,"line": 231,"col": 4},{"file": 84,"line": 189,"col": 4},{"file": 84,"line": 62,"col": 4},{"file": 84,"line": 76,"col": 4},{"file": 84,"line": 138,"col": 4},{"file": 84,"line": 186,"col": 4},{"file": 84,"line": 241,"col": 4},{"file": 84,"line": 125,"col": 4},{"file": 84,"line": 91,"col": 4},{"file": 84,"line": 175,"col": 4},{"file": 84,"line": 9,"col": 4},{"file": 84,"line": 209,"col": 4},{"file": 84,"line": 115,"col": 4},{"file": 84,"line": 5,"col": 4},{"file": 84,"line": 152,"col": 4},{"file": 84,"line": 16,"col": 4},{"file": 84,"line": 157,"col": 4},{"file": 84,"line": 205,"col": 4},{"file": 84,"line": 63,"col": 4},{"file": 84,"line": 61,"col": 4},{"file": 84,"line": 206,"col": 4},{"file": 84,"line": 21,"col": 4},{"file": 84,"line": 65,"col": 4},{"file": 84,"line": 8,"col": 4},{"file": 84,"line": 220,"col": 4},{"file": 84,"line": 51,"col": 4},{"file": 84,"line": 142,"col": 4},{"file": 84,"line": 48,"col": 4},{"file": 84,"line": 124,"col": 4},{"file": 84,"line": 89,"col": 4},{"file": 84,"line": 215,"col": 4},{"file": 84,"line": 160,"col": 4},{"file": 84,"line": 128,"col": 4},{"file": 84,"line": 98,"col": 4},{"file": 84,"line": 140,"col": 4},{"file": 84,"line": 79,"col": 4},{"file": 84,"line": 46,"col": 4},{"file": 84,"line": 110,"col": 4},{"file": 84,"line": 10,"col": 4},{"file": 84,"line": 74,"col": 4},{"file": 84,"line": 130,"col": 4},{"file": 84,"line": 27,"col": 4},{"file": 84,"line": 240,"col": 4},{"file": 84,"line": 148,"col": 4},{"file": 84,"line": 22,"col": 4},{"file": 84,"line": 192,"col": 4},{"file": 84,"line": 95,"col": 4},{"file": 84,"line": 182,"col": 4},{"file": 84,"line": 154,"col": 4},{"file": 84,"line": 144,"col": 4},{"file": 84,"line": 72,"col": 4},{"file": 84,"line": 197,"col": 4},{"file": 84,"line": 111,"col": 4},{"file": 84,"line": 68,"col": 4},{"file": 84,"line": 127,"col": 4},{"file": 84,"line": 136,"col": 4},{"file": 84,"line": 116,"col": 4},{"file": 84,"line": 100,"col": 4},{"file": 84,"line": 232,"col": 4},{"file": 84,"line": 166,"col": 4},{"file": 84,"line": 69,"col": 4},{"file": 84,"line": 35,"col": 4},{"file": 84,"line": 214,"col": 4},{"file": 84,"line": 158,"col": 4},{"file": 84,"line": 34,"col": 4},{"file": 84,"line": 28,"col": 4},{"file": 84,"line": 1,"col": 4},{"file": 84,"line": 92,"col": 4},{"file": 85,"line": 2303,"col": 4,"docs": " No more local user identifiers (LUIDs) are available.\n"},{"file": 85,"line": 1393,"col": 4,"docs": " The specified interrupt vector is still connected.\n"},{"file": 85,"line": 3560,"col": 4,"docs": " The specified printer cannot be shared.\n"},{"file": 85,"line": 1240,"col": 4,"docs": " {Fatal Application Exit} %hs.\n"},{"file": 85,"line": 2396,"col": 4,"docs": " The logon session ID is already in use.\n"},{"file": 85,"line": 2696,"col": 4,"docs": " An error was encountered while processing an XML digital signature.\n"},{"file": 85,"line": 3389,"col": 4,"docs": " The context has expired and can no longer be used.\n"},{"file": 85,"line": 268,"col": 4,"docs": " The semaphore timeout period has expired.\n"},{"file": 85,"line": 283,"col": 4,"docs": " The specified module could not be found.\n"},{"file": 85,"line": 664,"col": 4,"docs": " A data integrity checksum error occurred. Data in the file stream is corrupt.\n"},{"file": 85,"line": 817,"col": 4,"docs": " Indicates that an attempt was made to grow an LDT by setting its size, or that the size was not an even number of selectors.\n"},{"file": 85,"line": 250,"col": 4,"docs": " No more internal file identifiers available.\n"},{"file": 85,"line": 820,"col": 4,"docs": " Indicates that the starting value for the LDT information was not an integral multiple of the selector size.\n"},{"file": 85,"line": 1054,"col": 4,"docs": " The system is in the process of shutting down.\n"},{"file": 85,"line": 571,"col": 4,"docs": " The extended attributes did not fit in the buffer.\n"},{"file": 85,"line": 826,"col": 4,"docs": " Indicates a process has too many threads to perform the requested action. For example, assignment of a primary token may only be performed when a process has zero or one threads.\n"},{"file": 85,"line": 3512,"col": 4,"docs": " The specified print monitor has already been installed.\n"},{"file": 85,"line": 733,"col": 4,"docs": " User profile cannot be loaded.\n"},{"file": 85,"line": 2546,"col": 4,"docs": " The list box identifier was not found.\n"},{"file": 85,"line": 2948,"col": 4,"docs": " The interface is unknown.\n"},{"file": 85,"line": 1474,"col": 4,"docs": " The resources required for this device conflict with the MCFG table.\n"},{"file": 85,"line": 1432,"col": 4,"docs": " A version number could not be parsed.\n"},{"file": 85,"line": 925,"col": 4,"docs": " The stream is not a tiny stream.\n"},{"file": 85,"line": 1255,"col": 4,"docs": " Application popup: %1 : %2\n"},{"file": 85,"line": 1738,"col": 4,"docs": " Unable to unload the media.\n"},{"file": 85,"line": 214,"col": 4,"docs": " The exclusive semaphore is owned by another process.\n"},{"file": 85,"line": 3134,"col": 4,"docs": " The byte count is too small.\n"},{"file": 85,"line": 280,"col": 4,"docs": " The disk has no volume label.\n"},{"file": 85,"line": 3032,"col": 4,"docs": " The authentication service is unknown.\n"},{"file": 85,"line": 2636,"col": 4,"docs": " Popup menu already active.\n"},{"file": 85,"line": 3383,"col": 4,"docs": " The group element could not be removed.\n"},{"file": 85,"line": 1099,"col": 4,"docs": " The password provided is too long to meet the policy of your user account. Please choose a shorter password.\n"},{"file": 85,"line": 229,"col": 4,"docs": " Insert the diskette for drive %1.\n"},{"file": 85,"line": 1447,"col": 4,"docs": " The system power state is transitioning from %2 to %3.\n"},{"file": 85,"line": 2186,"col": 4,"docs": " The requested file operation failed because the storage quota was exceeded. To free up disk space, move files to a different location or delete unnecessary files. For more information, contact your system administrator.\n"},{"file": 85,"line": 1579,"col": 4,"docs": " The configuration registry key could not be written.\n"},{"file": 85,"line": 2549,"col": 4,"docs": " No wildcards were found.\n"},{"file": 85,"line": 2792,"col": 4,"docs": " This installation package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer package.\n"},{"file": 85,"line": 1477,"col": 4,"docs": " The volume repair could not be performed while it is online. Please schedule to take the volume offline so that it can be repaired.\n"},{"file": 85,"line": 2591,"col": 4,"docs": " The hook procedure is not installed.\n"},{"file": 85,"line": 121,"col": 4,"docs": " You were not connected because a duplicate name exists on the network. If joining a domain, go to System in Control Panel to change the computer name and try again. If joining a workgroup, choose another workgroup name.\n"},{"file": 85,"line": 1195,"col": 4,"docs": " {Object Exists} An attempt was made to create an object and the object name already existed.\n"},{"file": 85,"line": 3302,"col": 4,"docs": " The specified form name is invalid.\n"},{"file": 85,"line": 100,"col": 4,"docs": " The process cannot access the file because another process has locked a portion of the file.\n"},{"file": 85,"line": 2098,"col": 4,"docs": " This program is blocked by group policy. For more information, contact your system administrator.\n"},{"file": 85,"line": 1666,"col": 4,"docs": " After starting, the service hung in a start-pending state.\n"},{"file": 85,"line": 3395,"col": 4,"docs": " The total delegated trust creation quota has been exceeded.\n"},{"file": 85,"line": 1855,"col": 4,"docs": " The indicated element does not exist.\n"},{"file": 85,"line": 421,"col": 4,"docs": " The flag passed is not correct.\n"},{"file": 85,"line": 649,"col": 4,"docs": " The scope specified was not found.\n"},{"file": 85,"line": 1948,"col": 4,"docs": " The format of the specified computer name is invalid.\n"},{"file": 85,"line": 1771,"col": 4,"docs": " A serial I/O operation was completed by another write to the serial port. The IOCTL_SERIAL_XOFF_COUNTER reached zero.)\n"},{"file": 85,"line": 1969,"col": 4,"docs": " The format of the specified message name is invalid.\n"},{"file": 85,"line": 2879,"col": 4,"docs": " Update removal was disallowed by policy.\n"},{"file": 85,"line": 3554,"col": 4,"docs": " The requested print job has failed to print. A print system update requires the job to be resubmitted.\n"},{"file": 85,"line": 2246,"col": 4,"docs": " The name provided is not a properly formed account name.\n"},{"file": 85,"line": 2381,"col": 4,"docs": " A security descriptor is not in the right format (absolute or self-relative).\n"},{"file": 85,"line": 1399,"col": 4,"docs": " Debugger handled exception.\n"},{"file": 85,"line": 766,"col": 4,"docs": " An invalid unwind target was encountered during an unwind operation.\n"},{"file": 85,"line": 265,"col": 4,"docs": " This function is not supported on this system.\n"},{"file": 85,"line": 1684,"col": 4,"docs": " The current boot has already been accepted for use as the last-known-good control set.\n"},{"file": 85,"line": 1345,"col": 4,"docs": " Page fault was a demand zero fault.\n"},{"file": 85,"line": 2414,"col": 4,"docs": " Cannot perform this operation on this built-in special group.\n"},{"file": 85,"line": 2567,"col": 4,"docs": " The window is not a combo box.\n"},{"file": 85,"line": 532,"col": 4,"docs": " The pipe is local.\n"},{"file": 85,"line": 3005,"col": 4,"docs": " The name syntax is not supported.\n"},{"file": 85,"line": 3107,"col": 4,"docs": " The list of RPC servers available for the binding of auto handles has been exhausted.\n"},{"file": 85,"line": 490,"col": 4,"docs": " The signal handler cannot be set.\n"},{"file": 85,"line": 76,"col": 4,"docs": " The drive cannot locate a specific area or track on the disk.\n"},{"file": 85,"line": 1564,"col": 4,"docs": " An attempt was made to reference a token that does not exist.\n"},{"file": 85,"line": 1303,"col": 4,"docs": " ERROR_WAIT_63\n"},{"file": 85,"line": 1528,"col": 4,"docs": " The I/O operation has been aborted because of either a thread exit or an application request.\n"},{"file": 85,"line": 3236,"col": 4,"docs": " Not enough quota is available to process this command.\n"},{"file": 85,"line": 643,"col": 4,"docs": " The device does not support the command feature.\n"},{"file": 85,"line": 316,"col": 4,"docs": " The system tried to delete the substitution of a drive that is not substituted.\n"},{"file": 85,"line": 3176,"col": 4,"docs": " The specified port is unknown.\n"},{"file": 85,"line": 3557,"col": 4,"docs": " The printer driver does not contain a valid manifest, or contains too many manifests.\n"},{"file": 85,"line": 3164,"col": 4,"docs": " An attempt was made to logon, but the network logon service was not started.\n"},{"file": 85,"line": 3083,"col": 4,"docs": " The requested operation is not supported.\n"},{"file": 85,"line": 196,"col": 4,"docs": " The local device name is already in use.\n"},{"file": 85,"line": 2537,"col": 4,"docs": " Invalid index.\n"},{"file": 85,"line": 2627,"col": 4,"docs": " Invalid GW_* command.\n"},{"file": 85,"line": 898,"col": 4,"docs": " {Registry File Failure} The registry cannot load the hive (file): %hs or its log or alternate. It is corrupt, absent, or not writable.\n"},{"file": 85,"line": 1795,"col": 4,"docs": " While accessing the hard disk, a disk controller reset was needed, but even that failed.\n"},{"file": 85,"line": 3131,"col": 4,"docs": " The enumeration value is out of range.\n"},{"file": 85,"line": 832,"col": 4,"docs": " Page file quota was exceeded.\n"},{"file": 85,"line": 2753,"col": 4,"docs": " Component ID not registered.\n"},{"file": 85,"line": 3206,"col": 4,"docs": " There are no more bindings.\n"},{"file": 85,"line": 1753,"col": 4,"docs": " A dynamic link library (DLL) initialization routine failed.\n"},{"file": 85,"line": 2161,"col": 4,"docs": " Insufficient information exists to identify the cause of failure.\n"},{"file": 85,"line": 2957,"col": 4,"docs": " The endpoint cannot be created.\n"},{"file": 85,"line": 1996,"col": 4,"docs": " The network connection was gracefully closed.\n"},{"file": 85,"line": 1927,"col": 4,"docs": " The network path was either typed incorrectly, does not exist, or the network provider is not currently available. Please try retyping the path or contact your network administrator.\n"},{"file": 85,"line": 2171,"col": 4,"docs": " The service start failed since one or more services in the same process have an incompatible service SID type setting. A service with restricted service SID type can only coexist in the same process with other services with a restricted SID type. If the service SID type for this service was just configured, the hosting process must be restarted in order to start this service.\n On Windows Server 2003 and Windows XP, an unrestricted service cannot coexist in the same process with other services. The service with the unrestricted service SID type must be moved to an owned process in order to start this service.\n"},{"file": 85,"line": 2300,"col": 4,"docs": " Too many local user identifiers (LUIDs) were requested at one time.\n"},{"file": 85,"line": 655,"col": 4,"docs": " The Central Access Policy obtained from Active Directory is invalid.\n"},{"file": 85,"line": 1207,"col": 4,"docs": " {Segment Load} A virtual DOS machine (VDM) is loading, unloading, or moving an MS-DOS or Win16 program segment image. An exception is raised so a debugger can load, unload or track symbols and breakpoints within these 16-bit segments.\n"},{"file": 85,"line": 574,"col": 4,"docs": " The extended attribute file on the mounted file system is corrupt.\n"},{"file": 85,"line": 1876,"col": 4,"docs": " There was no match for the specified key in the index.\n"},{"file": 85,"line": 2258,"col": 4,"docs": " The specified group does not exist.\n"},{"file": 85,"line": 2345,"col": 4,"docs": " The type of the token is inappropriate for its attempted use.\n"},{"file": 85,"line": 2789,"col": 4,"docs": " This installation package could not be opened. Verify that the package exists and that you can access it, or contact the application vendor to verify that this is a valid Windows Installer package.\n"},{"file": 85,"line": 148,"col": 4,"docs": " The printer queue is full.\n"},{"file": 85,"line": 589,"col": 4,"docs": " Too many posts were made to a semaphore.\n"},{"file": 85,"line": 1390,"col": 4,"docs": " The specified interrupt vector was already connected.\n"},{"file": 85,"line": 142,"col": 4,"docs": " An unexpected network error occurred.\n"},{"file": 85,"line": 1642,"col": 4,"docs": " The service has not been started.\n"},{"file": 85,"line": 3200,"col": 4,"docs": " The specified datatype is invalid.\n"},{"file": 85,"line": 55,"col": 4,"docs": " There are no more files.\n"},{"file": 85,"line": 2360,"col": 4,"docs": " This operation is only allowed for the Primary Domain Controller of the domain.\n"},{"file": 85,"line": 2834,"col": 4,"docs": " Component not used on this computer.\n"},{"file": 85,"line": 1744,"col": 4,"docs": " The I/O bus was reset.\n"},{"file": 85,"line": 247,"col": 4,"docs": " There is not enough space on the disk.\n"},{"file": 85,"line": 1450,"col": 4,"docs": " The system power state is transitioning from %2 to %3 but could enter %4.\n"},{"file": 85,"line": 2522,"col": 4,"docs": " Invalid window; it belongs to other thread.\n"},{"file": 85,"line": 3059,"col": 4,"docs": " The version option is invalid.\n"},{"file": 85,"line": 919,"col": 4,"docs": " {Delayed Write Failed} Windows was unable to save all the data for the file %hs. The data has been lost. This error may be caused by a failure of your computer hardware or network connection. Please try to save this file elsewhere.\n"},{"file": 85,"line": 2801,"col": 4,"docs": " The language of this installation package is not supported by your system.\n"},{"file": 85,"line": 1276,"col": 4,"docs": " The CPUs in this multiprocessor system are not all the same revision level. To use all processors the operating system restricts itself to the features of the least capable processor in the system. Should problems occur with this system, contact the CPU manufacturer to see if this mix of processors is supported.\n"},{"file": 85,"line": 1294,"col": 4,"docs": " ERROR_WAIT_1\n"},{"file": 85,"line": 1420,"col": 4,"docs": " The data provider was not able to interpret the flags set for a column binding in an accessor.\n"},{"file": 85,"line": 1723,"col": 4,"docs": " No more data is on the tape.\n"},{"file": 85,"line": 1258,"col": 4,"docs": " ERROR_ALREADY_WIN32\n"},{"file": 85,"line": 3266,"col": 4,"docs": " Thread is not canceled.\n"},{"file": 85,"line": 286,"col": 4,"docs": " The specified procedure could not be found.\n"},{"file": 85,"line": 22,"col": 4,"docs": " The storage control blocks were destroyed.\n"},{"file": 85,"line": 1600,"col": 4,"docs": " Cannot create a symbolic link in a registry key that already has subkeys or values.\n"},{"file": 85,"line": 1906,"col": 4,"docs": " A file was found, but it may not be the correct file.\n"},{"file": 85,"line": 1567,"col": 4,"docs": " The configuration registry database is corrupt.\n"},{"file": 85,"line": 1966,"col": 4,"docs": " The format of the specified password is invalid.\n"},{"file": 85,"line": 2660,"col": 4,"docs": " Insufficient quota to complete the requested service.\n"},{"file": 85,"line": 616,"col": 4,"docs": " A requested file lock operation cannot be processed due to an invalid byte range.\n"},{"file": 85,"line": 544,"col": 4,"docs": " No process is on the other end of the pipe.\n"},{"file": 85,"line": 2825,"col": 4,"docs": " The Windows Installer service failed to start. Contact your support personnel.\n"},{"file": 85,"line": 2651,"col": 4,"docs": " Insufficient system resources exist to complete the requested service.\n"},{"file": 85,"line": 715,"col": 4,"docs": " The maximum number of sessions has been reached.\n"},{"file": 85,"line": 3065,"col": 4,"docs": " There is nothing to unexport.\n"},{"file": 85,"line": 235,"col": 4,"docs": " The disk is in use or locked by another process.\n"},{"file": 85,"line": 3095,"col": 4,"docs": " An addressing error occurred in the RPC server.\n"},{"file": 85,"line": 319,"col": 4,"docs": " The system tried to join a drive to a directory on a joined drive.\n"},{"file": 85,"line": 190,"col": 4,"docs": " Fail on INT 24.\n"},{"file": 85,"line": 517,"col": 4,"docs": " The file type being saved or retrieved has been blocked.\n"},{"file": 85,"line": 172,"col": 4,"docs": " The network BIOS session limit was exceeded.\n"},{"file": 85,"line": 301,"col": 4,"docs": " The file pointer cannot be set on the specified device or file.\n"},{"file": 85,"line": 2804,"col": 4,"docs": " Error applying transforms. Verify that the specified transform paths are valid.\n"},{"file": 85,"line": 3011,"col": 4,"docs": " The endpoint is a duplicate.\n"},{"file": 85,"line": 2342,"col": 4,"docs": " The validation information class requested was invalid.\n"},{"file": 85,"line": 3488,"col": 4,"docs": " Active connections still exist.\n"},{"file": 85,"line": 1648,"col": 4,"docs": " An exception occurred in the service when handling the control request.\n"},{"file": 85,"line": 1663,"col": 4,"docs": " The service did not start due to a logon failure.\n"},{"file": 85,"line": 610,"col": 4,"docs": " Short names are not enabled on this volume.\n"},{"file": 85,"line": 2936,"col": 4,"docs": " The RPC server is already listening.\n"},{"file": 85,"line": 667,"col": 4,"docs": " An attempt was made to modify both a KERNEL and normal Extended Attribute (EA) in the same operation.\n"},{"file": 85,"line": 2573,"col": 4,"docs": " Invalid device context (DC) handle.\n"},{"file": 85,"line": 1825,"col": 4,"docs": " Cannot start more than one instance of the specified program.\n"},{"file": 85,"line": 2735,"col": 4,"docs": " The Windows Installer Service could not be accessed. This can occur if the Windows Installer is not correctly installed. Contact your support personnel for assistance.\n"},{"file": 85,"line": 2504,"col": 4,"docs": " Invalid cursor handle.\n"},{"file": 85,"line": 2588,"col": 4,"docs": " The journal hook procedure is already installed.\n"},{"file": 85,"line": 2014,"col": 4,"docs": " The network location cannot be reached. For information about network troubleshooting, see Windows Help.\n"},{"file": 85,"line": 2249,"col": 4,"docs": " The specified account already exists.\n"},{"file": 85,"line": 28,"col": 4,"docs": " The storage control block address is invalid.\n"},{"file": 85,"line": 1870,"col": 4,"docs": " The device is not connected.\n"},{"file": 85,"line": 1123,"col": 4,"docs": " Driver %2 returned invalid ID for a child device (%3).\n"},{"file": 85,"line": 2777,"col": 4,"docs": " SQL query syntax invalid or unsupported.\n"},{"file": 85,"line": 1585,"col": 4,"docs": " The registry is corrupted. The structure of one of the files containing registry data is corrupted, or the system's memory image of the file is corrupted, or the file could not be recovered because the alternate copy or log was absent or corrupted.\n"},{"file": 85,"line": 2489,"col": 4,"docs": " Mutual Authentication failed. The server's password is out of date at the domain controller.\n"},{"file": 85,"line": 1837,"col": 4,"docs": " An error occurred in sending the command to the application.\n"},{"file": 85,"line": 2981,"col": 4,"docs": " A remote procedure call (RPC) protocol error occurred.\n"},{"file": 85,"line": 2579,"col": 4,"docs": " Invalid hook procedure.\n"},{"file": 85,"line": 1483,"col": 4,"docs": " One of the volume corruption logs is full. Further corruptions that may be detected won't be logged.\n"},{"file": 85,"line": 2240,"col": 4,"docs": " A specified privilege does not exist.\n"},{"file": 85,"line": 604,"col": 4,"docs": " The file cannot be opened because it is in the process of being deleted.\n"},{"file": 85,"line": 853,"col": 4,"docs": " {Application Error} The exception %s (0x%08lx) occurred in the application at location 0x%08lx.\n"},{"file": 85,"line": 607,"col": 4,"docs": " Short name settings may not be changed on this volume due to the global registry setting.\n"},{"file": 85,"line": 3494,"col": 4,"docs": " The specified print monitor is unknown.\n"},{"file": 85,"line": 1489,"col": 4,"docs": " One of the volume corruption logs is unavailable for being operated on.\n"},{"file": 85,"line": 595,"col": 4,"docs": " The oplock request is denied.\n"},{"file": 85,"line": 1315,"col": 4,"docs": " ERROR_KERNEL_APC\n"},{"file": 85,"line": 1441,"col": 4,"docs": " The attempted operation required self healing to be enabled.\n"},{"file": 85,"line": 1219,"col": 4,"docs": " {Machine Type Mismatch} The image file %hs is valid, but is for a machine type other than the current machine. Select OK to continue, or CANCEL to fail the DLL load.\n"},{"file": 85,"line": 1435,"col": 4,"docs": " The iterator's start position is invalid.\n"},{"file": 85,"line": 16,"col": 4,"docs": " Access is denied.\n"},{"file": 85,"line": 691,"col": 4,"docs": " The storage device does not provide redundancy.\n"},{"file": 85,"line": 793,"col": 4,"docs": " The number of active profiling objects is at the maximum and no more may be started.\n"},{"file": 85,"line": 1537,"col": 4,"docs": " Invalid access to memory location.\n"},{"file": 85,"line": 1150,"col": 4,"docs": " The Plug and Play query operation was not successful.\n"},{"file": 85,"line": 2318,"col": 4,"docs": " The inherited access control list (ACL) or access control entry (ACE) could not be built.\n"},{"file": 85,"line": 3533,"col": 4,"docs": " The printer driver is known to be unreliable.\n"},{"file": 85,"line": 10,"col": 4,"docs": " The system cannot find the path specified.\n"},{"file": 85,"line": 3092,"col": 4,"docs": " The RPC server attempted an integer division by zero.\n"},{"file": 85,"line": 3284,"col": 4,"docs": " Unsupported RPC pipe version.\n"},{"file": 85,"line": 1690,"col": 4,"docs": " The name is already in use as either a service name or a service display name.\n"},{"file": 85,"line": 3137,"col": 4,"docs": " The stub received bad data.\n"},{"file": 85,"line": 2693,"col": 4,"docs": " Windows was unable to parse the requested XML data.\n"},{"file": 85,"line": 2276,"col": 4,"docs": " Unable to update the password. The value provided for the new password does not meet the length, complexity, or history requirements of the domain.\n"},{"file": 85,"line": 2158,"col": 4,"docs": " %1 is a 16-bit application. You do not have permissions to execute 16-bit applications. Check your permissions with your system administrator.\n"},{"file": 85,"line": 427,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 952,"col": 4,"docs": " The timer resolution was not previously set by the current process.\n"},{"file": 85,"line": 2008,"col": 4,"docs": " An invalid operation was attempted on an active network connection.\n"},{"file": 85,"line": 2843,"col": 4,"docs": " This update package cannot be processed by the Windows Installer service. You must install a Windows service pack that contains a newer version of the Windows Installer service.\n"},{"file": 85,"line": 2531,"col": 4,"docs": " Class does not exist.\n"},{"file": 85,"line": 463,"col": 4,"docs": " The code segment cannot be greater than or equal to 64K.\n"},{"file": 85,"line": 1501,"col": 4,"docs": " The oplock that was associated with this handle is now associated with a different handle.\n"},{"file": 85,"line": 1813,"col": 4,"docs": " The system BIOS failed an attempt to change the system power state.\n"},{"file": 85,"line": 2576,"col": 4,"docs": " Invalid hook procedure type.\n"},{"file": 85,"line": 1153,"col": 4,"docs": " A frame consolidation has been executed.\n"},{"file": 85,"line": 1747,"col": 4,"docs": " No media in drive.\n"},{"file": 85,"line": 727,"col": 4,"docs": " The process is not in background processing mode.\n"},{"file": 85,"line": 3419,"col": 4,"docs": " The window style or class attribute is invalid for this operation.\n"},{"file": 85,"line": 2969,"col": 4,"docs": " The network options are invalid.\n"},{"file": 85,"line": 2756,"col": 4,"docs": " Unknown property.\n"},{"file": 85,"line": 7,"col": 4,"docs": " The system cannot find the file specified.\n"},{"file": 85,"line": 181,"col": 4,"docs": " The specified printer or disk device has been paused.\n"},{"file": 85,"line": 1882,"col": 4,"docs": " The point passed to GetMouseMovePoints is not in the buffer.\n"},{"file": 85,"line": 3086,"col": 4,"docs": " No security context is available to allow impersonation.\n"},{"file": 85,"line": 703,"col": 4,"docs": " The specified copy of the requested data could not be read.\n"},{"file": 85,"line": 2131,"col": 4,"docs": " Windows cannot open this program since it has been disabled.\n"},{"file": 85,"line": 3014,"col": 4,"docs": " The authentication type is unknown.\n"},{"file": 85,"line": 679,"col": 4,"docs": " An operation is currently in progress with the device.\n"},{"file": 85,"line": 1486,"col": 4,"docs": " One of the volume corruption logs is internally corrupted and needs to be recreated. The volume may contain undetected corruptions and must be scanned.\n"},{"file": 85,"line": 2225,"col": 4,"docs": " This security ID may not be assigned as the primary group of an object.\n"},{"file": 85,"line": 3401,"col": 4,"docs": " The computer you are signing into is protected by an authentication firewall. The specified account is not allowed to authenticate to the computer.\n"},{"file": 85,"line": 775,"col": 4,"docs": " An attempt was made to lower a quota limit below the current usage.\n"},{"file": 85,"line": 910,"col": 4,"docs": " NTVDM encountered a hard error.\n"},{"file": 85,"line": 3365,"col": 4,"docs": " Not all object UUIDs could be exported to the specified entry.\n"},{"file": 85,"line": 619,"col": 4,"docs": " The subsystem needed to support the image type is not present.\n"},{"file": 85,"line": 256,"col": 4,"docs": " The IOCTL call made by the application program is not correct.\n"},{"file": 85,"line": 1675,"col": 4,"docs": " The specified service already exists.\n"},{"file": 85,"line": 1072,"col": 4,"docs": " The \"%hs\" encountered an error while applying power or reading the device configuration. This may be caused by a failure of your hardware or by a poor connection.\n"},{"file": 85,"line": 2921,"col": 4,"docs": " No endpoint was found.\n"},{"file": 85,"line": 2450,"col": 4,"docs": " During a logon attempt, the user's security context accumulated too many security IDs.\n"},{"file": 85,"line": 3377,"col": 4,"docs": " The specified profile element could not be removed.\n"},{"file": 85,"line": 1936,"col": 4,"docs": " The network connection profile is corrupted.\n"},{"file": 85,"line": 769,"col": 4,"docs": " Invalid Object Attributes specified to NtCreatePort or invalid Port Attributes specified to NtConnectPort\n"},{"file": 85,"line": 2720,"col": 4,"docs": " The event log file is full.\n"},{"file": 85,"line": 1039,"col": 4,"docs": " A device was removed so enumeration must be restarted.\n"},{"file": 85,"line": 1387,"col": 4,"docs": " A file system or file system filter driver has successfully completed an FsFilter operation.\n"},{"file": 85,"line": 2600,"col": 4,"docs": " This list box does not support tab stops.\n"},{"file": 85,"line": 2993,"col": 4,"docs": " The tag is invalid.\n"},{"file": 85,"line": 2435,"col": 4,"docs": " The specified local group already exists.\n"},{"file": 85,"line": 2954,"col": 4,"docs": " There are no protocol sequences.\n"},{"file": 85,"line": 2189,"col": 4,"docs": " The requested file operation failed because the storage policy blocks that type of file. For more information, contact your system administrator.\n"},{"file": 85,"line": 118,"col": 4,"docs": " Windows cannot find the network path. Verify that the network path is correct and the destination computer is not busy or turned off. If Windows still cannot find the network path, contact your network administrator.\n"},{"file": 85,"line": 175,"col": 4,"docs": " The remote server has been paused or is in the process of being started.\n"},{"file": 85,"line": 3542,"col": 4,"docs": " Unable to find a core driver package that is required by the printer driver package.\n"},{"file": 85,"line": 1030,"col": 4,"docs": " {System Standby Failed} The driver %hs does not support standby mode. Updating this driver may allow the system to go to standby mode.\n"},{"file": 85,"line": 466,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 2930,"col": 4,"docs": " The object universal unique identifier (UUID) has already been registered.\n"},{"file": 85,"line": 3029,"col": 4,"docs": " The binding does not contain any authentication information.\n"},{"file": 85,"line": 2023,"col": 4,"docs": " The request was aborted.\n"},{"file": 85,"line": 127,"col": 4,"docs": " The network is busy.\n"},{"file": 85,"line": 325,"col": 4,"docs": " The system tried to join a drive to a directory on a substituted drive.\n"},{"file": 85,"line": 502,"col": 4,"docs": " This version of %1 is not compatible with the version of Windows you're running. Check your computer's system information and then contact the software publisher.\n"},{"file": 85,"line": 1903,"col": 4,"docs": " The volume change journal is not active.\n"},{"file": 85,"line": 2393,"col": 4,"docs": " The logon session is not in a state that is consistent with the requested operation.\n"},{"file": 85,"line": 1531,"col": 4,"docs": " Overlapped I/O event is not in a signaled state.\n"},{"file": 85,"line": 1051,"col": 4,"docs": " ERROR_MULTIPLE_FAULT_VIOLATION\n"},{"file": 85,"line": 1963,"col": 4,"docs": " The format of the specified share name is invalid.\n"},{"file": 85,"line": 742,"col": 4,"docs": " Waiting for a process to open the other end of the pipe.\n"},{"file": 85,"line": 2456,"col": 4,"docs": " A cross-encrypted password is necessary to change a user password.\n"},{"file": 85,"line": 1576,"col": 4,"docs": " The configuration registry key could not be read.\n"},{"file": 85,"line": 1321,"col": 4,"docs": " The requested operation requires elevation.\n"},{"file": 85,"line": 2110,"col": 4,"docs": " The Kerberos protocol encountered an error while attempting to utilize the smartcard subsystem.\n"},{"file": 85,"line": 2116,"col": 4,"docs": " The machine is locked and cannot be shut down without the force option.\n"},{"file": 85,"line": 1594,"col": 4,"docs": " Illegal operation attempted on a registry key that has been marked for deletion.\n"},{"file": 85,"line": 400,"col": 4,"docs": " The requested resource is in use.\n"},{"file": 85,"line": 2939,"col": 4,"docs": " No protocol sequences have been registered.\n"},{"file": 85,"line": 1954,"col": 4,"docs": " The format of the specified domain name is invalid.\n"},{"file": 85,"line": 781,"col": 4,"docs": " An attempt was made to execute an instruction at an unaligned address and the host system does not support unaligned instruction references.\n"},{"file": 85,"line": 160,"col": 4,"docs": " Network access is denied.\n"},{"file": 85,"line": 1678,"col": 4,"docs": " The system is currently running with the last-known-good configuration.\n"},{"file": 85,"line": 2429,"col": 4,"docs": " The specified account name is not a member of the group.\n"},{"file": 85,"line": 1402,"col": 4,"docs": " Debugger continued.\n"},{"file": 85,"line": 3404,"col": 4,"docs": " Remote connections to the Print Spooler are blocked by a policy set on your machine.\n"},{"file": 85,"line": 2864,"col": 4,"docs": " One or more customizations are not permitted by software restriction policy.\n"},{"file": 85,"line": 694,"col": 4,"docs": " An operation is not supported on a resident file.\n"},{"file": 85,"line": 1603,"col": 4,"docs": " Cannot create a stable subkey under a volatile parent key.\n"},{"file": 85,"line": 2020,"col": 4,"docs": " No service is operating at the destination network endpoint on the remote system.\n"},{"file": 85,"line": 1090,"col": 4,"docs": " The driver could not be loaded because a previous version of the driver is still in memory.\n"},{"file": 85,"line": 73,"col": 4,"docs": " The program issued a command but the command length is incorrect.\n"},{"file": 85,"line": 82,"col": 4,"docs": " The drive cannot find the sector requested.\n"},{"file": 85,"line": 2333,"col": 4,"docs": " The specified attributes are invalid, or incompatible with the attributes for the group as a whole.\n"},{"file": 85,"line": 1693,"col": 4,"docs": " The account specified for this service is different from the account specified for other services running in the same process.\n"},{"file": 85,"line": 208,"col": 4,"docs": " The system cannot start another process at this time.\n"},{"file": 85,"line": 2603,"col": 4,"docs": " Cannot destroy object created by another thread.\n"},{"file": 85,"line": 802,"col": 4,"docs": " If an MM error is returned which is not defined in the standard FsRtl filter, it is converted to one of the following errors which is guaranteed to be in the filter. In this case information is lost, however, the filter correctly handles the exception.\n"},{"file": 85,"line": 697,"col": 4,"docs": " An operation is not supported on a compressed file.\n"},{"file": 85,"line": 2125,"col": 4,"docs": " This driver has been blocked from loading.\n"},{"file": 85,"line": 2438,"col": 4,"docs": " Logon failure: the user has not been granted the requested logon type at this computer.\n"},{"file": 85,"line": 2978,"col": 4,"docs": " The remote procedure call failed and did not execute.\n"},{"file": 85,"line": 2038,"col": 4,"docs": " The account is not authorized to log in from this station.\n"},{"file": 85,"line": 2699,"col": 4,"docs": " This application must be restarted.\n"},{"file": 85,"line": 1867,"col": 4,"docs": " The device has indicated that its door is open.\n"},{"file": 85,"line": 3335,"col": 4,"docs": " Some data remains to be sent in the request buffer.\n"},{"file": 85,"line": 2642,"col": 4,"docs": " Scroll bar range cannot be greater than MAXLONG.\n"},{"file": 85,"line": 2143,"col": 4,"docs": " The current thread has already been converted from a fiber.\n"},{"file": 85,"line": 1987,"col": 4,"docs": " The operation was canceled by the user.\n"},{"file": 85,"line": 2059,"col": 4,"docs": " An attempt was made to perform an initialization operation when initialization has already been completed.\n"},{"file": 85,"line": 2095,"col": 4,"docs": " AppHelp dialog canceled thus preventing the application from starting.\n"},{"file": 85,"line": 226,"col": 4,"docs": " The previous ownership of this semaphore has ended.\n"},{"file": 85,"line": 946,"col": 4,"docs": " The specified buffer contains ill-formed data.\n"},{"file": 85,"line": 3524,"col": 4,"docs": " The requested operation is successful. Changes will not be effective until the system is rebooted.\n"},{"file": 85,"line": 2399,"col": 4,"docs": " A logon request contained an invalid logon type value.\n"},{"file": 85,"line": 712,"col": 4,"docs": " The restart operation failed.\n"},{"file": 85,"line": 3191,"col": 4,"docs": " The printer name is invalid.\n"},{"file": 85,"line": 514,"col": 4,"docs": " The file must be checked out before saving changes.\n"},{"file": 85,"line": 934,"col": 4,"docs": " The attempt to find the object found an object matching by ID on the volume but it is out of the scope of the handle used for the operation.\n"},{"file": 85,"line": 550,"col": 4,"docs": " The session was canceled.\n"},{"file": 85,"line": 3098,"col": 4,"docs": " A floating-point operation at the RPC server caused a division by zero.\n"},{"file": 85,"line": 3359,"col": 4,"docs": " The name of the file cannot be resolved by the system.\n"},{"file": 85,"line": 3515,"col": 4,"docs": " The specified print monitor does not have the required functions.\n"},{"file": 85,"line": 1792,"col": 4,"docs": " While accessing the hard disk, a disk operation failed even after retries.\n"},{"file": 85,"line": 3413,"col": 4,"docs": " The pixel format is invalid.\n"},{"file": 85,"line": 106,"col": 4,"docs": " Too many files opened for sharing.\n"},{"file": 85,"line": 2873,"col": 4,"docs": " The update is not applied to this product.\n"},{"file": 85,"line": 2762,"col": 4,"docs": " The configuration data for this product is corrupt. Contact your support personnel.\n"},{"file": 85,"line": 3437,"col": 4,"docs": " The specified tag was not found.\n"},{"file": 85,"line": 3536,"col": 4,"docs": " The printer driver is known to harm the system.\n"},{"file": 85,"line": 1945,"col": 4,"docs": " The format of the specified group name is invalid.\n"},{"file": 85,"line": 193,"col": 4,"docs": " Storage to process this request is not available.\n"},{"file": 85,"line": 736,"col": 4,"docs": " Arithmetic result exceeded 32 bits.\n"},{"file": 85,"line": 2852,"col": 4,"docs": " Only administrators have permission to add, remove, or configure server software during a Terminal services remote session. If you want to install or configure software on the server, contact your network administrator.\n"},{"file": 85,"line": 964,"col": 4,"docs": " There is an IP address conflict with another system on the network.\n"},{"file": 85,"line": 3269,"col": 4,"docs": " Invalid operation on the encoding/decoding handle.\n"},{"file": 85,"line": 2044,"col": 4,"docs": " The service is already registered.\n"},{"file": 85,"line": 1228,"col": 4,"docs": " {Partial Expedited Data Received} The network transport returned partial data to its client and this data was marked as expedited by the remote system. The remaining data will be sent later.\n"},{"file": 85,"line": 1885,"col": 4,"docs": " The tracking (workstation) service is not running.\n"},{"file": 85,"line": 3119,"col": 4,"docs": " The context handle changed during a remote procedure call.\n"},{"file": 85,"line": 2480,"col": 4,"docs": " There is no user session key for the specified logon session.\n"},{"file": 85,"line": 112,"col": 4,"docs": " The disk is full.\n"},{"file": 85,"line": 1180,"col": 4,"docs": " Debugger got control C.\n"},{"file": 85,"line": 2273,"col": 4,"docs": " Unable to update the password. The value provided for the new password contains values that are not allowed in passwords.\n"},{"file": 85,"line": 1246,"col": 4,"docs": " {Page Unlocked} The page protection of a locked page was changed to 'No Access' and the page was unlocked from memory and from the process.\n"},{"file": 85,"line": 1729,"col": 4,"docs": " When accessing a new tape of a multivolume partition, the current block size is incorrect.\n"},{"file": 85,"line": 3161,"col": 4,"docs": " A remote procedure call is already in progress for this thread.\n"},{"file": 85,"line": 1480,"col": 4,"docs": " The volume repair was not successful.\n"},{"file": 85,"line": 1,"col": 4,"docs": " The operation completed successfully.\n"},{"file": 85,"line": 1861,"col": 4,"docs": " The indicated device requires reinitialization due to hardware errors.\n"},{"file": 85,"line": 1327,"col": 4,"docs": " An open/create operation completed while an oplock break is underway.\n"},{"file": 85,"line": 2327,"col": 4,"docs": " The value provided was an invalid value for an identifier authority.\n"},{"file": 85,"line": 2675,"col": 4,"docs": " This operation requires an interactive window station.\n"},{"file": 85,"line": 892,"col": 4,"docs": " An attempt was made to acquire a mutant such that its maximum count would have been exceeded.\n"},{"file": 85,"line": 1840,"col": 4,"docs": " One of the library files needed to run this application cannot be found.\n"},{"file": 85,"line": 448,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 385,"col": 4,"docs": " One or more arguments are not correct.\n"},{"file": 85,"line": 1264,"col": 4,"docs": " A yield execution was performed and no thread was available to run.\n"},{"file": 85,"line": 2894,"col": 4,"docs": " The app that you are trying to run is not supported on this version of Windows.\n"},{"file": 85,"line": 3062,"col": 4,"docs": " There are no more members.\n"},{"file": 85,"line": 277,"col": 4,"docs": " The system call level is not correct.\n"},{"file": 85,"line": 1000,"col": 4,"docs": " {Illegal System DLL Relocation} The system DLL %hs was relocated in memory. The application will not run properly. The relocation occurred because the DLL %hs occupied an address range reserved for Windows system DLLs. The vendor supplying the DLL should be contacted for a new DLL.\n"},{"file": 85,"line": 3350,"col": 4,"docs": " No more data is available from the RPC pipe.\n"},{"file": 85,"line": 676,"col": 4,"docs": " The command specified an invalid field in its parameter list.\n"},{"file": 85,"line": 1588,"col": 4,"docs": " An I/O operation initiated by the registry failed unrecoverably. The registry could not read in, or write out, or flush, one of the files that contain the system's image of the registry.\n"},{"file": 85,"line": 2372,"col": 4,"docs": " Unable to complete the requested operation because of either a catastrophic media failure or a data structure corruption on the disk.\n"},{"file": 85,"line": 2270,"col": 4,"docs": " Unable to update the password. The value provided as the current password is incorrect.\n"},{"file": 85,"line": 1249,"col": 4,"docs": " %hs\n"},{"file": 85,"line": 1309,"col": 4,"docs": " ERROR_ABANDONED_WAIT_63\n"},{"file": 85,"line": 2996,"col": 4,"docs": " The array bounds are invalid.\n"},{"file": 85,"line": 3071,"col": 4,"docs": " The entry already exists.\n"},{"file": 85,"line": 1657,"col": 4,"docs": " The process terminated unexpectedly.\n"},{"file": 85,"line": 2366,"col": 4,"docs": " The specified domain already exists.\n"},{"file": 85,"line": 3338,"col": 4,"docs": " Invalid asynchronous remote procedure call handle.\n"},{"file": 85,"line": 2555,"col": 4,"docs": " Hot key is not registered.\n"},{"file": 85,"line": 553,"col": 4,"docs": " The specified extended attribute name was invalid.\n"},{"file": 85,"line": 1942,"col": 4,"docs": " An extended error has occurred.\n"},{"file": 85,"line": 2005,"col": 4,"docs": " An operation was attempted on a nonexistent network connection.\n"},{"file": 85,"line": 2101,"col": 4,"docs": " A program attempt to use an invalid register value. Normally caused by an uninitialized register. This error is Itanium specific.\n"},{"file": 85,"line": 355,"col": 4,"docs": " System trace information was not specified in your CONFIG.SYS file, or tracing is disallowed.\n"},{"file": 85,"line": 2378,"col": 4,"docs": " Generic access types were contained in an access mask which should already be mapped to nongeneric types.\n"},{"file": 85,"line": 730,"col": 4,"docs": " Attempt to access invalid address.\n"},{"file": 85,"line": 1468,"col": 4,"docs": " {Delayed Write Failed} Windows was unable to save all the data for the file %hs; the data has been lost. This error was returned by the server on which the file exists. Please try to save this file elsewhere.\n"},{"file": 85,"line": 1750,"col": 4,"docs": " No mapping for the Unicode character exists in the target multi-byte code page.\n"},{"file": 85,"line": 973,"col": 4,"docs": " A callback return system service cannot be executed when no callback is active.\n"},{"file": 85,"line": 2354,"col": 4,"docs": " The security account manager (SAM) or local security authority (LSA) server was in the wrong state to perform the security operation.\n"},{"file": 85,"line": 1423,"col": 4,"docs": " One or more errors occurred while processing the request.\n"},{"file": 85,"line": 2474,"col": 4,"docs": " The file or directory is corrupted and unreadable.\n"},{"file": 85,"line": 3203,"col": 4,"docs": " The environment specified is invalid.\n"},{"file": 85,"line": 1192,"col": 4,"docs": " Debugger command communication exception.\n"},{"file": 85,"line": 3116,"col": 4,"docs": " A null context handle was passed from the client to the host during a remote procedure call.\n"},{"file": 85,"line": 2288,"col": 4,"docs": " This user isn't allowed to sign in to this computer.\n"},{"file": 85,"line": 391,"col": 4,"docs": " A signal is already pending.\n"},{"file": 85,"line": 538,"col": 4,"docs": " All pipe instances are busy.\n"},{"file": 85,"line": 253,"col": 4,"docs": " The target internal file identifier is incorrect.\n"},{"file": 85,"line": 1363,"col": 4,"docs": " Specified buffer contains all zeros.\n"},{"file": 85,"line": 154,"col": 4,"docs": " Your file waiting to be printed was deleted.\n"},{"file": 85,"line": 3392,"col": 4,"docs": " The current user's delegated trust creation quota has been exceeded.\n"},{"file": 85,"line": 2795,"col": 4,"docs": " There was an error starting the Windows Installer service user interface. Contact your support personnel.\n"},{"file": 85,"line": 922,"col": 4,"docs": " The parameter(s) passed to the server in the client/server shared memory window were invalid. Too much data may have been put in the shared memory window.\n"},{"file": 85,"line": 841,"col": 4,"docs": " The NtCreateFile API failed. This error should never be returned to an application, it is a place holder for the Windows Lan Manager Redirector to use in its internal error mapping routines.\n"},{"file": 85,"line": 2906,"col": 4,"docs": " The RPC protocol sequence is not supported.\n"},{"file": 85,"line": 1174,"col": 4,"docs": " Debugger terminated thread.\n"},{"file": 85,"line": 370,"col": 4,"docs": " Cannot create another thread.\n"},{"file": 85,"line": 1930,"col": 4,"docs": " The specified network provider name is invalid.\n"},{"file": 85,"line": 778,"col": 4,"docs": " An attempt was made to attach to a device that was already attached to another device.\n"},{"file": 85,"line": 847,"col": 4,"docs": " {Application Exit by CTRL+C} The application terminated as a result of a CTRL+C.\n"},{"file": 85,"line": 1741,"col": 4,"docs": " The media in the drive may have changed.\n"},{"file": 85,"line": 2633,"col": 4,"docs": " Cannot process a message from a window that is not a multiple document interface (MDI) window.\n"},{"file": 85,"line": 3197,"col": 4,"docs": " The printer command is invalid.\n"},{"file": 85,"line": 748,"col": 4,"docs": " An error occurred in the ABIOS subsystem.\n"},{"file": 85,"line": 2876,"col": 4,"docs": " No valid sequence could be found for the set of updates.\n"},{"file": 85,"line": 625,"col": 4,"docs": " An invalid exception handler routine has been detected.\n"},{"file": 85,"line": 1510,"col": 4,"docs": " The handle with which this oplock was associated has been closed. The oplock is now broken.\n"},{"file": 85,"line": 2729,"col": 4,"docs": " The specified task index is invalid.\n"},{"file": 85,"line": 2882,"col": 4,"docs": " The XML update data is invalid.\n"},{"file": 85,"line": 3329,"col": 4,"docs": " The object specified was not found.\n"},{"file": 85,"line": 2336,"col": 4,"docs": " Either a required impersonation level was not provided, or the provided impersonation level is invalid.\n"},{"file": 85,"line": 1801,"col": 4,"docs": " Not enough server storage is available to process this command.\n"},{"file": 85,"line": 1873,"col": 4,"docs": " Element not found.\n"},{"file": 85,"line": 34,"col": 4,"docs": " An attempt was made to load a program with an incorrect format.\n"},{"file": 85,"line": 3455,"col": 4,"docs": " Image Color Management is not enabled.\n"},{"file": 85,"line": 2011,"col": 4,"docs": " The network location cannot be reached. For information about network troubleshooting, see Windows Help.\n"},{"file": 85,"line": 70,"col": 4,"docs": " Data error (cyclic redundancy check).\n"},{"file": 85,"line": 1639,"col": 4,"docs": " The service cannot accept control messages at this time.\n"},{"file": 85,"line": 3245,"col": 4,"docs": " The binding handle does not contain all required information.\n"},{"file": 85,"line": 2086,"col": 4,"docs": " The remote system is not available. For information about network troubleshooting, see Windows Help.\n"},{"file": 85,"line": 688,"col": 4,"docs": " Scrub is disabled on the specified file.\n"},{"file": 85,"line": 805,"col": 4,"docs": " If an MM error is returned which is not defined in the standard FsRtl filter, it is converted to one of the following errors which is guaranteed to be in the filter. In this case information is lost, however, the filter correctly handles the exception.\n"},{"file": 85,"line": 103,"col": 4,"docs": " The wrong diskette is in the drive. Insert %2 (Volume Serial Number: %3) into drive %1.\n"},{"file": 85,"line": 412,"col": 4,"docs": " The system detected a segment number that was not correct.\n"},{"file": 85,"line": 37,"col": 4,"docs": " The access code is invalid.\n"},{"file": 85,"line": 451,"col": 4,"docs": " The operating system cannot run this application program.\n"},{"file": 85,"line": 2411,"col": 4,"docs": " Cannot perform this operation on built-in accounts.\n"},{"file": 85,"line": 2648,"col": 4,"docs": " Insufficient system resources exist to complete the requested service.\n"},{"file": 85,"line": 262,"col": 4,"docs": " The system does not support the command requested.\n"},{"file": 85,"line": 3146,"col": 4,"docs": " The workstation does not have a trust secret.\n"},{"file": 85,"line": 2417,"col": 4,"docs": " Cannot perform this operation on this built-in special user.\n"},{"file": 85,"line": 2134,"col": 4,"docs": " Windows cannot open this program because the license enforcement system has been tampered with or become corrupted.\n"},{"file": 85,"line": 3224,"col": 4,"docs": " The specified image file did not contain a resource section.\n"},{"file": 85,"line": 3425,"col": 4,"docs": " The requested transformation operation is not supported.\n"},{"file": 85,"line": 3467,"col": 4,"docs": " The specified named color index is not present in the profile.\n"},{"file": 85,"line": 3347,"col": 4,"docs": " The RPC call completed before all pipes were processed.\n"},{"file": 85,"line": 2035,"col": 4,"docs": " Attempting to log in during an unauthorized time of day for this account.\n"},{"file": 85,"line": 1066,"col": 4,"docs": " The driver was not loaded because the system is booting into safe mode.\n"},{"file": 85,"line": 2597,"col": 4,"docs": " LB_SETCOUNT sent to non-lazy list box.\n"},{"file": 85,"line": 970,"col": 4,"docs": " {Low On Registry Space} The system has reached the maximum size allowed for the system part of the registry. Additional storage requests will be ignored.\n"},{"file": 85,"line": 1891,"col": 4,"docs": " Unable to remove the file to be replaced.\n"},{"file": 85,"line": 2375,"col": 4,"docs": " An internal error occurred.\n"},{"file": 85,"line": 2405,"col": 4,"docs": " The transaction state of a registry subtree is incompatible with the requested operation.\n"},{"file": 85,"line": 3122,"col": 4,"docs": " The binding handles passed to a remote procedure call do not match.\n"},{"file": 85,"line": 211,"col": 4,"docs": " Cannot create another system semaphore.\n"},{"file": 85,"line": 1027,"col": 4,"docs": " The requested interface is not supported.\n"},{"file": 85,"line": 2528,"col": 4,"docs": " Class already exists.\n"},{"file": 85,"line": 3194,"col": 4,"docs": " The printer already exists.\n"},{"file": 85,"line": 940,"col": 4,"docs": " The user/kernel marshalling buffer has overflowed.\n"},{"file": 85,"line": 1828,"col": 4,"docs": " The specified program was written for an earlier version of Windows.\n"},{"file": 85,"line": 1624,"col": 4,"docs": " An instance of the service is already running.\n"},{"file": 85,"line": 2351,"col": 4,"docs": " Configuration information could not be read from the domain controller, either because the machine is unavailable, or access has been denied.\n"},{"file": 85,"line": 415,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 757,"col": 4,"docs": " An attempt was made to cancel or set a timer that has an associated APC and the subject thread is not the thread that originally set the timer with an associated APC routine.\n"},{"file": 85,"line": 1636,"col": 4,"docs": " The specified service does not exist as an installed service.\n"},{"file": 85,"line": 3368,"col": 4,"docs": " Interface could not be exported to the specified entry.\n"},{"file": 85,"line": 298,"col": 4,"docs": " An attempt was made to move the file pointer before the beginning of the file.\n"},{"file": 85,"line": 151,"col": 4,"docs": " Space to store the file waiting to be printed is not available on the server.\n"},{"file": 85,"line": 724,"col": 4,"docs": " The process is already in background processing mode.\n"},{"file": 85,"line": 3497,"col": 4,"docs": " The specified printer driver is currently in use.\n"},{"file": 85,"line": 2861,"col": 4,"docs": " The update package is not permitted by software restriction policy.\n"},{"file": 85,"line": 2786,"col": 4,"docs": " Another installation is already in progress. Complete that installation before proceeding with this install.\n"},{"file": 85,"line": 931,"col": 4,"docs": " Internal OFS status codes indicating how an allocation operation is handled. Either it is retried after the containing onode is moved or the extent stream is converted to a large stream.\n"},{"file": 85,"line": 2855,"col": 4,"docs": " The requested operation completed successfully. The system will be restarted so the changes can take effect.\n"},{"file": 85,"line": 223,"col": 4,"docs": " Cannot request exclusive semaphores at interrupt time.\n"},{"file": 85,"line": 2080,"col": 4,"docs": " This operation is not supported on a computer running Windows Server 2003 for Small Business Server.\n"},{"file": 85,"line": 1735,"col": 4,"docs": " Unable to lock the media eject mechanism.\n"},{"file": 85,"line": 361,"col": 4,"docs": " DosMuxSemWait did not execute; too many semaphores are already set.\n"},{"file": 85,"line": 1186,"col": 4,"docs": " Debugger received RIP exception.\n"},{"file": 85,"line": 2128,"col": 4,"docs": " A dynamic link library (DLL) referenced a module that was neither a DLL nor the process's executable image.\n"},{"file": 85,"line": 3503,"col": 4,"docs": " A StartDocPrinter call was not issued.\n"},{"file": 85,"line": 1222,"col": 4,"docs": " {Partial Data Received} The network transport returned partial data to its client. The remaining data will be sent later.\n"},{"file": 85,"line": 2420,"col": 4,"docs": " The user cannot be removed from a group because the group is currently the user's primary group.\n"},{"file": 85,"line": 2264,"col": 4,"docs": " The specified user account is not a member of the specified group account.\n"},{"file": 85,"line": 958,"col": 4,"docs": " {Invalid DLL Entrypoint} The dynamic link library %hs is not written correctly. The stack pointer has been left in an inconsistent state. The entrypoint should be declared as WINAPI or STDCALL. Select YES to fail the DLL load. Select NO to continue execution. Selecting NO may cause the application to operate incorrectly.\n"},{"file": 85,"line": 3476,"col": 4,"docs": " The network connection was made successfully using default credentials.\n"},{"file": 85,"line": 1654,"col": 4,"docs": " The service has returned a service-specific error code.\n"},{"file": 85,"line": 1972,"col": 4,"docs": " The format of the specified message destination is invalid.\n"},{"file": 85,"line": 2432,"col": 4,"docs": " The specified account name is already a member of the group.\n"},{"file": 85,"line": 1783,"col": 4,"docs": " The floppy disk controller reported an error that is not recognized by the floppy disk driver.\n"},{"file": 85,"line": 3326,"col": 4,"docs": " The object exporter specified was not found.\n"},{"file": 85,"line": 2047,"col": 4,"docs": " The specified service does not exist.\n"},{"file": 85,"line": 163,"col": 4,"docs": " The network resource type is not correct.\n"},{"file": 85,"line": 2149,"col": 4,"docs": " Data present in one of the parameters is more than the function can operate on.\n"},{"file": 85,"line": 1081,"col": 4,"docs": " A Machine Check Error has occurred. Please check the system eventlog for additional information.\n"},{"file": 85,"line": 1864,"col": 4,"docs": " The device has indicated that cleaning is required before further operations are attempted.\n"},{"file": 85,"line": 994,"col": 4,"docs": " The specified quota list is internally inconsistent with its descriptor.\n"},{"file": 85,"line": 1525,"col": 4,"docs": " Access to the extended attribute was denied.\n"},{"file": 85,"line": 2768,"col": 4,"docs": " The installation source for this product is not available. Verify that the source exists and that you can access it.\n"},{"file": 85,"line": 1033,"col": 4,"docs": " The system file %1 has become corrupt and has been replaced.\n"},{"file": 85,"line": 2198,"col": 4,"docs": " Indicates a particular Security ID may not be assigned as the label of an object.\n"},{"file": 85,"line": 3509,"col": 4,"docs": " The specified print processor has already been installed.\n"},{"file": 85,"line": 475,"col": 4,"docs": " No process in the command subtree has a signal handler.\n"},{"file": 85,"line": 961,"col": 4,"docs": " {Invalid Service Callback Entrypoint} The %hs service is not written correctly. The stack pointer has been left in an inconsistent state. The callback entrypoint should be declared as WINAPI or STDCALL. Selecting OK will cause the service to continue operation. However, the service process may operate incorrectly.\n"},{"file": 85,"line": 1705,"col": 4,"docs": " The executable program that this service is configured to run in does not implement the service.\n"},{"file": 85,"line": 1939,"col": 4,"docs": " Cannot enumerate a noncontainer.\n"},{"file": 85,"line": 2819,"col": 4,"docs": " Data supplied is of wrong type.\n"},{"file": 85,"line": 1087,"col": 4,"docs": " System hive size has exceeded its limit.\n"},{"file": 85,"line": 943,"col": 4,"docs": " The supplied variant structure contains invalid data.\n"},{"file": 85,"line": 2615,"col": 4,"docs": " Invalid system-wide (SPI_*) parameter.\n"},{"file": 85,"line": 1645,"col": 4,"docs": " The service process could not connect to the service controller.\n"},{"file": 85,"line": 2507,"col": 4,"docs": " Invalid accelerator table handle.\n"},{"file": 85,"line": 982,"col": 4,"docs": " You have attempted to change your password to one that you have used in the past. The policy of your user account does not allow this. Please select a password that you have not previously used.\n"},{"file": 85,"line": 988,"col": 4,"docs": " The specified hardware profile configuration is invalid.\n"},{"file": 85,"line": 2192,"col": 4,"docs": " A privilege that the service requires to function properly does not exist in the service account configuration. You may use the Services Microsoft Management Console (MMC) snap-in (services.msc) and the Local Security Settings MMC snap-in (secpol.msc) to view the service configuration and the account configuration.\n"},{"file": 85,"line": 562,"col": 4,"docs": " No more data is available.\n"},{"file": 85,"line": 2585,"col": 4,"docs": " This hook procedure can only be set globally.\n"},{"file": 85,"line": 2207,"col": 4,"docs": " No system quota limits are specifically set for this account.\n"},{"file": 85,"line": 3020,"col": 4,"docs": " The string is too long.\n"},{"file": 85,"line": 877,"col": 4,"docs": " An illegal character was encountered. For a multi-byte character set this includes a lead byte without a succeeding trail byte. For the Unicode character set this includes the characters 0xFFFF and 0xFFFE.\n"},{"file": 85,"line": 3275,"col": 4,"docs": " Incompatible version of the RPC stub.\n"},{"file": 85,"line": 3167,"col": 4,"docs": " The user's account has expired.\n"},{"file": 85,"line": 3506,"col": 4,"docs": " An AddJob call was not issued.\n"},{"file": 85,"line": 1237,"col": 4,"docs": " Checking file system on %wZ.\n"},{"file": 85,"line": 2140,"col": 4,"docs": " The current thread has already been converted to a fiber.\n"},{"file": 85,"line": 2146,"col": 4,"docs": " The system detected an overrun of a stack-based buffer in this application. This overrun could potentially allow a malicious user to gain control of this application.\n"},{"file": 85,"line": 1843,"col": 4,"docs": " The current process has used all of its system allowance of handles for Window Manager objects.\n"},{"file": 85,"line": 1129,"col": 4,"docs": " {Handles Closed} Handles to objects have been automatically closed as a result of the requested operation.\n"},{"file": 85,"line": 1312,"col": 4,"docs": " ERROR_USER_APC\n"},{"file": 85,"line": 3428,"col": 4,"docs": " The requested clipping operation is not supported.\n"},{"file": 85,"line": 424,"col": 4,"docs": " The specified system semaphore name was not found.\n"},{"file": 85,"line": 2666,"col": 4,"docs": " A menu item was not found.\n"},{"file": 85,"line": 3440,"col": 4,"docs": " A required tag is not present.\n"},{"file": 85,"line": 3209,"col": 4,"docs": " The account used is an interdomain trust account. Use your global user account or local user account to access this server.\n"},{"file": 85,"line": 1621,"col": 4,"docs": " The service database is locked.\n"},{"file": 85,"line": 3308,"col": 4,"docs": " The specified printer handle is already being waited on.\n"},{"file": 85,"line": 418,"col": 4,"docs": " Cannot create a file when that file already exists.\n"},{"file": 85,"line": 856,"col": 4,"docs": " {Application Error} The application was unable to start correctly (0x%lx). Click OK to close the application.\n"},{"file": 85,"line": 3149,"col": 4,"docs": " The security database on the server does not have a computer account for this workstation trust relationship.\n"},{"file": 85,"line": 3320,"col": 4,"docs": " Could not find the domain controller for this domain.\n"},{"file": 85,"line": 2471,"col": 4,"docs": " Indicates an ACL contains no inheritable components.\n"},{"file": 85,"line": 2077,"col": 4,"docs": " The specified user does not have a valid profile.\n"},{"file": 85,"line": 3215,"col": 4,"docs": " The account used is a server trust account. Use your global user account or local user account to access this server.\n"},{"file": 85,"line": 1267,"col": 4,"docs": " The resumable flag to a timer API was ignored.\n"},{"file": 85,"line": 1981,"col": 4,"docs": " The workgroup or domain name is already in use by another computer on the network.\n"},{"file": 85,"line": 1336,"col": 4,"docs": " This indicates that a notify change request has been completed due to closing the handle which made the notify change request.\n"},{"file": 85,"line": 1288,"col": 4,"docs": " A device driver is leaking locked I/O pages causing system degradation. The system has automatically enabled tracking code in order to try and catch the culprit.\n"},{"file": 85,"line": 1612,"col": 4,"docs": " The requested control is not valid for this service.\n"},{"file": 85,"line": 94,"col": 4,"docs": " A device attached to the system is not functioning.\n"},{"file": 85,"line": 1732,"col": 4,"docs": " Tape partition information could not be found when loading a tape.\n"},{"file": 85,"line": 2234,"col": 4,"docs": " There are currently no logon servers available to service the logon request.\n"},{"file": 85,"line": 2201,"col": 4,"docs": " Not all privileges or groups referenced are assigned to the caller.\n"},{"file": 85,"line": 2498,"col": 4,"docs": " Invalid window handle.\n"},{"file": 85,"line": 2029,"col": 4,"docs": " The operation could not be completed. A retry should be performed.\n"},{"file": 85,"line": 2714,"col": 4,"docs": " The event log file is corrupted.\n"},{"file": 85,"line": 187,"col": 4,"docs": " The directory or file cannot be created.\n"},{"file": 85,"line": 64,"col": 4,"docs": " The device is not ready.\n"},{"file": 85,"line": 2630,"col": 4,"docs": " Invalid thread identifier.\n"},{"file": 85,"line": 2570,"col": 4,"docs": " Height must be less than 256.\n"},{"file": 85,"line": 1285,"col": 4,"docs": " Windows has detected that the system firmware (BIOS) was updated [previous firmware date = %2, current firmware date %3].\n"},{"file": 85,"line": 3140,"col": 4,"docs": " The supplied user buffer is not valid for the requested operation.\n"},{"file": 85,"line": 1702,"col": 4,"docs": " No recovery program has been configured for this service.\n"},{"file": 85,"line": 2657,"col": 4,"docs": " Insufficient quota to complete the requested service.\n"},{"file": 85,"line": 2732,"col": 4,"docs": " The specified thread is already joining a task.\n"},{"file": 85,"line": 1318,"col": 4,"docs": " ERROR_ALERTED\n"},{"file": 85,"line": 2606,"col": 4,"docs": " Child windows cannot have menus.\n"},{"file": 85,"line": 865,"col": 4,"docs": " {No Paging File Specified} No paging file was specified in the system configuration.\n"},{"file": 85,"line": 1960,"col": 4,"docs": " The format of the specified network name is invalid.\n"},{"file": 85,"line": 310,"col": 4,"docs": " An attempt was made to use a JOIN or SUBST command on a drive that has already been substituted.\n"},{"file": 85,"line": 1993,"col": 4,"docs": " The remote computer refused the network connection.\n"},{"file": 85,"line": 1786,"col": 4,"docs": " The floppy disk controller returned inconsistent results in its registers.\n"},{"file": 85,"line": 2089,"col": 4,"docs": " The security identifier provided is not from an account domain.\n"},{"file": 85,"line": 469,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 1456,"col": 4,"docs": " Access to %1 is monitored by policy rule %2.\n"},{"file": 85,"line": 838,"col": 4,"docs": " The SAM database on a Windows Server is significantly out of synchronization with the copy on the Domain Controller. A complete synchronization is required.\n"},{"file": 85,"line": 1513,"col": 4,"docs": " The specified access control entry (ACE) does not contain a condition.\n"},{"file": 85,"line": 2525,"col": 4,"docs": " Hot key is already registered.\n"},{"file": 85,"line": 88,"col": 4,"docs": " The system cannot write to the specified device.\n"},{"file": 85,"line": 700,"col": 4,"docs": " An operation is not supported on a directory.\n"},{"file": 85,"line": 2369,"col": 4,"docs": " An attempt was made to exceed the limit on the number of domains per server.\n"},{"file": 85,"line": 1504,"col": 4,"docs": " An oplock of the requested level cannot be granted. An oplock of a lower level may be available.\n"},{"file": 85,"line": 1126,"col": 4,"docs": " {Kernel Debugger Awakened} the system debugger was awakened by an interrupt.\n"},{"file": 85,"line": 403,"col": 4,"docs": " Device's command support detection is in progress.\n"},{"file": 85,"line": 580,"col": 4,"docs": " The specified extended attribute handle is invalid.\n"},{"file": 85,"line": 1798,"col": 4,"docs": " Physical end of tape encountered.\n"},{"file": 85,"line": 2519,"col": 4,"docs": " Cannot find window class.\n"},{"file": 85,"line": 3242,"col": 4,"docs": " The remote procedure call was cancelled.\n"},{"file": 85,"line": 3155,"col": 4,"docs": " The trust relationship between this workstation and the primary domain failed.\n"},{"file": 85,"line": 2387,"col": 4,"docs": " Cannot start a new logon session with an ID that is already in use.\n"},{"file": 85,"line": 1063,"col": 4,"docs": " The specified range could not be found in the range list.\n"},{"file": 85,"line": 1822,"col": 4,"docs": " The specified program is not a Windows or MS-DOS program.\n"},{"file": 85,"line": 1894,"col": 4,"docs": " Unable to move the replacement file to the file to be replaced. The file to be replaced has retained its original name.\n"},{"file": 85,"line": 496,"col": 4,"docs": " Too many dynamic-link modules are attached to this program or dynamic-link module.\n"},{"file": 85,"line": 3434,"col": 4,"docs": " The specified color profile is invalid.\n"},{"file": 85,"line": 1261,"col": 4,"docs": " {Machine Type Mismatch} The image file %hs is valid, but is for a machine type other than the current machine.\n"},{"file": 85,"line": 3410,"col": 4,"docs": " Logon Failure: EAS policy requires that the user change their password before this operation can be performed.\n"},{"file": 85,"line": 2915,"col": 4,"docs": " The endpoint format is invalid.\n"},{"file": 85,"line": 3152,"col": 4,"docs": " The trust relationship between the primary domain and the trusted domain failed.\n"},{"file": 85,"line": 2483,"col": 4,"docs": " The service being accessed is licensed for a particular number of connections. No more connections can be made to the service at this time because there are already as many connections as the service can accept.\n"},{"file": 85,"line": 3143,"col": 4,"docs": " The disk media is not recognized. It may not be formatted.\n"},{"file": 85,"line": 109,"col": 4,"docs": " Reached the end of the file.\n"},{"file": 85,"line": 2330,"col": 4,"docs": " No more memory is available for security information updates.\n"},{"file": 85,"line": 874,"col": 4,"docs": " A Windows Server has an incorrect configuration.\n"},{"file": 85,"line": 2137,"col": 4,"docs": " A transaction recover failed.\n"},{"file": 85,"line": 2462,"col": 4,"docs": " A new member could not be added to a local group because the member has the wrong account type.\n"},{"file": 85,"line": 1204,"col": 4,"docs": " This informational level status indicates that a specified registry sub-tree transaction state did not yet exist and had to be created.\n"},{"file": 85,"line": 2774,"col": 4,"docs": " Product is uninstalled.\n"},{"file": 85,"line": 2612,"col": 4,"docs": " Invalid message box style.\n"},{"file": 85,"line": 1807,"col": 4,"docs": " The base address or the file offset specified does not have the proper alignment.\n"},{"file": 85,"line": 3290,"col": 4,"docs": " The group member was not found.\n"},{"file": 85,"line": 1858,"col": 4,"docs": " The indicated element is part of a magazine that is not present.\n"},{"file": 85,"line": 2723,"col": 4,"docs": " The event log file has changed between read operations.\n"},{"file": 85,"line": 1630,"col": 4,"docs": " The service cannot be started, either because it is disabled or because it has no enabled devices associated with it.\n"},{"file": 85,"line": 1075,"col": 4,"docs": " The create operation failed because the name contained at least one mount point which resolves to a volume to which the specified device object is not attached.\n"},{"file": 85,"line": 3053,"col": 4,"docs": " No interfaces have been exported.\n"},{"file": 85,"line": 3278,"col": 4,"docs": " The RPC pipe object is invalid or corrupted.\n"},{"file": 85,"line": 202,"col": 4,"docs": " The parameter is incorrect.\n"},{"file": 85,"line": 787,"col": 4,"docs": " Profiling not stopped.\n"},{"file": 85,"line": 997,"col": 4,"docs": " {Windows Evaluation Notification} The evaluation period for this installation of Windows has expired. This system will shutdown in 1 hour. To restore access to this installation of Windows, please upgrade this installation using a licensed distribution of this product.\n"},{"file": 85,"line": 1534,"col": 4,"docs": " Overlapped I/O operation is in progress.\n"},{"file": 85,"line": 3317,"col": 4,"docs": " The user's password must be changed before signing in.\n"},{"file": 85,"line": 2167,"col": 4,"docs": " The operation occurred beyond the valid data length of the file.\n"},{"file": 85,"line": 1507,"col": 4,"docs": " The operation did not complete successfully because it would cause an oplock to be broken. The caller has requested that existing oplocks not be broken.\n"},{"file": 85,"line": 1819,"col": 4,"docs": " The specified program requires a newer version of Windows.\n"},{"file": 85,"line": 2291,"col": 4,"docs": " The password for this account has expired.\n"},{"file": 85,"line": 2213,"col": 4,"docs": " The password is too complex to be converted to a LAN Manager password. The LAN Manager password returned is a NULL string.\n"},{"file": 85,"line": 3056,"col": 4,"docs": " The entry name is incomplete.\n"},{"file": 85,"line": 2155,"col": 4,"docs": " An attempt to delay-load a .dll or get a function address in a delay-loaded .dll failed.\n"},{"file": 85,"line": 1291,"col": 4,"docs": " The system has awoken.\n"},{"file": 85,"line": 1984,"col": 4,"docs": " The network is not present or not started.\n"},{"file": 85,"line": 2684,"col": 4,"docs": " Incorrect size argument.\n"},{"file": 85,"line": 745,"col": 4,"docs": " Application verifier has found an error in the current process.\n"},{"file": 85,"line": 481,"col": 4,"docs": " The ring 2 stack is in use.\n"},{"file": 85,"line": 646,"col": 4,"docs": " The system cannot find message text for message number 0x%1 in the message file for %2.\n"},{"file": 85,"line": 1093,"col": 4,"docs": " {Volume Shadow Copy Service} Please wait while the Volume Shadow Copy Service prepares volume %hs for hibernation.\n"},{"file": 85,"line": 790,"col": 4,"docs": " The passed ACL did not contain the minimum required information.\n"},{"file": 85,"line": 2771,"col": 4,"docs": " This installation package cannot be installed by the Windows Installer service. You must install a Windows service pack that contains a newer version of the Windows Installer service.\n"},{"file": 85,"line": 3179,"col": 4,"docs": " The printer driver is unknown.\n"},{"file": 85,"line": 3341,"col": 4,"docs": " Invalid asynchronous RPC call handle for this operation.\n"},{"file": 85,"line": 1114,"col": 4,"docs": " A device is missing in the system BIOS MPS table. This device will not be used. Please contact your system vendor for system BIOS update.\n"},{"file": 85,"line": 1459,"col": 4,"docs": " Access to %1 has been restricted by your Administrator by policy rule %2.\n"},{"file": 85,"line": 3035,"col": 4,"docs": " The authentication level is unknown.\n"},{"file": 85,"line": 2687,"col": 4,"docs": " The symbolic link cannot be followed because its type is disabled.\n"},{"file": 85,"line": 1408,"col": 4,"docs": " Compression is disabled for this volume.\n"},{"file": 85,"line": 1159,"col": 4,"docs": " The application is attempting to run executable code from the module %hs. This may be insecure. An alternative, %hs, is available. Should the application use the secure module %hs?\n"},{"file": 85,"line": 1300,"col": 4,"docs": " ERROR_WAIT_3\n"},{"file": 85,"line": 1138,"col": 4,"docs": " {Media Changed} The media may have changed.\n"},{"file": 85,"line": 2897,"col": 4,"docs": " The string binding is invalid.\n"},{"file": 85,"line": 520,"col": 4,"docs": " The file size exceeds the limit allowed and cannot be saved.\n"},{"file": 85,"line": 2408,"col": 4,"docs": " An internal security database corruption has been encountered.\n"},{"file": 85,"line": 3230,"col": 4,"docs": " The specified resource name cannot be found in the image file.\n"},{"file": 85,"line": 3431,"col": 4,"docs": " The specified color management module is invalid.\n"},{"file": 85,"line": 1036,"col": 4,"docs": " {Virtual Memory Minimum Too Low} Your system is low on virtual memory. Windows is increasing the size of your virtual memory paging file. During this process, memory requests for some applications may be denied. For more information, see Help.\n"},{"file": 85,"line": 2564,"col": 4,"docs": " Invalid message for a combo box because it does not have an edit control.\n"},{"file": 85,"line": 241,"col": 4,"docs": " The system cannot open the device or file specified.\n"},{"file": 85,"line": 2618,"col": 4,"docs": " Screen already locked.\n"},{"file": 85,"line": 1015,"col": 4,"docs": " The server process is running under a SID different than that required by client.\n"},{"file": 85,"line": 1210,"col": 4,"docs": " {Invalid Current Directory} The process cannot switch to the startup current directory %hs. Select OK to set current directory to %hs, or select CANCEL to exit.\n"},{"file": 85,"line": 2071,"col": 4,"docs": " This operation is supported only when you are connected to the server.\n"},{"file": 85,"line": 3272,"col": 4,"docs": " Incompatible version of the serializing package.\n"},{"file": 85,"line": 3398,"col": 4,"docs": " The current user's delegated trust deletion quota has been exceeded.\n"},{"file": 85,"line": 115,"col": 4,"docs": " The request is not supported.\n"},{"file": 85,"line": 895,"col": 4,"docs": " A volume has been accessed for which a file system driver is required that has not yet been loaded.\n"},{"file": 85,"line": 1699,"col": 4,"docs": " This service runs in the same process as the service control manager. Therefore, the service control manager cannot take action if this service's process terminates unexpectedly.\n"},{"file": 85,"line": 259,"col": 4,"docs": " The verify-on-write switch parameter value is not correct.\n"},{"file": 85,"line": 1396,"col": 4,"docs": " An operation is blocked waiting for an oplock.\n"},{"file": 85,"line": 670,"col": 4,"docs": " Device does not support file-level TRIM.\n"},{"file": 85,"line": 2510,"col": 4,"docs": " Invalid hook handle.\n"},{"file": 85,"line": 2174,"col": 4,"docs": " The process hosting the driver for this device has been terminated.\n"},{"file": 85,"line": 652,"col": 4,"docs": " The Central Access Policy specified is not defined on the target machine.\n"},{"file": 85,"line": 2032,"col": 4,"docs": " A connection to the server could not be made because the limit on the number of concurrent connections for this account has been reached.\n"},{"file": 85,"line": 397,"col": 4,"docs": " Unable to lock a region of a file.\n"},{"file": 85,"line": 2558,"col": 4,"docs": " The window is not a valid dialog window.\n"},{"file": 85,"line": 3173,"col": 4,"docs": " The specified printer driver is already installed.\n"},{"file": 85,"line": 2315,"col": 4,"docs": " The security descriptor structure is invalid.\n"},{"file": 85,"line": 3293,"col": 4,"docs": " The endpoint mapper database entry could not be created.\n"},{"file": 85,"line": 1348,"col": 4,"docs": " Page fault was a demand zero fault.\n"},{"file": 85,"line": 2933,"col": 4,"docs": " The type universal unique identifier (UUID) has already been registered.\n"},{"file": 85,"line": 1780,"col": 4,"docs": " Mismatch between the floppy disk sector ID field and the floppy disk controller track address.\n"},{"file": 85,"line": 295,"col": 4,"docs": " Attempt to use a file handle to an open disk partition for an operation other than raw disk I/O.\n"},{"file": 85,"line": 2594,"col": 4,"docs": " Invalid message for single-selection list box.\n"},{"file": 85,"line": 1879,"col": 4,"docs": " The property set specified does not exist on the object.\n"},{"file": 85,"line": 343,"col": 4,"docs": " The path specified is being used in a substitute.\n"},{"file": 85,"line": 2104,"col": 4,"docs": " The share is currently offline or does not exist.\n"},{"file": 85,"line": 2717,"col": 4,"docs": " No event log file could be opened, so the event logging service did not start.\n"},{"file": 85,"line": 3371,"col": 4,"docs": " The specified profile entry could not be added.\n"},{"file": 85,"line": 1810,"col": 4,"docs": " An attempt to change the system power state was vetoed by another application or driver.\n"},{"file": 85,"line": 1492,"col": 4,"docs": " One of the volume corruption logs was deleted while still having corruption records in them. The volume contains detected corruptions and must be scanned.\n"},{"file": 85,"line": 2945,"col": 4,"docs": " The manager type is unknown.\n"},{"file": 85,"line": 1069,"col": 4,"docs": " The driver was not loaded because it failed its initialization call.\n"},{"file": 85,"line": 439,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 835,"col": 4,"docs": " The Netlogon service cannot start because another Netlogon service running in the domain conflicts with the specified role.\n"},{"file": 85,"line": 529,"col": 4,"docs": " This file contains a virus or potentially unwanted software and cannot be opened. Due to the nature of this virus or potentially unwanted software, the file has been removed from this location.\n"},{"file": 85,"line": 1546,"col": 4,"docs": " The window cannot act on the sent message.\n"},{"file": 85,"line": 799,"col": 4,"docs": " Indicates that a thread attempted to terminate itself by default (called NtTerminateThread with NULL) and it was the last thread in the current process.\n"},{"file": 85,"line": 472,"col": 4,"docs": " The system could not find the environment option that was entered.\n"},{"file": 85,"line": 2357,"col": 4,"docs": " The domain was in the wrong state to perform the security operation.\n"},{"file": 85,"line": 2663,"col": 4,"docs": " The paging file is too small for this operation to complete.\n"},{"file": 85,"line": 124,"col": 4,"docs": " The network path was not found.\n"},{"file": 85,"line": 238,"col": 4,"docs": " The pipe has been ended.\n"},{"file": 85,"line": 1909,"col": 4,"docs": " The journal entry has been deleted from the journal.\n"},{"file": 85,"line": 130,"col": 4,"docs": " The specified network resource or device is no longer available.\n"},{"file": 85,"line": 1918,"col": 4,"docs": " The specified device name is invalid.\n"},{"file": 85,"line": 2822,"col": 4,"docs": " Data of this type is not supported.\n"},{"file": 85,"line": 622,"col": 4,"docs": " The specified file already has a notification GUID associated with it.\n"},{"file": 85,"line": 2669,"col": 4,"docs": " Invalid keyboard layout handle.\n"},{"file": 85,"line": 2816,"col": 4,"docs": " Invalid or unknown table specified.\n"},{"file": 85,"line": 3212,"col": 4,"docs": " The account used is a computer account. Use your global user account or local user account to access this server.\n"},{"file": 85,"line": 754,"col": 4,"docs": " An error occurred in the WX86 subsystem.\n"},{"file": 85,"line": 3479,"col": 4,"docs": " The specified username is invalid.\n"},{"file": 85,"line": 3449,"col": 4,"docs": " The specified color profile was not found.\n"},{"file": 85,"line": 2222,"col": 4,"docs": " This security ID may not be assigned as the owner of this object.\n"},{"file": 85,"line": 577,"col": 4,"docs": " The extended attribute table file is full.\n"},{"file": 85,"line": 1132,"col": 4,"docs": " {Too Much Information} The specified access control list (ACL) contained more information than was expected.\n"},{"file": 85,"line": 2279,"col": 4,"docs": " The user name or password is incorrect.\n"},{"file": 85,"line": 2231,"col": 4,"docs": " The group may not be disabled.\n"},{"file": 85,"line": 2987,"col": 4,"docs": " The transfer syntax is not supported by the RPC server.\n"},{"file": 85,"line": 3182,"col": 4,"docs": " The print processor is unknown.\n"},{"file": 85,"line": 1912,"col": 4,"docs": " A system shutdown has already been scheduled.\n"},{"file": 85,"line": 3050,"col": 4,"docs": " There are no more endpoints available from the endpoint mapper.\n"},{"file": 85,"line": 2975,"col": 4,"docs": " The remote procedure call failed.\n"},{"file": 85,"line": 1177,"col": 4,"docs": " Debugger terminated process.\n"},{"file": 85,"line": 3485,"col": 4,"docs": " This network connection has files open or requests pending.\n"},{"file": 85,"line": 1372,"col": 4,"docs": " The translator has translated these resources into the global space and no further translations should be performed.\n"},{"file": 85,"line": 436,"col": 4,"docs": " Cannot run %1 in Win32 mode.\n"},{"file": 85,"line": 880,"col": 4,"docs": " The Unicode character is not defined in the Unicode character set installed on the system.\n"},{"file": 85,"line": 1438,"col": 4,"docs": " The hardware has reported an uncorrectable memory error.\n"},{"file": 85,"line": 1006,"col": 4,"docs": " The validation process needs to continue on to the next step.\n"},{"file": 85,"line": 1369,"col": 4,"docs": " The device has succeeded a query-stop and its resource requirements have changed.\n"},{"file": 85,"line": 949,"col": 4,"docs": " {Audit Failed} An attempt to generate a security audit failed.\n"},{"file": 85,"line": 937,"col": 4,"docs": " The bucket array must be grown. Retry transaction after doing so.\n"},{"file": 85,"line": 1360,"col": 4,"docs": " Crash dump exists in paging file.\n"},{"file": 85,"line": 2858,"col": 4,"docs": " The upgrade cannot be installed by the Windows Installer service because the program to be upgraded may be missing, or the upgrade may update a different version of the program. Verify that the program to be upgraded exists on your computer and that you have the correct upgrade.\n"},{"file": 85,"line": 139,"col": 4,"docs": " The specified server cannot perform the requested operation.\n"},{"file": 85,"line": 2561,"col": 4,"docs": " Control ID not found.\n"},{"file": 85,"line": 271,"col": 4,"docs": " The data area passed to a system call is too small.\n"},{"file": 85,"line": 829,"col": 4,"docs": " An attempt was made to operate on a thread within a specific process, but the thread specified is not in the process specified.\n"},{"file": 85,"line": 349,"col": 4,"docs": " The path specified cannot be used at this time.\n"},{"file": 85,"line": 862,"col": 4,"docs": " Windows cannot verify the digital signature for this file. A recent hardware or software change might have installed a file that is signed incorrectly or damaged, or that might be malicious software from an unknown source.\n"},{"file": 85,"line": 1417,"col": 4,"docs": " The data provider requires that previously fetched data is released before asking for more data.\n"},{"file": 85,"line": 307,"col": 4,"docs": " An attempt was made to use a JOIN or SUBST command on a drive that has already been joined.\n"},{"file": 85,"line": 2228,"col": 4,"docs": " An attempt has been made to operate on an impersonation token by a thread that is not currently impersonating a client.\n"},{"file": 85,"line": 3470,"col": 4,"docs": " The specified profile is intended for a device of a different type than the specified device.\n"},{"file": 85,"line": 1651,"col": 4,"docs": " The database specified does not exist.\n"},{"file": 85,"line": 2477,"col": 4,"docs": " The disk structure is corrupted and unreadable.\n"},{"file": 85,"line": 1273,"col": 4,"docs": " The inserted CardBus device cannot be started because of a configuration error on \"%hs\".\n"},{"file": 85,"line": 13,"col": 4,"docs": " The system cannot open the file.\n"},{"file": 85,"line": 1543,"col": 4,"docs": " Recursion too deep; the stack overflowed.\n"},{"file": 85,"line": 2017,"col": 4,"docs": " The network location cannot be reached. For information about network troubleshooting, see Windows Help.\n"},{"file": 85,"line": 3263,"col": 4,"docs": " A security package specific error occurred.\n"},{"file": 85,"line": 145,"col": 4,"docs": " The remote adapter is not compatible.\n"},{"file": 85,"line": 1765,"col": 4,"docs": " No serial device was successfully initialized. The serial driver will unload.\n"},{"file": 85,"line": 3314,"col": 4,"docs": " The state of the printer is invalid.\n"},{"file": 85,"line": 2065,"col": 4,"docs": " The specified site does not exist.\n"},{"file": 85,"line": 3353,"col": 4,"docs": " No site name is available for this machine.\n"},{"file": 85,"line": 3305,"col": 4,"docs": " The specified form size is invalid.\n"},{"file": 85,"line": 334,"col": 4,"docs": " The system cannot join or substitute a drive to or for a directory on the same drive.\n"},{"file": 85,"line": 2681,"col": 4,"docs": " Invalid monitor handle.\n"},{"file": 85,"line": 2306,"col": 4,"docs": " The subauthority part of a security ID is invalid for this particular use.\n"},{"file": 85,"line": 508,"col": 4,"docs": " The image file %1 is strong signed, unable to modify.\n"},{"file": 85,"line": 2828,"col": 4,"docs": " The Temp folder is on a drive that is full or is inaccessible. Free up space on the drive or verify that you have write permission on the Temp folder.\n"},{"file": 85,"line": 2441,"col": 4,"docs": " The maximum number of secrets that may be stored in a single system has been exceeded.\n"},{"file": 85,"line": 340,"col": 4,"docs": " The directory is not empty.\n"},{"file": 85,"line": 760,"col": 4,"docs": " Unwind exception code.\n"},{"file": 85,"line": 1711,"col": 4,"docs": " The physical end of the tape has been reached.\n"},{"file": 85,"line": 205,"col": 4,"docs": " A write fault occurred on the network.\n"},{"file": 85,"line": 1714,"col": 4,"docs": " A tape access reached a filemark.\n"},{"file": 85,"line": 1990,"col": 4,"docs": " The requested operation cannot be performed on a file with a user-mapped section open.\n"},{"file": 85,"line": 2495,"col": 4,"docs": " This operation cannot be performed on the current domain.\n"},{"file": 85,"line": 1549,"col": 4,"docs": " Cannot complete this function.\n"},{"file": 85,"line": 2164,"col": 4,"docs": " The parameter passed to a C runtime function is incorrect.\n"},{"file": 85,"line": 2177,"col": 4,"docs": " An operation attempted to exceed an implementation-defined limit.\n"},{"file": 85,"line": 1018,"col": 4,"docs": " A group marked use for deny only cannot be enabled.\n"},{"file": 85,"line": 1411,"col": 4,"docs": " The data provider cannot fetch backwards through a result set.\n"},{"file": 85,"line": 1012,"col": 4,"docs": " The range could not be added to the range list because of a conflict.\n"},{"file": 85,"line": 1141,"col": 4,"docs": " {GUID Substitution} During the translation of a global identifier (GUID) to a Windows security ID (SID), no administratively-defined GUID prefix was found. A substitute prefix was used, which will not compromise system security. However, this may provide a more restrictive access than intended.\n"},{"file": 85,"line": 2056,"col": 4,"docs": " Continue with work in progress.\n"},{"file": 85,"line": 166,"col": 4,"docs": " The network name cannot be found.\n"},{"file": 85,"line": 1708,"col": 4,"docs": " This service cannot be started in Safe Mode.\n"},{"file": 85,"line": 2951,"col": 4,"docs": " There are no bindings.\n"},{"file": 85,"line": 1045,"col": 4,"docs": " Device will not start without a reboot.\n"},{"file": 85,"line": 2582,"col": 4,"docs": " Cannot set nonlocal hook without a module handle.\n"},{"file": 85,"line": 2990,"col": 4,"docs": " The universal unique identifier (UUID) type is not supported.\n"},{"file": 85,"line": 169,"col": 4,"docs": " The name limit for the local computer network adapter card was exceeded.\n"},{"file": 85,"line": 1561,"col": 4,"docs": " The requested operation cannot be performed in full-screen mode.\n"},{"file": 85,"line": 322,"col": 4,"docs": " The system tried to substitute a drive to a directory on a substituted drive.\n"},{"file": 85,"line": 811,"col": 4,"docs": " A malformed function table was encountered during an unwind operation.\n"},{"file": 85,"line": 1615,"col": 4,"docs": " The service did not respond to the start or control request in a timely fashion.\n"},{"file": 85,"line": 2092,"col": 4,"docs": " The security identifier provided does not have a domain component.\n"},{"file": 85,"line": 2348,"col": 4,"docs": " Unable to perform a security operation on an object that has no associated security.\n"},{"file": 85,"line": 2810,"col": 4,"docs": " Function could not be executed.\n"},{"file": 85,"line": 484,"col": 4,"docs": " The global filename characters, * or ?, are entered incorrectly or too many global filename characters are specified.\n"},{"file": 85,"line": 1816,"col": 4,"docs": " An attempt was made to create more links on a file than the file system supports.\n"},{"file": 85,"line": 1429,"col": 4,"docs": " The client of a component requested an operation which is not valid given the state of the component instance.\n"},{"file": 85,"line": 1498,"col": 4,"docs": " Orphaned files exist on the volume but could not be recovered because no more new names could be created in the recovery directory. Files must be moved from the recovery directory.\n"},{"file": 85,"line": 1108,"col": 4,"docs": " An error occurred in the ACPI subsystem.\n"},{"file": 85,"line": 3026,"col": 4,"docs": " The procedure number is out of range.\n"},{"file": 85,"line": 1591,"col": 4,"docs": " The system has attempted to load or restore a file into the registry, but the specified file is not in a registry file format.\n"},{"file": 85,"line": 3380,"col": 4,"docs": " The group element could not be added.\n"},{"file": 85,"line": 2999,"col": 4,"docs": " The binding does not contain an entry name.\n"},{"file": 85,"line": 1897,"col": 4,"docs": " Unable to move the replacement file to the file to be replaced. The file to be replaced has been renamed using the backup name.\n"},{"file": 85,"line": 556,"col": 4,"docs": " The extended attributes are inconsistent.\n"},{"file": 85,"line": 784,"col": 4,"docs": " Profiling not started.\n"},{"file": 85,"line": 1555,"col": 4,"docs": " The volume does not contain a recognized file system. Please make sure that all required file system drivers are loaded and that the volume is not corrupted.\n"},{"file": 85,"line": 598,"col": 4,"docs": " An invalid oplock acknowledgment was received by the system.\n"},{"file": 85,"line": 394,"col": 4,"docs": " No more threads can be created in the system.\n"},{"file": 85,"line": 1726,"col": 4,"docs": " Tape could not be partitioned.\n"},{"file": 85,"line": 1252,"col": 4,"docs": " {Page Locked} One of the pages to lock was already locked.\n"},{"file": 85,"line": 3548,"col": 4,"docs": " The requested operation failed. A system reboot has been initiated to roll back changes made.\n"},{"file": 85,"line": 2708,"col": 4,"docs": " Insufficient NVRAM resources exist to complete the requested service. A reboot might be required.\n"},{"file": 85,"line": 2891,"col": 4,"docs": " A fail fast exception occurred. Exception handlers will not be invoked and the process will be terminated immediately.\n"},{"file": 85,"line": 2888,"col": 4,"docs": " The Windows Installer service is not accessible in Safe Mode. Please try again when your computer is not in Safe Mode or you can use System Restore to return your machine to a previous good state.\n"},{"file": 85,"line": 3041,"col": 4,"docs": " The authorization service is unknown.\n"},{"file": 85,"line": 3527,"col": 4,"docs": " The requested operation is successful. Changes will not be effective until the service is restarted.\n"},{"file": 85,"line": 3311,"col": 4,"docs": " The specified printer has been deleted.\n"},{"file": 85,"line": 883,"col": 4,"docs": " The paging file cannot be created on a floppy diskette.\n"},{"file": 85,"line": 1453,"col": 4,"docs": " A thread is getting dispatched with MCA EXCEPTION because of MCA.\n"},{"file": 85,"line": 97,"col": 4,"docs": " The process cannot access the file because it is being used by another process.\n"},{"file": 85,"line": 1774,"col": 4,"docs": " A serial I/O operation completed because the timeout period expired. The IOCTL_SERIAL_XOFF_COUNTER did not reach zero.)\n"},{"file": 85,"line": 1225,"col": 4,"docs": " {Expedited Data Received} The network transport returned data to its client that was marked as expedited by the remote system.\n"},{"file": 85,"line": 367,"col": 4,"docs": " The volume label you entered exceeds the label character limit of the target file system.\n"},{"file": 85,"line": 1279,"col": 4,"docs": " The system was put into hibernation.\n"},{"file": 85,"line": 3362,"col": 4,"docs": " The entry is not of the expected type.\n"},{"file": 85,"line": 2402,"col": 4,"docs": " Unable to impersonate using a named pipe until data has been read from that pipe.\n"},{"file": 85,"line": 685,"col": 4,"docs": " The command specified a number of descriptors that exceeded the maximum supported by the device.\n"},{"file": 85,"line": 157,"col": 4,"docs": " The specified network name is no longer available.\n"},{"file": 85,"line": 808,"col": 4,"docs": " If an MM error is returned which is not defined in the standard FsRtl filter, it is converted to one of the following errors which is guaranteed to be in the filter. In this case information is lost, however, the filter correctly handles the exception.\n"},{"file": 85,"line": 2645,"col": 4,"docs": " Cannot show or remove the window in the way specified.\n"},{"file": 85,"line": 40,"col": 4,"docs": " The data is invalid.\n"},{"file": 85,"line": 1165,"col": 4,"docs": " Debugger did not handle the exception.\n"},{"file": 85,"line": 274,"col": 4,"docs": " The filename, directory name, or volume label syntax is incorrect.\n"},{"file": 85,"line": 1324,"col": 4,"docs": " A reparse should be performed by the Object Manager since the name of the file resulted in a symbolic link.\n"},{"file": 85,"line": 1384,"col": 4,"docs": " {Volume Shadow Copy Service} The system is now ready for hibernation.\n"},{"file": 85,"line": 1084,"col": 4,"docs": " There was error [%2] processing the driver database.\n"},{"file": 85,"line": 3500,"col": 4,"docs": " The spool file was not found.\n"},{"file": 85,"line": 3170,"col": 4,"docs": " The redirector is in use and cannot be unloaded.\n"},{"file": 85,"line": 796,"col": 4,"docs": " Used to indicate that an operation cannot continue without blocking for I/O.\n"},{"file": 85,"line": 3260,"col": 4,"docs": " A UUID that is valid only on this computer has been allocated.\n"},{"file": 85,"line": 967,"col": 4,"docs": " There is an IP address conflict with another system on the network.\n"},{"file": 85,"line": 2447,"col": 4,"docs": " The local security authority database contains an internal inconsistency.\n"},{"file": 85,"line": 292,"col": 4,"docs": " The %1 application cannot be run in Win32 mode.\n"},{"file": 85,"line": 2444,"col": 4,"docs": " The length of a secret exceeds the maximum length allowed.\n"},{"file": 85,"line": 2384,"col": 4,"docs": " The requested action is restricted for use by logon processes only. The calling process has not registered as a logon process.\n"},{"file": 85,"line": 1414,"col": 4,"docs": " The data provider cannot scroll backwards through a result set.\n"},{"file": 85,"line": 2468,"col": 4,"docs": " A cross-encrypted password is necessary to change this user password.\n"},{"file": 85,"line": 976,"col": 4,"docs": " The password provided is too short to meet the policy of your user account. Please choose a longer password.\n"},{"file": 85,"line": 3101,"col": 4,"docs": " A floating-point underflow occurred at the RPC server.\n"},{"file": 85,"line": 364,"col": 4,"docs": " The DosMuxSemWait list is not correct.\n"},{"file": 85,"line": 3446,"col": 4,"docs": " The specified color profile is not associated with the specified device.\n"},{"file": 85,"line": 772,"col": 4,"docs": " Length of message passed to NtRequestPort or NtRequestWaitReplyPort was longer than the maximum message allowed by the port.\n"},{"file": 85,"line": 1957,"col": 4,"docs": " The format of the specified service name is invalid.\n"},{"file": 85,"line": 673,"col": 4,"docs": " The command specified a data offset that does not align to the device's granularity/alignment.\n"},{"file": 85,"line": 2309,"col": 4,"docs": " The access control list (ACL) structure is invalid.\n"},{"file": 85,"line": 3473,"col": 4,"docs": " The network connection was made successfully, but the user had to be prompted for a password other than the one originally specified.\n"},{"file": 85,"line": 1660,"col": 4,"docs": " The dependency service or group failed to start.\n"},{"file": 85,"line": 331,"col": 4,"docs": " The system cannot perform a JOIN or SUBST at this time.\n"},{"file": 85,"line": 1156,"col": 4,"docs": " {Registry Hive Recovered} Registry hive (file): %hs was corrupted and it has been recovered. Some data might have been lost.\n"},{"file": 85,"line": 2324,"col": 4,"docs": " The server is currently enabled.\n"},{"file": 85,"line": 814,"col": 4,"docs": " Indicates that an attempt was made to assign protection to a file system file or directory and one of the SIDs in the security descriptor could not be translated into a GUID that could be stored by the file system. This causes the protection attempt to fail, which may cause a file creation attempt to fail.\n"},{"file": 85,"line": 1306,"col": 4,"docs": " ERROR_ABANDONED_WAIT_0\n"},{"file": 85,"line": 337,"col": 4,"docs": " The directory is not a subdirectory of the root directory.\n"},{"file": 85,"line": 2297,"col": 4,"docs": " No mapping between account names and security IDs was done.\n"},{"file": 85,"line": 1297,"col": 4,"docs": " ERROR_WAIT_2\n"},{"file": 85,"line": 313,"col": 4,"docs": " The system tried to delete the JOIN of a drive that is not joined.\n"},{"file": 85,"line": 1147,"col": 4,"docs": " A long jump has been executed.\n"},{"file": 85,"line": 1216,"col": 4,"docs": " {Redundant Write} To satisfy a write request, the NT fault-tolerant file system successfully wrote a redundant copy of the information. This was done because the file system encountered a failure on a member of the fault-tolerant volume, but was not able to reassign the failing area of the device.\n"},{"file": 85,"line": 1024,"col": 4,"docs": " {EXCEPTION} Multiple floating point traps.\n"},{"file": 85,"line": 2747,"col": 4,"docs": " This action is only valid for products that are currently installed.\n"},{"file": 85,"line": 67,"col": 4,"docs": " The device does not recognize the command.\n"},{"file": 85,"line": 2465,"col": 4,"docs": " Too many security IDs have been specified.\n"},{"file": 85,"line": 1111,"col": 4,"docs": " WOW Assertion Error.\n"},{"file": 85,"line": 3251,"col": 4,"docs": " The requested authentication level is not supported.\n"},{"file": 85,"line": 3125,"col": 4,"docs": " The stub is unable to get the remote procedure call handle.\n"},{"file": 85,"line": 232,"col": 4,"docs": " The program stopped because an alternate diskette was not inserted.\n"},{"file": 85,"line": 1696,"col": 4,"docs": " Failure actions can only be set for Win32 services, not for drivers.\n"},{"file": 85,"line": 3248,"col": 4,"docs": " A communications failure occurred during a remote procedure call.\n"},{"file": 85,"line": 1135,"col": 4,"docs": " This warning level status indicates that the transaction state already exists for the registry sub-tree, but that a transaction commit was previously aborted. The commit has NOT been completed, but has not been rolled back either (so it may still be committed if desired).\n"},{"file": 85,"line": 3530,"col": 4,"docs": " No printers were found.\n"},{"file": 85,"line": 2321,"col": 4,"docs": " The server is currently disabled.\n"},{"file": 85,"line": 889,"col": 4,"docs": " This operation is only allowed for the Primary Domain Controller of the domain.\n"},{"file": 85,"line": 1834,"col": 4,"docs": " No application is associated with the specified file for this operation.\n"},{"file": 85,"line": 3374,"col": 4,"docs": " The specified profile element could not be added.\n"},{"file": 85,"line": 1234,"col": 4,"docs": " {TDI Event Pending} The TDI indication has entered the pending state.\n"},{"file": 85,"line": 457,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 913,"col": 4,"docs": " {Cancel Timeout} The driver %hs failed to complete a cancelled I/O request in the allotted time.\n"},{"file": 85,"line": 2840,"col": 4,"docs": " This update package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer update package.\n"},{"file": 85,"line": 2984,"col": 4,"docs": " Access to the HTTP proxy is denied.\n"},{"file": 85,"line": 1768,"col": 4,"docs": " Unable to open a device that was sharing an interrupt request (IRQ) with other devices. At least one other device that uses that IRQ was already opened.\n"},{"file": 85,"line": 2690,"col": 4,"docs": " This application does not support the current operation on symbolic links.\n"},{"file": 85,"line": 751,"col": 4,"docs": " A warning occurred in the WX86 subsystem.\n"},{"file": 85,"line": 1582,"col": 4,"docs": " One of the files in the registry database had to be recovered by use of a log or alternate copy. The recovery was successful.\n"},{"file": 85,"line": 1672,"col": 4,"docs": " The specified service has been marked for deletion.\n"},{"file": 85,"line": 1282,"col": 4,"docs": " The system was resumed from hibernation.\n"},{"file": 85,"line": 1789,"col": 4,"docs": " While accessing the hard disk, a recalibrate operation failed, even after retries.\n"},{"file": 85,"line": 2705,"col": 4,"docs": " There was an AuthIP failure when attempting to connect to the remote host.\n"},{"file": 85,"line": 1831,"col": 4,"docs": " One of the library files needed to run this application is damaged.\n"},{"file": 85,"line": 1201,"col": 4,"docs": " {Image Relocated} An image file could not be mapped at the address specified in the image file. Local fixups must be performed on this image.\n"},{"file": 85,"line": 2107,"col": 4,"docs": " The Kerberos protocol encountered an error while validating the KDC certificate during smartcard logon. There is more information in the system event log.\n"},{"file": 85,"line": 220,"col": 4,"docs": " The semaphore cannot be set again.\n"},{"file": 85,"line": 1333,"col": 4,"docs": " This success level status indicates that the transaction state already exists for the registry sub-tree, but that a transaction commit was previously aborted. The commit has now been completed.\n"},{"file": 85,"line": 3002,"col": 4,"docs": " The name syntax is invalid.\n"},{"file": 85,"line": 61,"col": 4,"docs": " The system cannot find the device specified.\n"},{"file": 85,"line": 2285,"col": 4,"docs": " Your account has time restrictions that keep you from signing in right now.\n"},{"file": 85,"line": 2927,"col": 4,"docs": " The object universal unique identifier (UUID) was not found.\n"},{"file": 85,"line": 1057,"col": 4,"docs": " An attempt to remove a processes DebugPort was made, but a port was not already associated with the process.\n"},{"file": 85,"line": 1231,"col": 4,"docs": " {TDI Event Done} The TDI indication has completed successfully.\n"},{"file": 85,"line": 79,"col": 4,"docs": " The specified disk or diskette cannot be accessed.\n"},{"file": 85,"line": 2516,"col": 4,"docs": " Cannot create a top-level child window.\n"},{"file": 85,"line": 2501,"col": 4,"docs": " Invalid menu handle.\n"},{"file": 85,"line": 1162,"col": 4,"docs": " The application is loading executable code from the module %hs. This is secure, but may be incompatible with previous releases of the operating system. An alternative, %hs, is available. Should the application use the secure module %hs?\n"},{"file": 85,"line": 1171,"col": 4,"docs": " Debugger cannot provide handle.\n"},{"file": 85,"line": 1762,"col": 4,"docs": " The request could not be performed because of an I/O device error.\n"},{"file": 85,"line": 3356,"col": 4,"docs": " The file cannot be accessed by the system.\n"},{"file": 85,"line": 559,"col": 4,"docs": " The wait operation timed out.\n"},{"file": 85,"line": 3089,"col": 4,"docs": " An internal error occurred in a remote procedure call (RPC).\n"},{"file": 85,"line": 823,"col": 4,"docs": " Indicates that the user supplied an invalid descriptor when trying to set up Ldt descriptors.\n"},{"file": 85,"line": 1597,"col": 4,"docs": " System could not allocate the required space in a registry log.\n"},{"file": 85,"line": 3452,"col": 4,"docs": " The specified color space is invalid.\n"},{"file": 85,"line": 709,"col": 4,"docs": " The shutdown operation failed.\n"},{"file": 85,"line": 1471,"col": 4,"docs": " {Delayed Write Failed} Windows was unable to save all the data for the file %hs; the data has been lost. This error may be caused if the device has been removed or the media is write-protected.\n"},{"file": 85,"line": 850,"col": 4,"docs": " {Missing System File} The required system file %hs is bad or missing.\n"},{"file": 85,"line": 3074,"col": 4,"docs": " The entry is not found.\n"},{"file": 85,"line": 91,"col": 4,"docs": " The system cannot read from the specified device.\n"},{"file": 85,"line": 52,"col": 4,"docs": " The system cannot move the file to a different disk drive.\n"},{"file": 85,"line": 1759,"col": 4,"docs": " Unable to abort the system shutdown because no shutdown was in progress.\n"},{"file": 85,"line": 3422,"col": 4,"docs": " The requested metafile operation is not supported.\n"},{"file": 85,"line": 3113,"col": 4,"docs": " The file containing the character translation table has fewer than 512 bytes.\n"},{"file": 85,"line": 1804,"col": 4,"docs": " A potential deadlock condition has been detected.\n"},{"file": 85,"line": 3563,"col": 4,"docs": " The operation was paused.\n"},{"file": 85,"line": 1900,"col": 4,"docs": " The volume change journal is being deleted.\n"},{"file": 85,"line": 3254,"col": 4,"docs": " No principal name registered.\n"},{"file": 85,"line": 565,"col": 4,"docs": " The copy functions cannot be used.\n"},{"file": 85,"line": 3218,"col": 4,"docs": " The name or security ID (SID) of the domain specified is inconsistent with the trust information for that domain.\n"},{"file": 85,"line": 1888,"col": 4,"docs": " The Volume ID could not be found.\n"},{"file": 85,"line": 2210,"col": 4,"docs": " No encryption key is available. A well-known encryption key was returned.\n"},{"file": 85,"line": 844,"col": 4,"docs": " {Privilege Failed} The I/O permissions for the process could not be changed.\n"},{"file": 85,"line": 3332,"col": 4,"docs": " The object resolver set specified was not found.\n"},{"file": 85,"line": 3038,"col": 4,"docs": " The security context is invalid.\n"},{"file": 85,"line": 3227,"col": 4,"docs": " The specified resource type cannot be found in the image file.\n"},{"file": 85,"line": 523,"col": 4,"docs": " Access Denied. Before opening files in this location, you must first add the web site to your trusted sites list, browse to the web site, and select the option to login automatically.\n"},{"file": 85,"line": 592,"col": 4,"docs": " Only part of a ReadProcessMemory or WriteProcessMemory request was completed.\n"},{"file": 85,"line": 2783,"col": 4,"docs": " The device has been removed.\n"},{"file": 85,"line": 493,"col": 4,"docs": " The segment is locked and cannot be reallocated.\n"},{"file": 85,"line": 526,"col": 4,"docs": " Operation did not complete successfully because the file contains a virus or potentially unwanted software.\n"},{"file": 85,"line": 3458,"col": 4,"docs": " There was an error while deleting the color transform.\n"},{"file": 85,"line": 1366,"col": 4,"docs": " A reparse should be performed by the Object Manager since the name of the file resulted in a symbolic link.\n"},{"file": 85,"line": 1189,"col": 4,"docs": " Debugger received control break.\n"},{"file": 85,"line": 460,"col": 4,"docs": " The operating system cannot run this application program.\n"},{"file": 85,"line": 2339,"col": 4,"docs": " Cannot open an anonymous level security token.\n"},{"file": 85,"line": 2867,"col": 4,"docs": " The Windows Installer does not permit installation from a Remote Desktop Connection.\n"},{"file": 85,"line": 58,"col": 4,"docs": " The media is write protected.\n"},{"file": 85,"line": 346,"col": 4,"docs": " Not enough resources are available to process this command.\n"},{"file": 85,"line": 2486,"col": 4,"docs": " The target account name is incorrect.\n"},{"file": 85,"line": 2744,"col": 4,"docs": " Installation suspended, incomplete.\n"},{"file": 85,"line": 739,"col": 4,"docs": " There is a process on other end of the pipe.\n"},{"file": 85,"line": 682,"col": 4,"docs": " An attempt was made to send down the command via an invalid path to the target device.\n"},{"file": 85,"line": 1717,"col": 4,"docs": " The beginning of the tape or a partition was encountered.\n"},{"file": 85,"line": 2942,"col": 4,"docs": " The RPC server is not listening.\n"},{"file": 85,"line": 2195,"col": 4,"docs": " A thread involved in this operation appears to be unresponsive.\n"},{"file": 85,"line": 859,"col": 4,"docs": " {Unable to Create Paging File} The creation of the paging file %hs failed (%lx). The requested size was %ld.\n"},{"file": 85,"line": 2750,"col": 4,"docs": " Feature ID not registered.\n"},{"file": 85,"line": 2702,"col": 4,"docs": " The caller made the connection request in the wrong routing compartment.\n"},{"file": 85,"line": 3068,"col": 4,"docs": " The interface was not found.\n"},{"file": 85,"line": 1465,"col": 4,"docs": " {Delayed Write Failed} Windows was unable to save all the data for the file %hs; the data has been lost. This error may be caused by network connectivity issues. Please try to save this file elsewhere.\n"},{"file": 85,"line": 2119,"col": 4,"docs": " An application-defined callback gave invalid data when called.\n"},{"file": 85,"line": 2243,"col": 4,"docs": " A required privilege is not held by the client.\n"},{"file": 85,"line": 2083,"col": 4,"docs": " The server machine is shutting down.\n"},{"file": 85,"line": 3344,"col": 4,"docs": " The RPC pipe object has already been closed.\n"},{"file": 85,"line": 178,"col": 4,"docs": " No more connections can be made to this remote computer at this time because there are already as many connections as the computer can accept.\n"},{"file": 85,"line": 3221,"col": 4,"docs": " The server is in use and cannot be unloaded.\n"},{"file": 85,"line": 1519,"col": 4,"docs": " Access to the specified file handle has been revoked.\n"},{"file": 85,"line": 388,"col": 4,"docs": " The specified path is invalid.\n"},{"file": 85,"line": 1609,"col": 4,"docs": " A stop control has been sent to a service that other running services are dependent on.\n"},{"file": 85,"line": 2041,"col": 4,"docs": " The network address could not be used for the operation requested.\n"},{"file": 85,"line": 1003,"col": 4,"docs": " {DLL Initialization Failed} The application failed to initialize because the window station is shutting down.\n"},{"file": 85,"line": 2423,"col": 4,"docs": " The token is already in use as a primary token.\n"},{"file": 85,"line": 31,"col": 4,"docs": " The environment is incorrect.\n"},{"file": 85,"line": 2074,"col": 4,"docs": " The group policy framework should call the extension even if there are no changes.\n"},{"file": 85,"line": 85,"col": 4,"docs": " The printer is out of paper.\n"},{"file": 85,"line": 2624,"col": 4,"docs": " The window is not a child window.\n"},{"file": 85,"line": 3104,"col": 4,"docs": " A floating-point overflow occurred at the RPC server.\n"},{"file": 85,"line": 1342,"col": 4,"docs": " Page fault was a transition fault.\n"},{"file": 85,"line": 763,"col": 4,"docs": " An invalid or unaligned stack was encountered during an unwind operation.\n"},{"file": 85,"line": 901,"col": 4,"docs": " {Unexpected Failure in DebugActiveProcess} An unexpected failure occurred while processing a DebugActiveProcess API request. You may choose OK to terminate the process, or Cancel to ignore the error.\n"},{"file": 85,"line": 907,"col": 4,"docs": " {Data Not Accepted} The TDI client could not handle the data received during an indication.\n"},{"file": 85,"line": 2831,"col": 4,"docs": " This installation package is not supported by this processor type. Contact your product vendor.\n"},{"file": 85,"line": 1048,"col": 4,"docs": " There is not enough power to complete the requested operation.\n"},{"file": 85,"line": 2963,"col": 4,"docs": " The RPC server is unavailable.\n"},{"file": 85,"line": 985,"col": 4,"docs": " The specified compression format is unsupported.\n"},{"file": 85,"line": 1096,"col": 4,"docs": " The system has failed to hibernate (The error code is %hs). Hibernation will be disabled until the system is restarted.\n"},{"file": 85,"line": 3545,"col": 4,"docs": " The requested operation failed. A system reboot is required to roll back changes made.\n"},{"file": 85,"line": 2738,"col": 4,"docs": " User cancelled installation.\n"},{"file": 85,"line": 1078,"col": 4,"docs": " The device object parameter is either not a valid device object or is not attached to the volume specified by the file name.\n"},{"file": 85,"line": 3461,"col": 4,"docs": " The specified color transform is invalid.\n"},{"file": 85,"line": 955,"col": 4,"docs": " There is insufficient account information to log you on.\n"},{"file": 85,"line": 2026,"col": 4,"docs": " The network connection was aborted by the local system.\n"},{"file": 85,"line": 2068,"col": 4,"docs": " A domain controller with the specified name already exists.\n"},{"file": 85,"line": 3185,"col": 4,"docs": " The specified separator file is invalid.\n"},{"file": 85,"line": 1183,"col": 4,"docs": " Debugger printed exception on control C.\n"},{"file": 85,"line": 376,"col": 4,"docs": " The segment is already discarded and cannot be locked.\n"},{"file": 85,"line": 3080,"col": 4,"docs": " The network address family is invalid.\n"},{"file": 85,"line": 2621,"col": 4,"docs": " All handles to windows in a multiple-window position structure must have the same parent.\n"},{"file": 85,"line": 1009,"col": 4,"docs": " There are no more matches for the current index enumeration.\n"},{"file": 85,"line": 1168,"col": 4,"docs": " Debugger will reply later.\n"},{"file": 85,"line": 4,"col": 4,"docs": " Incorrect function.\n"},{"file": 85,"line": 136,"col": 4,"docs": " A network adapter hardware error occurred.\n"},{"file": 85,"line": 445,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 3491,"col": 4,"docs": " The device is in use by an active process and cannot be disconnected.\n"},{"file": 85,"line": 634,"col": 4,"docs": " Operation is not allowed on a file system internal file.\n"},{"file": 85,"line": 2543,"col": 4,"docs": " Using private DIALOG window words.\n"},{"file": 85,"line": 2204,"col": 4,"docs": " Some mapping between account names and security IDs was not done.\n"},{"file": 85,"line": 1354,"col": 4,"docs": " Page fault was satisfied by reading from a secondary storage device.\n"},{"file": 85,"line": 658,"col": 4,"docs": " The device is unreachable.\n"},{"file": 85,"line": 979,"col": 4,"docs": " The policy of your user account does not allow you to change passwords too frequently. This is done to prevent users from changing back to a familiar, but potentially discovered, password. If you feel your password has been compromised then please contact your administrator immediately to have a new one assigned.\n"},{"file": 85,"line": 289,"col": 4,"docs": " There are no child processes to wait for.\n"},{"file": 85,"line": 2282,"col": 4,"docs": " Account restrictions are preventing this user from signing in. For example: blank passwords aren't allowed, sign-in times are limited, or a policy restriction has been enforced.\n"},{"file": 85,"line": 628,"col": 4,"docs": " Duplicate privileges were specified for the token.\n"},{"file": 85,"line": 541,"col": 4,"docs": " The pipe is being closed.\n"},{"file": 85,"line": 1570,"col": 4,"docs": " The configuration registry key is invalid.\n"},{"file": 85,"line": 1381,"col": 4,"docs": " The specified process is part of a job.\n"},{"file": 85,"line": 640,"col": 4,"docs": " The token representing the data is invalid.\n"},{"file": 85,"line": 721,"col": 4,"docs": " The thread is not in background processing mode.\n"},{"file": 85,"line": 1357,"col": 4,"docs": " Cached page was locked during operation.\n"},{"file": 85,"line": 1933,"col": 4,"docs": " Unable to open the network connection profile.\n"},{"file": 85,"line": 2759,"col": 4,"docs": " Handle is in an invalid state.\n"},{"file": 85,"line": 25,"col": 4,"docs": " Not enough storage is available to process this command.\n"},{"file": 85,"line": 2183,"col": 4,"docs": " The service notification client is lagging too far behind the current state of services in the machine.\n"},{"file": 85,"line": 3017,"col": 4,"docs": " The maximum number of calls is too small.\n"},{"file": 85,"line": 1144,"col": 4,"docs": " The create operation stopped after reaching a symbolic link.\n"},{"file": 85,"line": 19,"col": 4,"docs": " The handle is invalid.\n"},{"file": 85,"line": 499,"col": 4,"docs": " Cannot nest calls to LoadModule.\n"},{"file": 85,"line": 3299,"col": 4,"docs": " The specified time is invalid.\n"},{"file": 85,"line": 2453,"col": 4,"docs": " Logon failure: the user has not been granted the requested logon type at this computer.\n"},{"file": 85,"line": 871,"col": 4,"docs": " An event pair synchronization operation was performed using the thread specific client/server event pair object, but no event pair object was associated with the thread.\n"},{"file": 85,"line": 1627,"col": 4,"docs": " The account name is invalid or does not exist, or the password is invalid for the account name specified.\n"},{"file": 85,"line": 2837,"col": 4,"docs": " This update package could not be opened. Verify that the update package exists and that you can access it, or contact the application vendor to verify that this is a valid Windows Installer update package.\n"},{"file": 85,"line": 1042,"col": 4,"docs": " {Fatal System Error} The system image %s is not properly signed. The file has been replaced with the signed file. The system has been shut down.\n"},{"file": 85,"line": 2966,"col": 4,"docs": " The RPC server is too busy to complete this operation.\n"},{"file": 85,"line": 2267,"col": 4,"docs": " This operation is disallowed as it could result in an administration account being disabled, deleted or unable to log on.\n"},{"file": 85,"line": 1120,"col": 4,"docs": " A IRQ translator failed to translate resources.\n"},{"file": 85,"line": 1915,"col": 4,"docs": " The system shutdown cannot be initiated because there are other users logged on to the computer.\n"},{"file": 85,"line": 442,"col": 4,"docs": " %1 is not a valid Win32 application.\n"},{"file": 85,"line": 3047,"col": 4,"docs": " The server endpoint cannot perform the operation.\n"},{"file": 85,"line": 3296,"col": 4,"docs": " The object universal unique identifier (UUID) is the nil UUID.\n"},{"file": 85,"line": 1102,"col": 4,"docs": " The requested operation could not be completed due to a file system limitation.\n"},{"file": 85,"line": 1339,"col": 4,"docs": " {Connect Failure on Primary Transport} An attempt was made to connect to the remote server %hs on the primary transport, but the connection failed. The computer WAS able to connect on a secondary transport.\n"},{"file": 85,"line": 3407,"col": 4,"docs": " Authentication failed because NTLM authentication has been disabled.\n"},{"file": 85,"line": 3521,"col": 4,"docs": " The requested operation is not allowed when there are jobs queued to the printer.\n"},{"file": 85,"line": 2002,"col": 4,"docs": " An address has not yet been associated with the network endpoint.\n"},{"file": 85,"line": 199,"col": 4,"docs": " The specified network password is not correct.\n"},{"file": 85,"line": 1975,"col": 4,"docs": " Multiple connections to a server or shared resource by the same user, using more than one user name, are not allowed. Disconnect all previous connections to the server or shared resource and try again.\n"},{"file": 85,"line": 1921,"col": 4,"docs": " The device is not currently connected but it is a remembered connection.\n"},{"file": 85,"line": 430,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 406,"col": 4,"docs": " A lock request was not outstanding for the supplied cancel region.\n"},{"file": 85,"line": 379,"col": 4,"docs": " The segment is already unlocked.\n"},{"file": 85,"line": 3257,"col": 4,"docs": " The error specified is not a valid Windows RPC error code.\n"},{"file": 85,"line": 928,"col": 4,"docs": " The request must be handled by the stack overflow code.\n"},{"file": 85,"line": 2918,"col": 4,"docs": " The network address is invalid.\n"},{"file": 85,"line": 2255,"col": 4,"docs": " The specified group already exists.\n"},{"file": 85,"line": 3044,"col": 4,"docs": " The entry is invalid.\n"},{"file": 85,"line": 304,"col": 4,"docs": " A JOIN or SUBST command cannot be used for a drive that contains previously joined drives.\n"},{"file": 85,"line": 1951,"col": 4,"docs": " The format of the specified event name is invalid.\n"},{"file": 85,"line": 2050,"col": 4,"docs": " The operation being requested was not performed because the user has not been authenticated.\n"},{"file": 85,"line": 358,"col": 4,"docs": " The number of specified semaphore events for DosMuxSemWait is not correct.\n"},{"file": 85,"line": 718,"col": 4,"docs": " The thread is already in background processing mode.\n"},{"file": 85,"line": 2426,"col": 4,"docs": " The specified local group does not exist.\n"},{"file": 85,"line": 2294,"col": 4,"docs": " This user can't sign in because this account is currently disabled.\n"},{"file": 85,"line": 535,"col": 4,"docs": " The pipe state is invalid.\n"},{"file": 85,"line": 586,"col": 4,"docs": " Attempt to release mutex not owned by caller.\n"},{"file": 85,"line": 991,"col": 4,"docs": " The specified Plug and Play registry device path is invalid.\n"},{"file": 85,"line": 2798,"col": 4,"docs": " Error opening installation log file. Verify that the specified log file location exists and that you can write to it.\n"},{"file": 85,"line": 3110,"col": 4,"docs": " Unable to open the character translation table file.\n"},{"file": 85,"line": 1105,"col": 4,"docs": " An assertion failure has occurred.\n"},{"file": 85,"line": 631,"col": 4,"docs": " No ranges for the specified operation were able to be processed.\n"},{"file": 85,"line": 1405,"col": 4,"docs": " An exception occurred in a user mode callback and the kernel callback frame should be removed.\n"},{"file": 85,"line": 3077,"col": 4,"docs": " The name service is unavailable.\n"},{"file": 85,"line": 1351,"col": 4,"docs": " Page fault was a demand zero fault.\n"},{"file": 85,"line": 1633,"col": 4,"docs": " Circular service dependency was specified.\n"},{"file": 85,"line": 2540,"col": 4,"docs": " Invalid icon handle.\n"},{"file": 85,"line": 1540,"col": 4,"docs": " Error performing inpage operation.\n"},{"file": 85,"line": 1849,"col": 4,"docs": " The indicated source element has no media.\n"},{"file": 85,"line": 3443,"col": 4,"docs": " The specified tag is already present.\n"},{"file": 85,"line": 244,"col": 4,"docs": " The file name is too long.\n"},{"file": 85,"line": 3008,"col": 4,"docs": " No network address is available to use to construct a universal unique identifier (UUID).\n"},{"file": 85,"line": 1618,"col": 4,"docs": " A thread could not be created for the service.\n"},{"file": 85,"line": 2492,"col": 4,"docs": " There is a time and/or date difference between the client and server.\n"},{"file": 85,"line": 2741,"col": 4,"docs": " Fatal error during installation.\n"},{"file": 85,"line": 2180,"col": 4,"docs": " Either the target process, or the target thread's containing process, is a protected process.\n"},{"file": 85,"line": 1852,"col": 4,"docs": " The indicated destination element already contains media.\n"},{"file": 85,"line": 3281,"col": 4,"docs": " An invalid operation was attempted on an RPC pipe object.\n"},{"file": 85,"line": 3551,"col": 4,"docs": " The specified printer driver was not found on the system and needs to be downloaded.\n"},{"file": 85,"line": 2924,"col": 4,"docs": " The timeout value is invalid.\n"},{"file": 85,"line": 583,"col": 4,"docs": " The mounted file system does not support extended attributes.\n"},{"file": 85,"line": 3158,"col": 4,"docs": " The network logon failed.\n"},{"file": 85,"line": 454,"col": 4,"docs": " The operating system is not presently configured to run this application.\n"},{"file": 85,"line": 2909,"col": 4,"docs": " The RPC protocol sequence is invalid.\n"},{"file": 85,"line": 2870,"col": 4,"docs": " Uninstallation of the update package is not supported.\n"},{"file": 85,"line": 1669,"col": 4,"docs": " The specified service database lock is invalid.\n"},{"file": 85,"line": 1462,"col": 4,"docs": " A valid hibernation file has been invalidated and should be abandoned.\n"},{"file": 85,"line": 2885,"col": 4,"docs": " Windows Installer does not permit updating of managed advertised products. At least one feature of the product must be installed before applying the update.\n"},{"file": 85,"line": 1687,"col": 4,"docs": " No attempts to start the service have been made since the last boot.\n"},{"file": 85,"line": 1270,"col": 4,"docs": " The arbiter has deferred arbitration of these resources to its parent.\n"},{"file": 85,"line": 2053,"col": 4,"docs": " The operation being requested was not performed because the user has not logged on to the network. The specified service does not exist.\n"},{"file": 85,"line": 2972,"col": 4,"docs": " There are no remote procedure calls active on this thread.\n"},{"file": 85,"line": 505,"col": 4,"docs": " The image file %1 is signed, unable to modify.\n"},{"file": 85,"line": 2672,"col": 4,"docs": " Hook type not allowed.\n"},{"file": 85,"line": 3233,"col": 4,"docs": " The specified resource language ID cannot be found in the image file.\n"},{"file": 85,"line": 706,"col": 4,"docs": " No action was taken as a system reboot is required.\n"},{"file": 85,"line": 1330,"col": 4,"docs": " A new volume has been mounted by a file system.\n"},{"file": 85,"line": 1117,"col": 4,"docs": " A translator failed to translate resources.\n"},{"file": 85,"line": 2113,"col": 4,"docs": " The system cannot contact a domain controller to service the authentication request. Please try again later.\n"},{"file": 85,"line": 2312,"col": 4,"docs": " The security ID structure is invalid.\n"},{"file": 85,"line": 1924,"col": 4,"docs": " The local device name has a remembered connection to another network resource.\n"},{"file": 85,"line": 2216,"col": 4,"docs": " The revision level is unknown.\n"},{"file": 85,"line": 433,"col": 4,"docs": " The operating system cannot run %1.\n"},{"file": 85,"line": 547,"col": 4,"docs": " More data is available.\n"},{"file": 85,"line": 1846,"col": 4,"docs": " The message can be used only with synchronous operations.\n"},{"file": 85,"line": 904,"col": 4,"docs": " {Fatal System Error} The %hs system process terminated unexpectedly with a status of 0x%08x (0x%08x 0x%08x). The system has been shut down.\n"},{"file": 85,"line": 2807,"col": 4,"docs": " This installation is forbidden by system policy. Contact your system administrator.\n"},{"file": 85,"line": 1522,"col": 4,"docs": " An image file was mapped at a different address from the one specified in the image file but fixups will still be automatically performed on the image.\n"},{"file": 85,"line": 3287,"col": 4,"docs": " HTTP proxy server rejected the connection because the cookie authentication failed.\n"},{"file": 85,"line": 3566,"col": 4,"docs": " Reissue the given operation as a cached IO operation.\n"},{"file": 85,"line": 49,"col": 4,"docs": " The directory cannot be removed.\n"},{"file": 85,"line": 1681,"col": 4,"docs": " The dependency service does not exist or has been marked for deletion.\n"},{"file": 85,"line": 3416,"col": 4,"docs": " The specified driver is invalid.\n"},{"file": 85,"line": 3188,"col": 4,"docs": " The specified priority is invalid.\n"},{"file": 85,"line": 184,"col": 4,"docs": " The file exists.\n"},{"file": 85,"line": 2609,"col": 4,"docs": " The window does not have a system menu.\n"},{"file": 85,"line": 2678,"col": 4,"docs": " This operation returned because the timeout period expired.\n"},{"file": 85,"line": 373,"col": 4,"docs": " The recipient process has refused the signal.\n"},{"file": 85,"line": 1213,"col": 4,"docs": " {Redundant Read} To satisfy a read request, the NT fault-tolerant file system successfully read the requested data from a redundant copy. This was done because the file system encountered a failure on a member of the fault-tolerant volume, but was unable to reassign the failing area of the device.\n"},{"file": 85,"line": 3386,"col": 4,"docs": " The printer driver is not compatible with a policy enabled on your computer that blocks NT 4.0 drivers.\n"},{"file": 85,"line": 2711,"col": 4,"docs": " Unable to finish the requested operation because the specified process is not a GUI process.\n"},{"file": 85,"line": 1495,"col": 4,"docs": " One of the volume corruption logs was cleared by chkdsk and no longer contains real corruptions.\n"},{"file": 85,"line": 2960,"col": 4,"docs": " Not enough resources are available to complete this operation.\n"},{"file": 85,"line": 43,"col": 4,"docs": " Not enough storage is available to complete this operation.\n"},{"file": 85,"line": 46,"col": 4,"docs": " The system cannot find the drive specified.\n"},{"file": 85,"line": 2363,"col": 4,"docs": " The specified domain either does not exist or could not be contacted.\n"},{"file": 85,"line": 478,"col": 4,"docs": " The filename or extension is too long.\n"},{"file": 85,"line": 868,"col": 4,"docs": " {EXCEPTION} A real-mode application issued a floating-point instruction and floating-point hardware is not present.\n"},{"file": 85,"line": 3128,"col": 4,"docs": " A null reference pointer was passed to the stub.\n"},{"file": 85,"line": 1558,"col": 4,"docs": " The volume for a file has been externally altered so that the opened file is no longer valid.\n"},{"file": 85,"line": 2513,"col": 4,"docs": " Invalid handle to a multiple-window position structure.\n"},{"file": 85,"line": 3539,"col": 4,"docs": " The specified printer driver package is currently in use.\n"},{"file": 85,"line": 2122,"col": 4,"docs": " The group policy framework should call the extension in the synchronous foreground policy refresh.\n"},{"file": 85,"line": 2459,"col": 4,"docs": " A member could not be added to or removed from the local group because the member does not exist.\n"},{"file": 85,"line": 217,"col": 4,"docs": " The semaphore is set and cannot be closed.\n"},{"file": 85,"line": 3464,"col": 4,"docs": " The specified transform does not match the bitmap's color space.\n"},{"file": 85,"line": 1198,"col": 4,"docs": " {Thread Suspended} A thread termination occurred while the thread was suspended. The thread was resumed, and termination proceeded.\n"},{"file": 85,"line": 2534,"col": 4,"docs": " Class still has open windows.\n"},{"file": 85,"line": 916,"col": 4,"docs": " {Reply Message Mismatch} An attempt was made to reply to an LPC message, but the thread specified by the client ID in the message was not waiting on that message.\n"},{"file": 85,"line": 1720,"col": 4,"docs": " A tape access reached the end of a set of files.\n"},{"file": 85,"line": 1021,"col": 4,"docs": " {EXCEPTION} Multiple floating point faults.\n"},{"file": 85,"line": 133,"col": 4,"docs": " The network BIOS command limit has been reached.\n"},{"file": 85,"line": 1606,"col": 4,"docs": " A notify change request is being completed and the information is not being returned in the caller's buffer. The caller now needs to enumerate the files to find the changes.\n"},{"file": 85,"line": 2654,"col": 4,"docs": " Insufficient system resources exist to complete the requested service.\n"},{"file": 85,"line": 3482,"col": 4,"docs": " This network connection does not exist.\n"},{"file": 85,"line": 2813,"col": 4,"docs": " Function failed during execution.\n"},{"file": 85,"line": 3023,"col": 4,"docs": " The RPC protocol sequence was not found.\n"},{"file": 85,"line": 1444,"col": 4,"docs": " The Desktop heap encountered an error while allocating session memory. There is more information in the system event log.\n"},{"file": 85,"line": 2900,"col": 4,"docs": " The binding handle is not the correct type.\n"},{"file": 85,"line": 2639,"col": 4,"docs": " The window does not have scroll bars.\n"},{"file": 85,"line": 1552,"col": 4,"docs": " Invalid flags.\n"},{"file": 85,"line": 568,"col": 4,"docs": " The directory name is invalid.\n"},{"file": 85,"line": 1978,"col": 4,"docs": " An attempt was made to establish a session to a network server, but there are already too many sessions established to that server.\n"},{"file": 85,"line": 2765,"col": 4,"docs": " Component qualifier not present.\n"},{"file": 85,"line": 2152,"col": 4,"docs": " An attempt to do an operation on a debug object failed because the object is in the process of being deleted.\n"},{"file": 85,"line": 1999,"col": 4,"docs": " The network transport endpoint already has an address associated with it.\n"},{"file": 85,"line": 1756,"col": 4,"docs": " A system shutdown is in progress.\n"},{"file": 85,"line": 2261,"col": 4,"docs": " Either the specified user account is already a member of the specified group, or the specified group cannot be deleted because it contains a member.\n"},{"file": 85,"line": 2780,"col": 4,"docs": " Record field does not exist.\n"},{"file": 85,"line": 2903,"col": 4,"docs": " The binding handle is invalid.\n"},{"file": 85,"line": 2912,"col": 4,"docs": " The string universal unique identifier (UUID) is invalid.\n"},{"file": 85,"line": 352,"col": 4,"docs": " An attempt was made to join or substitute a drive for which a directory on the drive is the target of a previous substitute.\n"},{"file": 85,"line": 2237,"col": 4,"docs": " A specified logon session does not exist. It may already have been terminated.\n"},{"file": 85,"line": 613,"col": 4,"docs": " The security stream for the given volume is in an inconsistent state. Please run CHKDSK on the volume.\n"},{"file": 85,"line": 3239,"col": 4,"docs": " No interfaces have been registered.\n"},{"file": 85,"line": 3518,"col": 4,"docs": " The specified print monitor is currently in use.\n"},{"file": 85,"line": 886,"col": 4,"docs": " The system BIOS failed to connect a system interrupt to the device or bus for which the device is connected.\n"},{"file": 85,"line": 1516,"col": 4,"docs": " The specified access control entry (ACE) contains an invalid condition.\n"},{"file": 85,"line": 1573,"col": 4,"docs": " The configuration registry key could not be opened.\n"},{"file": 85,"line": 1060,"col": 4,"docs": " This version of Windows is not compatible with the behavior version of directory forest, domain or domain controller.\n"},{"file": 85,"line": 2219,"col": 4,"docs": " Indicates two revision levels are incompatible.\n"},{"file": 85,"line": 2846,"col": 4,"docs": " Another version of this product is already installed. Installation of this version cannot continue. To configure or remove the existing version of this product, use Add/Remove Programs on the Control Panel.\n"},{"file": 85,"line": 487,"col": 4,"docs": " The signal being posted is not correct.\n"},{"file": 85,"line": 601,"col": 4,"docs": " The volume is too fragmented to complete this operation.\n"},{"file": 85,"line": 1777,"col": 4,"docs": " No ID address mark was found on the floppy disk.\n"},{"file": 85,"line": 2390,"col": 4,"docs": " A specified authentication package is unknown.\n"},{"file": 85,"line": 2849,"col": 4,"docs": " Invalid command line argument. Consult the Windows Installer SDK for detailed command line help.\n"},{"file": 85,"line": 1243,"col": 4,"docs": " The specified registry key is referenced by a predefined handle.\n"},{"file": 85,"line": 2552,"col": 4,"docs": " Thread does not have a clipboard open.\n"},{"file": 85,"line": 661,"col": 4,"docs": " The target device has insufficient resources to complete the operation.\n"},{"file": 85,"line": 1378,"col": 4,"docs": " The specified process is not part of a job.\n"},{"file": 85,"line": 2062,"col": 4,"docs": " No more local devices.\n"},{"file": 85,"line": 328,"col": 4,"docs": " The system tried to SUBST a drive to a directory on a joined drive.\n"},{"file": 85,"line": 637,"col": 4,"docs": " The physical resources of this disk have been exhausted.\n"},{"file": 85,"line": 1375,"col": 4,"docs": " A process being terminated has no threads to terminate.\n"},{"file": 85,"line": 2726,"col": 4,"docs": " The specified task name is invalid.\n"},{"file": 85,"line": 2252,"col": 4,"docs": " The specified account does not exist.\n"},{"file": 85,"line": 511,"col": 4,"docs": " This file is checked out or locked for editing by another user.\n"},{"file": 85,"line": 409,"col": 4,"docs": " The file system does not support atomic changes to the lock type.\n"},{"file": 85,"line": 3323,"col": 4,"docs": " The referenced account is currently locked out and may not be logged on to.\n"},{"file": 85,"line": 1426,"col": 4,"docs": " The implementation is not capable of performing the request.\n"},{"file": 85,"line": 382,"col": 4,"docs": " The address for the thread ID is not correct.\n"},{"file": 86,"line": 23,"col": 4,"fields": [11166]},{"file": 86,"line": 10,"col": 4,"fields": [11167,11168,11169,11170,11171,11172,11173,11174,11175,11176,11177]},{"file": 86,"line": 30,"col": 4,"fields": [11178]},{"file": 86,"line": 2,"col": 4,"fields": [11179,11180,11181,11182]},{"file": 86,"line": 24,"col": 4,"fields": [11183,11184,11185,11186]},{"file": 86,"line": 32,"col": 4,"fields": [11187,11188,11189,11190,11191,11192,11193,11194,11195,11196,11197]},{"file": 86,"line": 3,"col": 4,"fields": [11198,11199,11200,11201,11202]},{"file": 87,"line": 43,"col": 4,"fields": [11203,11204,11205,11206]},{"file": 87,"line": 194,"col": 4,"fields": [11207,11208,11209,11210,11211]},{"file": 87,"line": 116,"col": 4,"fields": [11212]},{"file": 87,"line": 7,"col": 4,"fields": [11213]},{"file": 87,"line": 72,"col": 4,"fields": []},{"file": 87,"line": 131,"col": 4,"fields": [11214,11215,11216]},{"file": 87,"line": 211,"col": 4,"fields": [11217]},{"file": 87,"line": 76,"col": 4,"fields": [11218,11219]},{"file": 87,"line": 182,"col": 4,"fields": [11220,11221,11222]},{"file": 87,"line": 192,"col": 4,"fields": [11223,11224]},{"file": 87,"line": 184,"col": 4,"fields": [11225]},{"file": 87,"line": 63,"col": 4,"fields": [11226,11227]},{"file": 87,"line": 53,"col": 4,"fields": [11228,11229]},{"file": 87,"line": 100,"col": 4,"fields": [11230,11231,11232,11233]},{"file": 87,"line": 65,"col": 4,"fields": [11234,11235]},{"file": 87,"line": 130,"col": 4,"fields": [11236,11237,11238,11239]},{"file": 87,"line": 210,"col": 4,"fields": [11240]},{"file": 87,"line": 2,"col": 4,"fields": [11241,11242]},{"file": 87,"line": 41,"col": 4,"fields": [11243,11244,11245]},{"file": 87,"line": 133,"col": 4,"fields": [11246,11247,11248]},{"file": 87,"line": 112,"col": 4,"fields": [11249]},{"file": 87,"line": 51,"col": 4,"fields": [11250]},{"file": 87,"line": 156,"col": 4,"fields": [11251,11252,11253,11254,11255]},{"file": 87,"line": 3,"col": 4,"fields": [11256]},{"file": 87,"line": 67,"col": 4,"fields": [11257,11258]},{"file": 87,"line": 188,"col": 4,"fields": []},{"file": 87,"line": 21,"col": 4,"fields": [11259,11260,11261,11262]},{"file": 87,"line": 124,"col": 4,"fields": [11263,11264,11265]},{"file": 87,"line": 202,"col": 4,"fields": [11266,11267,11268,11269,11270]},{"file": 87,"line": 115,"col": 4,"fields": [11271,11272,11273]},{"file": 87,"line": 164,"col": 4,"fields": [11274]},{"file": 87,"line": 80,"col": 4,"fields": [11275]},{"file": 87,"line": 215,"col": 4,"fields": [11276,11277,11278,11279]},{"file": 87,"line": 57,"col": 4,"fields": [11280,11281,11282,11283,11284,11285,11286]},{"file": 87,"line": 128,"col": 4,"fields": [11287,11288,11289]},{"file": 87,"line": 84,"col": 4,"fields": [11290]},{"file": 87,"line": 208,"col": 4,"fields": [11291]},{"file": 87,"line": 59,"col": 4,"fields": [11292]},{"file": 87,"line": 143,"col": 4,"fields": [11293]},{"file": 87,"line": 82,"col": 4,"fields": [11294,11295,11296]},{"file": 87,"line": 107,"col": 4,"fields": [11297,11298,11299,11300]},{"file": 87,"line": 69,"col": 4,"fields": []},{"file": 87,"line": 119,"col": 4,"fields": [11301,11302]},{"file": 87,"line": 45,"col": 4,"fields": [11303,11304,11305,11306,11307,11308]},{"file": 87,"line": 55,"col": 4,"fields": [11309,11310]},{"file": 87,"line": 109,"col": 4,"fields": []},{"file": 87,"line": 120,"col": 4,"fields": [11311,11312,11313]},{"file": 87,"line": 186,"col": 4,"fields": [11314,11315]},{"file": 87,"line": 117,"col": 4,"fields": [11316,11317,11318,11319]},{"file": 87,"line": 141,"col": 4,"fields": [11320]},{"file": 87,"line": 139,"col": 4,"fields": [11321,11322,11323,11324]},{"file": 87,"line": 70,"col": 4,"fields": []},{"file": 87,"line": 204,"col": 4,"fields": [11325]},{"file": 87,"line": 145,"col": 4,"fields": [11326,11327,11328,11329,11330,11331,11332,11333]},{"file": 87,"line": 5,"col": 4,"fields": [11334,11335]},{"file": 87,"line": 54,"col": 4,"fields": [11336]},{"file": 87,"line": 9,"col": 4,"fields": [11337,11338]},{"file": 87,"line": 93,"col": 4,"fields": [11339,11340,11341,11342]},{"file": 87,"line": 166,"col": 4,"fields": [11343,11344]},{"file": 87,"line": 190,"col": 4,"fields": [11345]},{"file": 87,"line": 206,"col": 4,"fields": [11346,11347]},{"file": 87,"line": 118,"col": 4,"fields": [11348,11349,11350]},{"file": 87,"line": 86,"col": 4,"fields": []},{"file": 87,"line": 126,"col": 4,"fields": [11351,11352,11353]},{"file": 87,"line": 212,"col": 4,"fields": [11354]},{"file": 87,"line": 168,"col": 4,"fields": [11355,11356,11357,11358]},{"file": 87,"line": 213,"col": 4,"fields": [11359]},{"file": 87,"line": 110,"col": 4,"fields": [11360,11361,11362,11363,11364]},{"file": 87,"line": 122,"col": 4,"fields": [11365]},{"file": 87,"line": 113,"col": 4,"fields": [11366]},{"file": 87,"line": 61,"col": 4,"fields": []},{"file": 87,"line": 47,"col": 4,"fields": [11367]},{"file": 87,"line": 74,"col": 4,"fields": [11368,11369,11370]},{"file": 87,"line": 175,"col": 4,"fields": [11371,11372,11373,11374]},{"file": 87,"line": 11,"col": 4,"fields": [11375,11376,11377,11378,11379,11380,11381]},{"file": 87,"line": 78,"col": 4,"fields": [11382,11383]},{"file": 87,"line": 88,"col": 4,"fields": [11384,11385]},{"file": 87,"line": 49,"col": 4,"fields": [11386,11387,11388,11389,11390,11391,11392]},{"file": 87,"line": 28,"col": 4,"fields": [11393,11394,11395,11396,11397,11398,11399,11400,11401,11402]},{"file": 1,"line": 401,"col": 16},{"file": 82,"line": 264,"col": 8,"fields": [11403,11404]},{"file": 82,"line": 237,"col": 8,"fields": [11405,11406]},{"file": 82,"line": 233,"col": 8,"fields": [11407]},{"file": 82,"line": 406,"col": 8,"fields": [11408,11409]},{"file": 82,"line": 448,"col": 8,"fields": [11410,11411,11412,11413]},{"file": 82,"line": 472,"col": 8,"fields": [11414,11415,11416,11417]},{"file": 82,"line": 395,"col": 8,"fields": [11418,11419]},{"file": 82,"line": 199,"col": 8,"fields": [11420]},{"file": 82,"line": 480,"col": 8,"fields": [11421,11422,11423,11424]},{"file": 82,"line": 241,"col": 8,"fields": [11425]},{"file": 82,"line": 415,"col": 8,"fields": [11426,11427,11428]},{"file": 82,"line": 245,"col": 8,"fields": [11429,11430]},{"file": 82,"line": 249,"col": 8},{"file": 82,"line": 254,"col": 8,"fields": [11431,11432]},{"file": 82,"line": 433,"col": 4,"fields": [11433]},{"file": 82,"line": 488,"col": 4,"fields": [11434,11435,11436,11437]},{"file": 82,"line": 273,"col": 4},{"file": 1,"line": 412,"col": 20},{"file": 12,"line": 256,"col": 4},{"file": 12,"line": 257,"col": 4},{"file": 12,"line": 258,"col": 4},{"file": 12,"line": 259,"col": 4},{"file": 12,"line": 260,"col": 4},{"file": 12,"line": 262,"col": 4,"docs": " This error occurs when no global event loop is configured,\n and reading from the file descriptor would block.\n"},{"file": 12,"line": 2702,"col": 4,"docs": " The Operating System returned an undocumented error code.\n This error is in theory not possible, but it would be better\n to handle this error than to invoke undefined behavior.\n"},{"file": 12,"line": 2344,"col": 28},{"file": 12,"line": 374,"col": 4},{"file": 12,"line": 375,"col": 4},{"file": 12,"line": 376,"col": 4},{"file": 12,"line": 377,"col": 4},{"file": 12,"line": 378,"col": 4},{"file": 12,"line": 379,"col": 4},{"file": 12,"line": 380,"col": 4},{"file": 12,"line": 381,"col": 4},{"file": 10,"line": 690,"col": 28},{"file": 4,"line": 740,"col": 33},{"file": 62,"line": 469,"col": 4},{"file": 62,"line": 470,"col": 4},{"file": 62,"line": 51,"col": 4},{"file": 62,"line": 52,"col": 4},{"file": 62,"line": 54,"col": 4,"docs": " When any of the path components can not be found or the file component can not\n be found. Some operating systems distinguish between path components not found and\n file components not found, but they are collapsed into FileNotFound to gain\n consistency across operating systems.\n"},{"file": 62,"line": 60,"col": 4},{"file": 62,"line": 61,"col": 4},{"file": 62,"line": 62,"col": 4},{"file": 62,"line": 64,"col": 4,"docs": " On Windows, file paths must be valid Unicode.\n"},{"file": 62,"line": 67,"col": 4,"docs": " On Windows, file paths cannot contain these characters:\n '/', '*', '?', '\"', '<', '>', '|'\n"},{"file": 62,"line": 71,"col": 4},{"file": 12,"line": 531,"col": 4},{"file": 12,"line": 532,"col": 4},{"file": 12,"line": 533,"col": 4},{"file": 12,"line": 534,"col": 4},{"file": 12,"line": 540,"col": 4,"docs": " Insufficient kernel memory was available, or\n the named file is a FIFO and per-user hard limit on\n memory allocation for pipes has been reached.\n"},{"file": 12,"line": 545,"col": 4,"docs": " The file is too large to be opened. This error is unreachable\n for 64-bit targets, as well as when opening directories.\n"},{"file": 12,"line": 549,"col": 4,"docs": " The path refers to directory but the `O_DIRECTORY` flag was not provided.\n"},{"file": 12,"line": 552,"col": 4,"docs": " A new path cannot be created because the device has no room for the new file.\n This error is only reachable when the `O_CREAT` flag is provided.\n"},{"file": 12,"line": 556,"col": 4,"docs": " A component used as a directory in the path was not, in fact, a directory, or\n `O_DIRECTORY` was specified and the path was not a directory.\n"},{"file": 12,"line": 562,"col": 4},{"file": 12,"line": 1947,"col": 29},{"file": 27,"line": 695,"col": 24},{"file": 13,"line": 930,"col": 20},{"file": 13,"line": 917,"col": 20},{"file": 13,"line": 876,"col": 20},{"file": 13,"line": 874,"col": 20},{"file": 27,"line": 572,"col": 24},{"file": 27,"line": 558,"col": 36},{"file": 11,"line": 16,"col": 28},{"file": 27,"line": 516,"col": 24},{"file": 27,"line": 503,"col": 24},{"file": 6,"line": 60,"col": 48},{"file": 12,"line": 825,"col": 4},{"file": 28,"line": 64,"col": 24},{"file": 28,"line": 131,"col": 28},{"file": 28,"line": 88,"col": 32},{"file": 28,"line": 74,"col": 24},{"file": 12,"line": 1319,"col": 4},{"file": 12,"line": 2298,"col": 4},{"file": 12,"line": 530,"col": 4},{"file": 12,"line": 535,"col": 4},{"file": 12,"line": 537,"col": 4,"docs": " The path exceeded `MAX_PATH_BYTES` bytes.\n"},{"file": 12,"line": 560,"col": 4,"docs": " The path already exists and the `O_CREAT` and `O_EXCL` flags were provided.\n"},{"file": 12,"line": 824,"col": 4},{"file": 13,"line": 1196,"col": 44},{"file": 39,"line": 42,"col": 68},{"file": 12,"line": 1318,"col": 4},{"file": 12,"line": 1320,"col": 4},{"file": 12,"line": 1321,"col": 4},{"file": 12,"line": 1322,"col": 4},{"file": 12,"line": 1323,"col": 4},{"file": 12,"line": 1324,"col": 4},{"file": 62,"line": 332,"col": 4},{"file": 62,"line": 333,"col": 4},{"file": 17,"line": 79,"col": 4},{"file": 17,"line": 80,"col": 4},{"file": 17,"line": 99,"col": 4},{"file": 17,"line": 123,"col": 4},{"file": 62,"line": 564,"col": 35},{"file": 44,"line": 121,"col": 4},{"file": 44,"line": 122,"col": 4},{"file": 44,"line": 124,"col": 4,"docs": " See https://github.com/ziglang/zig/issues/1774\n"},{"file": 62,"line": 636,"col": 47},{"file": 17,"line": 46,"col": 57},{"file": 17,"line": 13,"col": 16},{"file": 17,"line": 255,"col": 50},{"file": 17,"line": 257,"col": 57},{"file": 17,"line": 261,"col": 24},{"file": 62,"line": 622,"col": 36},{"file": 62,"line": 600,"col": 37},{"file": 62,"line": 483,"col": 38},{"file": 4,"line": 314,"col": 48},{"file": 17,"line": 97,"col": 4},{"file": 17,"line": 98,"col": 4},{"file": 17,"line": 121,"col": 4},{"file": 17,"line": 122,"col": 4},{"file": 4,"line": 718,"col": 45},{"file": 62,"line": 657,"col": 4},{"file": 62,"line": 658,"col": 4},{"file": 62,"line": 286,"col": 32},{"file": 62,"line": 307,"col": 4},{"file": 62,"line": 308,"col": 4},{"file": 62,"line": 309,"col": 4},{"file": 62,"line": 310,"col": 4},{"file": 17,"line": 24,"col": 16},{"file": 4,"line": 796,"col": 57},{"file": 4,"line": 584,"col": 29},{"file": 4,"line": 630,"col": 29},{"file": 4,"line": 319,"col": 48},{"file": 4,"line": 324,"col": 48},{"file": 4,"line": 609,"col": 29},{"file": 77,"line": 28,"col": 32},{"file": 81,"line": 44,"col": 8},{"file": 81,"line": 45,"col": 8},{"file": 81,"line": 46,"col": 8},{"file": 81,"line": 87,"col": 32},{"file": 80,"line": 48,"col": 4},{"file": 80,"line": 49,"col": 4},{"file": 80,"line": 41,"col": 47},{"file": 80,"line": 64,"col": 4},{"file": 80,"line": 65,"col": 4},{"file": 80,"line": 66,"col": 4},{"file": 81,"line": 94,"col": 8},{"file": 81,"line": 95,"col": 8},{"file": 55,"line": 27,"col": 58},{"file": 55,"line": 71,"col": 12},{"file": 55,"line": 72,"col": 12},{"file": 55,"line": 61,"col": 12},{"file": 55,"line": 62,"col": 12},{"file": 55,"line": 63,"col": 12},{"file": 54,"line": 15,"col": 8},{"file": 54,"line": 16,"col": 8},{"file": 54,"line": 17,"col": 8},{"file": 56,"line": 124,"col": 8},{"file": 56,"line": 125,"col": 8},{"file": 56,"line": 126,"col": 8},{"file": 56,"line": 127,"col": 8},{"file": 56,"line": 128,"col": 8},{"file": 56,"line": 99,"col": 8},{"file": 56,"line": 102,"col": 8},{"file": 56,"line": 103,"col": 8},{"file": 56,"line": 77,"col": 8},{"file": 37,"line": 84,"col": 28},{"file": 37,"line": 81,"col": 28},{"file": 37,"line": 108,"col": 16},{"file": 56,"line": 18,"col": 8},{"file": 56,"line": 19,"col": 8},{"file": 56,"line": 20,"col": 8},{"file": 56,"line": 63,"col": 8},{"file": 56,"line": 64,"col": 8},{"file": 56,"line": 65,"col": 8},{"file": 56,"line": 100,"col": 8},{"file": 56,"line": 101,"col": 8},{"file": 56,"line": 112,"col": 8},{"file": 56,"line": 113,"col": 8},{"file": 56,"line": 114,"col": 8},{"file": 56,"line": 115,"col": 8},{"file": 56,"line": 88,"col": 8},{"file": 56,"line": 89,"col": 8},{"file": 56,"line": 90,"col": 8},{"file": 56,"line": 78,"col": 8},{"file": 56,"line": 79,"col": 8},{"file": 56,"line": 80,"col": 8},{"file": 23,"line": 1070,"col": 44},{"file": 56,"line": 449,"col": 24},{"file": 55,"line": 47,"col": 12},{"file": 55,"line": 49,"col": 12},{"file": 55,"line": 48,"col": 12},{"file": 40,"line": 111,"col": 24},{"file": 23,"line": 1105,"col": 4,"docs": " As much as possible was written to the buffer, but it was too small to fit all the printed bytes.\n"},{"file": 12,"line": 659,"col": 4},{"file": 12,"line": 660,"col": 4},{"file": 12,"line": 661,"col": 4},{"file": 12,"line": 662,"col": 4},{"file": 12,"line": 663,"col": 4},{"file": 12,"line": 664,"col": 4},{"file": 12,"line": 665,"col": 4},{"file": 12,"line": 666,"col": 4},{"file": 12,"line": 667,"col": 4},{"file": 12,"line": 668,"col": 4},{"file": 12,"line": 669,"col": 4},{"file": 12,"line": 1383,"col": 4},{"file": 12,"line": 1384,"col": 4},{"file": 12,"line": 1385,"col": 4},{"file": 12,"line": 1276,"col": 4},{"file": 12,"line": 1277,"col": 4},{"file": 12,"line": 1278,"col": 4},{"file": 12,"line": 1279,"col": 4},{"file": 12,"line": 1280,"col": 4},{"file": 12,"line": 1281,"col": 4},{"file": 12,"line": 1282,"col": 4},{"file": 12,"line": 2299,"col": 4},{"file": 12,"line": 2300,"col": 4},{"file": 71,"line": 52,"col": 33},{"file": 62,"line": 675,"col": 4},{"file": 62,"line": 673,"col": 4},{"file": 62,"line": 674,"col": 4},{"file": 62,"line": 676,"col": 4},{"file": 89,"line": 8,"col": 13,"name": "msg"},{"file": 89,"line": 8,"col": 30,"name": "error_return_trace"},{"file": 13,"line": 217,"col": 18,"name": "trace"},{"file": 13,"line": 217,"col": 53,"name": "first_trace_addr"},{"file": 13,"line": 217,"col": 79,"name": "format","comptime": true},{"file": 13,"line": 217,"col": 108,"name": "args","varArgs": true},{"file": 50,"line": 328,"col": 21,"name": "file"},{"file": 10,"line": 74,"col": 21,"name": "self"},{"file": 10,"line": 74,"col": 34,"name": "format","comptime": true},{"file": 10,"line": 74,"col": 63,"name": "args","varArgs": true},{"file": 13,"line": 178,"col": 22,"name": "stack_trace"},{"file": 13,"line": 86,"col": 29,"name": "start_addr"},{"file": 13,"line": 204,"col": 14,"name": "ok"},{"file": 62,"line": 473,"col": 20,"name": "handle_id"},{"file": 50,"line": 139,"col": 22,"name": "handle"},{"file": 50,"line": 369,"col": 19,"name": "out_stream"},{"file": 50,"line": 369,"col": 40,"name": "bytes"},{"file": 23,"line": 91,"col": 4,"name": "context"},{"file": 23,"line": 92,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 93,"col": 4,"name": "output"},{"file": 23,"line": 94,"col": 4,"name": "fmt","comptime": true},{"file": 23,"line": 95,"col": 4,"name": "args","varArgs": true},{"file": 27,"line": 662,"col": 12,"name": "self"},{"file": 27,"line": 662,"col": 30,"name": "buffer"},{"file": 13,"line": 831,"col": 25,"name": "allocator"},{"file": 13,"line": 843,"col": 28,"name": "allocator"},{"file": 11,"line": 79,"col": 18,"name": "self"},{"file": 11,"line": 79,"col": 36,"name": "T","comptime": true},{"file": 50,"line": 164,"col": 17,"name": "self"},{"file": 28,"line": 43,"col": 16,"name": "allocator"},{"file": 28,"line": 43,"col": 43,"name": "in_file"},{"file": 28,"line": 55,"col": 22,"name": "self"},{"file": 50,"line": 321,"col": 20,"name": "file"},{"file": 6,"line": 58,"col": 25,"name": "self"},{"file": 6,"line": 58,"col": 38,"name": "buf"},{"file": 6,"line": 46,"col": 24,"name": "self"},{"file": 6,"line": 46,"col": 37,"name": "buffer"},{"file": 11,"line": 339,"col": 11,"name": "T","comptime": true},{"file": 11,"line": 339,"col": 29,"name": "a"},{"file": 11,"line": 339,"col": 43,"name": "b"},{"file": 50,"line": 195,"col": 18,"name": "self"},{"file": 50,"line": 195,"col": 30,"name": "offset"},{"file": 6,"line": 158,"col": 29,"name": "self"},{"file": 6,"line": 158,"col": 42,"name": "T","comptime": true},{"file": 11,"line": 527,"col": 21,"name": "T","comptime": true},{"file": 11,"line": 527,"col": 39,"name": "bytes"},{"file": 28,"line": 94,"col": 26,"name": "self"},{"file": 28,"line": 94,"col": 39,"name": "file_stream"},{"file": 50,"line": 185,"col": 18,"name": "self"},{"file": 50,"line": 185,"col": 30,"name": "offset"},{"file": 28,"line": 122,"col": 22,"name": "self"},{"file": 28,"line": 122,"col": 35,"name": "buffer"},{"file": 28,"line": 184,"col": 24,"name": "self"},{"file": 9,"line": 170,"col": 30,"name": "self"},{"file": 9,"line": 170,"col": 43,"name": "new_capacity"},{"file": 9,"line": 72,"col": 24,"name": "self"},{"file": 11,"line": 140,"col": 19,"name": "self"},{"file": 11,"line": 140,"col": 37,"name": "old_mem"},{"file": 11,"line": 140,"col": 51,"name": "new_n"},{"file": 9,"line": 111,"col": 22,"name": "self"},{"file": 9,"line": 111,"col": 35,"name": "item"},{"file": 9,"line": 180,"col": 22,"name": "self"},{"file": 9,"line": 186,"col": 36,"name": "self"},{"file": 28,"line": 215,"col": 22,"name": "self"},{"file": 28,"line": 215,"col": 35,"name": "name","comptime": true},{"file": 6,"line": 191,"col": 26,"name": "self"},{"file": 6,"line": 191,"col": 39,"name": "T","comptime": true},{"file": 9,"line": 43,"col": 23,"name": "self"},{"file": 6,"line": 133,"col": 24,"name": "self"},{"file": 51,"line": 393,"col": 15,"name": "allocator"},{"file": 51,"line": 393,"col": 38,"name": "paths"},{"file": 51,"line": 409,"col": 22,"name": "allocator"},{"file": 51,"line": 409,"col": 45,"name": "paths"},{"file": 44,"line": 23,"col": 19,"name": "allocator"},{"file": 51,"line": 229,"col": 24,"name": "path"},{"file": 51,"line": 374,"col": 14,"name": "byte"},{"file": 51,"line": 351,"col": 26,"name": "kind"},{"file": 51,"line": 351,"col": 50,"name": "p1"},{"file": 51,"line": 351,"col": 66,"name": "p2"},{"file": 11,"line": 95,"col": 17,"name": "self"},{"file": 11,"line": 95,"col": 35,"name": "T","comptime": true},{"file": 11,"line": 95,"col": 53,"name": "n"},{"file": 11,"line": 239,"col": 12,"name": "T","comptime": true},{"file": 11,"line": 239,"col": 30,"name": "dest"},{"file": 11,"line": 239,"col": 41,"name": "source"},{"file": 11,"line": 779,"col": 16,"name": "buffer"},{"file": 11,"line": 779,"col": 36,"name": "delimiter_bytes"},{"file": 11,"line": 906,"col": 16,"name": "self"},{"file": 12,"line": 829,"col": 14,"name": "out_buffer"},{"file": 11,"line": 371,"col": 12,"name": "allocator"},{"file": 11,"line": 371,"col": 35,"name": "T","comptime": true},{"file": 11,"line": 371,"col": 53,"name": "m"},{"file": 11,"line": 220,"col": 16,"name": "self"},{"file": 11,"line": 220,"col": 34,"name": "memory"},{"file": 11,"line": 182,"col": 18,"name": "self"},{"file": 11,"line": 182,"col": 36,"name": "old_mem"},{"file": 11,"line": 182,"col": 50,"name": "new_n"},{"file": 27,"line": 470,"col": 20,"name": "self"},{"file": 27,"line": 470,"col": 32,"name": "coff_ptr"},{"file": 27,"line": 470,"col": 54,"name": "file_name"},{"file": 50,"line": 28,"col": 20,"name": "path"},{"file": 27,"line": 495,"col": 16,"name": "self"},{"file": 27,"line": 495,"col": 28,"name": "allocator"},{"file": 27,"line": 495,"col": 55,"name": "file"},{"file": 50,"line": 205,"col": 21,"name": "self"},{"file": 27,"line": 576,"col": 22,"name": "size"},{"file": 27,"line": 576,"col": 33,"name": "block_size"},{"file": 27,"line": 639,"col": 12,"name": "block_size"},{"file": 27,"line": 639,"col": 29,"name": "file"},{"file": 27,"line": 639,"col": 41,"name": "blocks"},{"file": 4,"line": 255,"col": 11,"name": "x"},{"file": 4,"line": 255,"col": 19,"name": "y"},{"file": 6,"line": 32,"col": 20,"name": "self"},{"file": 6,"line": 32,"col": 33,"name": "buffer"},{"file": 27,"line": 484,"col": 21,"name": "self"},{"file": 27,"line": 484,"col": 33,"name": "stream"},{"file": 13,"line": 888,"col": 23,"name": "cap"},{"file": 13,"line": 997,"col": 23,"name": "stream"},{"file": 13,"line": 997,"col": 36,"name": "allocator"},{"file": 9,"line": 31,"col": 20,"name": "allocator"},{"file": 9,"line": 88,"col": 28,"name": "self"},{"file": 11,"line": 358,"col": 15,"name": "T","comptime": true},{"file": 11,"line": 358,"col": 33,"name": "ptr"},{"file": 27,"line": 478,"col": 25,"name": "self"},{"file": 27,"line": 478,"col": 37,"name": "id"},{"file": 27,"line": 651,"col": 26,"name": "self"},{"file": 27,"line": 651,"col": 44,"name": "allocator"},{"file": 27,"line": 692,"col": 14,"name": "self"},{"file": 27,"line": 692,"col": 32,"name": "len"},{"file": 13,"line": 252,"col": 4,"name": "stack_trace"},{"file": 13,"line": 253,"col": 4,"name": "out_stream"},{"file": 13,"line": 254,"col": 4,"name": "allocator"},{"file": 13,"line": 255,"col": 4,"name": "debug_info"},{"file": 13,"line": 256,"col": 4,"name": "tty_color"},{"file": 13,"line": 343,"col": 28,"name": "debug_info"},{"file": 13,"line": 343,"col": 52,"name": "out_stream"},{"file": 13,"line": 343,"col": 69,"name": "address"},{"file": 13,"line": 343,"col": 85,"name": "tty_color"},{"file": 13,"line": 353,"col": 31,"name": "di"},{"file": 13,"line": 353,"col": 47,"name": "out_stream"},{"file": 13,"line": 353,"col": 64,"name": "relocated_address"},{"file": 13,"line": 353,"col": 90,"name": "tty_color"},{"file": 13,"line": 564,"col": 15,"name": "tty_color"},{"file": 13,"line": 623,"col": 18,"name": "di"},{"file": 13,"line": 623,"col": 34,"name": "mod"},{"file": 51,"line": 868,"col": 16,"name": "path"},{"file": 11,"line": 354,"col": 20,"name": "T","comptime": true},{"file": 11,"line": 354,"col": 38,"name": "ptr"},{"file": 27,"line": 698,"col": 14,"name": "self"},{"file": 27,"line": 698,"col": 32,"name": "len"},{"file": 13,"line": 1168,"col": 26,"name": "out_stream"},{"file": 13,"line": 1168,"col": 43,"name": "line_info"},{"file": 50,"line": 303,"col": 16,"name": "self"},{"file": 50,"line": 303,"col": 28,"name": "buffer"},{"file": 10,"line": 82,"col": 25,"name": "self"},{"file": 10,"line": 82,"col": 38,"name": "byte"},{"file": 10,"line": 78,"col": 21,"name": "self"},{"file": 10,"line": 78,"col": 34,"name": "bytes"},{"file": 13,"line": 311,"col": 30,"name": "out_stream"},{"file": 13,"line": 311,"col": 47,"name": "debug_info"},{"file": 13,"line": 311,"col": 71,"name": "tty_color"},{"file": 13,"line": 311,"col": 88,"name": "start_addr"},{"file": 13,"line": 322,"col": 4,"name": "out_stream"},{"file": 13,"line": 323,"col": 4,"name": "debug_info"},{"file": 13,"line": 324,"col": 4,"name": "tty_color"},{"file": 13,"line": 325,"col": 4,"name": "start_addr"},{"file": 62,"line": 884,"col": 23,"name": "err"},{"file": 50,"line": 309,"col": 17,"name": "self"},{"file": 50,"line": 309,"col": 29,"name": "bytes"},{"file": 23,"line": 315,"col": 4,"name": "value"},{"file": 23,"line": 316,"col": 4,"name": "fmt","comptime": true},{"file": 23,"line": 317,"col": 4,"name": "options"},{"file": 23,"line": 318,"col": 4,"name": "context"},{"file": 23,"line": 319,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 320,"col": 4,"name": "output"},{"file": 23,"line": 321,"col": 4,"name": "max_depth"},{"file": 39,"line": 348,"col": 16,"name": "child_allocator"},{"file": 39,"line": 170,"col": 15,"name": "allocator"},{"file": 39,"line": 170,"col": 38,"name": "old_mem_unaligned"},{"file": 39,"line": 170,"col": 63,"name": "old_align"},{"file": 39,"line": 170,"col": 79,"name": "new_size"},{"file": 39,"line": 170,"col": 96,"name": "new_align"},{"file": 39,"line": 42,"col": 13,"name": "allocator"},{"file": 39,"line": 42,"col": 36,"name": "n"},{"file": 39,"line": 42,"col": 46,"name": "alignment"},{"file": 39,"line": 130,"col": 14,"name": "allocator"},{"file": 39,"line": 130,"col": 37,"name": "old_mem_unaligned"},{"file": 39,"line": 130,"col": 62,"name": "old_align"},{"file": 39,"line": 130,"col": 78,"name": "new_size"},{"file": 39,"line": 130,"col": 95,"name": "new_align"},{"file": 62,"line": 632,"col": 19,"name": "lpAddress"},{"file": 62,"line": 632,"col": 39,"name": "dwSize"},{"file": 62,"line": 632,"col": 54,"name": "dwFreeType"},{"file": 11,"line": 1497,"col": 20,"name": "addr"},{"file": 11,"line": 1497,"col": 33,"name": "alignment"},{"file": 38,"line": 1216,"col": 20,"name": "out_buffer"},{"file": 50,"line": 49,"col": 21,"name": "path_w"},{"file": 12,"line": 73,"col": 13,"name": "fd"},{"file": 50,"line": 355,"col": 18,"name": "in_stream"},{"file": 50,"line": 355,"col": 38,"name": "buffer"},{"file": 12,"line": 2347,"col": 17,"name": "fd"},{"file": 12,"line": 2347,"col": 27,"name": "offset"},{"file": 12,"line": 2376,"col": 17,"name": "fd"},{"file": 12,"line": 2376,"col": 27,"name": "offset"},{"file": 11,"line": 152,"col": 8,"name": "self"},{"file": 11,"line": 153,"col": 8,"name": "old_mem"},{"file": 11,"line": 154,"col": 8,"name": "new_alignment","comptime": true},{"file": 11,"line": 155,"col": 8,"name": "new_n"},{"file": 9,"line": 68,"col": 21,"name": "self"},{"file": 51,"line": 157,"col": 25,"name": "path"},{"file": 11,"line": 882,"col": 18,"name": "T","comptime": true},{"file": 11,"line": 882,"col": 36,"name": "haystack"},{"file": 11,"line": 882,"col": 57,"name": "needle"},{"file": 51,"line": 381,"col": 22,"name": "s1"},{"file": 51,"line": 381,"col": 38,"name": "s2"},{"file": 11,"line": 100,"col": 8,"name": "self"},{"file": 11,"line": 101,"col": 8,"name": "T","comptime": true},{"file": 11,"line": 103,"col": 8,"docs": " null means naturally aligned\n","name": "alignment","comptime": true},{"file": 11,"line": 104,"col": 8,"name": "n"},{"file": 11,"line": 929,"col": 19,"name": "self"},{"file": 11,"line": 929,"col": 40,"name": "byte"},{"file": 62,"line": 337,"col": 27,"name": "buffer"},{"file": 11,"line": 194,"col": 8,"name": "self"},{"file": 11,"line": 195,"col": 8,"name": "old_mem"},{"file": 11,"line": 196,"col": 8,"name": "new_alignment","comptime": true},{"file": 11,"line": 197,"col": 8,"name": "new_n"},{"file": 62,"line": 847,"col": 28,"name": "s"},{"file": 62,"line": 851,"col": 36,"name": "s"},{"file": 62,"line": 851,"col": 51,"name": "suffix","comptime": true},{"file": 51,"line": 130,"col": 18,"name": "path"},{"file": 17,"line": 564,"col": 21,"name": "utf16le"},{"file": 17,"line": 564,"col": 37,"name": "utf8"},{"file": 17,"line": 68,"col": 18,"name": "bytes"},{"file": 62,"line": 566,"col": 21,"name": "hFile"},{"file": 27,"line": 716,"col": 14,"name": "in_stream"},{"file": 27,"line": 716,"col": 34,"name": "buffer"},{"file": 11,"line": 348,"col": 11,"name": "T","comptime": true},{"file": 11,"line": 348,"col": 29,"name": "ptr"},{"file": 39,"line": 431,"col": 16,"name": "buffer"},{"file": 44,"line": 130,"col": 22,"name": "allocator"},{"file": 44,"line": 130,"col": 49,"name": "key"},{"file": 50,"line": 170,"col": 17,"name": "self"},{"file": 50,"line": 175,"col": 35,"name": "self"},{"file": 62,"line": 638,"col": 31,"name": "hConsoleOutput"},{"file": 62,"line": 638,"col": 55,"name": "wAttributes"},{"file": 51,"line": 897,"col": 23,"name": "path"},{"file": 12,"line": 271,"col": 12,"name": "fd"},{"file": 12,"line": 271,"col": 22,"name": "buf"},{"file": 62,"line": 878,"col": 21,"name": "p"},{"file": 62,"line": 878,"col": 34,"name": "s"},{"file": 17,"line": 485,"col": 21,"name": "utf8"},{"file": 17,"line": 485,"col": 33,"name": "utf16le"},{"file": 13,"line": 47,"col": 12,"name": "fmt","comptime": true},{"file": 13,"line": 47,"col": 38,"name": "args","varArgs": true},{"file": 12,"line": 386,"col": 13,"name": "fd"},{"file": 12,"line": 386,"col": 23,"name": "bytes"},{"file": 23,"line": 548,"col": 4,"name": "bytes"},{"file": 23,"line": 549,"col": 4,"name": "fmt","comptime": true},{"file": 23,"line": 550,"col": 4,"name": "options"},{"file": 23,"line": 551,"col": 4,"name": "context"},{"file": 23,"line": 552,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 553,"col": 4,"name": "output"},{"file": 39,"line": 410,"col": 15,"name": "allocator"},{"file": 39,"line": 410,"col": 38,"name": "old_mem"},{"file": 39,"line": 410,"col": 53,"name": "old_align"},{"file": 39,"line": 410,"col": 69,"name": "new_size"},{"file": 39,"line": 410,"col": 86,"name": "new_align"},{"file": 39,"line": 390,"col": 13,"name": "allocator"},{"file": 39,"line": 390,"col": 36,"name": "n"},{"file": 39,"line": 390,"col": 46,"name": "alignment"},{"file": 39,"line": 370,"col": 18,"name": "self"},{"file": 39,"line": 370,"col": 41,"name": "prev_len"},{"file": 39,"line": 370,"col": 58,"name": "minimum_size"},{"file": 46,"line": 77,"col": 23,"name": "list"},{"file": 46,"line": 77,"col": 36,"name": "new_node"},{"file": 39,"line": 421,"col": 14,"name": "allocator"},{"file": 39,"line": 421,"col": 37,"name": "old_mem"},{"file": 39,"line": 421,"col": 52,"name": "old_align"},{"file": 39,"line": 421,"col": 68,"name": "new_size"},{"file": 39,"line": 421,"col": 85,"name": "new_align"},{"file": 62,"line": 624,"col": 20,"name": "addr"},{"file": 62,"line": 624,"col": 35,"name": "size"},{"file": 62,"line": 624,"col": 48,"name": "alloc_type"},{"file": 62,"line": 624,"col": 67,"name": "flProtect"},{"file": 11,"line": 1518,"col": 21,"name": "addr"},{"file": 11,"line": 1518,"col": 34,"name": "alignment"},{"file": 62,"line": 602,"col": 26,"name": "hModule"},{"file": 62,"line": 602,"col": 45,"name": "buf_ptr"},{"file": 62,"line": 602,"col": 62,"name": "buf_len"},{"file": 62,"line": 88,"col": 4,"name": "file_path_w"},{"file": 62,"line": 89,"col": 4,"name": "desired_access"},{"file": 62,"line": 90,"col": 4,"name": "share_mode"},{"file": 62,"line": 91,"col": 4,"name": "lpSecurityAttributes"},{"file": 62,"line": 92,"col": 4,"name": "creation_disposition"},{"file": 62,"line": 93,"col": 4,"name": "flags_and_attrs"},{"file": 62,"line": 94,"col": 4,"name": "hTemplateFile"},{"file": 62,"line": 278,"col": 19,"name": "hObject"},{"file": 62,"line": 486,"col": 30,"name": "handle"},{"file": 62,"line": 486,"col": 46,"name": "offset"},{"file": 62,"line": 501,"col": 32,"name": "handle"},{"file": 62,"line": 501,"col": 48,"name": "offset"},{"file": 4,"line": 314,"col": 11,"name": "T","comptime": true},{"file": 4,"line": 314,"col": 29,"name": "a"},{"file": 4,"line": 314,"col": 35,"name": "b"},{"file": 17,"line": 241,"col": 16,"name": "s"},{"file": 17,"line": 248,"col": 25,"name": "it"},{"file": 17,"line": 8,"col": 35,"name": "c"},{"file": 17,"line": 32,"col": 18,"name": "c"},{"file": 17,"line": 32,"col": 26,"name": "out"},{"file": 17,"line": 82,"col": 19,"name": "bytes"},{"file": 17,"line": 101,"col": 19,"name": "bytes"},{"file": 17,"line": 125,"col": 19,"name": "bytes"},{"file": 39,"line": 457,"col": 15,"name": "allocator"},{"file": 39,"line": 457,"col": 38,"name": "old_mem"},{"file": 39,"line": 457,"col": 53,"name": "old_align"},{"file": 39,"line": 457,"col": 69,"name": "new_size"},{"file": 39,"line": 457,"col": 86,"name": "new_align"},{"file": 39,"line": 442,"col": 13,"name": "allocator"},{"file": 39,"line": 442,"col": 36,"name": "n"},{"file": 39,"line": 442,"col": 46,"name": "alignment"},{"file": 39,"line": 479,"col": 14,"name": "allocator"},{"file": 39,"line": 479,"col": 37,"name": "old_mem"},{"file": 39,"line": 479,"col": 52,"name": "old_align"},{"file": 39,"line": 479,"col": 68,"name": "new_size"},{"file": 39,"line": 479,"col": 85,"name": "new_align"},{"file": 17,"line": 546,"col": 29,"name": "allocator"},{"file": 17,"line": 546,"col": 56,"name": "utf8"},{"file": 17,"line": 178,"col": 16,"name": "s"},{"file": 17,"line": 148,"col": 25,"name": "s"},{"file": 17,"line": 186,"col": 25,"name": "s"},{"file": 17,"line": 202,"col": 20,"name": "s"},{"file": 17,"line": 224,"col": 25,"name": "it"},{"file": 4,"line": 718,"col": 12,"name": "T","comptime": true},{"file": 4,"line": 718,"col": 30,"name": "x"},{"file": 62,"line": 661,"col": 31,"name": "lpName"},{"file": 62,"line": 661,"col": 47,"name": "lpBuffer"},{"file": 62,"line": 661,"col": 65,"name": "nSize"},{"file": 17,"line": 467,"col": 26,"name": "allocator"},{"file": 17,"line": 467,"col": 53,"name": "utf16le"},{"file": 11,"line": 554,"col": 26,"name": "T","comptime": true},{"file": 11,"line": 554,"col": 44,"name": "bytes"},{"file": 9,"line": 157,"col": 22,"name": "self"},{"file": 9,"line": 157,"col": 35,"name": "new_len"},{"file": 12,"line": 1429,"col": 14,"name": "handle"},{"file": 12,"line": 1450,"col": 19,"name": "handle"},{"file": 62,"line": 288,"col": 16,"name": "in_hFile"},{"file": 62,"line": 288,"col": 34,"name": "buffer"},{"file": 52,"line": 53,"col": 23,"name": "self"},{"file": 52,"line": 24,"col": 27,"name": "self"},{"file": 62,"line": 315,"col": 17,"name": "handle"},{"file": 62,"line": 315,"col": 33,"name": "bytes"},{"file": 17,"line": 19,"col": 30,"name": "first_byte"},{"file": 17,"line": 214,"col": 30,"name": "it"},{"file": 11,"line": 455,"col": 15,"name": "T","comptime": true},{"file": 11,"line": 455,"col": 33,"name": "haystack"},{"file": 11,"line": 455,"col": 54,"name": "needle"},{"file": 23,"line": 467,"col": 4,"name": "value"},{"file": 23,"line": 468,"col": 4,"name": "fmt","comptime": true},{"file": 23,"line": 469,"col": 4,"name": "options"},{"file": 23,"line": 470,"col": 4,"name": "context"},{"file": 23,"line": 471,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 472,"col": 4,"name": "output"},{"file": 62,"line": 752,"col": 27,"name": "InitOnce"},{"file": 62,"line": 752,"col": 49,"name": "InitFn"},{"file": 62,"line": 752,"col": 71,"name": "Parameter"},{"file": 62,"line": 752,"col": 92,"name": "Context"},{"file": 52,"line": 37,"col": 12,"name": "InitOnce"},{"file": 52,"line": 38,"col": 12,"name": "Parameter"},{"file": 52,"line": 39,"col": 12,"name": "Context"},{"file": 11,"line": 473,"col": 18,"name": "T","comptime": true},{"file": 11,"line": 473,"col": 36,"name": "haystack"},{"file": 11,"line": 473,"col": 57,"name": "start_index"},{"file": 11,"line": 473,"col": 77,"name": "needle"},{"file": 23,"line": 489,"col": 4,"name": "value"},{"file": 23,"line": 490,"col": 4,"name": "fmt","comptime": true},{"file": 23,"line": 491,"col": 4,"name": "options"},{"file": 23,"line": 492,"col": 4,"name": "context"},{"file": 23,"line": 493,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 494,"col": 4,"name": "output"},{"file": 23,"line": 880,"col": 4,"name": "value"},{"file": 23,"line": 881,"col": 4,"name": "base"},{"file": 23,"line": 882,"col": 4,"name": "uppercase"},{"file": 23,"line": 883,"col": 4,"name": "options"},{"file": 23,"line": 884,"col": 4,"name": "context"},{"file": 23,"line": 885,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 886,"col": 4,"name": "output"},{"file": 23,"line": 933,"col": 4,"name": "value"},{"file": 23,"line": 934,"col": 4,"name": "base"},{"file": 23,"line": 935,"col": 4,"name": "uppercase"},{"file": 23,"line": 936,"col": 4,"name": "options"},{"file": 23,"line": 937,"col": 4,"name": "context"},{"file": 23,"line": 938,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 939,"col": 4,"name": "output"},{"file": 23,"line": 1083,"col": 15,"name": "digit"},{"file": 23,"line": 1083,"col": 26,"name": "uppercase"},{"file": 11,"line": 265,"col": 11,"name": "T","comptime": true},{"file": 11,"line": 265,"col": 29,"name": "dest"},{"file": 11,"line": 265,"col": 40,"name": "value"},{"file": 22,"line": 522,"col": 16,"name": "key"},{"file": 22,"line": 530,"col": 15,"name": "a"},{"file": 22,"line": 530,"col": 21,"name": "b"},{"file": 22,"line": 28,"col": 18,"name": "s"},{"file": 22,"line": 24,"col": 17,"name": "a"},{"file": 22,"line": 24,"col": 32,"name": "b"},{"file": 15,"line": 147,"col": 14,"name": "ok"},{"file": 90,"line": 16,"col": 12,"name": "x"},{"file": 4,"line": 570,"col": 16,"name": "T","comptime": true},{"file": 4,"line": 570,"col": 34,"name": "numerator"},{"file": 4,"line": 570,"col": 48,"name": "denominator"},{"file": 15,"line": 6,"col": 19,"name": "expected_error"},{"file": 15,"line": 6,"col": 45,"name": "actual_error_union"},{"file": 4,"line": 796,"col": 22,"name": "T","comptime": true},{"file": 4,"line": 796,"col": 40,"name": "value"},{"file": 15,"line": 25,"col": 19,"name": "expected"},{"file": 15,"line": 25,"col": 34,"name": "actual"},{"file": 4,"line": 616,"col": 11,"name": "T","comptime": true},{"file": 4,"line": 616,"col": 29,"name": "numerator"},{"file": 4,"line": 616,"col": 43,"name": "denominator"},{"file": 4,"line": 784,"col": 29,"name": "T","comptime": true},{"file": 4,"line": 784,"col": 47,"name": "value"},{"file": 4,"line": 639,"col": 11,"name": "T","comptime": true},{"file": 4,"line": 639,"col": 29,"name": "numerator"},{"file": 4,"line": 639,"col": 43,"name": "denominator"},{"file": 4,"line": 756,"col": 23,"name": "T","comptime": true},{"file": 4,"line": 756,"col": 41,"name": "value"},{"file": 4,"line": 319,"col": 11,"name": "T","comptime": true},{"file": 4,"line": 319,"col": 29,"name": "a"},{"file": 4,"line": 319,"col": 35,"name": "b"},{"file": 4,"line": 324,"col": 11,"name": "T","comptime": true},{"file": 4,"line": 324,"col": 29,"name": "a"},{"file": 4,"line": 324,"col": 35,"name": "b"},{"file": 4,"line": 333,"col": 16,"name": "T","comptime": true},{"file": 4,"line": 333,"col": 34,"name": "a"},{"file": 4,"line": 333,"col": 40,"name": "shift_amt"},{"file": 4,"line": 591,"col": 16,"name": "T","comptime": true},{"file": 4,"line": 591,"col": 34,"name": "numerator"},{"file": 4,"line": 591,"col": 48,"name": "denominator"},{"file": 4,"line": 516,"col": 14,"name": "x"},{"file": 4,"line": 549,"col": 16,"name": "T","comptime": true},{"file": 4,"line": 549,"col": 34,"name": "numerator"},{"file": 4,"line": 549,"col": 48,"name": "denominator"},{"file": 22,"line": 536,"col": 21,"name": "K","comptime": true},{"file": 59,"line": 170,"col": 16,"name": "seed"},{"file": 59,"line": 170,"col": 27,"name": "input"},{"file": 8,"line": 19,"col": 16,"name": "value"},{"file": 8,"line": 73,"col": 22,"name": "value"},{"file": 5,"line": 67,"col": 19,"name": "value"},{"file": 5,"line": 71,"col": 26,"name": "self"},{"file": 8,"line": 113,"col": 26,"name": "self"},{"file": 5,"line": 41,"col": 20,"name": "order","comptime": true},{"file": 5,"line": 6,"col": 13,"name": "spin_count"},{"file": 5,"line": 75,"col": 26,"name": "self"},{"file": 5,"line": 75,"col": 42,"name": "value"},{"file": 5,"line": 84,"col": 20,"name": "self"},{"file": 5,"line": 84,"col": 42,"name": "order","comptime": true},{"file": 5,"line": 79,"col": 28,"name": "self"},{"file": 5,"line": 79,"col": 44,"name": "value"},{"file": 5,"line": 79,"col": 54,"name": "order","comptime": true},{"file": 5,"line": 88,"col": 20,"name": "self"},{"file": 5,"line": 88,"col": 36,"name": "value"},{"file": 5,"line": 88,"col": 46,"name": "order","comptime": true},{"file": 5,"line": 124,"col": 27,"name": "self"},{"file": 5,"line": 124,"col": 43,"name": "cmp"},{"file": 5,"line": 124,"col": 51,"name": "xchg"},{"file": 5,"line": 124,"col": 60,"name": "success","comptime": true},{"file": 5,"line": 124,"col": 85,"name": "failure","comptime": true},{"file": 5,"line": 92,"col": 24,"name": "self"},{"file": 5,"line": 92,"col": 40,"name": "value"},{"file": 5,"line": 92,"col": 50,"name": "order","comptime": true},{"file": 5,"line": 96,"col": 24,"name": "self"},{"file": 5,"line": 96,"col": 40,"name": "value"},{"file": 5,"line": 96,"col": 50,"name": "order","comptime": true},{"file": 5,"line": 100,"col": 24,"name": "self"},{"file": 5,"line": 100,"col": 40,"name": "value"},{"file": 5,"line": 100,"col": 50,"name": "order","comptime": true},{"file": 5,"line": 104,"col": 25,"name": "self"},{"file": 5,"line": 104,"col": 41,"name": "value"},{"file": 5,"line": 104,"col": 51,"name": "order","comptime": true},{"file": 5,"line": 108,"col": 23,"name": "self"},{"file": 5,"line": 108,"col": 39,"name": "value"},{"file": 5,"line": 108,"col": 49,"name": "order","comptime": true},{"file": 5,"line": 112,"col": 24,"name": "self"},{"file": 5,"line": 112,"col": 40,"name": "value"},{"file": 5,"line": 112,"col": 50,"name": "order","comptime": true},{"file": 5,"line": 120,"col": 19,"name": "self"},{"file": 5,"line": 120,"col": 35,"name": "value"},{"file": 5,"line": 120,"col": 45,"name": "order","comptime": true},{"file": 5,"line": 116,"col": 19,"name": "self"},{"file": 5,"line": 116,"col": 35,"name": "value"},{"file": 5,"line": 116,"col": 45,"name": "order","comptime": true},{"file": 77,"line": 20,"col": 16,"name": "self"},{"file": 81,"line": 27,"col": 15,"name": "clock_type"},{"file": 77,"line": 30,"col": 16,"name": "self"},{"file": 77,"line": 30,"col": 32,"name": "ptr"},{"file": 77,"line": 30,"col": 49,"name": "expected"},{"file": 77,"line": 30,"col": 64,"name": "timeout_ms"},{"file": 77,"line": 193,"col": 19,"name": "ptr"},{"file": 81,"line": 55,"col": 17,"name": "function","comptime": true},{"file": 81,"line": 55,"col": 41,"name": "parameter"},{"file": 77,"line": 24,"col": 18,"name": "self"},{"file": 81,"line": 77,"col": 20,"name": "self"},{"file": 81,"line": 77,"col": 36,"name": "timeout_ms"},{"file": 47,"line": 24,"col": 24,"name": "self"},{"file": 47,"line": 33,"col": 25,"name": "self"},{"file": 47,"line": 37,"col": 23,"name": "self"},{"file": 47,"line": 42,"col": 25,"name": "self"},{"file": 47,"line": 46,"col": 24,"name": "self"},{"file": 47,"line": 46,"col": 40,"name": "timeout_ms"},{"file": 47,"line": 80,"col": 22,"name": "self"},{"file": 47,"line": 29,"col": 26,"name": "self"},{"file": 47,"line": 193,"col": 26,"name": "Lock","comptime": true},{"file": 47,"line": 198,"col": 20,"name": "self"},{"file": 47,"line": 101,"col": 22,"name": "self"},{"file": 47,"line": 112,"col": 19,"name": "self"},{"file": 47,"line": 105,"col": 19,"name": "self"},{"file": 47,"line": 207,"col": 32,"name": "self"},{"file": 47,"line": 203,"col": 22,"name": "self"},{"file": 47,"line": 144,"col": 22,"name": "self"},{"file": 47,"line": 180,"col": 19,"name": "self"},{"file": 47,"line": 148,"col": 19,"name": "self"},{"file": 80,"line": 69,"col": 11,"name": "address"},{"file": 80,"line": 69,"col": 28,"name": "bytes"},{"file": 80,"line": 69,"col": 42,"name": "flags"},{"file": 80,"line": 69,"col": 54,"name": "node"},{"file": 80,"line": 77,"col": 14,"name": "memory"},{"file": 80,"line": 77,"col": 28,"name": "flags"},{"file": 80,"line": 77,"col": 40,"name": "node"},{"file": 80,"line": 73,"col": 13,"name": "memory"},{"file": 80,"line": 73,"col": 27,"name": "node"},{"file": 53,"line": 17,"col": 17,"name": "self"},{"file": 53,"line": 22,"col": 17,"name": "self"},{"file": 53,"line": 30,"col": 15,"name": "self"},{"file": 53,"line": 30,"col": 31,"name": "cpu"},{"file": 53,"line": 30,"col": 43,"name": "value"},{"file": 53,"line": 26,"col": 15,"name": "self"},{"file": 53,"line": 26,"col": 30,"name": "cpu"},{"file": 53,"line": 44,"col": 23,"name": "numa_node"},{"file": 53,"line": 44,"col": 42,"name": "cpu_type"},{"file": 53,"line": 48,"col": 19,"name": "self"},{"file": 53,"line": 48,"col": 35,"name": "numa_node"},{"file": 53,"line": 48,"col": 54,"name": "cpu_type"},{"file": 35,"line": 120,"col": 28,"name": "r"},{"file": 35,"line": 120,"col": 40,"name": "T","comptime": true},{"file": 35,"line": 120,"col": 58,"name": "at_most"},{"file": 81,"line": 31,"col": 17,"name": "ms"},{"file": 81,"line": 102,"col": 23,"name": "cpu_affinity"},{"file": 81,"line": 98,"col": 23,"name": "cpu_affinity"},{"file": 81,"line": 156,"col": 22,"name": "item"},{"file": 81,"line": 160,"col": 29,"name": "item"},{"file": 54,"line": 28,"col": 21,"name": "bytes"},{"file": 54,"line": 24,"col": 20,"name": "self"},{"file": 55,"line": 75,"col": 20,"name": "self"},{"file": 55,"line": 75,"col": 36,"name": "events"},{"file": 55,"line": 75,"col": 53,"name": "timeout_ms"},{"file": 55,"line": 34,"col": 21,"name": "self"},{"file": 55,"line": 66,"col": 22,"name": "self"},{"file": 55,"line": 66,"col": 38,"name": "user_data"},{"file": 55,"line": 20,"col": 20,"name": "self"},{"file": 55,"line": 20,"col": 35,"name": "poller"},{"file": 35,"line": 143,"col": 34,"name": "r"},{"file": 35,"line": 143,"col": 46,"name": "T","comptime": true},{"file": 35,"line": 143,"col": 64,"name": "at_least"},{"file": 35,"line": 143,"col": 77,"name": "less_than"},{"file": 56,"line": 237,"col": 19,"name": "AddressType","comptime": true},{"file": 56,"line": 237,"col": 47,"name": "port"},{"file": 56,"line": 23,"col": 15,"name": "flags"},{"file": 56,"line": 68,"col": 21,"name": "self"},{"file": 56,"line": 68,"col": 37,"name": "option"},{"file": 56,"line": 28,"col": 17,"name": "self"},{"file": 56,"line": 72,"col": 21,"name": "self"},{"file": 56,"line": 72,"col": 36,"name": "option"},{"file": 56,"line": 208,"col": 15,"name": "port"},{"file": 57,"line": 47,"col": 21,"name": "input"},{"file": 37,"line": 71,"col": 16,"name": "buf"},{"file": 57,"line": 33,"col": 20,"name": "address"},{"file": 57,"line": 33,"col": 34,"name": "port"},{"file": 56,"line": 83,"col": 16,"name": "self"},{"file": 56,"line": 83,"col": 32,"name": "address"},{"file": 56,"line": 93,"col": 18,"name": "self"},{"file": 56,"line": 93,"col": 34,"name": "backlog"},{"file": 56,"line": 106,"col": 19,"name": "self"},{"file": 56,"line": 106,"col": 35,"name": "address"},{"file": 56,"line": 106,"col": 64,"name": "token"},{"file": 57,"line": 11,"col": 19,"name": "address"},{"file": 56,"line": 118,"col": 18,"name": "self"},{"file": 56,"line": 118,"col": 34,"name": "flags"},{"file": 56,"line": 118,"col": 48,"name": "incoming"},{"file": 56,"line": 118,"col": 81,"name": "token"},{"file": 56,"line": 213,"col": 20,"name": "address"},{"file": 57,"line": 17,"col": 25,"name": "self"},{"file": 57,"line": 17,"col": 40,"name": "flags"},{"file": 56,"line": 181,"col": 18,"name": "self"},{"file": 56,"line": 181,"col": 34,"name": "address"},{"file": 56,"line": 181,"col": 57,"name": "buffer"},{"file": 56,"line": 181,"col": 77,"name": "token"},{"file": 56,"line": 175,"col": 20,"name": "self"},{"file": 56,"line": 175,"col": 36,"name": "address"},{"file": 56,"line": 175,"col": 59,"name": "buffer"},{"file": 56,"line": 175,"col": 73,"name": "token"},{"file": 56,"line": 221,"col": 15,"name": "port"},{"file": 57,"line": 55,"col": 21,"name": "input"},{"file": 37,"line": 116,"col": 16,"name": "buf"},{"file": 23,"line": 1070,"col": 19,"name": "c"},{"file": 23,"line": 1070,"col": 26,"name": "radix"},{"file": 57,"line": 40,"col": 20,"name": "address"},{"file": 57,"line": 40,"col": 46,"name": "port"},{"file": 57,"line": 40,"col": 57,"name": "flowinfo"},{"file": 56,"line": 226,"col": 20,"name": "address"},{"file": 56,"line": 293,"col": 22,"name": "AddressType","comptime": true},{"file": 56,"line": 293,"col": 50,"name": "port"},{"file": 56,"line": 303,"col": 20,"name": "self"},{"file": 56,"line": 303,"col": 36,"name": "poller"},{"file": 56,"line": 303,"col": 63,"name": "addr_port"},{"file": 56,"line": 323,"col": 21,"name": "self"},{"file": 55,"line": 52,"col": 24,"name": "self"},{"file": 55,"line": 52,"col": 40,"name": "handle"},{"file": 55,"line": 52,"col": 60,"name": "flags"},{"file": 55,"line": 52,"col": 80,"name": "user_data"},{"file": 56,"line": 36,"col": 28,"name": "self"},{"file": 56,"line": 328,"col": 29,"name": "self"},{"file": 56,"line": 328,"col": 45,"name": "token"},{"file": 56,"line": 328,"col": 59,"name": "poller"},{"file": 56,"line": 40,"col": 31,"name": "self"},{"file": 56,"line": 40,"col": 53,"name": "event_flags","comptime": true},{"file": 56,"line": 353,"col": 29,"name": "self"},{"file": 56,"line": 353,"col": 45,"name": "io_token"},{"file": 56,"line": 353,"col": 62,"name": "poller"},{"file": 56,"line": 148,"col": 16,"name": "self"},{"file": 56,"line": 148,"col": 32,"name": "buffer"},{"file": 56,"line": 148,"col": 52,"name": "token"},{"file": 56,"line": 380,"col": 19,"name": "self"},{"file": 56,"line": 380,"col": 35,"name": "poller"},{"file": 56,"line": 380,"col": 62,"name": "addr_port"},{"file": 56,"line": 396,"col": 21,"name": "self"},{"file": 56,"line": 400,"col": 22,"name": "self"},{"file": 56,"line": 400,"col": 38,"name": "event_token"},{"file": 56,"line": 400,"col": 58,"name": "poller"},{"file": 56,"line": 400,"col": 85,"name": "addr_port"},{"file": 55,"line": 56,"col": 26,"name": "self"},{"file": 55,"line": 56,"col": 42,"name": "handle"},{"file": 55,"line": 56,"col": 62,"name": "flags"},{"file": 55,"line": 56,"col": 82,"name": "user_data"},{"file": 56,"line": 143,"col": 16,"name": "self"},{"file": 56,"line": 143,"col": 32,"name": "buffer"},{"file": 56,"line": 143,"col": 46,"name": "token"},{"file": 55,"line": 16,"col": 20,"name": "self"},{"file": 90,"line": 33,"col": 10,"name": "x"},{"file": 13,"line": 208,"col": 13,"name": "format","comptime": true},{"file": 13,"line": 208,"col": 42,"name": "args","varArgs": true},{"file": 22,"line": 538,"col": 16,"name": "key"},{"file": 59,"line": 119,"col": 16,"name": "seed"},{"file": 59,"line": 119,"col": 27,"name": "input"},{"file": 80,"line": 5,"col": 17,"name": "To","comptime": true},{"file": 80,"line": 5,"col": 36,"name": "from"},{"file": 8,"line": 117,"col": 22,"name": "self"},{"file": 5,"line": 29,"col": 21,"name": "self"},{"file": 5,"line": 132,"col": 21,"name": "self"},{"file": 5,"line": 132,"col": 37,"name": "value"},{"file": 5,"line": 132,"col": 47,"name": "op","comptime": true},{"file": 5,"line": 132,"col": 81,"name": "order","comptime": true},{"file": 77,"line": 86,"col": 16,"name": "self"},{"file": 7,"line": 141,"col": 15,"name": "is_monotonic"},{"file": 77,"line": 97,"col": 16,"name": "self"},{"file": 77,"line": 97,"col": 32,"name": "ptr"},{"file": 77,"line": 97,"col": 49,"name": "expected"},{"file": 77,"line": 97,"col": 64,"name": "timeout_ms"},{"file": 77,"line": 40,"col": 21,"name": "self"},{"file": 77,"line": 40,"col": 37,"name": "ptr"},{"file": 77,"line": 36,"col": 21,"name": "self"},{"file": 77,"line": 36,"col": 37,"name": "ptr"},{"file": 81,"line": 39,"col": 24,"name": "function","comptime": true},{"file": 81,"line": 49,"col": 18,"name": "stack"},{"file": 81,"line": 49,"col": 54,"name": "function","comptime": true},{"file": 81,"line": 49,"col": 78,"name": "parameter"},{"file": 77,"line": 87,"col": 18,"name": "self"},{"file": 7,"line": 182,"col": 16,"name": "handle"},{"file": 7,"line": 182,"col": 32,"name": "timeout_ms"},{"file": 47,"line": 97,"col": 16,"name": "self"},{"file": 47,"line": 96,"col": 18,"name": "self"},{"file": 47,"line": 135,"col": 16,"name": "self"},{"file": 47,"line": 140,"col": 18,"name": "self"},{"file": 7,"line": 252,"col": 11,"name": "address"},{"file": 7,"line": 252,"col": 28,"name": "bytes"},{"file": 7,"line": 252,"col": 42,"name": "flags"},{"file": 7,"line": 252,"col": 54,"name": "numa_node"},{"file": 7,"line": 269,"col": 14,"name": "memory"},{"file": 7,"line": 269,"col": 28,"name": "flags"},{"file": 7,"line": 269,"col": 40,"name": "numa_node"},{"file": 7,"line": 264,"col": 13,"name": "memory"},{"file": 7,"line": 264,"col": 27,"name": "numa_node"},{"file": 7,"line": 17,"col": 23,"name": "numa_node"},{"file": 7,"line": 17,"col": 42,"name": "only_physical_cpus"},{"file": 7,"line": 28,"col": 19,"name": "self"},{"file": 7,"line": 28,"col": 44,"name": "numa_node"},{"file": 7,"line": 28,"col": 63,"name": "only_physical_cpus"},{"file": 35,"line": 46,"col": 15,"name": "r"},{"file": 35,"line": 46,"col": 27,"name": "T","comptime": true},{"file": 35,"line": 63,"col": 30,"name": "r"},{"file": 35,"line": 63,"col": 42,"name": "T","comptime": true},{"file": 35,"line": 63,"col": 60,"name": "less_than"},{"file": 7,"line": 153,"col": 17,"name": "ms"},{"file": 7,"line": 207,"col": 23,"name": "cpu_affinity"},{"file": 7,"line": 198,"col": 23,"name": "cpu_affinity"},{"file": 58,"line": 17,"col": 21,"name": "bytes"},{"file": 58,"line": 13,"col": 20,"name": "self"},{"file": 58,"line": 111,"col": 20,"name": "self"},{"file": 58,"line": 111,"col": 36,"name": "events"},{"file": 58,"line": 111,"col": 53,"name": "timeout"},{"file": 58,"line": 81,"col": 21,"name": "self"},{"file": 58,"line": 104,"col": 22,"name": "self"},{"file": 58,"line": 104,"col": 38,"name": "data"},{"file": 58,"line": 69,"col": 20,"name": "self"},{"file": 58,"line": 69,"col": 35,"name": "poller"},{"file": 58,"line": 139,"col": 15,"name": "flags"},{"file": 58,"line": 228,"col": 21,"name": "self"},{"file": 58,"line": 228,"col": 37,"name": "option"},{"file": 58,"line": 152,"col": 17,"name": "self"},{"file": 58,"line": 241,"col": 21,"name": "self"},{"file": 58,"line": 241,"col": 36,"name": "option"},{"file": 58,"line": 34,"col": 20,"name": "address"},{"file": 58,"line": 34,"col": 34,"name": "port"},{"file": 58,"line": 253,"col": 16,"name": "self"},{"file": 58,"line": 253,"col": 32,"name": "address"},{"file": 58,"line": 265,"col": 18,"name": "self"},{"file": 58,"line": 265,"col": 34,"name": "backlog"},{"file": 58,"line": 281,"col": 19,"name": "self"},{"file": 58,"line": 281,"col": 35,"name": "address"},{"file": 58,"line": 281,"col": 64,"name": "token"},{"file": 58,"line": 332,"col": 18,"name": "self"},{"file": 58,"line": 332,"col": 34,"name": "flags"},{"file": 58,"line": 332,"col": 59,"name": "incoming"},{"file": 58,"line": 332,"col": 92,"name": "token"},{"file": 57,"line": 25,"col": 18,"name": "self"},{"file": 56,"line": 32,"col": 29,"name": "handle"},{"file": 56,"line": 32,"col": 49,"name": "flags"},{"file": 56,"line": 200,"col": 19,"name": "self"},{"file": 56,"line": 200,"col": 35,"name": "address"},{"file": 56,"line": 200,"col": 59,"name": "buffers"},{"file": 56,"line": 200,"col": 88,"name": "token"},{"file": 56,"line": 191,"col": 19,"name": "self"},{"file": 56,"line": 191,"col": 35,"name": "address"},{"file": 56,"line": 191,"col": 59,"name": "buffers"},{"file": 56,"line": 191,"col": 82,"name": "token"},{"file": 58,"line": 47,"col": 20,"name": "address"},{"file": 58,"line": 47,"col": 35,"name": "port"},{"file": 58,"line": 47,"col": 46,"name": "flowinfo"},{"file": 58,"line": 47,"col": 61,"name": "scope"},{"file": 57,"line": 29,"col": 18,"name": "self"},{"file": 58,"line": 93,"col": 24,"name": "self"},{"file": 58,"line": 93,"col": 40,"name": "handle"},{"file": 58,"line": 93,"col": 56,"name": "flags"},{"file": 58,"line": 93,"col": 67,"name": "data"},{"file": 58,"line": 166,"col": 21,"name": "self"},{"file": 58,"line": 212,"col": 24,"name": "self"},{"file": 58,"line": 212,"col": 46,"name": "event_flags","comptime": true},{"file": 56,"line": 159,"col": 17,"name": "self"},{"file": 56,"line": 159,"col": 33,"name": "buffer"},{"file": 56,"line": 159,"col": 53,"name": "token"},{"file": 58,"line": 99,"col": 26,"name": "self"},{"file": 58,"line": 99,"col": 42,"name": "handle"},{"file": 58,"line": 99,"col": 58,"name": "flags"},{"file": 58,"line": 99,"col": 69,"name": "data"},{"file": 56,"line": 153,"col": 16,"name": "self"},{"file": 56,"line": 153,"col": 32,"name": "buffer"},{"file": 56,"line": 153,"col": 46,"name": "token"},{"file": 58,"line": 65,"col": 20,"name": "self"},{"file": 59,"line": 136,"col": 16,"name": "seed"},{"file": 74,"line": 166,"col": 16,"name": "hasher"},{"file": 74,"line": 166,"col": 29,"name": "key"},{"file": 59,"line": 162,"col": 17,"name": "self"},{"file": 59,"line": 41,"col": 16,"name": "seed"},{"file": 59,"line": 62,"col": 18,"name": "self"},{"file": 59,"line": 62,"col": 42,"name": "b"},{"file": 59,"line": 73,"col": 17,"name": "self"},{"file": 59,"line": 73,"col": 41,"name": "b"},{"file": 77,"line": 89,"col": 18,"name": "self"},{"file": 77,"line": 89,"col": 34,"name": "ptr"},{"file": 77,"line": 89,"col": 51,"name": "wakeup_count"},{"file": 7,"line": 161,"col": 24,"name": "function","comptime": true},{"file": 7,"line": 165,"col": 18,"name": "stack"},{"file": 7,"line": 165,"col": 54,"name": "function","comptime": true},{"file": 7,"line": 165,"col": 78,"name": "parameter"},{"file": 7,"line": 306,"col": 19,"name": "flags"},{"file": 7,"line": 297,"col": 16,"name": "flags"},{"file": 7,"line": 42,"col": 28,"name": "affinity"},{"file": 7,"line": 42,"col": 55,"name": "numa_node"},{"file": 7,"line": 42,"col": 73,"name": "only_physical_cpus"},{"file": 7,"line": 64,"col": 8,"name": "processor_info"},{"file": 7,"line": 65,"col": 8,"name": "cpu_count"},{"file": 7,"line": 66,"col": 8,"name": "only_physical_cpus"},{"file": 7,"line": 102,"col": 8,"name": "relationship","comptime": true},{"file": 7,"line": 103,"col": 8,"name": "found_processor_info","comptime": true},{"file": 7,"line": 104,"col": 8,"name": "found_processor_info_args","varArgs": true},{"file": 7,"line": 77,"col": 8,"name": "processor_info"},{"file": 7,"line": 78,"col": 8,"name": "affinity"},{"file": 7,"line": 79,"col": 8,"name": "only_physical_cpus"},{"file": 35,"line": 619,"col": 16,"name": "init_s"},{"file": 35,"line": 36,"col": 17,"name": "r"},{"file": 35,"line": 36,"col": 29,"name": "buf"},{"file": 35,"line": 281,"col": 24,"name": "T","comptime": true},{"file": 35,"line": 281,"col": 42,"name": "random_int"},{"file": 35,"line": 281,"col": 57,"name": "less_than"},{"file": 58,"line": 467,"col": 20,"name": "flags"},{"file": 58,"line": 158,"col": 22,"name": "handle"},{"file": 58,"line": 158,"col": 38,"name": "flags"},{"file": 82,"line": 275,"col": 8,"name": "handle"},{"file": 82,"line": 276,"col": 8,"name": "option"},{"file": 82,"line": 277,"col": 8,"name": "sockopt"},{"file": 82,"line": 278,"col": 8,"name": "flags","comptime": true},{"file": 11,"line": 1313,"col": 19,"name": "T","comptime": true},{"file": 11,"line": 1313,"col": 37,"name": "x"},{"file": 58,"line": 452,"col": 27,"name": "self"},{"file": 58,"line": 452,"col": 43,"name": "overlapped"},{"file": 58,"line": 452,"col": 76,"name": "token"},{"file": 58,"line": 276,"col": 21,"name": "handle"},{"file": 58,"line": 318,"col": 20,"name": "handle_ptr"},{"file": 58,"line": 318,"col": 41,"name": "incoming"},{"file": 58,"line": 410,"col": 19,"name": "self"},{"file": 58,"line": 410,"col": 35,"name": "address"},{"file": 58,"line": 410,"col": 65,"name": "buffers"},{"file": 58,"line": 410,"col": 90,"name": "token"},{"file": 56,"line": 133,"col": 24,"name": "buffers"},{"file": 58,"line": 373,"col": 19,"name": "self"},{"file": 58,"line": 373,"col": 35,"name": "address"},{"file": 58,"line": 373,"col": 59,"name": "buffers"},{"file": 58,"line": 373,"col": 78,"name": "token"},{"file": 56,"line": 170,"col": 18,"name": "self"},{"file": 56,"line": 170,"col": 34,"name": "buffers"},{"file": 56,"line": 170,"col": 63,"name": "token"},{"file": 56,"line": 165,"col": 17,"name": "self"},{"file": 56,"line": 165,"col": 33,"name": "buffers"},{"file": 56,"line": 165,"col": 56,"name": "token"},{"file": 74,"line": 75,"col": 12,"name": "hasher"},{"file": 74,"line": 75,"col": 25,"name": "key"},{"file": 74,"line": 75,"col": 35,"name": "strat","comptime": true},{"file": 59,"line": 48,"col": 13,"name": "self"},{"file": 59,"line": 48,"col": 37,"name": "b"},{"file": 59,"line": 26,"col": 8,"name": "a"},{"file": 59,"line": 26,"col": 16,"name": "b"},{"file": 59,"line": 26,"col": 24,"name": "seed"},{"file": 59,"line": 11,"col": 14,"name": "bytes","comptime": true},{"file": 59,"line": 11,"col": 34,"name": "data"},{"file": 59,"line": 16,"col": 23,"name": "data"},{"file": 59,"line": 30,"col": 8,"name": "a"},{"file": 59,"line": 30,"col": 16,"name": "b"},{"file": 59,"line": 30,"col": 24,"name": "seed"},{"file": 59,"line": 20,"col": 7,"name": "a"},{"file": 59,"line": 20,"col": 15,"name": "b"},{"file": 7,"line": 168,"col": 28,"name": "arg"},{"file": 7,"line": 51,"col": 8,"name": "processor_info"},{"file": 7,"line": 52,"col": 8,"name": "numa_node"},{"file": 7,"line": 53,"col": 8,"name": "affinity"},{"file": 35,"line": 674,"col": 12,"name": "r"},{"file": 35,"line": 674,"col": 24,"name": "buf"},{"file": 35,"line": 666,"col": 12,"name": "self"},{"file": 35,"line": 666,"col": 33,"name": "init_s"},{"file": 58,"line": 194,"col": 23,"name": "socket"},{"file": 58,"line": 194,"col": 39,"name": "function_guid"},{"file": 58,"line": 194,"col": 68,"name": "function"},{"file": 58,"line": 224,"col": 31,"name": "option"},{"file": 58,"line": 224,"col": 46,"name": "handle"},{"file": 58,"line": 224,"col": 62,"name": "value"},{"file": 58,"line": 224,"col": 76,"name": "length"},{"file": 59,"line": 144,"col": 18,"name": "self"},{"file": 59,"line": 144,"col": 33,"name": "b"},{"file": 11,"line": 1339,"col": 15,"name": "ptr"},{"file": 4,"line": 944,"col": 15,"name": "T","comptime": true},{"file": 4,"line": 944,"col": 33,"name": "a"},{"file": 4,"line": 944,"col": 39,"name": "b"},{"file": 35,"line": 629,"col": 12,"name": "self"},{"file": 35,"line": 487,"col": 16,"name": "seed"},{"file": 35,"line": 491,"col": 16,"name": "self"},{"file": 4,"line": 413,"col": 12,"name": "T","comptime": true},{"file": 4,"line": 413,"col": 30,"name": "x"},{"file": 4,"line": 413,"col": 36,"name": "r"},{"file": 4,"line": 340,"col": 11,"name": "T","comptime": true},{"file": 4,"line": 340,"col": 29,"name": "a"},{"file": 4,"line": 340,"col": 35,"name": "shift_amt"},{"file": 4,"line": 366,"col": 11,"name": "T","comptime": true},{"file": 4,"line": 366,"col": 29,"name": "a"},{"file": 4,"line": 366,"col": 35,"name": "shift_amt"},{"file": 23,"line": 531,"col": 4,"name": "value"},{"file": 23,"line": 532,"col": 4,"name": "fmt","comptime": true},{"file": 23,"line": 533,"col": 4,"name": "options"},{"file": 23,"line": 534,"col": 4,"name": "context"},{"file": 23,"line": 535,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 536,"col": 4,"name": "output"},{"file": 4,"line": 664,"col": 15,"name": "x"},{"file": 23,"line": 600,"col": 4,"name": "value"},{"file": 23,"line": 601,"col": 4,"name": "options"},{"file": 23,"line": 602,"col": 4,"name": "context"},{"file": 23,"line": 603,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 604,"col": 4,"name": "output"},{"file": 23,"line": 902,"col": 4,"name": "value"},{"file": 23,"line": 903,"col": 4,"name": "base"},{"file": 23,"line": 904,"col": 4,"name": "uppercase"},{"file": 23,"line": 905,"col": 4,"name": "options"},{"file": 23,"line": 906,"col": 4,"name": "context"},{"file": 23,"line": 907,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 908,"col": 4,"name": "output"},{"file": 91,"line": 5,"col": 15,"name": "x"},{"file": 92,"line": 6,"col": 13,"name": "x"},{"file": 93,"line": 32,"col": 21,"name": "x"},{"file": 72,"line": 81,"col": 14,"name": "value"},{"file": 72,"line": 81,"col": 26,"name": "buffer"},{"file": 72,"line": 23,"col": 24,"name": "float_decimal"},{"file": 72,"line": 23,"col": 54,"name": "precision"},{"file": 72,"line": 23,"col": 72,"name": "mode"},{"file": 91,"line": 25,"col": 13,"name": "x"},{"file": 72,"line": 199,"col": 19,"name": "k"},{"file": 94,"line": 440,"col": 8,"name": "str"},{"file": 94,"line": 440,"col": 25,"name": "exp"},{"file": 72,"line": 98,"col": 11,"name": "val"},{"file": 72,"line": 98,"col": 21,"name": "buffer"},{"file": 72,"line": 297,"col": 12,"name": "val"},{"file": 72,"line": 297,"col": 22,"name": "buffer"},{"file": 72,"line": 354,"col": 14,"name": "val"},{"file": 72,"line": 354,"col": 24,"name": "buffer"},{"file": 95,"line": 26,"col": 13,"name": "x"},{"file": 96,"line": 17,"col": 13,"name": "x"},{"file": 72,"line": 219,"col": 10,"name": "in"},{"file": 72,"line": 219,"col": 18,"name": "val"},{"file": 72,"line": 262,"col": 11,"name": "hp"},{"file": 72,"line": 278,"col": 11,"name": "hp"},{"file": 72,"line": 409,"col": 10,"name": "val"},{"file": 72,"line": 413,"col": 10,"name": "val"},{"file": 72,"line": 254,"col": 15,"name": "hp"},{"file": 72,"line": 668,"col": 10,"name": "from"},{"file": 72,"line": 682,"col": 14,"name": "a"},{"file": 72,"line": 682,"col": 22,"name": "b"},{"file": 72,"line": 435,"col": 10,"name": "value_param"},{"file": 72,"line": 435,"col": 28,"name": "buffer"},{"file": 95,"line": 72,"col": 11,"name": "x"},{"file": 96,"line": 95,"col": 11,"name": "x"},{"file": 72,"line": 241,"col": 9,"name": "val"},{"file": 72,"line": 241,"col": 19,"name": "hi"},{"file": 72,"line": 241,"col": 29,"name": "lo"},{"file": 93,"line": 6,"col": 13,"name": "x"},{"file": 4,"line": 105,"col": 17,"name": "value"},{"file": 72,"line": 246,"col": 9,"name": "in"},{"file": 13,"line": 2433,"col": 35,"name": "info"},{"file": 61,"line": 99,"col": 17,"name": "self"},{"file": 61,"line": 99,"col": 34,"name": "name"},{"file": 61,"line": 99,"col": 52,"name": "estimated_total_items"},{"file": 61,"line": 57,"col": 21,"name": "self"},{"file": 61,"line": 57,"col": 34,"name": "name"},{"file": 61,"line": 57,"col": 52,"name": "estimated_total_items"},{"file": 61,"line": 90,"col": 24,"name": "self"},{"file": 61,"line": 128,"col": 19,"name": "self"},{"file": 61,"line": 74,"col": 19,"name": "self"},{"file": 61,"line": 179,"col": 15,"name": "self"},{"file": 61,"line": 179,"col": 32,"name": "format","comptime": true},{"file": 61,"line": 179,"col": 61,"name": "args","varArgs": true},{"file": 23,"line": 1108,"col": 16,"name": "buf"},{"file": 23,"line": 1108,"col": 27,"name": "fmt","comptime": true},{"file": 23,"line": 1108,"col": 53,"name": "args","varArgs": true},{"file": 61,"line": 189,"col": 16,"name": "self"},{"file": 61,"line": 189,"col": 33,"name": "end"},{"file": 61,"line": 189,"col": 46,"name": "format","comptime": true},{"file": 61,"line": 189,"col": 75,"name": "args","varArgs": true},{"file": 40,"line": 154,"col": 16,"name": "self"},{"file": 61,"line": 120,"col": 24,"name": "self"},{"file": 61,"line": 68,"col": 27,"name": "self"},{"file": 23,"line": 1095,"col": 17,"name": "context"},{"file": 23,"line": 1095,"col": 44,"name": "bytes"},{"file": 5,"line": 57,"col": 20,"name": "B","comptime": true},{"file": 5,"line": 45,"col": 14,"name": "T","comptime": true},{"file": 22,"line": 520,"col": 24,"name": "K","comptime": true},{"file": 6,"line": 15,"col": 16,"name": "ReadError","comptime": true},{"file": 7,"line": 319,"col": 22,"name": "dll_name","comptime": true},{"file": 7,"line": 319,"col": 55,"name": "Imports","comptime": true},{"file": 63,"line": 116,"col": 10,"name": "id","comptime": true},{"file": 63,"line": 118,"col": 21,"name": "T","comptime": true},{"file": 8,"line": 94,"col": 12,"name": "initializer"},{"file": 98,"line": 11,"col": 15,"name": "T","comptime": true},{"file": 9,"line": 7,"col": 17,"name": "T","comptime": true},{"file": 4,"line": 430,"col": 15,"name": "T","comptime": true},{"file": 10,"line": 67,"col": 17,"name": "WriteError","comptime": true},{"file": 8,"line": 44,"col": 15,"name": "is_signed","comptime": true},{"file": 8,"line": 44,"col": 41,"name": "bits","comptime": true},{"file": 36,"line": 88,"col": 17,"name": "T","comptime": true},{"file": 36,"line": 556,"col": 19,"name": "T","comptime": true},{"file": 46,"line": 14,"col": 24,"name": "T","comptime": true},{"file": 4,"line": 236,"col": 11,"name": "A","comptime": true},{"file": 4,"line": 236,"col": 29,"name": "B","comptime": true},{"file": 8,"line": 60,"col": 15,"name": "Int","comptime": true},{"file": 4,"line": 891,"col": 14,"name": "T","comptime": true},{"file": 22,"line": 20,"col": 21,"name": "V","comptime": true},{"file": 63,"line": 322,"col": 18,"name": "T","comptime": true},{"file": 4,"line": 884,"col": 14,"name": "T","comptime": true},{"file": 9,"line": 11,"col": 24,"name": "T","comptime": true},{"file": 9,"line": 11,"col": 42,"name": "alignment","comptime": true},{"file": 95,"line": 10,"col": 16,"name": "T","comptime": true},{"file": 11,"line": 1320,"col": 21,"name": "P","comptime": true},{"file": 8,"line": 5,"col": 19,"name": "T","comptime": true},{"file": 4,"line": 306,"col": 11,"name": "x"},{"file": 4,"line": 306,"col": 19,"name": "y"},{"file": 47,"line": 14,"col": 17,"name": "auto_reset","comptime": true},{"file": 22,"line": 32,"col": 15,"name": "K","comptime": true},{"file": 22,"line": 32,"col": 33,"name": "V","comptime": true},{"file": 22,"line": 32,"col": 51,"name": "hash","comptime": true},{"file": 22,"line": 32,"col": 83,"name": "eql","comptime": true},{"file": 22,"line": 528,"col": 23,"name": "K","comptime": true},{"file": 63,"line": 228,"col": 23,"name": "T","comptime": true},{"file": 63,"line": 261,"col": 15,"name": "T","comptime": true},{"file": 36,"line": 102,"col": 13,"name": "T","comptime": true},{"file": 5,"line": 50,"col": 8,"name": "value"},{"file": 8,"line": 98,"col": 12,"name": "Uninitialized"},{"file": 8,"line": 99,"col": 12,"name": "Initializing"},{"file": 8,"line": 100,"col": 12,"name": "Initialized"},{"file": 6,"line": 27,"col": 8,"docs": " Returns the number of bytes read. It may be less than buffer.len.\n If the number of bytes read is 0, it means end of stream.\n End of stream is not an error condition.\n","name": "readFn"},{"file": 1,"line": 185,"col": 4,"name": "Unordered"},{"file": 1,"line": 186,"col": 4,"name": "Monotonic"},{"file": 1,"line": 187,"col": 4,"name": "Acquire"},{"file": 1,"line": 188,"col": 4,"name": "Release"},{"file": 1,"line": 189,"col": 4,"name": "AcqRel"},{"file": 1,"line": 190,"col": 4,"name": "SeqCst"},{"file": 5,"line": 22,"col": 4,"name": "Relaxed"},{"file": 5,"line": 23,"col": 4,"name": "Consume"},{"file": 5,"line": 24,"col": 4,"name": "Acquire"},{"file": 5,"line": 25,"col": 4,"name": "Release"},{"file": 5,"line": 26,"col": 4,"name": "AcqRel"},{"file": 5,"line": 27,"col": 4,"name": "SeqCst"},{"file": 58,"line": 693,"col": 4,"name": "closesocket"},{"file": 58,"line": 697,"col": 4,"name": "listen"},{"file": 58,"line": 702,"col": 4,"name": "bind"},{"file": 58,"line": 708,"col": 4,"name": "setsockopt"},{"file": 58,"line": 716,"col": 4,"name": "getsockopt"},{"file": 58,"line": 724,"col": 4,"name": "WSAGetLastError"},{"file": 58,"line": 725,"col": 4,"name": "WSACleanup"},{"file": 58,"line": 726,"col": 4,"name": "WSAStartup"},{"file": 58,"line": 731,"col": 4,"name": "WSAIoctl"},{"file": 58,"line": 743,"col": 4,"name": "WSASocketA"},{"file": 58,"line": 752,"col": 4,"name": "WSAAccept"},{"file": 58,"line": 760,"col": 4,"name": "WSAConnect"},{"file": 58,"line": 770,"col": 4,"name": "WSASendTo"},{"file": 58,"line": 782,"col": 4,"name": "WSARecvFrom"},{"file": 1,"line": 213,"col": 4,"name": "Type"},{"file": 1,"line": 214,"col": 4,"name": "Void"},{"file": 1,"line": 215,"col": 4,"name": "Bool"},{"file": 1,"line": 216,"col": 4,"name": "NoReturn"},{"file": 1,"line": 217,"col": 4,"name": "Int"},{"file": 1,"line": 218,"col": 4,"name": "Float"},{"file": 1,"line": 219,"col": 4,"name": "Pointer"},{"file": 1,"line": 220,"col": 4,"name": "Array"},{"file": 1,"line": 221,"col": 4,"name": "Struct"},{"file": 1,"line": 222,"col": 4,"name": "ComptimeFloat"},{"file": 1,"line": 223,"col": 4,"name": "ComptimeInt"},{"file": 1,"line": 224,"col": 4,"name": "Undefined"},{"file": 1,"line": 225,"col": 4,"name": "Null"},{"file": 1,"line": 226,"col": 4,"name": "Optional"},{"file": 1,"line": 227,"col": 4,"name": "ErrorUnion"},{"file": 1,"line": 228,"col": 4,"name": "ErrorSet"},{"file": 1,"line": 229,"col": 4,"name": "Enum"},{"file": 1,"line": 230,"col": 4,"name": "Union"},{"file": 1,"line": 231,"col": 4,"name": "Fn"},{"file": 1,"line": 232,"col": 4,"name": "BoundFn"},{"file": 1,"line": 233,"col": 4,"name": "ArgTuple"},{"file": 1,"line": 234,"col": 4,"name": "Opaque"},{"file": 1,"line": 235,"col": 4,"name": "Frame"},{"file": 1,"line": 236,"col": 4,"name": "AnyFrame"},{"file": 1,"line": 237,"col": 4,"name": "Vector"},{"file": 1,"line": 238,"col": 4,"name": "EnumLiteral"},{"file": 8,"line": 103,"col": 8,"name": "value"},{"file": 8,"line": 104,"col": 8,"name": "state"},{"file": 98,"line": 13,"col": 8,"name": "fpart"},{"file": 98,"line": 14,"col": 8,"name": "ipart"},{"file": 9,"line": 23,"col": 8,"docs": " Use toSlice instead of slicing this directly, because if you don't\n specify the end position of the slice, this will potentially give\n you uninitialized memory.\n","name": "items"},{"file": 9,"line": 24,"col": 8,"name": "len"},{"file": 9,"line": 25,"col": 8,"name": "allocator"},{"file": 27,"line": 41,"col": 4,"docs": " COFF Section index, 1-based\n","name": "Section"},{"file": 27,"line": 42,"col": 4,"name": "Padding1"},{"file": 27,"line": 43,"col": 4,"name": "Offset"},{"file": 27,"line": 44,"col": 4,"name": "Size"},{"file": 27,"line": 45,"col": 4,"name": "Characteristics"},{"file": 27,"line": 46,"col": 4,"name": "ModuleIndex"},{"file": 27,"line": 47,"col": 4,"name": "Padding2"},{"file": 27,"line": 48,"col": 4,"name": "DataCrc"},{"file": 27,"line": 49,"col": 4,"name": "RelocCrc"},{"file": 10,"line": 72,"col": 8,"name": "writeFn"},{"file": 46,"line": 52,"col": 8,"name": "first"},{"file": 22,"line": 34,"col": 8,"name": "entries"},{"file": 22,"line": 35,"col": 8,"name": "size"},{"file": 22,"line": 36,"col": 8,"name": "max_distance_from_start_index"},{"file": 22,"line": 37,"col": 8,"name": "allocator"},{"file": 22,"line": 40,"col": 8,"docs": " This is used to detect bugs where a hashtable is edited while an iterator is running.\n","name": "modification_count"},{"file": 95,"line": 12,"col": 8,"name": "significand"},{"file": 95,"line": 13,"col": 8,"name": "exponent"},{"file": 5,"line": 148,"col": 8,"name": "x"},{"file": 5,"line": 163,"col": 8,"name": "A"},{"file": 5,"line": 164,"col": 8,"name": "B"},{"file": 5,"line": 165,"col": 8,"name": "C"},{"file": 5,"line": 166,"col": 8,"name": "D"},{"file": 5,"line": 167,"col": 8,"name": "E"},{"file": 47,"line": 20,"col": 16,"name": "Empty"},{"file": 47,"line": 21,"col": 16,"name": "Signaled"},{"file": 28,"line": 257,"col": 4,"name": "header"},{"file": 8,"line": 7,"col": 8,"name": "value"},{"file": 8,"line": 8,"col": 8,"name": "padding"},{"file": 47,"line": 16,"col": 12,"name": "futex"},{"file": 47,"line": 17,"col": 12,"name": "state"},{"file": 13,"line": 1216,"col": 4,"name": "bytes"},{"file": 13,"line": 1217,"col": 4,"name": "sect_debug_info"},{"file": 13,"line": 1218,"col": 4,"name": "sect_debug_line"},{"file": 13,"line": 30,"col": 4,"name": "mod_info"},{"file": 13,"line": 31,"col": 4,"name": "module_name"},{"file": 13,"line": 32,"col": 4,"name": "obj_file_name"},{"file": 13,"line": 34,"col": 4,"name": "populated"},{"file": 13,"line": 35,"col": 4,"name": "symbols"},{"file": 13,"line": 36,"col": 4,"name": "subsect_info"},{"file": 13,"line": 37,"col": 4,"name": "checksum_offset"},{"file": 77,"line": 113,"col": 8,"name": "WakeByAddressAll"},{"file": 77,"line": 114,"col": 8,"name": "WakeByAddressSingle"},{"file": 77,"line": 115,"col": 8,"name": "WaitOnAddress"},{"file": 5,"line": 151,"col": 8,"name": "X"},{"file": 5,"line": 152,"col": 8,"name": "Y"},{"file": 47,"line": 130,"col": 8,"name": "Unlocked"},{"file": 47,"line": 131,"col": 8,"name": "Sleeping"},{"file": 47,"line": 132,"col": 8,"name": "Locked"},{"file": 50,"line": 363,"col": 8,"name": "file"},{"file": 50,"line": 364,"col": 8,"name": "stream"},{"file": 50,"line": 13,"col": 4,"docs": " The OS-specific file descriptor or file handle.\n","name": "handle"},{"file": 1,"line": 1,"col": 4,"name": "index"},{"file": 1,"line": 2,"col": 4,"name": "instruction_addresses"},{"file": 28,"line": 33,"col": 4,"name": "in_file"},{"file": 28,"line": 34,"col": 4,"name": "allocator"},{"file": 28,"line": 36,"col": 4,"name": "coff_header"},{"file": 28,"line": 37,"col": 4,"name": "pe_header"},{"file": 28,"line": 38,"col": 4,"name": "sections"},{"file": 28,"line": 40,"col": 4,"name": "guid"},{"file": 28,"line": 41,"col": 4,"name": "age"},{"file": 50,"line": 349,"col": 8,"name": "file"},{"file": 50,"line": 350,"col": 8,"name": "stream"},{"file": 51,"line": 218,"col": 4,"name": "is_abs"},{"file": 51,"line": 219,"col": 4,"name": "kind"},{"file": 51,"line": 220,"col": 4,"name": "disk_designator"},{"file": 51,"line": 223,"col": 8,"name": "None"},{"file": 51,"line": 224,"col": 8,"name": "Drive"},{"file": 51,"line": 225,"col": 8,"name": "NetworkShare"},{"file": 11,"line": 901,"col": 4,"name": "buffer"},{"file": 11,"line": 902,"col": 4,"name": "delimiter_bytes"},{"file": 11,"line": 903,"col": 4,"name": "index"},{"file": 27,"line": 628,"col": 4,"name": "in_file"},{"file": 27,"line": 629,"col": 4,"name": "pos"},{"file": 27,"line": 630,"col": 4,"name": "blocks"},{"file": 27,"line": 631,"col": 4,"name": "block_size"},{"file": 27,"line": 634,"col": 4,"docs": " Implementation of InStream trait for Pdb.MsfStream\n","name": "stream"},{"file": 27,"line": 103,"col": 4,"name": "Pdb"},{"file": 27,"line": 104,"col": 4,"name": "Tpi"},{"file": 27,"line": 105,"col": 4,"name": "Dbi"},{"file": 27,"line": 106,"col": 4,"name": "Ipi"},{"file": 13,"line": 554,"col": 4,"name": "Red"},{"file": 13,"line": 555,"col": 4,"name": "Green"},{"file": 13,"line": 556,"col": 4,"name": "Cyan"},{"file": 13,"line": 557,"col": 4,"name": "White"},{"file": 13,"line": 558,"col": 4,"name": "Dim"},{"file": 13,"line": 559,"col": 4,"name": "Bold"},{"file": 13,"line": 560,"col": 4,"name": "Reset"},{"file": 13,"line": 1401,"col": 4,"name": "line"},{"file": 13,"line": 1402,"col": 4,"name": "column"},{"file": 13,"line": 1403,"col": 4,"name": "file_name"},{"file": 13,"line": 1404,"col": 4,"name": "allocator"},{"file": 23,"line": 19,"col": 4,"name": "precision"},{"file": 23,"line": 20,"col": 4,"name": "width"},{"file": 23,"line": 21,"col": 4,"name": "alignment"},{"file": 23,"line": 22,"col": 4,"name": "fill"},{"file": 39,"line": 340,"col": 4,"name": "allocator"},{"file": 39,"line": 342,"col": 4,"name": "child_allocator"},{"file": 39,"line": 343,"col": 4,"name": "buffer_list"},{"file": 39,"line": 344,"col": 4,"name": "end_index"},{"file": 39,"line": 427,"col": 4,"name": "allocator"},{"file": 39,"line": 428,"col": 4,"name": "end_index"},{"file": 39,"line": 429,"col": 4,"name": "buffer"},{"file": 17,"line": 238,"col": 4,"name": "bytes"},{"file": 17,"line": 239,"col": 4,"name": "i"},{"file": 17,"line": 176,"col": 4,"name": "bytes"},{"file": 17,"line": 211,"col": 4,"name": "bytes"},{"file": 17,"line": 212,"col": 4,"name": "i"},{"file": 52,"line": 18,"col": 8,"name": "lock"},{"file": 52,"line": 19,"col": 8,"name": "init_once"},{"file": 52,"line": 22,"col": 12,"name": "mutex"},{"file": 81,"line": 8,"col": 4,"name": "Monotonic"},{"file": 81,"line": 9,"col": 4,"name": "Realtime"},{"file": 53,"line": 14,"col": 4,"name": "group"},{"file": 53,"line": 15,"col": 4,"name": "mask"},{"file": 53,"line": 7,"col": 4,"name": "Physical"},{"file": 53,"line": 8,"col": 4,"name": "Logical"},{"file": 54,"line": 22,"col": 4,"name": "inner"},{"file": 55,"line": 7,"col": 4,"name": "inner"},{"file": 56,"line": 47,"col": 8,"name": "Debug"},{"file": 56,"line": 48,"col": 8,"name": "Linger"},{"file": 56,"line": 49,"col": 8,"name": "Broadcast"},{"file": 56,"line": 50,"col": 8,"name": "Reuseaddr"},{"file": 56,"line": 51,"col": 8,"name": "Keepalive"},{"file": 56,"line": 52,"col": 8,"name": "Oobinline"},{"file": 56,"line": 53,"col": 8,"name": "Tcpnodelay"},{"file": 56,"line": 54,"col": 8,"name": "RecvBufMax"},{"file": 56,"line": 55,"col": 8,"name": "RecvBufMin"},{"file": 56,"line": 56,"col": 8,"name": "RecvTimeout"},{"file": 56,"line": 57,"col": 8,"name": "SendBufMax"},{"file": 56,"line": 58,"col": 8,"name": "SendBufMin"},{"file": 56,"line": 59,"col": 8,"name": "SendTimeout"},{"file": 56,"line": 7,"col": 4,"name": "inner"},{"file": 57,"line": 22,"col": 4,"name": "length"},{"file": 57,"line": 23,"col": 4,"name": "sockaddr"},{"file": 57,"line": 7,"col": 8,"name": "handle"},{"file": 57,"line": 8,"col": 8,"name": "address"},{"file": 57,"line": 9,"col": 8,"name": "padding"},{"file": 37,"line": 112,"col": 4,"name": "scope_id"},{"file": 37,"line": 113,"col": 4,"name": "addr"},{"file": 35,"line": 615,"col": 4,"name": "random"},{"file": 35,"line": 617,"col": 4,"name": "s"},{"file": 58,"line": 11,"col": 4,"name": "inner"},{"file": 58,"line": 63,"col": 4,"name": "inner"},{"file": 58,"line": 134,"col": 4,"name": "handle"},{"file": 58,"line": 135,"col": 4,"name": "flags"},{"file": 58,"line": 136,"col": 4,"name": "reader"},{"file": 58,"line": 137,"col": 4,"name": "writer"},{"file": 58,"line": 32,"col": 4,"name": "inner"},{"file": 59,"line": 131,"col": 4,"name": "state"},{"file": 59,"line": 133,"col": 4,"name": "buf"},{"file": 59,"line": 134,"col": 4,"name": "buf_len"},{"file": 59,"line": 38,"col": 4,"name": "seed"},{"file": 59,"line": 39,"col": 4,"name": "msg_len"},{"file": 60,"line": 509,"col": 4,"name": "Data1"},{"file": 60,"line": 510,"col": 4,"name": "Data2"},{"file": 60,"line": 511,"col": 4,"name": "Data3"},{"file": 60,"line": 512,"col": 4,"name": "Data4"},{"file": 35,"line": 485,"col": 4,"name": "s"},{"file": 72,"line": 10,"col": 4,"name": "digits"},{"file": 72,"line": 11,"col": 4,"name": "exp"},{"file": 72,"line": 16,"col": 4,"name": "Decimal"},{"file": 72,"line": 18,"col": 4,"name": "Scientific"},{"file": 94,"line": 436,"col": 4,"name": "str"},{"file": 94,"line": 437,"col": 4,"name": "exp"},{"file": 99,"line": 1,"col": 4,"name": "val"},{"file": 99,"line": 2,"col": 4,"name": "off"},{"file": 61,"line": 43,"col": 8,"name": "context"},{"file": 61,"line": 44,"col": 8,"name": "parent"},{"file": 61,"line": 45,"col": 8,"name": "completed_items"},{"file": 61,"line": 46,"col": 8,"name": "name"},{"file": 61,"line": 47,"col": 8,"name": "recently_updated_child"},{"file": 61,"line": 50,"col": 8,"docs": " This field may be updated freely.\n","name": "estimated_total_items"},{"file": 45,"line": 252,"col": 4,"name": "n_strx"},{"file": 45,"line": 253,"col": 4,"name": "n_type"},{"file": 45,"line": 254,"col": 4,"name": "n_sect"},{"file": 45,"line": 255,"col": 4,"name": "n_desc"},{"file": 45,"line": 256,"col": 4,"name": "n_value"},{"file": 64,"line": 247,"col": 4,"name": "dll"},{"file": 65,"line": 9,"col": 4,"name": "data"},{"file": 66,"line": 7,"col": 4,"name": "hash_map"},{"file": 70,"line": 10,"col": 4,"name": "list"},{"file": 10,"line": 687,"col": 4,"name": "buffer"},{"file": 10,"line": 688,"col": 4,"name": "stream"},{"file": 71,"line": 19,"col": 4,"name": "pid"},{"file": 71,"line": 20,"col": 4,"name": "handle"},{"file": 71,"line": 21,"col": 4,"name": "thread_handle"},{"file": 71,"line": 23,"col": 4,"name": "allocator"},{"file": 71,"line": 25,"col": 4,"name": "stdin"},{"file": 71,"line": 26,"col": 4,"name": "stdout"},{"file": 71,"line": 27,"col": 4,"name": "stderr"},{"file": 71,"line": 29,"col": 4,"name": "term"},{"file": 71,"line": 31,"col": 4,"name": "argv"},{"file": 71,"line": 34,"col": 4,"docs": " Leave as null to use the current env map using the supplied allocator.\n","name": "env_map"},{"file": 71,"line": 36,"col": 4,"name": "stdin_behavior"},{"file": 71,"line": 37,"col": 4,"name": "stdout_behavior"},{"file": 71,"line": 38,"col": 4,"name": "stderr_behavior"},{"file": 71,"line": 41,"col": 4,"docs": " Set to change the user id when spawning the child process.\n","name": "uid"},{"file": 71,"line": 44,"col": 4,"docs": " Set to change the group id when spawning the child process.\n","name": "gid"},{"file": 71,"line": 47,"col": 4,"docs": " Set to change the current working directory when spawning the child process.\n","name": "cwd"},{"file": 71,"line": 49,"col": 4,"name": "err_pipe"},{"file": 71,"line": 50,"col": 4,"name": "llnode"},{"file": 73,"line": 9,"col": 4,"name": "hash_map"},{"file": 61,"line": 12,"col": 4,"docs": " `null` if the current node (and its children) should\n not print on update()\n","name": "terminal"},{"file": 61,"line": 14,"col": 4,"name": "root"},{"file": 61,"line": 18,"col": 4,"docs": " Keeps track of how much time has passed since the beginning.\n Used to compare with `initial_delay_ms` and `refresh_rate_ms`.\n","name": "timer"},{"file": 61,"line": 22,"col": 4,"docs": " When the previous refresh was written to the terminal.\n Used to compare with `refresh_rate_ms`.\n","name": "prev_refresh_timestamp"},{"file": 61,"line": 26,"col": 4,"docs": " This buffer represents the maximum number of bytes written to the terminal\n with each refresh.\n","name": "output_buffer"},{"file": 61,"line": 29,"col": 4,"docs": " How many nanoseconds between writing updates to the terminal.\n","name": "refresh_rate_ns"},{"file": 61,"line": 32,"col": 4,"docs": " How many nanoseconds to keep the output hidden\n","name": "initial_delay_ns"},{"file": 61,"line": 34,"col": 4,"name": "done"},{"file": 61,"line": 38,"col": 4,"docs": " Keeps track of how many columns in the terminal have been output, so that\n we can move the cursor back later.\n","name": "columns_written"},{"file": 76,"line": 7,"col": 4,"name": "lock"},{"file": 46,"line": 20,"col": 12,"name": "next"},{"file": 46,"line": 21,"col": 12,"name": "data"},{"file": 22,"line": 45,"col": 12,"name": "key"},{"file": 22,"line": 46,"col": 12,"name": "value"},{"file": 22,"line": 50,"col": 12,"name": "used"},{"file": 22,"line": 51,"col": 12,"name": "distance_from_start_index"},{"file": 22,"line": 52,"col": 12,"name": "kv"},{"file": 28,"line": 266,"col": 4,"name": "name"},{"file": 28,"line": 267,"col": 4,"name": "misc"},{"file": 28,"line": 268,"col": 4,"name": "virtual_address"},{"file": 28,"line": 269,"col": 4,"name": "size_of_raw_data"},{"file": 28,"line": 270,"col": 4,"name": "pointer_to_raw_data"},{"file": 28,"line": 271,"col": 4,"name": "pointer_to_relocations"},{"file": 28,"line": 272,"col": 4,"name": "pointer_to_line_numbers"},{"file": 28,"line": 273,"col": 4,"name": "number_of_relocations"},{"file": 28,"line": 274,"col": 4,"name": "number_of_line_numbers"},{"file": 28,"line": 275,"col": 4,"name": "characteristics"},{"file": 77,"line": 18,"col": 4,"name": "inner"},{"file": 27,"line": 53,"col": 4,"name": "Unused1"},{"file": 27,"line": 54,"col": 4,"name": "SectionContr"},{"file": 27,"line": 55,"col": 4,"name": "Flags"},{"file": 27,"line": 56,"col": 4,"name": "ModuleSymStream"},{"file": 27,"line": 57,"col": 4,"name": "SymByteSize"},{"file": 27,"line": 58,"col": 4,"name": "C11ByteSize"},{"file": 27,"line": 59,"col": 4,"name": "C13ByteSize"},{"file": 27,"line": 60,"col": 4,"name": "SourceFileCount"},{"file": 27,"line": 61,"col": 4,"name": "Padding"},{"file": 27,"line": 62,"col": 4,"name": "Unused2"},{"file": 27,"line": 63,"col": 4,"name": "SourceFileNameIndex"},{"file": 27,"line": 64,"col": 4,"name": "PdbFilePathNameIndex"},{"file": 1,"line": 194,"col": 4,"name": "Xchg"},{"file": 1,"line": 195,"col": 4,"name": "Add"},{"file": 1,"line": 196,"col": 4,"name": "Sub"},{"file": 1,"line": 197,"col": 4,"name": "And"},{"file": 1,"line": 198,"col": 4,"name": "Nand"},{"file": 1,"line": 199,"col": 4,"name": "Or"},{"file": 1,"line": 200,"col": 4,"name": "Xor"},{"file": 1,"line": 201,"col": 4,"name": "Max"},{"file": 1,"line": 202,"col": 4,"name": "Min"},{"file": 1,"line": 48,"col": 4,"name": "arm"},{"file": 1,"line": 49,"col": 4,"name": "armeb"},{"file": 1,"line": 50,"col": 4,"name": "aarch64"},{"file": 1,"line": 51,"col": 4,"name": "aarch64_be"},{"file": 1,"line": 52,"col": 4,"name": "aarch64_32"},{"file": 1,"line": 53,"col": 4,"name": "arc"},{"file": 1,"line": 54,"col": 4,"name": "avr"},{"file": 1,"line": 55,"col": 4,"name": "bpfel"},{"file": 1,"line": 56,"col": 4,"name": "bpfeb"},{"file": 1,"line": 57,"col": 4,"name": "hexagon"},{"file": 1,"line": 58,"col": 4,"name": "mips"},{"file": 1,"line": 59,"col": 4,"name": "mipsel"},{"file": 1,"line": 60,"col": 4,"name": "mips64"},{"file": 1,"line": 61,"col": 4,"name": "mips64el"},{"file": 1,"line": 62,"col": 4,"name": "msp430"},{"file": 1,"line": 63,"col": 4,"name": "powerpc"},{"file": 1,"line": 64,"col": 4,"name": "powerpc64"},{"file": 1,"line": 65,"col": 4,"name": "powerpc64le"},{"file": 1,"line": 66,"col": 4,"name": "r600"},{"file": 1,"line": 67,"col": 4,"name": "amdgcn"},{"file": 1,"line": 68,"col": 4,"name": "riscv32"},{"file": 1,"line": 69,"col": 4,"name": "riscv64"},{"file": 1,"line": 70,"col": 4,"name": "sparc"},{"file": 1,"line": 71,"col": 4,"name": "sparcv9"},{"file": 1,"line": 72,"col": 4,"name": "sparcel"},{"file": 1,"line": 73,"col": 4,"name": "s390x"},{"file": 1,"line": 74,"col": 4,"name": "tce"},{"file": 1,"line": 75,"col": 4,"name": "tcele"},{"file": 1,"line": 76,"col": 4,"name": "thumb"},{"file": 1,"line": 77,"col": 4,"name": "thumbeb"},{"file": 1,"line": 78,"col": 4,"name": "i386"},{"file": 1,"line": 79,"col": 4,"name": "x86_64"},{"file": 1,"line": 80,"col": 4,"name": "xcore"},{"file": 1,"line": 81,"col": 4,"name": "nvptx"},{"file": 1,"line": 82,"col": 4,"name": "nvptx64"},{"file": 1,"line": 83,"col": 4,"name": "le32"},{"file": 1,"line": 84,"col": 4,"name": "le64"},{"file": 1,"line": 85,"col": 4,"name": "amdil"},{"file": 1,"line": 86,"col": 4,"name": "amdil64"},{"file": 1,"line": 87,"col": 4,"name": "hsail"},{"file": 1,"line": 88,"col": 4,"name": "hsail64"},{"file": 1,"line": 89,"col": 4,"name": "spir"},{"file": 1,"line": 90,"col": 4,"name": "spir64"},{"file": 1,"line": 91,"col": 4,"name": "kalimba"},{"file": 1,"line": 92,"col": 4,"name": "shave"},{"file": 1,"line": 93,"col": 4,"name": "lanai"},{"file": 1,"line": 94,"col": 4,"name": "wasm32"},{"file": 1,"line": 95,"col": 4,"name": "wasm64"},{"file": 1,"line": 96,"col": 4,"name": "renderscript32"},{"file": 1,"line": 97,"col": 4,"name": "renderscript64"},{"file": 1,"line": 428,"col": 4,"name": "Big"},{"file": 1,"line": 429,"col": 4,"name": "Little"},{"file": 1,"line": 206,"col": 4,"name": "Debug"},{"file": 1,"line": 207,"col": 4,"name": "ReleaseSafe"},{"file": 1,"line": 208,"col": 4,"name": "ReleaseFast"},{"file": 1,"line": 209,"col": 4,"name": "ReleaseSmall"},{"file": 1,"line": 8,"col": 4,"name": "freestanding"},{"file": 1,"line": 9,"col": 4,"name": "ananas"},{"file": 1,"line": 10,"col": 4,"name": "cloudabi"},{"file": 1,"line": 11,"col": 4,"name": "dragonfly"},{"file": 1,"line": 12,"col": 4,"name": "freebsd"},{"file": 1,"line": 13,"col": 4,"name": "fuchsia"},{"file": 1,"line": 14,"col": 4,"name": "ios"},{"file": 1,"line": 15,"col": 4,"name": "kfreebsd"},{"file": 1,"line": 16,"col": 4,"name": "linux"},{"file": 1,"line": 17,"col": 4,"name": "lv2"},{"file": 1,"line": 18,"col": 4,"name": "macosx"},{"file": 1,"line": 19,"col": 4,"name": "netbsd"},{"file": 1,"line": 20,"col": 4,"name": "openbsd"},{"file": 1,"line": 21,"col": 4,"name": "solaris"},{"file": 1,"line": 22,"col": 4,"name": "windows"},{"file": 1,"line": 23,"col": 4,"name": "haiku"},{"file": 1,"line": 24,"col": 4,"name": "minix"},{"file": 1,"line": 25,"col": 4,"name": "rtems"},{"file": 1,"line": 26,"col": 4,"name": "nacl"},{"file": 1,"line": 27,"col": 4,"name": "cnk"},{"file": 1,"line": 28,"col": 4,"name": "aix"},{"file": 1,"line": 29,"col": 4,"name": "cuda"},{"file": 1,"line": 30,"col": 4,"name": "nvcl"},{"file": 1,"line": 31,"col": 4,"name": "amdhsa"},{"file": 1,"line": 32,"col": 4,"name": "ps4"},{"file": 1,"line": 33,"col": 4,"name": "elfiamcu"},{"file": 1,"line": 34,"col": 4,"name": "tvos"},{"file": 1,"line": 35,"col": 4,"name": "watchos"},{"file": 1,"line": 36,"col": 4,"name": "mesa3d"},{"file": 1,"line": 37,"col": 4,"name": "contiki"},{"file": 1,"line": 38,"col": 4,"name": "amdpal"},{"file": 1,"line": 39,"col": 4,"name": "hermit"},{"file": 1,"line": 40,"col": 4,"name": "hurd"},{"file": 1,"line": 41,"col": 4,"name": "wasi"},{"file": 1,"line": 42,"col": 4,"name": "emscripten"},{"file": 1,"line": 43,"col": 4,"name": "zen"},{"file": 1,"line": 44,"col": 4,"name": "uefi"},{"file": 1,"line": 178,"col": 4,"name": "Internal"},{"file": 1,"line": 179,"col": 4,"name": "Strong"},{"file": 1,"line": 180,"col": 4,"name": "Weak"},{"file": 1,"line": 181,"col": 4,"name": "LinkOnce"},{"file": 1,"line": 242,"col": 4,"name": "Type"},{"file": 1,"line": 243,"col": 4,"name": "Void"},{"file": 1,"line": 244,"col": 4,"name": "Bool"},{"file": 1,"line": 245,"col": 4,"name": "NoReturn"},{"file": 1,"line": 246,"col": 4,"name": "Int"},{"file": 1,"line": 247,"col": 4,"name": "Float"},{"file": 1,"line": 248,"col": 4,"name": "Pointer"},{"file": 1,"line": 249,"col": 4,"name": "Array"},{"file": 1,"line": 250,"col": 4,"name": "Struct"},{"file": 1,"line": 251,"col": 4,"name": "ComptimeFloat"},{"file": 1,"line": 252,"col": 4,"name": "ComptimeInt"},{"file": 1,"line": 253,"col": 4,"name": "Undefined"},{"file": 1,"line": 254,"col": 4,"name": "Null"},{"file": 1,"line": 255,"col": 4,"name": "Optional"},{"file": 1,"line": 256,"col": 4,"name": "ErrorUnion"},{"file": 1,"line": 257,"col": 4,"name": "ErrorSet"},{"file": 1,"line": 258,"col": 4,"name": "Enum"},{"file": 1,"line": 259,"col": 4,"name": "Union"},{"file": 1,"line": 260,"col": 4,"name": "Fn"},{"file": 1,"line": 261,"col": 4,"name": "BoundFn"},{"file": 1,"line": 262,"col": 4,"name": "ArgTuple"},{"file": 1,"line": 263,"col": 4,"name": "Opaque"},{"file": 1,"line": 264,"col": 4,"name": "Frame"},{"file": 1,"line": 265,"col": 4,"name": "AnyFrame"},{"file": 1,"line": 266,"col": 4,"name": "Vector"},{"file": 1,"line": 267,"col": 4,"name": "EnumLiteral"},{"file": 1,"line": 465,"col": 0,"name": "name"},{"file": 1,"line": 466,"col": 0,"name": "func"},{"file": 13,"line": 1269,"col": 8,"name": "pdb"},{"file": 13,"line": 1270,"col": 8,"name": "coff"},{"file": 13,"line": 1271,"col": 8,"name": "sect_contribs"},{"file": 13,"line": 1272,"col": 8,"name": "modules"},{"file": 11,"line": 39,"col": 4,"docs": " Realloc is used to modify the size or alignment of an existing allocation,\n as well as to provide the allocator with an opportunity to move an allocation\n to a better location.\n When the size/alignment is greater than the previous allocation, this function\n returns `error.OutOfMemory` when the requested new allocation could not be granted.\n When the size/alignment is less than or equal to the previous allocation,\n this function returns `error.OutOfMemory` when the allocator decides the client\n would be better off keeping the extra alignment/size. Clients will call\n `shrinkFn` when they require the allocator to track a new alignment/size,\n and so this function should only return success when the allocator considers\n the reallocation desirable from the allocator's perspective.\n As an example, `std.ArrayList` tracks a \"capacity\", and therefore can handle\n reallocation failure, even when `new_n` <= `old_mem.len`. A `FixedBufferAllocator`\n would always return `error.OutOfMemory` for `reallocFn` when the size/alignment\n is less than or equal to the old allocation, because it cannot reclaim the memory,\n and thus the `std.ArrayList` would be better off retaining its capacity.\n When `reallocFn` returns,\n `return_value[0..min(old_mem.len, new_byte_count)]` must be the same\n as `old_mem` was when `reallocFn` is called. The bytes of\n `return_value[old_mem.len..]` have undefined values.\n The returned slice must have its pointer aligned at least to `new_alignment` bytes.\n","name": "reallocFn"},{"file": 11,"line": 62,"col": 4,"docs": " This function deallocates memory. It must succeed.\n","name": "shrinkFn"},{"file": 28,"line": 226,"col": 4,"name": "machine"},{"file": 28,"line": 227,"col": 4,"name": "number_of_sections"},{"file": 28,"line": 228,"col": 4,"name": "timedate_stamp"},{"file": 28,"line": 229,"col": 4,"name": "pointer_to_symbol_table"},{"file": 28,"line": 230,"col": 4,"name": "number_of_symbols"},{"file": 28,"line": 231,"col": 4,"name": "size_of_optional_header"},{"file": 28,"line": 232,"col": 4,"name": "characteristics"},{"file": 28,"line": 241,"col": 4,"name": "magic"},{"file": 28,"line": 242,"col": 4,"name": "data_directory"},{"file": 28,"line": 246,"col": 4,"name": "characteristiccs"},{"file": 28,"line": 247,"col": 4,"name": "time_date_stamp"},{"file": 28,"line": 248,"col": 4,"name": "major_version"},{"file": 28,"line": 249,"col": 4,"name": "minor_version"},{"file": 28,"line": 250,"col": 4,"name": "type"},{"file": 28,"line": 251,"col": 4,"name": "size_of_data"},{"file": 28,"line": 252,"col": 4,"name": "address_of_raw_data"},{"file": 28,"line": 253,"col": 4,"name": "pointer_to_raw_data"},{"file": 27,"line": 462,"col": 4,"name": "in_file"},{"file": 27,"line": 463,"col": 4,"name": "allocator"},{"file": 27,"line": 464,"col": 4,"name": "coff"},{"file": 27,"line": 465,"col": 4,"name": "string_table"},{"file": 27,"line": 466,"col": 4,"name": "dbi"},{"file": 27,"line": 468,"col": 4,"name": "msf"},{"file": 27,"line": 492,"col": 4,"name": "directory"},{"file": 27,"line": 493,"col": 4,"name": "streams"},{"file": 27,"line": 585,"col": 4,"name": "FileMagic"},{"file": 27,"line": 591,"col": 4,"docs": " The block size of the internal file system. Valid values are 512, 1024,\n 2048, and 4096 bytes. Certain aspects of the MSF file layout vary depending\n on the block sizes. For the purposes of LLVM, we handle only block sizes of\n 4KiB, and all further discussion assumes a block size of 4KiB.\n","name": "BlockSize"},{"file": 27,"line": 597,"col": 4,"docs": " The index of a block within the file, at which begins a bitfield representing\n the set of all blocks within the file which are “free” (i.e. the data within\n that block is not used). See The Free Block Map for more information. Important:\n FreeBlockMapBlock can only be 1 or 2!\n","name": "FreeBlockMapBlock"},{"file": 27,"line": 601,"col": 4,"docs": " The total number of blocks in the file. NumBlocks * BlockSize should equal the\n size of the file on disk.\n","name": "NumBlocks"},{"file": 27,"line": 606,"col": 4,"docs": " The size of the stream directory, in bytes. The stream directory contains\n information about each stream’s size and the set of blocks that it occupies.\n It will be described in more detail later.\n","name": "NumDirectoryBytes"},{"file": 27,"line": 608,"col": 4,"name": "Unknown"},{"file": 27,"line": 624,"col": 4,"docs": " The index of a block within the MSF file. At this block is an array of\n ulittle32_t’s listing the blocks that the stream directory resides on.\n For large MSF files, the stream directory (which describes the block\n layout of each stream) may not fit entirely on a single block. As a\n result, this extra layer of indirection is introduced, whereby this\n block contains the list of blocks that the stream directory occupies,\n and the stream directory itself can be stitched together accordingly.\n The number of ulittle32_t’s in this array is given by\n ceil(NumDirectoryBytes / BlockSize).\n","name": "BlockMapAddr"},{"file": 13,"line": 885,"col": 12,"name": "Size"},{"file": 13,"line": 886,"col": 12,"name": "Capacity"},{"file": 27,"line": 17,"col": 4,"name": "VersionSignature"},{"file": 27,"line": 18,"col": 4,"name": "VersionHeader"},{"file": 27,"line": 19,"col": 4,"name": "Age"},{"file": 27,"line": 20,"col": 4,"name": "GlobalStreamIndex"},{"file": 27,"line": 21,"col": 4,"name": "BuildNumber"},{"file": 27,"line": 22,"col": 4,"name": "PublicStreamIndex"},{"file": 27,"line": 23,"col": 4,"name": "PdbDllVersion"},{"file": 27,"line": 24,"col": 4,"name": "SymRecordStream"},{"file": 27,"line": 25,"col": 4,"name": "PdbDllRbld"},{"file": 27,"line": 26,"col": 4,"name": "ModInfoSize"},{"file": 27,"line": 27,"col": 4,"name": "SectionContributionSize"},{"file": 27,"line": 28,"col": 4,"name": "SectionMapSize"},{"file": 27,"line": 29,"col": 4,"name": "SourceInfoSize"},{"file": 27,"line": 30,"col": 4,"name": "TypeServerSize"},{"file": 27,"line": 31,"col": 4,"name": "MFCTypeServerIndex"},{"file": 27,"line": 32,"col": 4,"name": "OptionalDbgHeaderSize"},{"file": 27,"line": 33,"col": 4,"name": "ECSubstreamSize"},{"file": 27,"line": 34,"col": 4,"name": "Flags"},{"file": 27,"line": 35,"col": 4,"name": "Machine"},{"file": 27,"line": 36,"col": 4,"name": "Padding"},{"file": 60,"line": 692,"col": 4,"name": "DebugInfo"},{"file": 60,"line": 693,"col": 4,"name": "LockCount"},{"file": 60,"line": 694,"col": 4,"name": "RecursionCount"},{"file": 60,"line": 695,"col": 4,"name": "OwningThread"},{"file": 60,"line": 696,"col": 4,"name": "LockSemaphore"},{"file": 60,"line": 697,"col": 4,"name": "SpinCount"},{"file": 60,"line": 706,"col": 4,"name": "Ptr"},{"file": 81,"line": 74,"col": 8,"name": "handle"},{"file": 81,"line": 75,"col": 8,"name": "memory"},{"file": 47,"line": 195,"col": 8,"name": "lock"},{"file": 47,"line": 196,"col": 8,"name": "value"},{"file": 47,"line": 94,"col": 4,"name": "state"},{"file": 47,"line": 126,"col": 4,"name": "futex"},{"file": 47,"line": 127,"col": 4,"name": "state"},{"file": 35,"line": 33,"col": 4,"name": "fillFn"},{"file": 55,"line": 25,"col": 8,"name": "inner"},{"file": 58,"line": 220,"col": 8,"name": "l_onoff"},{"file": 58,"line": 221,"col": 8,"name": "l_linger"},{"file": 56,"line": 298,"col": 8,"name": "server"},{"file": 56,"line": 299,"col": 8,"name": "client"},{"file": 56,"line": 300,"col": 8,"name": "client_sent"},{"file": 56,"line": 301,"col": 8,"name": "incoming"},{"file": 56,"line": 372,"col": 8,"name": "socket"},{"file": 56,"line": 373,"col": 8,"name": "received"},{"file": 56,"line": 374,"col": 8,"name": "buffer"},{"file": 56,"line": 375,"col": 8,"name": "connected"},{"file": 58,"line": 603,"col": 4,"name": "len"},{"file": 58,"line": 604,"col": 4,"name": "buf"},{"file": 58,"line": 74,"col": 8,"name": "iocp"},{"file": 58,"line": 656,"col": 4,"name": "lpCompletionKey"},{"file": 58,"line": 657,"col": 4,"name": "lpOverlapped"},{"file": 58,"line": 658,"col": 4,"name": "Internal"},{"file": 58,"line": 659,"col": 4,"name": "dwNumberOfBytesTransferred"},{"file": 58,"line": 447,"col": 8,"name": "Error"},{"file": 58,"line": 448,"col": 8,"name": "Completed"},{"file": 58,"line": 449,"col": 8,"name": "Retry"},{"file": 60,"line": 215,"col": 4,"name": "Internal"},{"file": 60,"line": 216,"col": 4,"name": "InternalHigh"},{"file": 60,"line": 217,"col": 4,"name": "Offset"},{"file": 60,"line": 218,"col": 4,"name": "OffsetHigh"},{"file": 60,"line": 219,"col": 4,"name": "hEvent"},{"file": 58,"line": 574,"col": 4,"name": "sin6_family"},{"file": 58,"line": 575,"col": 4,"name": "sin6_port"},{"file": 58,"line": 576,"col": 4,"name": "sin6_flowinfo"},{"file": 58,"line": 577,"col": 4,"name": "sin6_addr"},{"file": 58,"line": 578,"col": 4,"name": "sin6_scope_id"},{"file": 58,"line": 567,"col": 4,"name": "sin_family"},{"file": 58,"line": 568,"col": 4,"name": "sin_port"},{"file": 58,"line": 569,"col": 4,"name": "sin_addr"},{"file": 58,"line": 570,"col": 4,"name": "sin_zero"},{"file": 58,"line": 553,"col": 4,"name": "in"},{"file": 58,"line": 554,"col": 4,"name": "in6"},{"file": 7,"line": 347,"col": 4,"name": "Mask"},{"file": 7,"line": 348,"col": 4,"name": "Group"},{"file": 7,"line": 349,"col": 4,"name": "Reserved"},{"file": 7,"line": 410,"col": 4,"name": "Relationship"},{"file": 7,"line": 411,"col": 4,"name": "Size"},{"file": 7,"line": 412,"col": 4,"name": "Value"},{"file": 60,"line": 752,"col": 4,"name": "ExceptionRecord"},{"file": 60,"line": 753,"col": 4,"name": "ContextRecord"},{"file": 40,"line": 103,"col": 4,"docs": "if we used resolution's value when performing the\n  performance counter calc on windows/darwin, it would\n  be less precise\n","name": "frequency"},{"file": 40,"line": 108,"col": 4,"name": "resolution"},{"file": 40,"line": 109,"col": 4,"name": "start_time"},{"file": 23,"line": 1092,"col": 4,"name": "remaining"},{"file": 7,"line": 372,"col": 4,"name": "MaximumProcessorCount"},{"file": 7,"line": 373,"col": 4,"name": "ActiveProcessorCount"},{"file": 7,"line": 374,"col": 4,"name": "Reserved"},{"file": 7,"line": 375,"col": 4,"name": "ActiveProcessorMask"},{"file": 7,"line": 379,"col": 4,"name": "Flags"},{"file": 7,"line": 380,"col": 4,"name": "EfficiencyClass"},{"file": 7,"line": 381,"col": 4,"name": "Reserved"},{"file": 7,"line": 382,"col": 4,"name": "GroupCount"},{"file": 7,"line": 383,"col": 4,"name": "GroupMask"},{"file": 7,"line": 439,"col": 4,"name": "PrivilegeCount"},{"file": 7,"line": 440,"col": 4,"name": "Privileges"},{"file": 7,"line": 387,"col": 4,"name": "NodeNumber"},{"file": 7,"line": 388,"col": 4,"name": "Reserved"},{"file": 7,"line": 389,"col": 4,"name": "GroupMask"},{"file": 7,"line": 427,"col": 4,"name": "LowPart"},{"file": 7,"line": 428,"col": 4,"name": "HighPart"},{"file": 7,"line": 421,"col": 4,"name": "dwLowDateTime"},{"file": 7,"line": 422,"col": 4,"name": "dwHighDateTime"},{"file": 7,"line": 432,"col": 4,"name": "Luid"},{"file": 7,"line": 433,"col": 4,"name": "Attributes"},{"file": 7,"line": 403,"col": 4,"name": "MaximumGroupCount"},{"file": 7,"line": 404,"col": 4,"name": "ActiveGroupCount"},{"file": 7,"line": 405,"col": 4,"name": "Reserved"},{"file": 7,"line": 406,"col": 4,"name": "GroupInfo"},{"file": 7,"line": 393,"col": 4,"name": "Level"},{"file": 7,"line": 394,"col": 4,"name": "Associativity"},{"file": 7,"line": 395,"col": 4,"name": "LineSize"},{"file": 7,"line": 396,"col": 4,"name": "CacheSize"},{"file": 7,"line": 397,"col": 4,"name": "Type"},{"file": 7,"line": 398,"col": 4,"name": "Reserved"},{"file": 7,"line": 399,"col": 4,"name": "GroupMask"},{"file": 7,"line": 365,"col": 4,"name": "CacheUnified"},{"file": 7,"line": 366,"col": 4,"name": "CacheInstruction"},{"file": 7,"line": 367,"col": 4,"name": "CacheData"},{"file": 7,"line": 368,"col": 4,"name": "CacheTrace"},{"file": 10,"line": 20,"col": 4,"docs": " I/O operates normally, waiting for the operating system syscalls to complete.\n","name": "blocking"},{"file": 10,"line": 23,"col": 4,"docs": " I/O functions are generated async and rely on a global event loop. Event-based I/O.\n","name": "evented"},{"file": 65,"line": 43,"col": 12,"name": "handle"},{"file": 65,"line": 44,"col": 12,"name": "alloc_start"},{"file": 65,"line": 45,"col": 12,"name": "heap_handle"},{"file": 13,"line": 1201,"col": 4,"name": "nlist"},{"file": 13,"line": 1202,"col": 4,"name": "ofile"},{"file": 13,"line": 1203,"col": 4,"name": "reloc"},{"file": 71,"line": 63,"col": 8,"name": "Inherit"},{"file": 71,"line": 64,"col": 8,"name": "Ignore"},{"file": 71,"line": 65,"col": 8,"name": "Pipe"},{"file": 71,"line": 66,"col": 8,"name": "Close"},{"file": 71,"line": 56,"col": 8,"name": "Exited"},{"file": 71,"line": 57,"col": 8,"name": "Signal"},{"file": 71,"line": 58,"col": 8,"name": "Stopped"},{"file": 71,"line": 59,"col": 8,"name": "Unknown"},{"file": 23,"line": 13,"col": 4,"name": "Left"},{"file": 23,"line": 14,"col": 4,"name": "Center"},{"file": 23,"line": 15,"col": 4,"name": "Right"},{"file": 27,"line": 423,"col": 4,"name": "None"},{"file": 27,"line": 424,"col": 4,"name": "Symbols"},{"file": 27,"line": 425,"col": 4,"name": "Lines"},{"file": 27,"line": 426,"col": 4,"name": "StringTable"},{"file": 27,"line": 427,"col": 4,"name": "FileChecksums"},{"file": 27,"line": 428,"col": 4,"name": "FrameData"},{"file": 27,"line": 429,"col": 4,"name": "InlineeLines"},{"file": 27,"line": 430,"col": 4,"name": "CrossScopeImports"},{"file": 27,"line": 431,"col": 4,"name": "CrossScopeExports"},{"file": 27,"line": 434,"col": 4,"name": "ILLines"},{"file": 27,"line": 435,"col": 4,"name": "FuncMDTokenMap"},{"file": 27,"line": 436,"col": 4,"name": "TypeMDTokenMap"},{"file": 27,"line": 437,"col": 4,"name": "MergedAssemblyInput"},{"file": 27,"line": 439,"col": 4,"name": "CoffSymbolRVA"},{"file": 27,"line": 357,"col": 4,"docs": " Code offset of line contribution.\n","name": "RelocOffset"},{"file": 27,"line": 360,"col": 4,"docs": " Code segment of line contribution.\n","name": "RelocSegment"},{"file": 27,"line": 361,"col": 4,"name": "Flags"},{"file": 27,"line": 364,"col": 4,"docs": " Code size of this line contribution.\n","name": "CodeSize"},{"file": 27,"line": 382,"col": 4,"docs": " Offset of FileChecksum entry in File\n checksums buffer.  The checksum entry then\n contains another offset into the string\n table of the actual name.\n","name": "NameIndex"},{"file": 27,"line": 383,"col": 4,"name": "NumLines"},{"file": 27,"line": 386,"col": 4,"docs": " code size of block, in bytes\n","name": "BlockSize"},{"file": 27,"line": 452,"col": 4,"docs": " PDBStringTableSignature\n","name": "Signature"},{"file": 27,"line": 455,"col": 4,"docs": " 1 or 2\n","name": "HashVersion"},{"file": 27,"line": 458,"col": 4,"docs": " Number of bytes of names buffer.\n","name": "ByteSize"},{"file": 27,"line": 406,"col": 4,"name": "StartColumn"},{"file": 27,"line": 407,"col": 4,"name": "EndColumn"},{"file": 27,"line": 391,"col": 4,"docs": " Offset to start of code bytes for line number\n","name": "Offset"},{"file": 27,"line": 392,"col": 4,"name": "Flags"},{"file": 27,"line": 444,"col": 4,"docs": " codeview::DebugSubsectionKind enum\n","name": "Kind"},{"file": 27,"line": 447,"col": 4,"docs": " number of bytes occupied by this record.\n","name": "Length"},{"file": 27,"line": 328,"col": 4,"name": "HasFP"},{"file": 27,"line": 329,"col": 4,"name": "HasIRET"},{"file": 27,"line": 330,"col": 4,"name": "HasFRET"},{"file": 27,"line": 331,"col": 4,"name": "IsNoReturn"},{"file": 27,"line": 332,"col": 4,"name": "IsUnreachable"},{"file": 27,"line": 333,"col": 4,"name": "HasCustomCallingConv"},{"file": 27,"line": 334,"col": 4,"name": "IsNoInline"},{"file": 27,"line": 335,"col": 4,"name": "HasOptimizedDebugInfo"},{"file": 27,"line": 345,"col": 4,"docs": " Record length, starting from &RecordKind.\n","name": "RecordLen"},{"file": 27,"line": 348,"col": 4,"docs": " Record kind enum (SymRecordKind or TypeRecordKind)\n","name": "RecordKind"},{"file": 27,"line": 112,"col": 4,"name": "S_COMPILE"},{"file": 27,"line": 113,"col": 4,"name": "S_REGISTER_16t"},{"file": 27,"line": 114,"col": 4,"name": "S_CONSTANT_16t"},{"file": 27,"line": 115,"col": 4,"name": "S_UDT_16t"},{"file": 27,"line": 116,"col": 4,"name": "S_SSEARCH"},{"file": 27,"line": 117,"col": 4,"name": "S_SKIP"},{"file": 27,"line": 118,"col": 4,"name": "S_CVRESERVE"},{"file": 27,"line": 119,"col": 4,"name": "S_OBJNAME_ST"},{"file": 27,"line": 120,"col": 4,"name": "S_ENDARG"},{"file": 27,"line": 121,"col": 4,"name": "S_COBOLUDT_16t"},{"file": 27,"line": 122,"col": 4,"name": "S_MANYREG_16t"},{"file": 27,"line": 123,"col": 4,"name": "S_RETURN"},{"file": 27,"line": 124,"col": 4,"name": "S_ENTRYTHIS"},{"file": 27,"line": 125,"col": 4,"name": "S_BPREL16"},{"file": 27,"line": 126,"col": 4,"name": "S_LDATA16"},{"file": 27,"line": 127,"col": 4,"name": "S_GDATA16"},{"file": 27,"line": 128,"col": 4,"name": "S_PUB16"},{"file": 27,"line": 129,"col": 4,"name": "S_LPROC16"},{"file": 27,"line": 130,"col": 4,"name": "S_GPROC16"},{"file": 27,"line": 131,"col": 4,"name": "S_THUNK16"},{"file": 27,"line": 132,"col": 4,"name": "S_BLOCK16"},{"file": 27,"line": 133,"col": 4,"name": "S_WITH16"},{"file": 27,"line": 134,"col": 4,"name": "S_LABEL16"},{"file": 27,"line": 135,"col": 4,"name": "S_CEXMODEL16"},{"file": 27,"line": 136,"col": 4,"name": "S_VFTABLE16"},{"file": 27,"line": 137,"col": 4,"name": "S_REGREL16"},{"file": 27,"line": 138,"col": 4,"name": "S_BPREL32_16t"},{"file": 27,"line": 139,"col": 4,"name": "S_LDATA32_16t"},{"file": 27,"line": 140,"col": 4,"name": "S_GDATA32_16t"},{"file": 27,"line": 141,"col": 4,"name": "S_PUB32_16t"},{"file": 27,"line": 142,"col": 4,"name": "S_LPROC32_16t"},{"file": 27,"line": 143,"col": 4,"name": "S_GPROC32_16t"},{"file": 27,"line": 144,"col": 4,"name": "S_THUNK32_ST"},{"file": 27,"line": 145,"col": 4,"name": "S_BLOCK32_ST"},{"file": 27,"line": 146,"col": 4,"name": "S_WITH32_ST"},{"file": 27,"line": 147,"col": 4,"name": "S_LABEL32_ST"},{"file": 27,"line": 148,"col": 4,"name": "S_CEXMODEL32"},{"file": 27,"line": 149,"col": 4,"name": "S_VFTABLE32_16t"},{"file": 27,"line": 150,"col": 4,"name": "S_REGREL32_16t"},{"file": 27,"line": 151,"col": 4,"name": "S_LTHREAD32_16t"},{"file": 27,"line": 152,"col": 4,"name": "S_GTHREAD32_16t"},{"file": 27,"line": 153,"col": 4,"name": "S_SLINK32"},{"file": 27,"line": 154,"col": 4,"name": "S_LPROCMIPS_16t"},{"file": 27,"line": 155,"col": 4,"name": "S_GPROCMIPS_16t"},{"file": 27,"line": 156,"col": 4,"name": "S_PROCREF_ST"},{"file": 27,"line": 157,"col": 4,"name": "S_DATAREF_ST"},{"file": 27,"line": 158,"col": 4,"name": "S_ALIGN"},{"file": 27,"line": 159,"col": 4,"name": "S_LPROCREF_ST"},{"file": 27,"line": 160,"col": 4,"name": "S_OEM"},{"file": 27,"line": 161,"col": 4,"name": "S_TI16_MAX"},{"file": 27,"line": 162,"col": 4,"name": "S_REGISTER_ST"},{"file": 27,"line": 163,"col": 4,"name": "S_CONSTANT_ST"},{"file": 27,"line": 164,"col": 4,"name": "S_UDT_ST"},{"file": 27,"line": 165,"col": 4,"name": "S_COBOLUDT_ST"},{"file": 27,"line": 166,"col": 4,"name": "S_MANYREG_ST"},{"file": 27,"line": 167,"col": 4,"name": "S_BPREL32_ST"},{"file": 27,"line": 168,"col": 4,"name": "S_LDATA32_ST"},{"file": 27,"line": 169,"col": 4,"name": "S_GDATA32_ST"},{"file": 27,"line": 170,"col": 4,"name": "S_PUB32_ST"},{"file": 27,"line": 171,"col": 4,"name": "S_LPROC32_ST"},{"file": 27,"line": 172,"col": 4,"name": "S_GPROC32_ST"},{"file": 27,"line": 173,"col": 4,"name": "S_VFTABLE32"},{"file": 27,"line": 174,"col": 4,"name": "S_REGREL32_ST"},{"file": 27,"line": 175,"col": 4,"name": "S_LTHREAD32_ST"},{"file": 27,"line": 176,"col": 4,"name": "S_GTHREAD32_ST"},{"file": 27,"line": 177,"col": 4,"name": "S_LPROCMIPS_ST"},{"file": 27,"line": 178,"col": 4,"name": "S_GPROCMIPS_ST"},{"file": 27,"line": 179,"col": 4,"name": "S_COMPILE2_ST"},{"file": 27,"line": 180,"col": 4,"name": "S_MANYREG2_ST"},{"file": 27,"line": 181,"col": 4,"name": "S_LPROCIA64_ST"},{"file": 27,"line": 182,"col": 4,"name": "S_GPROCIA64_ST"},{"file": 27,"line": 183,"col": 4,"name": "S_LOCALSLOT_ST"},{"file": 27,"line": 184,"col": 4,"name": "S_PARAMSLOT_ST"},{"file": 27,"line": 185,"col": 4,"name": "S_ANNOTATION"},{"file": 27,"line": 186,"col": 4,"name": "S_GMANPROC_ST"},{"file": 27,"line": 187,"col": 4,"name": "S_LMANPROC_ST"},{"file": 27,"line": 188,"col": 4,"name": "S_RESERVED1"},{"file": 27,"line": 189,"col": 4,"name": "S_RESERVED2"},{"file": 27,"line": 190,"col": 4,"name": "S_RESERVED3"},{"file": 27,"line": 191,"col": 4,"name": "S_RESERVED4"},{"file": 27,"line": 192,"col": 4,"name": "S_LMANDATA_ST"},{"file": 27,"line": 193,"col": 4,"name": "S_GMANDATA_ST"},{"file": 27,"line": 194,"col": 4,"name": "S_MANFRAMEREL_ST"},{"file": 27,"line": 195,"col": 4,"name": "S_MANREGISTER_ST"},{"file": 27,"line": 196,"col": 4,"name": "S_MANSLOT_ST"},{"file": 27,"line": 197,"col": 4,"name": "S_MANMANYREG_ST"},{"file": 27,"line": 198,"col": 4,"name": "S_MANREGREL_ST"},{"file": 27,"line": 199,"col": 4,"name": "S_MANMANYREG2_ST"},{"file": 27,"line": 200,"col": 4,"name": "S_MANTYPREF"},{"file": 27,"line": 201,"col": 4,"name": "S_UNAMESPACE_ST"},{"file": 27,"line": 202,"col": 4,"name": "S_ST_MAX"},{"file": 27,"line": 203,"col": 4,"name": "S_WITH32"},{"file": 27,"line": 204,"col": 4,"name": "S_MANYREG"},{"file": 27,"line": 205,"col": 4,"name": "S_LPROCMIPS"},{"file": 27,"line": 206,"col": 4,"name": "S_GPROCMIPS"},{"file": 27,"line": 207,"col": 4,"name": "S_MANYREG2"},{"file": 27,"line": 208,"col": 4,"name": "S_LPROCIA64"},{"file": 27,"line": 209,"col": 4,"name": "S_GPROCIA64"},{"file": 27,"line": 210,"col": 4,"name": "S_LOCALSLOT"},{"file": 27,"line": 211,"col": 4,"name": "S_PARAMSLOT"},{"file": 27,"line": 212,"col": 4,"name": "S_MANFRAMEREL"},{"file": 27,"line": 213,"col": 4,"name": "S_MANREGISTER"},{"file": 27,"line": 214,"col": 4,"name": "S_MANSLOT"},{"file": 27,"line": 215,"col": 4,"name": "S_MANMANYREG"},{"file": 27,"line": 216,"col": 4,"name": "S_MANREGREL"},{"file": 27,"line": 217,"col": 4,"name": "S_MANMANYREG2"},{"file": 27,"line": 218,"col": 4,"name": "S_UNAMESPACE"},{"file": 27,"line": 219,"col": 4,"name": "S_DATAREF"},{"file": 27,"line": 220,"col": 4,"name": "S_ANNOTATIONREF"},{"file": 27,"line": 221,"col": 4,"name": "S_TOKENREF"},{"file": 27,"line": 222,"col": 4,"name": "S_GMANPROC"},{"file": 27,"line": 223,"col": 4,"name": "S_LMANPROC"},{"file": 27,"line": 224,"col": 4,"name": "S_ATTR_FRAMEREL"},{"file": 27,"line": 225,"col": 4,"name": "S_ATTR_REGISTER"},{"file": 27,"line": 226,"col": 4,"name": "S_ATTR_REGREL"},{"file": 27,"line": 227,"col": 4,"name": "S_ATTR_MANYREG"},{"file": 27,"line": 228,"col": 4,"name": "S_SEPCODE"},{"file": 27,"line": 229,"col": 4,"name": "S_LOCAL_2005"},{"file": 27,"line": 230,"col": 4,"name": "S_DEFRANGE_2005"},{"file": 27,"line": 231,"col": 4,"name": "S_DEFRANGE2_2005"},{"file": 27,"line": 232,"col": 4,"name": "S_DISCARDED"},{"file": 27,"line": 233,"col": 4,"name": "S_LPROCMIPS_ID"},{"file": 27,"line": 234,"col": 4,"name": "S_GPROCMIPS_ID"},{"file": 27,"line": 235,"col": 4,"name": "S_LPROCIA64_ID"},{"file": 27,"line": 236,"col": 4,"name": "S_GPROCIA64_ID"},{"file": 27,"line": 237,"col": 4,"name": "S_DEFRANGE_HLSL"},{"file": 27,"line": 238,"col": 4,"name": "S_GDATA_HLSL"},{"file": 27,"line": 239,"col": 4,"name": "S_LDATA_HLSL"},{"file": 27,"line": 240,"col": 4,"name": "S_LOCAL_DPC_GROUPSHARED"},{"file": 27,"line": 241,"col": 4,"name": "S_DEFRANGE_DPC_PTR_TAG"},{"file": 27,"line": 242,"col": 4,"name": "S_DPC_SYM_TAG_MAP"},{"file": 27,"line": 243,"col": 4,"name": "S_ARMSWITCHTABLE"},{"file": 27,"line": 244,"col": 4,"name": "S_POGODATA"},{"file": 27,"line": 245,"col": 4,"name": "S_INLINESITE2"},{"file": 27,"line": 246,"col": 4,"name": "S_MOD_TYPEREF"},{"file": 27,"line": 247,"col": 4,"name": "S_REF_MINIPDB"},{"file": 27,"line": 248,"col": 4,"name": "S_PDBMAP"},{"file": 27,"line": 249,"col": 4,"name": "S_GDATA_HLSL32"},{"file": 27,"line": 250,"col": 4,"name": "S_LDATA_HLSL32"},{"file": 27,"line": 251,"col": 4,"name": "S_GDATA_HLSL32_EX"},{"file": 27,"line": 252,"col": 4,"name": "S_LDATA_HLSL32_EX"},{"file": 27,"line": 253,"col": 4,"name": "S_FASTLINK"},{"file": 27,"line": 254,"col": 4,"name": "S_INLINEES"},{"file": 27,"line": 255,"col": 4,"name": "S_END"},{"file": 27,"line": 256,"col": 4,"name": "S_INLINESITE_END"},{"file": 27,"line": 257,"col": 4,"name": "S_PROC_ID_END"},{"file": 27,"line": 258,"col": 4,"name": "S_THUNK32"},{"file": 27,"line": 259,"col": 4,"name": "S_TRAMPOLINE"},{"file": 27,"line": 260,"col": 4,"name": "S_SECTION"},{"file": 27,"line": 261,"col": 4,"name": "S_COFFGROUP"},{"file": 27,"line": 262,"col": 4,"name": "S_EXPORT"},{"file": 27,"line": 263,"col": 4,"name": "S_LPROC32"},{"file": 27,"line": 264,"col": 4,"name": "S_GPROC32"},{"file": 27,"line": 265,"col": 4,"name": "S_LPROC32_ID"},{"file": 27,"line": 266,"col": 4,"name": "S_GPROC32_ID"},{"file": 27,"line": 267,"col": 4,"name": "S_LPROC32_DPC"},{"file": 27,"line": 268,"col": 4,"name": "S_LPROC32_DPC_ID"},{"file": 27,"line": 269,"col": 4,"name": "S_REGISTER"},{"file": 27,"line": 270,"col": 4,"name": "S_PUB32"},{"file": 27,"line": 271,"col": 4,"name": "S_PROCREF"},{"file": 27,"line": 272,"col": 4,"name": "S_LPROCREF"},{"file": 27,"line": 273,"col": 4,"name": "S_ENVBLOCK"},{"file": 27,"line": 274,"col": 4,"name": "S_INLINESITE"},{"file": 27,"line": 275,"col": 4,"name": "S_LOCAL"},{"file": 27,"line": 276,"col": 4,"name": "S_DEFRANGE"},{"file": 27,"line": 277,"col": 4,"name": "S_DEFRANGE_SUBFIELD"},{"file": 27,"line": 278,"col": 4,"name": "S_DEFRANGE_REGISTER"},{"file": 27,"line": 279,"col": 4,"name": "S_DEFRANGE_FRAMEPOINTER_REL"},{"file": 27,"line": 280,"col": 4,"name": "S_DEFRANGE_SUBFIELD_REGISTER"},{"file": 27,"line": 281,"col": 4,"name": "S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE"},{"file": 27,"line": 282,"col": 4,"name": "S_DEFRANGE_REGISTER_REL"},{"file": 27,"line": 283,"col": 4,"name": "S_BLOCK32"},{"file": 27,"line": 284,"col": 4,"name": "S_LABEL32"},{"file": 27,"line": 285,"col": 4,"name": "S_OBJNAME"},{"file": 27,"line": 286,"col": 4,"name": "S_COMPILE2"},{"file": 27,"line": 287,"col": 4,"name": "S_COMPILE3"},{"file": 27,"line": 288,"col": 4,"name": "S_FRAMEPROC"},{"file": 27,"line": 289,"col": 4,"name": "S_CALLSITEINFO"},{"file": 27,"line": 290,"col": 4,"name": "S_FILESTATIC"},{"file": 27,"line": 291,"col": 4,"name": "S_HEAPALLOCSITE"},{"file": 27,"line": 292,"col": 4,"name": "S_FRAMECOOKIE"},{"file": 27,"line": 293,"col": 4,"name": "S_CALLEES"},{"file": 27,"line": 294,"col": 4,"name": "S_CALLERS"},{"file": 27,"line": 295,"col": 4,"name": "S_UDT"},{"file": 27,"line": 296,"col": 4,"name": "S_COBOLUDT"},{"file": 27,"line": 297,"col": 4,"name": "S_BUILDINFO"},{"file": 27,"line": 298,"col": 4,"name": "S_BPREL32"},{"file": 27,"line": 299,"col": 4,"name": "S_REGREL32"},{"file": 27,"line": 300,"col": 4,"name": "S_CONSTANT"},{"file": 27,"line": 301,"col": 4,"name": "S_MANCONSTANT"},{"file": 27,"line": 302,"col": 4,"name": "S_LDATA32"},{"file": 27,"line": 303,"col": 4,"name": "S_GDATA32"},{"file": 27,"line": 304,"col": 4,"name": "S_LMANDATA"},{"file": 27,"line": 305,"col": 4,"name": "S_GMANDATA"},{"file": 27,"line": 306,"col": 4,"name": "S_LTHREAD32"},{"file": 27,"line": 307,"col": 4,"name": "S_GTHREAD32"},{"file": 27,"line": 313,"col": 4,"name": "Parent"},{"file": 27,"line": 314,"col": 4,"name": "End"},{"file": 27,"line": 315,"col": 4,"name": "Next"},{"file": 27,"line": 316,"col": 4,"name": "CodeSize"},{"file": 27,"line": 317,"col": 4,"name": "DbgStart"},{"file": 27,"line": 318,"col": 4,"name": "DbgEnd"},{"file": 27,"line": 319,"col": 4,"name": "FunctionType"},{"file": 27,"line": 320,"col": 4,"name": "CodeOffset"},{"file": 27,"line": 321,"col": 4,"name": "Segment"},{"file": 27,"line": 322,"col": 4,"name": "Flags"},{"file": 27,"line": 413,"col": 4,"docs": " Byte offset of filename in global string table.\n","name": "FileNameOffset"},{"file": 27,"line": 416,"col": 4,"docs": " Number of bytes of checksum.\n","name": "ChecksumSize"},{"file": 27,"line": 419,"col": 4,"docs": " FileChecksumKind\n","name": "ChecksumKind"},{"file": 27,"line": 339,"col": 4,"name": "Ver60"},{"file": 27,"line": 340,"col": 4,"name": "V2"},{"file": 27,"line": 369,"col": 4,"docs": " CV_LINES_HAVE_COLUMNS\n","name": "LF_HaveColumns"},{"file": 27,"line": 370,"col": 4,"name": "unused"},{"file": 45,"line": 207,"col": 4,"docs": " name of this section\n","name": "sectname"},{"file": 45,"line": 210,"col": 4,"docs": " segment this section goes in\n","name": "segname"},{"file": 45,"line": 213,"col": 4,"docs": " memory address of this section\n","name": "addr"},{"file": 45,"line": 216,"col": 4,"docs": " size in bytes of this section\n","name": "size"},{"file": 45,"line": 219,"col": 4,"docs": " file offset of this section\n","name": "offset"},{"file": 45,"line": 222,"col": 4,"docs": " section alignment (power of 2)\n","name": "align"},{"file": 45,"line": 225,"col": 4,"docs": " file offset of relocation entries\n","name": "reloff"},{"file": 45,"line": 228,"col": 4,"docs": " number of relocation entries\n","name": "nreloc"},{"file": 45,"line": 231,"col": 4,"docs": " flags (section type and attributes\n","name": "flags"},{"file": 45,"line": 234,"col": 4,"docs": " reserved (for offset or index)\n","name": "reserved1"},{"file": 45,"line": 237,"col": 4,"docs": " reserved (for count or sizeof)\n","name": "reserved2"},{"file": 45,"line": 240,"col": 4,"docs": " reserved\n","name": "reserved3"},{"file": 45,"line": 11,"col": 4,"name": "magic"},{"file": 45,"line": 12,"col": 4,"name": "cputype"},{"file": 45,"line": 13,"col": 4,"name": "cpusubtype"},{"file": 45,"line": 14,"col": 4,"name": "filetype"},{"file": 45,"line": 15,"col": 4,"name": "ncmds"},{"file": 45,"line": 16,"col": 4,"name": "sizeofcmds"},{"file": 45,"line": 17,"col": 4,"name": "flags"},{"file": 45,"line": 18,"col": 4,"name": "reserved"},{"file": 28,"line": 262,"col": 8,"name": "physical_address"},{"file": 28,"line": 263,"col": 8,"name": "virtual_size"},{"file": 1,"line": 99,"col": 8,"name": "v8_5a"},{"file": 1,"line": 100,"col": 8,"name": "v8_4a"},{"file": 1,"line": 101,"col": 8,"name": "v8_3a"},{"file": 1,"line": 102,"col": 8,"name": "v8_2a"},{"file": 1,"line": 103,"col": 8,"name": "v8_1a"},{"file": 1,"line": 104,"col": 8,"name": "v8"},{"file": 1,"line": 105,"col": 8,"name": "v8r"},{"file": 1,"line": 106,"col": 8,"name": "v8m_baseline"},{"file": 1,"line": 107,"col": 8,"name": "v8m_mainline"},{"file": 1,"line": 108,"col": 8,"name": "v8_1m_mainline"},{"file": 1,"line": 109,"col": 8,"name": "v7"},{"file": 1,"line": 110,"col": 8,"name": "v7em"},{"file": 1,"line": 111,"col": 8,"name": "v7m"},{"file": 1,"line": 112,"col": 8,"name": "v7s"},{"file": 1,"line": 113,"col": 8,"name": "v7k"},{"file": 1,"line": 114,"col": 8,"name": "v7ve"},{"file": 1,"line": 115,"col": 8,"name": "v6"},{"file": 1,"line": 116,"col": 8,"name": "v6m"},{"file": 1,"line": 117,"col": 8,"name": "v6k"},{"file": 1,"line": 118,"col": 8,"name": "v6t2"},{"file": 1,"line": 119,"col": 8,"name": "v5"},{"file": 1,"line": 120,"col": 8,"name": "v5te"},{"file": 1,"line": 121,"col": 8,"name": "v4t"},{"file": 1,"line": 135,"col": 8,"name": "v5"},{"file": 1,"line": 136,"col": 8,"name": "v4"},{"file": 1,"line": 137,"col": 8,"name": "v3"},{"file": 1,"line": 124,"col": 8,"name": "v8_5a"},{"file": 1,"line": 125,"col": 8,"name": "v8_4a"},{"file": 1,"line": 126,"col": 8,"name": "v8_3a"},{"file": 1,"line": 127,"col": 8,"name": "v8_2a"},{"file": 1,"line": 128,"col": 8,"name": "v8_1a"},{"file": 1,"line": 129,"col": 8,"name": "v8"},{"file": 1,"line": 130,"col": 8,"name": "v8r"},{"file": 1,"line": 131,"col": 8,"name": "v8m_baseline"},{"file": 1,"line": 132,"col": 8,"name": "v8m_mainline"},{"file": 1,"line": 313,"col": 8,"name": "layout"},{"file": 1,"line": 314,"col": 8,"name": "fields"},{"file": 1,"line": 315,"col": 8,"name": "decls"},{"file": 1,"line": 296,"col": 8,"name": "len"},{"file": 1,"line": 297,"col": 8,"name": "child"},{"file": 1,"line": 323,"col": 8,"name": "error_set"},{"file": 1,"line": 324,"col": 8,"name": "payload"},{"file": 1,"line": 280,"col": 8,"name": "size"},{"file": 1,"line": 281,"col": 8,"name": "is_const"},{"file": 1,"line": 282,"col": 8,"name": "is_volatile"},{"file": 1,"line": 283,"col": 8,"name": "alignment"},{"file": 1,"line": 284,"col": 8,"name": "child"},{"file": 1,"line": 285,"col": 8,"name": "is_allowzero"},{"file": 1,"line": 335,"col": 8,"name": "name"},{"file": 1,"line": 336,"col": 8,"name": "value"},{"file": 1,"line": 301,"col": 8,"name": "Auto"},{"file": 1,"line": 302,"col": 8,"name": "Extern"},{"file": 1,"line": 303,"col": 8,"name": "Packed"},{"file": 1,"line": 392,"col": 8,"name": "name"},{"file": 1,"line": 393,"col": 8,"name": "is_pub"},{"file": 1,"line": 394,"col": 8,"name": "data"},{"file": 1,"line": 353,"col": 8,"name": "layout"},{"file": 1,"line": 354,"col": 8,"name": "tag_type"},{"file": 1,"line": 355,"col": 8,"name": "fields"},{"file": 1,"line": 356,"col": 8,"name": "decls"},{"file": 1,"line": 319,"col": 8,"name": "child"},{"file": 1,"line": 340,"col": 8,"name": "layout"},{"file": 1,"line": 341,"col": 8,"name": "tag_type"},{"file": 1,"line": 342,"col": 8,"name": "fields"},{"file": 1,"line": 343,"col": 8,"name": "decls"},{"file": 1,"line": 360,"col": 8,"name": "Unspecified"},{"file": 1,"line": 361,"col": 8,"name": "C"},{"file": 1,"line": 362,"col": 8,"name": "Cold"},{"file": 1,"line": 363,"col": 8,"name": "Naked"},{"file": 1,"line": 364,"col": 8,"name": "Stdcall"},{"file": 1,"line": 365,"col": 8,"name": "Async"},{"file": 1,"line": 387,"col": 8,"name": "len"},{"file": 1,"line": 388,"col": 8,"name": "child"},{"file": 1,"line": 276,"col": 8,"name": "bits"},{"file": 1,"line": 347,"col": 8,"name": "name"},{"file": 1,"line": 348,"col": 8,"name": "enum_field"},{"file": 1,"line": 349,"col": 8,"name": "field_type"},{"file": 1,"line": 307,"col": 8,"name": "name"},{"file": 1,"line": 308,"col": 8,"name": "offset"},{"file": 1,"line": 309,"col": 8,"name": "field_type"},{"file": 1,"line": 383,"col": 8,"name": "child"},{"file": 1,"line": 328,"col": 8,"name": "name"},{"file": 1,"line": 329,"col": 8,"name": "value"},{"file": 1,"line": 375,"col": 8,"name": "calling_convention"},{"file": 1,"line": 376,"col": 8,"name": "is_generic"},{"file": 1,"line": 377,"col": 8,"name": "is_var_args"},{"file": 1,"line": 378,"col": 8,"name": "return_type"},{"file": 1,"line": 379,"col": 8,"name": "args"},{"file": 1,"line": 369,"col": 8,"name": "is_generic"},{"file": 1,"line": 370,"col": 8,"name": "is_noalias"},{"file": 1,"line": 371,"col": 8,"name": "arg_type"},{"file": 1,"line": 271,"col": 8,"name": "is_signed"},{"file": 1,"line": 272,"col": 8,"name": "bits"},{"file": 28,"line": 237,"col": 8,"name": "virtual_address"},{"file": 28,"line": 238,"col": 8,"name": "size"},{"file": 13,"line": 905,"col": 12,"name": "first"},{"file": 13,"line": 906,"col": 12,"name": "second"},{"file": 60,"line": 286,"col": 4,"name": "nLength"},{"file": 60,"line": 287,"col": 4,"name": "lpSecurityDescriptor"},{"file": 60,"line": 288,"col": 4,"name": "bInheritHandle"},{"file": 58,"line": 562,"col": 4,"name": "Byte"},{"file": 58,"line": 563,"col": 4,"name": "Word"},{"file": 58,"line": 558,"col": 4,"name": "s_addr"},{"file": 58,"line": 608,"col": 4,"name": "wVersion"},{"file": 58,"line": 609,"col": 4,"name": "wHighVersion"},{"file": 58,"line": 610,"col": 4,"name": "iMaxSockets"},{"file": 58,"line": 611,"col": 4,"name": "iMaxUdpDg"},{"file": 58,"line": 612,"col": 4,"name": "lpVendorInfo"},{"file": 58,"line": 613,"col": 4,"name": "szDescription"},{"file": 58,"line": 614,"col": 4,"name": "szSystemStatus"},{"file": 7,"line": 413,"col": 8,"name": "Processor"},{"file": 7,"line": 414,"col": 8,"name": "NumaNode"},{"file": 7,"line": 415,"col": 8,"name": "Cache"},{"file": 7,"line": 416,"col": 8,"name": "Group"},{"file": 60,"line": 743,"col": 4,"name": "ExceptionCode"},{"file": 60,"line": 744,"col": 4,"name": "ExceptionFlags"},{"file": 60,"line": 745,"col": 4,"name": "ExceptionRecord"},{"file": 60,"line": 746,"col": 4,"name": "ExceptionAddress"},{"file": 60,"line": 747,"col": 4,"name": "NumberParameters"},{"file": 60,"line": 748,"col": 4,"name": "ExceptionInformation"},{"file": 60,"line": 604,"col": 4,"name": "X"},{"file": 60,"line": 605,"col": 4,"name": "Y"},{"file": 60,"line": 680,"col": 4,"name": "Type"},{"file": 60,"line": 681,"col": 4,"name": "CreatorBackTraceIndex"},{"file": 60,"line": 682,"col": 4,"name": "CriticalSection"},{"file": 60,"line": 683,"col": 4,"name": "ProcessLocksList"},{"file": 60,"line": 684,"col": 4,"name": "EntryCount"},{"file": 60,"line": 685,"col": 4,"name": "ContentionCount"},{"file": 60,"line": 686,"col": 4,"name": "Flags"},{"file": 60,"line": 687,"col": 4,"name": "CreatorBackTraceIndexHigh"},{"file": 60,"line": 688,"col": 4,"name": "SpareWORD"},{"file": 60,"line": 675,"col": 4,"name": "Flink"},{"file": 60,"line": 676,"col": 4,"name": "Blink"},{"file": 60,"line": 487,"col": 4,"name": "anon1"},{"file": 60,"line": 494,"col": 4,"name": "dwPageSize"},{"file": 60,"line": 495,"col": 4,"name": "lpMinimumApplicationAddress"},{"file": 60,"line": 496,"col": 4,"name": "lpMaximumApplicationAddress"},{"file": 60,"line": 497,"col": 4,"name": "dwActiveProcessorMask"},{"file": 60,"line": 498,"col": 4,"name": "dwNumberOfProcessors"},{"file": 60,"line": 499,"col": 4,"name": "dwProcessorType"},{"file": 60,"line": 500,"col": 4,"name": "dwAllocationGranularity"},{"file": 60,"line": 501,"col": 4,"name": "wProcessorLevel"},{"file": 60,"line": 502,"col": 4,"name": "wProcessorRevision"},{"file": 60,"line": 662,"col": 4,"name": "dwSize"},{"file": 60,"line": 663,"col": 4,"name": "dwCursorPosition"},{"file": 60,"line": 664,"col": 4,"name": "wAttributes"},{"file": 60,"line": 665,"col": 4,"name": "srWindow"},{"file": 60,"line": 666,"col": 4,"name": "dwMaximumWindowSize"},{"file": 60,"line": 263,"col": 4,"name": "FileNameLength"},{"file": 60,"line": 264,"col": 4,"name": "FileName"},{"file": 60,"line": 597,"col": 4,"name": "Left"},{"file": 60,"line": 598,"col": 4,"name": "Top"},{"file": 60,"line": 599,"col": 4,"name": "Right"},{"file": 60,"line": 600,"col": 4,"name": "Bottom"},{"file": 27,"line": 397,"col": 8,"docs": " Start line number\n","name": "Start"},{"file": 27,"line": 400,"col": 8,"docs": " Delta of lines to the end of the expression. Still unclear.\n","name": "End"},{"file": 27,"line": 401,"col": 8,"name": "IsStatement"},{"file": 74,"line": 9,"col": 4,"docs": " Do not follow pointers, only hash their value.\n","name": "Shallow"},{"file": 74,"line": 14,"col": 4,"docs": " Follow pointers, hash the pointee content.\n Only dereferences one level, ie. it is changed into .Shallow when a\n pointer type is encountered.\n","name": "Deep"},{"file": 74,"line": 19,"col": 4,"docs": " Follow pointers, hash the pointee content.\n Dereferences all pointers encountered.\n Assumes no cycle.\n","name": "DeepRecursive"},{"file": 1,"line": 288,"col": 12,"name": "One"},{"file": 1,"line": 289,"col": 12,"name": "Many"},{"file": 1,"line": 290,"col": 12,"name": "Slice"},{"file": 1,"line": 291,"col": 12,"name": "C"},{"file": 1,"line": 397,"col": 12,"name": "Type"},{"file": 1,"line": 398,"col": 12,"name": "Var"},{"file": 1,"line": 399,"col": 12,"name": "Fn"},{"file": 82,"line": 197,"col": 4,"name": "handle"},{"file": 60,"line": 488,"col": 8,"name": "dwOemId"},{"file": 60,"line": 489,"col": 8,"name": "anon2"},{"file": 1,"line": 402,"col": 16,"name": "fn_type"},{"file": 1,"line": 403,"col": 16,"name": "inline_type"},{"file": 1,"line": 404,"col": 16,"name": "calling_convention"},{"file": 1,"line": 405,"col": 16,"name": "is_var_args"},{"file": 1,"line": 406,"col": 16,"name": "is_extern"},{"file": 1,"line": 407,"col": 16,"name": "is_export"},{"file": 1,"line": 408,"col": 16,"name": "lib_name"},{"file": 1,"line": 409,"col": 16,"name": "return_type"},{"file": 1,"line": 410,"col": 16,"name": "arg_names"},{"file": 60,"line": 490,"col": 12,"name": "wProcessorArchitecture"},{"file": 60,"line": 491,"col": 12,"name": "wReserved"},{"file": 1,"line": 413,"col": 20,"name": "Auto"},{"file": 1,"line": 414,"col": 20,"name": "Always"},{"file": 1,"line": 415,"col": 20,"name": "Never"},{"file": 5,"line": 128,"col": 33,"name": "self"},{"file": 5,"line": 128,"col": 49,"name": "cmp"},{"file": 5,"line": 128,"col": 57,"name": "xchg"},{"file": 5,"line": 128,"col": 66,"name": "success","comptime": true},{"file": 5,"line": 128,"col": 91,"name": "failure","comptime": true},{"file": 6,"line": 164,"col": 26,"name": "self"},{"file": 6,"line": 164,"col": 39,"name": "T","comptime": true},{"file": 6,"line": 184,"col": 25,"name": "self"},{"file": 6,"line": 184,"col": 38,"name": "num_bytes"},{"file": 6,"line": 90,"col": 28,"name": "self"},{"file": 6,"line": 90,"col": 41,"name": "allocator"},{"file": 6,"line": 90,"col": 68,"name": "max_size"},{"file": 6,"line": 102,"col": 40,"name": "self"},{"file": 6,"line": 102,"col": 53,"name": "buffer"},{"file": 6,"line": 102,"col": 70,"name": "delimiter"},{"file": 6,"line": 102,"col": 85,"name": "max_size"},{"file": 6,"line": 152,"col": 30,"name": "self"},{"file": 6,"line": 152,"col": 43,"name": "T","comptime": true},{"file": 6,"line": 145,"col": 29,"name": "self"},{"file": 6,"line": 145,"col": 42,"name": "T","comptime": true},{"file": 6,"line": 140,"col": 30,"name": "self"},{"file": 6,"line": 176,"col": 26,"name": "self"},{"file": 6,"line": 176,"col": 39,"name": "ReturnType","comptime": true},{"file": 6,"line": 176,"col": 66,"name": "endian"},{"file": 6,"line": 176,"col": 90,"name": "size"},{"file": 6,"line": 124,"col": 39,"name": "self"},{"file": 6,"line": 124,"col": 52,"name": "allocator"},{"file": 6,"line": 124,"col": 79,"name": "delimiter"},{"file": 6,"line": 124,"col": 94,"name": "max_size"},{"file": 6,"line": 66,"col": 29,"name": "self"},{"file": 6,"line": 66,"col": 42,"name": "buffer"},{"file": 6,"line": 66,"col": 59,"name": "max_size"},{"file": 6,"line": 170,"col": 23,"name": "self"},{"file": 6,"line": 170,"col": 36,"name": "T","comptime": true},{"file": 6,"line": 170,"col": 54,"name": "endian"},{"file": 9,"line": 63,"col": 19,"name": "self"},{"file": 9,"line": 63,"col": 32,"name": "i"},{"file": 9,"line": 63,"col": 42,"name": "item"},{"file": 9,"line": 57,"col": 26,"name": "self"},{"file": 9,"line": 57,"col": 38,"name": "i"},{"file": 9,"line": 57,"col": 48,"name": "item"},{"file": 9,"line": 116,"col": 36,"name": "self"},{"file": 9,"line": 116,"col": 49,"name": "item"},{"file": 9,"line": 146,"col": 33,"name": "self"},{"file": 9,"line": 146,"col": 46,"name": "i"},{"file": 9,"line": 51,"col": 18,"name": "self"},{"file": 9,"line": 51,"col": 30,"name": "i"},{"file": 9,"line": 134,"col": 26,"name": "self"},{"file": 9,"line": 134,"col": 39,"name": "i"},{"file": 9,"line": 220,"col": 24,"name": "self"},{"file": 9,"line": 193,"col": 19,"name": "self"},{"file": 9,"line": 47,"col": 28,"name": "self"},{"file": 9,"line": 151,"col": 27,"name": "self"},{"file": 9,"line": 151,"col": 40,"name": "items"},{"file": 9,"line": 103,"col": 27,"name": "self"},{"file": 9,"line": 103,"col": 40,"name": "n"},{"file": 9,"line": 103,"col": 50,"name": "items"},{"file": 9,"line": 79,"col": 30,"name": "allocator"},{"file": 9,"line": 79,"col": 53,"name": "slice"},{"file": 9,"line": 39,"col": 22,"name": "self"},{"file": 9,"line": 95,"col": 22,"name": "self"},{"file": 9,"line": 95,"col": 35,"name": "n"},{"file": 9,"line": 95,"col": 45,"name": "item"},{"file": 9,"line": 162,"col": 22,"name": "self"},{"file": 9,"line": 162,"col": 35,"name": "new_len"},{"file": 9,"line": 121,"col": 29,"name": "self"},{"file": 9,"line": 121,"col": 42,"name": "i"},{"file": 9,"line": 198,"col": 25,"name": "self"},{"file": 10,"line": 109,"col": 30,"name": "self"},{"file": 10,"line": 109,"col": 43,"name": "T","comptime": true},{"file": 10,"line": 109,"col": 61,"name": "value"},{"file": 10,"line": 121,"col": 24,"name": "self"},{"file": 10,"line": 121,"col": 37,"name": "T","comptime": true},{"file": 10,"line": 121,"col": 55,"name": "value"},{"file": 10,"line": 121,"col": 65,"name": "endian"},{"file": 10,"line": 96,"col": 30,"name": "self"},{"file": 10,"line": 96,"col": 43,"name": "T","comptime": true},{"file": 10,"line": 96,"col": 61,"name": "value"},{"file": 10,"line": 103,"col": 31,"name": "self"},{"file": 10,"line": 103,"col": 44,"name": "T","comptime": true},{"file": 10,"line": 103,"col": 62,"name": "value"},{"file": 10,"line": 87,"col": 31,"name": "self"},{"file": 10,"line": 87,"col": 44,"name": "byte"},{"file": 10,"line": 87,"col": 54,"name": "n"},{"file": 10,"line": 115,"col": 27,"name": "self"},{"file": 10,"line": 115,"col": 40,"name": "T","comptime": true},{"file": 10,"line": 115,"col": 58,"name": "value"},{"file": 41,"line": 175,"col": 28,"name": "Int","comptime": true},{"file": 41,"line": 175,"col": 48,"name": "endian","comptime": true},{"file": 41,"line": 175,"col": 81,"name": "int_count","comptime": true},{"file": 41,"line": 168,"col": 22,"name": "Int","comptime": true},{"file": 41,"line": 168,"col": 42,"name": "int_count","comptime": true},{"file": 100,"line": 76,"col": 21,"name": "T","comptime": true},{"file": 100,"line": 76,"col": 39,"name": "prealloc_item_count","comptime": true},{"file": 46,"line": 192,"col": 17,"name": "T","comptime": true},{"file": 101,"line": 9,"col": 16,"name": "T","comptime": true},{"file": 22,"line": 15,"col": 19,"name": "K","comptime": true},{"file": 22,"line": 15,"col": 37,"name": "V","comptime": true},{"file": 102,"line": 6,"col": 21,"name": "T","comptime": true},{"file": 41,"line": 244,"col": 28,"name": "Int","comptime": true},{"file": 41,"line": 244,"col": 48,"name": "endian","comptime": true},{"file": 41,"line": 237,"col": 22,"name": "Int","comptime": true},{"file": 103,"line": 15,"col": 4,"docs": " Size of bloom filter in cells, must be a power of two.\n","name": "n_items","comptime": true},{"file": 103,"line": 17,"col": 4,"docs": " Number of cells to set per item\n","name": "K","comptime": true},{"file": 103,"line": 21,"col": 4,"docs": " Cell type, should be:\n  - `bool` for a standard bloom filter\n  - an unsigned integer type for a counting bloom filter\n","name": "Cell","comptime": true},{"file": 103,"line": 23,"col": 4,"docs": " endianess of the Cell\n","name": "endian","comptime": true},{"file": 103,"line": 25,"col": 4,"docs": " Hash function to use\n","name": "hash","comptime": true},{"file": 46,"line": 136,"col": 26,"name": "list"},{"file": 46,"line": 136,"col": 39,"name": "data"},{"file": 46,"line": 136,"col": 48,"name": "allocator"},{"file": 46,"line": 124,"col": 27,"name": "list"},{"file": 46,"line": 124,"col": 40,"name": "node"},{"file": 46,"line": 124,"col": 53,"name": "allocator"},{"file": 46,"line": 69,"col": 27,"name": "list"},{"file": 46,"line": 69,"col": 40,"name": "node"},{"file": 46,"line": 69,"col": 53,"name": "new_node"},{"file": 46,"line": 86,"col": 22,"name": "list"},{"file": 46,"line": 86,"col": 35,"name": "node"},{"file": 46,"line": 115,"col": 28,"name": "list"},{"file": 46,"line": 115,"col": 41,"name": "allocator"},{"file": 46,"line": 102,"col": 24,"name": "list"},{"file": 22,"line": 279,"col": 21,"name": "self"},{"file": 22,"line": 165,"col": 30,"name": "self"},{"file": 22,"line": 165,"col": 43,"name": "expected_count"},{"file": 22,"line": 127,"col": 24,"name": "self"},{"file": 22,"line": 127,"col": 37,"name": "key"},{"file": 22,"line": 203,"col": 28,"name": "self"},{"file": 22,"line": 203,"col": 41,"name": "key"},{"file": 22,"line": 203,"col": 49,"name": "value"},{"file": 22,"line": 270,"col": 24,"name": "hm"},{"file": 22,"line": 216,"col": 19,"name": "hm"},{"file": 22,"line": 216,"col": 36,"name": "key"},{"file": 22,"line": 108,"col": 21,"name": "hm"},{"file": 22,"line": 207,"col": 33,"name": "self"},{"file": 22,"line": 207,"col": 46,"name": "key"},{"file": 22,"line": 207,"col": 54,"name": "value"},{"file": 22,"line": 104,"col": 22,"name": "hm"},{"file": 22,"line": 146,"col": 29,"name": "self"},{"file": 22,"line": 146,"col": 42,"name": "key"},{"file": 22,"line": 146,"col": 50,"name": "value"},{"file": 22,"line": 223,"col": 24,"name": "hm"},{"file": 22,"line": 223,"col": 41,"name": "key"},{"file": 22,"line": 197,"col": 19,"name": "self"},{"file": 22,"line": 197,"col": 32,"name": "key"},{"file": 22,"line": 197,"col": 40,"name": "value"},{"file": 22,"line": 94,"col": 20,"name": "allocator"},{"file": 22,"line": 117,"col": 21,"name": "self"},{"file": 22,"line": 227,"col": 24,"name": "hm"},{"file": 22,"line": 227,"col": 41,"name": "key"},{"file": 22,"line": 232,"col": 22,"name": "hm"},{"file": 22,"line": 232,"col": 33,"name": "key"},{"file": 22,"line": 266,"col": 35,"name": "hm"},{"file": 22,"line": 266,"col": 46,"name": "key"},{"file": 22,"line": 154,"col": 29,"name": "expected_count"},{"file": 22,"line": 299,"col": 24,"name": "hm"},{"file": 22,"line": 299,"col": 35,"name": "capacity"},{"file": 22,"line": 403,"col": 22,"name": "hm"},{"file": 22,"line": 403,"col": 32,"name": "key"},{"file": 22,"line": 289,"col": 24,"name": "self"},{"file": 22,"line": 308,"col": 38,"name": "hm"},{"file": 22,"line": 407,"col": 26,"name": "hm"},{"file": 22,"line": 407,"col": 36,"name": "i"},{"file": 22,"line": 321,"col": 23,"name": "self"},{"file": 22,"line": 321,"col": 36,"name": "orig_key"},{"file": 22,"line": 173,"col": 31,"name": "self"},{"file": 22,"line": 173,"col": 44,"name": "new_capacity"},{"file": 22,"line": 388,"col": 23,"name": "hm"},{"file": 22,"line": 388,"col": 33,"name": "key"},{"file": 104,"line": 17,"col": 12,"name": "x"},{"file": 92,"line": 11,"col": 19,"name": "x"},{"file": 105,"line": 19,"col": 12,"name": "x"},{"file": 106,"line": 18,"col": 13,"name": "T","comptime": true},{"file": 106,"line": 18,"col": 31,"name": "x"},{"file": 106,"line": 18,"col": 37,"name": "y"},{"file": 4,"line": 394,"col": 12,"name": "T","comptime": true},{"file": 4,"line": 394,"col": 30,"name": "x"},{"file": 4,"line": 394,"col": 36,"name": "r"},{"file": 107,"line": 16,"col": 12,"name": "x"},{"file": 108,"line": 17,"col": 13,"name": "x"},{"file": 109,"line": 19,"col": 12,"name": "x"},{"file": 110,"line": 17,"col": 13,"name": "x"},{"file": 111,"line": 16,"col": 11,"name": "x"},{"file": 112,"line": 16,"col": 13,"name": "x"},{"file": 48,"line": 26,"col": 15,"name": "T","comptime": true},{"file": 113,"line": 4,"col": 11,"name": "T","comptime": true},{"file": 4,"line": 842,"col": 16,"name": "T","comptime": true},{"file": 4,"line": 842,"col": 34,"name": "x"},{"file": 114,"line": 17,"col": 13,"name": "x"},{"file": 4,"line": 868,"col": 17,"name": "T","comptime": true},{"file": 4,"line": 868,"col": 35,"name": "value"},{"file": 98,"line": 26,"col": 12,"name": "x"},{"file": 115,"line": 16,"col": 11,"name": "x"},{"file": 116,"line": 18,"col": 13,"name": "x"},{"file": 117,"line": 15,"col": 11,"name": "x"},{"file": 118,"line": 15,"col": 12,"name": "x"},{"file": 4,"line": 751,"col": 20,"name": "v"},{"file": 119,"line": 15,"col": 12,"name": "x"},{"file": 120,"line": 14,"col": 12,"name": "T","comptime": true},{"file": 93,"line": 54,"col": 21,"name": "x"},{"file": 121,"line": 33,"col": 11,"name": "T","comptime": true},{"file": 121,"line": 33,"col": 29,"name": "x"},{"file": 121,"line": 33,"col": 35,"name": "y"},{"file": 122,"line": 20,"col": 12,"name": "x"},{"file": 4,"line": 847,"col": 21,"name": "T","comptime": true},{"file": 4,"line": 847,"col": 39,"name": "x"},{"file": 123,"line": 11,"col": 14,"name": "x"},{"file": 123,"line": 11,"col": 22,"name": "n"},{"file": 124,"line": 20,"col": 13,"name": "x"},{"file": 4,"line": 208,"col": 25,"name": "T","comptime": true},{"file": 125,"line": 14,"col": 12,"name": "x"},{"file": 126,"line": 16,"col": 11,"name": "x"},{"file": 127,"line": 20,"col": 13,"name": "x"},{"file": 4,"line": 441,"col": 23,"name": "from","comptime": true},{"file": 4,"line": 441,"col": 52,"name": "to","comptime": true},{"file": 128,"line": 13,"col": 11,"name": "T","comptime": true},{"file": 128,"line": 13,"col": 29,"name": "base"},{"file": 128,"line": 13,"col": 38,"name": "x"},{"file": 4,"line": 329,"col": 14,"name": "x"},{"file": 4,"line": 743,"col": 17,"name": "alignment","comptime": true},{"file": 4,"line": 743,"col": 42,"name": "ptr"},{"file": 4,"line": 695,"col": 18,"name": "x"},{"file": 129,"line": 6,"col": 16,"name": "x"},{"file": 130,"line": 6,"col": 16,"name": "x"},{"file": 120,"line": 3,"col": 11,"name": "T","comptime": true},{"file": 131,"line": 12,"col": 16,"name": "T","comptime": true},{"file": 131,"line": 12,"col": 34,"name": "x"},{"file": 131,"line": 12,"col": 40,"name": "y"},{"file": 132,"line": 11,"col": 11,"name": "T","comptime": true},{"file": 132,"line": 11,"col": 29,"name": "x"},{"file": 132,"line": 11,"col": 35,"name": "y"},{"file": 132,"line": 11,"col": 41,"name": "z"},{"file": 133,"line": 14,"col": 12,"name": "x"},{"file": 134,"line": 19,"col": 12,"name": "x"},{"file": 4,"line": 99,"col": 16,"name": "T","comptime": true},{"file": 4,"line": 99,"col": 34,"name": "x"},{"file": 4,"line": 99,"col": 40,"name": "y"},{"file": 4,"line": 99,"col": 46,"name": "epsilon"},{"file": 135,"line": 17,"col": 13,"name": "x"},{"file": 4,"line": 221,"col": 25,"name": "T","comptime": true},{"file": 136,"line": 15,"col": 12,"name": "x"},{"file": 137,"line": 19,"col": 13,"name": "x"},{"file": 138,"line": 21,"col": 12,"name": "T","comptime": true},{"file": 138,"line": 21,"col": 30,"name": "x"},{"file": 138,"line": 21,"col": 36,"name": "y"},{"file": 139,"line": 30,"col": 13,"name": "T","comptime": true},{"file": 139,"line": 30,"col": 31,"name": "y"},{"file": 139,"line": 30,"col": 37,"name": "x"},{"file": 140,"line": 19,"col": 10,"name": "x"},{"file": 50,"line": 335,"col": 26,"name": "file"},{"file": 50,"line": 214,"col": 16,"name": "self"},{"file": 50,"line": 237,"col": 16,"name": "self"},{"file": 50,"line": 38,"col": 21,"name": "path"},{"file": 50,"line": 107,"col": 30,"name": "path"},{"file": 50,"line": 107,"col": 48,"name": "file_mode"},{"file": 50,"line": 63,"col": 21,"name": "path"},{"file": 50,"line": 190,"col": 23,"name": "self"},{"file": 50,"line": 190,"col": 35,"name": "offset"},{"file": 50,"line": 201,"col": 18,"name": "self"},{"file": 50,"line": 313,"col": 24,"name": "self"},{"file": 50,"line": 313,"col": 36,"name": "iovecs"},{"file": 50,"line": 91,"col": 26,"name": "path_w"},{"file": 50,"line": 91,"col": 48,"name": "file_mode"},{"file": 50,"line": 80,"col": 26,"name": "path"},{"file": 50,"line": 80,"col": 45,"name": "file_mode"},{"file": 50,"line": 70,"col": 25,"name": "path"},{"file": 50,"line": 70,"col": 43,"name": "file_mode"},{"file": 50,"line": 126,"col": 31,"name": "path_w"},{"file": 50,"line": 126,"col": 53,"name": "file_mode"},{"file": 50,"line": 148,"col": 18,"name": "path"},{"file": 50,"line": 277,"col": 8,"name": "self"},{"file": 50,"line": 279,"col": 8,"docs": " access timestamp in nanoseconds\n","name": "atime"},{"file": 50,"line": 281,"col": 8,"docs": " last modification timestamp in nanoseconds\n","name": "mtime"},{"file": 50,"line": 158,"col": 19,"name": "path"},{"file": 50,"line": 153,"col": 19,"name": "path"},{"file": 50,"line": 116,"col": 31,"name": "path"},{"file": 50,"line": 116,"col": 50,"name": "file_mode"},{"file": 11,"line": 922,"col": 16,"name": "self"},{"file": 27,"line": 704,"col": 15,"name": "self"},{"file": 27,"line": 708,"col": 18,"name": "self"},{"file": 13,"line": 1406,"col": 14,"name": "self"},{"file": 39,"line": 360,"col": 18,"name": "self"},{"file": 39,"line": 483,"col": 17,"name": "self"},{"file": 17,"line": 191,"col": 24,"name": "s","comptime": true},{"file": 52,"line": 48,"col": 22,"name": "self"},{"file": 35,"line": 642,"col": 12,"name": "self"},{"file": 60,"line": 514,"col": 17,"name": "str"},{"file": 7,"line": 245,"col": 19,"name": "numa_node"},{"file": 7,"line": 481,"col": 4,"name": "lpPerformanceCount"},{"file": 7,"line": 513,"col": 4,"name": "Node"},{"file": 7,"line": 514,"col": 4,"name": "ProcessorMask"},{"file": 7,"line": 464,"col": 4,"name": "hProcess"},{"file": 7,"line": 465,"col": 4,"name": "lpAddress"},{"file": 7,"line": 466,"col": 4,"name": "dwSize"},{"file": 7,"line": 467,"col": 4,"name": "flAllocationType"},{"file": 7,"line": 468,"col": 4,"name": "flProtect"},{"file": 7,"line": 469,"col": 4,"name": "nndPreferred"},{"file": 7,"line": 449,"col": 4,"name": "lpLibFileName"},{"file": 7,"line": 497,"col": 4,"name": "hThread"},{"file": 7,"line": 498,"col": 4,"name": "GroupAffinity"},{"file": 7,"line": 499,"col": 4,"name": "PreviousGroupAffinity"},{"file": 7,"line": 484,"col": 37,"name": "dwMilliseconds"},{"file": 7,"line": 509,"col": 4,"name": "HighestNodeNumber"},{"file": 7,"line": 492,"col": 4,"name": "hThread"},{"file": 7,"line": 493,"col": 4,"name": "GroupAffinity"},{"file": 7,"line": 453,"col": 4,"name": "lpModuleName"},{"file": 7,"line": 525,"col": 4,"name": "ProcessHandle"},{"file": 7,"line": 526,"col": 4,"name": "DesiredAccess"},{"file": 7,"line": 527,"col": 4,"name": "TokenHandle"},{"file": 7,"line": 473,"col": 4,"name": "lpSystemTimeAsFileTime"},{"file": 7,"line": 531,"col": 4,"name": "lpSystemName"},{"file": 7,"line": 532,"col": 4,"name": "lpName"},{"file": 7,"line": 533,"col": 4,"name": "lpLuid"},{"file": 7,"line": 518,"col": 4,"name": "Node"},{"file": 7,"line": 519,"col": 4,"name": "AvailableBytes"},{"file": 7,"line": 537,"col": 4,"name": "TokenHandle"},{"file": 7,"line": 538,"col": 4,"name": "DisableAllPrivileges"},{"file": 7,"line": 539,"col": 4,"name": "NewState"},{"file": 7,"line": 540,"col": 4,"name": "BufferLength"},{"file": 7,"line": 541,"col": 4,"name": "PreviousState"},{"file": 7,"line": 542,"col": 4,"name": "ReturnLength"},{"file": 7,"line": 457,"col": 4,"name": "lpAddress"},{"file": 7,"line": 458,"col": 4,"name": "dwSize"},{"file": 7,"line": 459,"col": 4,"name": "flNewProtect"},{"file": 7,"line": 460,"col": 4,"name": "lpflOldProtect"},{"file": 7,"line": 477,"col": 4,"name": "lpFrequency"},{"file": 7,"line": 503,"col": 4,"name": "RelationshipType"},{"file": 7,"line": 504,"col": 4,"name": "Buffer"},{"file": 7,"line": 505,"col": 4,"name": "ReturnedLength"},{"file": 10,"line": 157,"col": 24,"name": "Error","comptime": true},{"file": 10,"line": 1142,"col": 18,"name": "endian","comptime": true},{"file": 10,"line": 1142,"col": 51,"name": "packing","comptime": true},{"file": 10,"line": 1142,"col": 78,"name": "Error","comptime": true},{"file": 10,"line": 707,"col": 20,"name": "endian"},{"file": 10,"line": 707,"col": 44,"name": "Error","comptime": true},{"file": 10,"line": 630,"col": 25,"name": "Error","comptime": true},{"file": 10,"line": 367,"col": 19,"name": "endian"},{"file": 10,"line": 367,"col": 43,"name": "Error","comptime": true},{"file": 10,"line": 884,"col": 20,"name": "stream"},{"file": 10,"line": 884,"col": 33,"name": "buf"},{"file": 10,"line": 272,"col": 18,"name": "buffer_size","comptime": true},{"file": 10,"line": 272,"col": 47,"name": "InStreamError","comptime": true},{"file": 10,"line": 634,"col": 31,"name": "buffer_size","comptime": true},{"file": 10,"line": 634,"col": 60,"name": "OutStreamError","comptime": true},{"file": 10,"line": 964,"col": 20,"name": "endian","comptime": true},{"file": 10,"line": 964,"col": 53,"name": "packing","comptime": true},{"file": 10,"line": 964,"col": 80,"name": "Error","comptime": true},{"file": 10,"line": 876,"col": 16,"name": "buf"},{"file": 10,"line": 926,"col": 25,"name": "stream"},{"file": 10,"line": 926,"col": 38,"name": "slice"},{"file": 10,"line": 161,"col": 30,"name": "buffer_size","comptime": true},{"file": 10,"line": 161,"col": 59,"name": "Error","comptime": true},{"file": 10,"line": 138,"col": 21,"name": "allocator"},{"file": 10,"line": 138,"col": 48,"name": "path"},{"file": 10,"line": 130,"col": 17,"name": "path"},{"file": 10,"line": 130,"col": 35,"name": "data"},{"file": 10,"line": 918,"col": 21,"name": "slice"},{"file": 10,"line": 594,"col": 25,"name": "OutStreamError","comptime": true},{"file": 10,"line": 144,"col": 28,"name": "allocator"},{"file": 10,"line": 144,"col": 55,"name": "path"},{"file": 10,"line": 144,"col": 73,"name": "A","comptime": true},{"file": 11,"line": 1474,"col": 19,"name": "ptr"},{"file": 11,"line": 1474,"col": 29,"name": "start","comptime": true},{"file": 11,"line": 1474,"col": 52,"name": "length","comptime": true},{"file": 11,"line": 1218,"col": 15,"name": "T","comptime": true},{"file": 11,"line": 1218,"col": 33,"name": "items"},{"file": 11,"line": 696,"col": 24,"name": "T","comptime": true},{"file": 11,"line": 696,"col": 42,"name": "buffer"},{"file": 11,"line": 696,"col": 56,"name": "value"},{"file": 11,"line": 1379,"col": 15,"name": "value"},{"file": 11,"line": 1247,"col": 14,"name": "T","comptime": true},{"file": 11,"line": 1247,"col": 32,"name": "items"},{"file": 11,"line": 1247,"col": 44,"name": "amount"},{"file": 11,"line": 1454,"col": 20,"name": "T","comptime": true},{"file": 11,"line": 1454,"col": 38,"name": "bytes"},{"file": 11,"line": 648,"col": 23,"name": "T","comptime": true},{"file": 11,"line": 648,"col": 41,"name": "buf"},{"file": 11,"line": 648,"col": 78,"name": "value"},{"file": 11,"line": 841,"col": 16,"name": "buffer"},{"file": 11,"line": 841,"col": 36,"name": "delimiter"},{"file": 11,"line": 1199,"col": 11,"name": "T","comptime": true},{"file": 11,"line": 1199,"col": 29,"name": "slice"},{"file": 11,"line": 422,"col": 24,"name": "T","comptime": true},{"file": 11,"line": 422,"col": 42,"name": "slice"},{"file": 11,"line": 422,"col": 60,"name": "start_index"},{"file": 11,"line": 422,"col": 80,"name": "value"},{"file": 11,"line": 665,"col": 16,"name": "T","comptime": true},{"file": 11,"line": 665,"col": 34,"name": "buffer"},{"file": 11,"line": 665,"col": 74,"name": "value"},{"file": 11,"line": 665,"col": 84,"name": "endian"},{"file": 11,"line": 1211,"col": 12,"name": "T","comptime": true},{"file": 11,"line": 1211,"col": 30,"name": "a"},{"file": 11,"line": 1211,"col": 37,"name": "b"},{"file": 11,"line": 413,"col": 25,"name": "T","comptime": true},{"file": 11,"line": 413,"col": 43,"name": "slice"},{"file": 11,"line": 413,"col": 61,"name": "value"},{"file": 11,"line": 679,"col": 27,"name": "T","comptime": true},{"file": 11,"line": 679,"col": 45,"name": "buffer"},{"file": 11,"line": 679,"col": 59,"name": "value"},{"file": 11,"line": 1187,"col": 11,"name": "T","comptime": true},{"file": 11,"line": 1187,"col": 29,"name": "slice"},{"file": 11,"line": 445,"col": 21,"name": "T","comptime": true},{"file": 11,"line": 445,"col": 39,"name": "slice"},{"file": 11,"line": 445,"col": 57,"name": "start_index"},{"file": 11,"line": 445,"col": 77,"name": "values"},{"file": 11,"line": 378,"col": 16,"name": "T","comptime": true},{"file": 11,"line": 378,"col": 34,"name": "slice"},{"file": 11,"line": 378,"col": 52,"name": "values_to_strip"},{"file": 11,"line": 504,"col": 18,"name": "ReturnType","comptime": true},{"file": 11,"line": 504,"col": 45,"name": "bytes"},{"file": 11,"line": 504,"col": 64,"name": "endian"},{"file": 11,"line": 1528,"col": 17,"name": "addr"},{"file": 11,"line": 1528,"col": 30,"name": "alignment"},{"file": 11,"line": 726,"col": 21,"name": "T","comptime": true},{"file": 11,"line": 726,"col": 39,"name": "buffer"},{"file": 11,"line": 726,"col": 53,"name": "value"},{"file": 11,"line": 726,"col": 63,"name": "endian"},{"file": 11,"line": 967,"col": 12,"name": "allocator"},{"file": 11,"line": 967,"col": 35,"name": "separator"},{"file": 11,"line": 967,"col": 58,"name": "slices"},{"file": 11,"line": 1002,"col": 14,"name": "allocator"},{"file": 11,"line": 1002,"col": 37,"name": "T","comptime": true},{"file": 11,"line": 1002,"col": 55,"name": "slices"},{"file": 11,"line": 1411,"col": 20,"name": "T","comptime": true},{"file": 11,"line": 1411,"col": 38,"name": "bytes"},{"file": 11,"line": 1289,"col": 16,"name": "T","comptime": true},{"file": 11,"line": 1289,"col": 34,"name": "x"},{"file": 11,"line": 1289,"col": 40,"name": "endianness_of_x"},{"file": 11,"line": 1305,"col": 22,"name": "T","comptime": true},{"file": 11,"line": 1305,"col": 40,"name": "x"},{"file": 11,"line": 593,"col": 20,"name": "T","comptime": true},{"file": 11,"line": 593,"col": 38,"name": "bytes"},{"file": 11,"line": 593,"col": 57,"name": "endian"},{"file": 11,"line": 1297,"col": 16,"name": "T","comptime": true},{"file": 11,"line": 1297,"col": 34,"name": "x"},{"file": 11,"line": 1297,"col": 40,"name": "desired_endianness"},{"file": 11,"line": 434,"col": 22,"name": "T","comptime": true},{"file": 11,"line": 434,"col": 40,"name": "slice"},{"file": 11,"line": 434,"col": 58,"name": "values"},{"file": 11,"line": 1273,"col": 22,"name": "T","comptime": true},{"file": 11,"line": 1273,"col": 40,"name": "x"},{"file": 11,"line": 1281,"col": 19,"name": "T","comptime": true},{"file": 11,"line": 1281,"col": 37,"name": "x"},{"file": 11,"line": 408,"col": 21,"name": "T","comptime": true},{"file": 11,"line": 408,"col": 39,"name": "slice"},{"file": 11,"line": 408,"col": 57,"name": "value"},{"file": 11,"line": 640,"col": 22,"name": "T","comptime": true},{"file": 11,"line": 640,"col": 40,"name": "buf"},{"file": 11,"line": 640,"col": 73,"name": "value"},{"file": 11,"line": 288,"col": 15,"name": "T","comptime": true},{"file": 11,"line": 288,"col": 33,"name": "lhs"},{"file": 11,"line": 288,"col": 49,"name": "rhs"},{"file": 11,"line": 430,"col": 18,"name": "T","comptime": true},{"file": 11,"line": 430,"col": 36,"name": "slice"},{"file": 11,"line": 430,"col": 54,"name": "values"},{"file": 11,"line": 322,"col": 16,"name": "T","comptime": true},{"file": 11,"line": 322,"col": 34,"name": "lhs"},{"file": 11,"line": 322,"col": 50,"name": "rhs"},{"file": 11,"line": 891,"col": 16,"name": "T","comptime": true},{"file": 11,"line": 891,"col": 34,"name": "haystack"},{"file": 11,"line": 891,"col": 55,"name": "needle"},{"file": 11,"line": 392,"col": 12,"name": "T","comptime": true},{"file": 11,"line": 392,"col": 30,"name": "slice"},{"file": 11,"line": 392,"col": 48,"name": "values_to_strip"},{"file": 11,"line": 535,"col": 22,"name": "T","comptime": true},{"file": 11,"line": 535,"col": 40,"name": "bytes"},{"file": 11,"line": 385,"col": 17,"name": "T","comptime": true},{"file": 11,"line": 385,"col": 35,"name": "slice"},{"file": 11,"line": 385,"col": 53,"name": "values_to_strip"},{"file": 11,"line": 270,"col": 18,"name": "T","comptime": true},{"file": 11,"line": 270,"col": 36,"name": "s"},{"file": 11,"line": 462,"col": 19,"name": "T","comptime": true},{"file": 11,"line": 462,"col": 37,"name": "haystack"},{"file": 11,"line": 462,"col": 58,"name": "needle"},{"file": 11,"line": 565,"col": 27,"name": "T","comptime": true},{"file": 11,"line": 565,"col": 45,"name": "bytes"},{"file": 11,"line": 252,"col": 21,"name": "T","comptime": true},{"file": 11,"line": 252,"col": 39,"name": "dest"},{"file": 11,"line": 252,"col": 50,"name": "source"},{"file": 11,"line": 363,"col": 16,"name": "T","comptime": true},{"file": 11,"line": 363,"col": 34,"name": "slice"},{"file": 11,"line": 363,"col": 52,"name": "scalar"},{"file": 11,"line": 582,"col": 15,"name": "T","comptime": true},{"file": 11,"line": 582,"col": 33,"name": "bytes"},{"file": 11,"line": 582,"col": 78,"name": "endian"},{"file": 11,"line": 1397,"col": 26,"name": "T","comptime": true},{"file": 11,"line": 1397,"col": 44,"name": "B","comptime": true},{"file": 11,"line": 1467,"col": 25,"name": "T","comptime": true},{"file": 11,"line": 1467,"col": 43,"name": "length","comptime": true},{"file": 64,"line": 249,"col": 16,"name": "path"},{"file": 64,"line": 262,"col": 18,"name": "self"},{"file": 64,"line": 262,"col": 40,"name": "name"},{"file": 64,"line": 257,"col": 17,"name": "self"},{"file": 65,"line": 74,"col": 16,"name": "self"},{"file": 65,"line": 70,"col": 18,"name": "self"},{"file": 65,"line": 143,"col": 17,"name": "context"},{"file": 65,"line": 143,"col": 31,"name": "startFn","comptime": true},{"file": 66,"line": 16,"col": 18,"name": "self"},{"file": 66,"line": 38,"col": 18,"name": "self"},{"file": 66,"line": 38,"col": 33,"name": "key"},{"file": 66,"line": 26,"col": 15,"name": "self"},{"file": 66,"line": 26,"col": 30,"name": "key"},{"file": 66,"line": 47,"col": 20,"name": "self"},{"file": 66,"line": 51,"col": 21,"name": "self"},{"file": 66,"line": 11,"col": 16,"name": "a"},{"file": 66,"line": 43,"col": 17,"name": "self"},{"file": 66,"line": 34,"col": 18,"name": "self"},{"file": 66,"line": 34,"col": 32,"name": "key"},{"file": 66,"line": 59,"col": 12,"name": "self"},{"file": 66,"line": 59,"col": 33,"name": "value"},{"file": 66,"line": 55,"col": 12,"name": "self"},{"file": 66,"line": 55,"col": 33,"name": "value"},{"file": 12,"line": 1000,"col": 16,"name": "dirfd"},{"file": 12,"line": 1000,"col": 29,"name": "file_path"},{"file": 12,"line": 1000,"col": 52,"name": "flags"},{"file": 12,"line": 2193,"col": 14,"name": "memory"},{"file": 12,"line": 762,"col": 33,"name": "allocator"},{"file": 12,"line": 762,"col": 60,"name": "env_map"},{"file": 12,"line": 1340,"col": 17,"name": "file_path"},{"file": 12,"line": 1340,"col": 41,"name": "out_buffer"},{"file": 12,"line": 2404,"col": 17,"name": "fd"},{"file": 12,"line": 2404,"col": 27,"name": "offset"},{"file": 12,"line": 2043,"col": 21,"name": "flags"},{"file": 12,"line": 1693,"col": 21,"name": "flags"},{"file": 12,"line": 702,"col": 16,"name": "file"},{"file": 12,"line": 702,"col": 35,"name": "child_argv"},{"file": 12,"line": 702,"col": 70,"name": "envp"},{"file": 12,"line": 1361,"col": 19,"name": "dirfd"},{"file": 12,"line": 1361,"col": 32,"name": "file_path"},{"file": 12,"line": 1361,"col": 56,"name": "out_buffer"},{"file": 12,"line": 959,"col": 14,"name": "file_path"},{"file": 12,"line": 815,"col": 15,"name": "key"},{"file": 12,"line": 2111,"col": 16,"name": "memory"},{"file": 12,"line": 2111,"col": 51,"name": "protection"},{"file": 12,"line": 1329,"col": 16,"name": "file_path"},{"file": 12,"line": 1329,"col": 39,"name": "out_buffer"},{"file": 12,"line": 1497,"col": 14,"name": "domain"},{"file": 12,"line": 1497,"col": 27,"name": "socket_type"},{"file": 12,"line": 1497,"col": 45,"name": "protocol"},{"file": 12,"line": 2227,"col": 15,"name": "path"},{"file": 12,"line": 2227,"col": 34,"name": "mode"},{"file": 12,"line": 910,"col": 17,"name": "target_path"},{"file": 12,"line": 910,"col": 42,"name": "newdirfd"},{"file": 12,"line": 910,"col": 58,"name": "sym_link_path"},{"file": 12,"line": 230,"col": 12,"name": "status"},{"file": 12,"line": 2087,"col": 24,"name": "inotify_fd"},{"file": 12,"line": 2087,"col": 41,"name": "wd"},{"file": 12,"line": 2285,"col": 13,"name": "flags"},{"file": 12,"line": 101,"col": 17,"name": "buffer"},{"file": 12,"line": 2789,"col": 19,"name": "name_buffer"},{"file": 12,"line": 2321,"col": 4,"name": "name"},{"file": 12,"line": 2322,"col": 4,"name": "oldp"},{"file": 12,"line": 2323,"col": 4,"name": "oldlenp"},{"file": 12,"line": 2324,"col": 4,"name": "newp"},{"file": 12,"line": 2325,"col": 4,"name": "newlen"},{"file": 12,"line": 1584,"col": 14,"name": "sockfd"},{"file": 12,"line": 1584,"col": 27,"name": "backlog"},{"file": 12,"line": 1898,"col": 23,"name": "sockfd"},{"file": 12,"line": 2156,"col": 4,"name": "ptr"},{"file": 12,"line": 2157,"col": 4,"name": "length"},{"file": 12,"line": 2158,"col": 4,"name": "prot"},{"file": 12,"line": 2159,"col": 4,"name": "flags"},{"file": 12,"line": 2160,"col": 4,"name": "fd"},{"file": 12,"line": 2161,"col": 4,"name": "offset"},{"file": 12,"line": 2562,"col": 17,"name": "seconds"},{"file": 12,"line": 2562,"col": 31,"name": "nanoseconds"},{"file": 12,"line": 970,"col": 15,"name": "file_path"},{"file": 12,"line": 675,"col": 15,"name": "path"},{"file": 12,"line": 675,"col": 34,"name": "child_argv"},{"file": 12,"line": 675,"col": 69,"name": "envp"},{"file": 12,"line": 567,"col": 12,"name": "file_path"},{"file": 12,"line": 567,"col": 35,"name": "flags"},{"file": 12,"line": 567,"col": 47,"name": "perm"},{"file": 12,"line": 1167,"col": 15,"name": "old_path"},{"file": 12,"line": 1167,"col": 39,"name": "new_path"},{"file": 12,"line": 1388,"col": 14,"name": "uid"},{"file": 12,"line": 1298,"col": 14,"name": "dir_path"},{"file": 12,"line": 2336,"col": 20,"name": "tv"},{"file": 12,"line": 2336,"col": 35,"name": "tz"},{"file": 12,"line": 1732,"col": 17,"name": "epfd"},{"file": 12,"line": 1732,"col": 28,"name": "op"},{"file": 12,"line": 1732,"col": 37,"name": "fd"},{"file": 12,"line": 1732,"col": 46,"name": "event"},{"file": 12,"line": 2304,"col": 4,"name": "name"},{"file": 12,"line": 2305,"col": 4,"name": "oldp"},{"file": 12,"line": 2306,"col": 4,"name": "oldlenp"},{"file": 12,"line": 2307,"col": 4,"name": "newp"},{"file": 12,"line": 2308,"col": 4,"name": "newlen"},{"file": 12,"line": 1949,"col": 13,"name": "fd"},{"file": 12,"line": 2726,"col": 19,"name": "ss"},{"file": 12,"line": 2726,"col": 34,"name": "old_ss"},{"file": 12,"line": 1240,"col": 13,"name": "dir_path"},{"file": 12,"line": 608,"col": 14,"name": "dir_fd"},{"file": 12,"line": 608,"col": 28,"name": "file_path"},{"file": 12,"line": 608,"col": 51,"name": "flags"},{"file": 12,"line": 608,"col": 63,"name": "mode"},{"file": 12,"line": 616,"col": 15,"name": "dir_fd"},{"file": 12,"line": 616,"col": 29,"name": "file_path"},{"file": 12,"line": 616,"col": 53,"name": "flags"},{"file": 12,"line": 616,"col": 65,"name": "mode"},{"file": 12,"line": 1872,"col": 21,"name": "sockfd"},{"file": 12,"line": 1872,"col": 34,"name": "sock_addr"},{"file": 12,"line": 1872,"col": 56,"name": "len"},{"file": 12,"line": 2216,"col": 14,"name": "path"},{"file": 12,"line": 2216,"col": 32,"name": "mode"},{"file": 12,"line": 1844,"col": 15,"name": "sockfd"},{"file": 12,"line": 1844,"col": 28,"name": "sock_addr"},{"file": 12,"line": 1844,"col": 50,"name": "len"},{"file": 12,"line": 2064,"col": 25,"name": "inotify_fd"},{"file": 12,"line": 2064,"col": 42,"name": "pathname"},{"file": 12,"line": 2064,"col": 64,"name": "mask"},{"file": 12,"line": 1201,"col": 14,"name": "dir_path"},{"file": 12,"line": 1201,"col": 37,"name": "mode"},{"file": 12,"line": 2586,"col": 23,"name": "T","comptime": true},{"file": 12,"line": 2586,"col": 41,"name": "callback"},{"file": 12,"line": 2586,"col": 112,"name": "data"},{"file": 12,"line": 1010,"col": 17,"name": "dirfd"},{"file": 12,"line": 1010,"col": 30,"name": "file_path_c"},{"file": 12,"line": 1010,"col": 56,"name": "flags"},{"file": 12,"line": 2741,"col": 17,"name": "sig"},{"file": 12,"line": 2741,"col": 26,"name": "act"},{"file": 12,"line": 2741,"col": 49,"name": "oact"},{"file": 12,"line": 2070,"col": 26,"name": "inotify_fd"},{"file": 12,"line": 2070,"col": 43,"name": "pathname"},{"file": 12,"line": 2070,"col": 66,"name": "mask"},{"file": 12,"line": 438,"col": 14,"name": "fd"},{"file": 12,"line": 438,"col": 24,"name": "iov"},{"file": 12,"line": 2493,"col": 16,"name": "pathname"},{"file": 12,"line": 2493,"col": 38,"name": "out_buffer"},{"file": 12,"line": 187,"col": 13,"name": "sig"},{"file": 12,"line": 2774,"col": 16,"name": "fd"},{"file": 12,"line": 2774,"col": 26,"name": "times"},{"file": 12,"line": 1932,"col": 15,"name": "pid"},{"file": 12,"line": 1932,"col": 25,"name": "flags"},{"file": 12,"line": 1548,"col": 12,"name": "fd"},{"file": 12,"line": 1548,"col": 21,"name": "addr"},{"file": 12,"line": 884,"col": 16,"name": "target_path"},{"file": 12,"line": 884,"col": 42,"name": "sym_link_path"},{"file": 12,"line": 575,"col": 13,"name": "file_path"},{"file": 12,"line": 575,"col": 37,"name": "flags"},{"file": 12,"line": 575,"col": 49,"name": "perm"},{"file": 12,"line": 1773,"col": 15,"name": "initval"},{"file": 12,"line": 1773,"col": 29,"name": "flags"},{"file": 12,"line": 870,"col": 15,"name": "target_path"},{"file": 12,"line": 870,"col": 40,"name": "sym_link_path"},{"file": 12,"line": 2432,"col": 21,"name": "fd"},{"file": 12,"line": 796,"col": 14,"name": "key"},{"file": 12,"line": 1752,"col": 18,"name": "epfd"},{"file": 12,"line": 1752,"col": 29,"name": "events"},{"file": 12,"line": 1752,"col": 52,"name": "timeout"},{"file": 12,"line": 734,"col": 4,"name": "allocator"},{"file": 12,"line": 735,"col": 4,"name": "argv_slice"},{"file": 12,"line": 736,"col": 4,"name": "env_map"},{"file": 12,"line": 1408,"col": 14,"name": "gid"},{"file": 12,"line": 2652,"col": 21,"name": "clk_id"},{"file": 12,"line": 2652,"col": 34,"name": "tp"},{"file": 12,"line": 1287,"col": 13,"name": "dir_path"},{"file": 12,"line": 916,"col": 18,"name": "target_path"},{"file": 12,"line": 916,"col": 44,"name": "newdirfd"},{"file": 12,"line": 916,"col": 60,"name": "sym_link_path"},{"file": 12,"line": 2503,"col": 17,"name": "pathname"},{"file": 12,"line": 2503,"col": 40,"name": "out_buffer"},{"file": 12,"line": 785,"col": 31,"name": "allocator"},{"file": 12,"line": 785,"col": 58,"name": "envp_buf"},{"file": 12,"line": 646,"col": 12,"name": "old_fd"},{"file": 12,"line": 646,"col": 26,"name": "new_fd"},{"file": 12,"line": 2007,"col": 4,"name": "kq"},{"file": 12,"line": 2008,"col": 4,"name": "changelist"},{"file": 12,"line": 2009,"col": 4,"name": "eventlist"},{"file": 12,"line": 2010,"col": 4,"name": "timeout"},{"file": 12,"line": 2710,"col": 23,"name": "err"},{"file": 12,"line": 1251,"col": 14,"name": "dir_path"},{"file": 12,"line": 219,"col": 12,"name": "pid"},{"file": 12,"line": 219,"col": 24,"name": "sig"},{"file": 12,"line": 315,"col": 14,"name": "fd"},{"file": 12,"line": 315,"col": 24,"name": "iov"},{"file": 12,"line": 315,"col": 44,"name": "offset"},{"file": 12,"line": 1398,"col": 16,"name": "ruid"},{"file": 12,"line": 1398,"col": 27,"name": "euid"},{"file": 12,"line": 1627,"col": 4,"docs": " This argument is a socket that has been created with `socket`, bound to a local address\n with `bind`, and is listening for connections after a `listen`.\n","name": "sockfd"},{"file": 12,"line": 1632,"col": 4,"docs": " This argument is a pointer to a sockaddr structure.  This structure is filled in with  the\n address  of  the  peer  socket, as known to the communications layer.  The exact format of the\n address returned addr is determined by the socket's address  family  (see  `socket`  and  the\n respective  protocol  man  pages).\n","name": "addr"},{"file": 12,"line": 1639,"col": 4,"docs": " This argument is a value-result argument: the caller must initialize it to contain  the\n size (in bytes) of the structure pointed to by addr; on return it will contain the actual size\n of the peer address.\n\n The returned address is truncated if the buffer provided is too small; in this  case,  `addr_size`\n will return a value greater than was supplied to the call.\n","name": "addr_size"},{"file": 12,"line": 1647,"col": 4,"docs": " If  flags  is  0, then `accept4` is the same as `accept`.  The following values can be bitwise\n ORed in flags to obtain different behavior:\n * `SOCK_NONBLOCK` - Set the `O_NONBLOCK` file status flag on the open file description (see `open`)\n   referred  to by the new file descriptor.  Using this flag saves extra calls to `fcntl` to achieve\n   the same result.\n * `SOCK_CLOEXEC`  - Set the close-on-exec (`FD_CLOEXEC`) flag on the new file descriptor.   See  the\n   description  of the `O_CLOEXEC` flag in `open` for reasons why this may be useful.\n","name": "flags"},{"file": 12,"line": 2672,"col": 25,"name": "pid"},{"file": 12,"line": 465,"col": 15,"name": "fd"},{"file": 12,"line": 465,"col": 25,"name": "iov"},{"file": 12,"line": 465,"col": 51,"name": "offset"},{"file": 12,"line": 1135,"col": 15,"name": "old_path"},{"file": 12,"line": 1135,"col": 38,"name": "new_path"},{"file": 12,"line": 1418,"col": 16,"name": "rgid"},{"file": 12,"line": 1418,"col": 27,"name": "egid"},{"file": 12,"line": 1122,"col": 14,"name": "old_path"},{"file": 12,"line": 1122,"col": 36,"name": "new_path"},{"file": 12,"line": 2661,"col": 20,"name": "clk_id"},{"file": 12,"line": 2661,"col": 33,"name": "res"},{"file": 12,"line": 1190,"col": 13,"name": "dir_path"},{"file": 12,"line": 1190,"col": 35,"name": "mode"},{"file": 12,"line": 1792,"col": 19,"name": "sockfd"},{"file": 12,"line": 2534,"col": 17,"name": "pathname"},{"file": 12,"line": 2534,"col": 41,"name": "out_buffer"},{"file": 12,"line": 1039,"col": 17,"name": "dirfd"},{"file": 12,"line": 1039,"col": 30,"name": "sub_path_w"},{"file": 12,"line": 1039,"col": 56,"name": "flags"},{"file": 12,"line": 2686,"col": 19,"name": "file_path"},{"file": 12,"line": 2254,"col": 15,"name": "path"},{"file": 12,"line": 2254,"col": 35,"name": "mode"},{"file": 12,"line": 143,"col": 28,"name": "buf"},{"file": 13,"line": 134,"col": 25,"name": "first_address"},{"file": 13,"line": 134,"col": 48,"name": "stack_trace"},{"file": 13,"line": 105,"col": 30,"name": "bp"},{"file": 13,"line": 105,"col": 41,"name": "ip"},{"file": 13,"line": 2444,"col": 28,"name": "prefix"},{"file": 13,"line": 770,"col": 33,"name": "debug_info"},{"file": 13,"line": 770,"col": 57,"name": "out_stream"},{"file": 13,"line": 770,"col": 74,"name": "address"},{"file": 13,"line": 770,"col": 90,"name": "tty_color"},{"file": 13,"line": 1026,"col": 26,"name": "di"},{"file": 13,"line": 1026,"col": 42,"name": "allocator"},{"file": 13,"line": 731,"col": 4,"name": "debug_info"},{"file": 13,"line": 732,"col": 4,"name": "out_stream"},{"file": 13,"line": 733,"col": 4,"name": "address"},{"file": 13,"line": 734,"col": 4,"name": "tty_color"},{"file": 13,"line": 735,"col": 4,"name": "printLineFromFile","comptime": true},{"file": 13,"line": 1035,"col": 4,"name": "allocator"},{"file": 13,"line": 1036,"col": 4,"name": "elf_seekable_stream"},{"file": 13,"line": 1037,"col": 4,"name": "elf_in_stream"},{"file": 13,"line": 1507,"col": 18,"name": "allocator"},{"file": 13,"line": 1507,"col": 45,"name": "in_stream"},{"file": 13,"line": 1507,"col": 61,"name": "size"},{"file": 13,"line": 1658,"col": 18,"name": "di"},{"file": 13,"line": 1658,"col": 34,"name": "abbrev_offset"},{"file": 13,"line": 2279,"col": 14,"name": "ptr"},{"file": 13,"line": 2279,"col": 33,"name": "T","comptime": true},{"file": 13,"line": 2279,"col": 51,"name": "endian"},{"file": 13,"line": 1557,"col": 32,"name": "in_stream"},{"file": 13,"line": 1490,"col": 17,"name": "allocator"},{"file": 13,"line": 1490,"col": 44,"name": "in_stream"},{"file": 13,"line": 1091,"col": 26,"name": "allocator"},{"file": 13,"line": 2293,"col": 21,"name": "ptr"},{"file": 13,"line": 2297,"col": 24,"name": "ptr"},{"file": 13,"line": 2297,"col": 43,"name": "is_64"},{"file": 13,"line": 1520,"col": 23,"name": "allocator"},{"file": 13,"line": 1520,"col": 50,"name": "in_stream"},{"file": 13,"line": 1520,"col": 66,"name": "size"},{"file": 13,"line": 1631,"col": 20,"name": "di"},{"file": 13,"line": 2182,"col": 23,"name": "di"},{"file": 13,"line": 1679,"col": 12,"name": "di"},{"file": 13,"line": 1679,"col": 28,"name": "abbrev_table"},{"file": 13,"line": 1679,"col": 62,"name": "is_64"},{"file": 13,"line": 1525,"col": 26,"name": "allocator"},{"file": 13,"line": 1525,"col": 53,"name": "in_stream"},{"file": 13,"line": 1525,"col": 69,"name": "signed"},{"file": 13,"line": 1525,"col": 83,"name": "size","comptime": true},{"file": 13,"line": 2068,"col": 22,"name": "di"},{"file": 13,"line": 2068,"col": 38,"name": "address"},{"file": 13,"line": 1514,"col": 26,"name": "allocator"},{"file": 13,"line": 1514,"col": 53,"name": "in_stream"},{"file": 13,"line": 1514,"col": 69,"name": "size"},{"file": 13,"line": 775,"col": 4,"name": "out_stream"},{"file": 13,"line": 776,"col": 4,"name": "line_info"},{"file": 13,"line": 777,"col": 4,"name": "address"},{"file": 13,"line": 778,"col": 4,"name": "symbol_name"},{"file": 13,"line": 779,"col": 4,"name": "compile_unit_name"},{"file": 13,"line": 780,"col": 4,"name": "tty_color"},{"file": 13,"line": 781,"col": 4,"name": "printLineFromFile","comptime": true},{"file": 13,"line": 1568,"col": 21,"name": "allocator"},{"file": 13,"line": 1568,"col": 48,"name": "in_stream"},{"file": 13,"line": 1568,"col": 64,"name": "size"},{"file": 13,"line": 1059,"col": 26,"name": "allocator"},{"file": 13,"line": 2247,"col": 19,"name": "di"},{"file": 13,"line": 2247,"col": 35,"name": "target_address"},{"file": 13,"line": 2319,"col": 21,"name": "E","comptime": true},{"file": 13,"line": 2319,"col": 39,"name": "in_stream"},{"file": 13,"line": 2319,"col": 67,"name": "is_64"},{"file": 13,"line": 1699,"col": 26,"name": "di"},{"file": 13,"line": 1699,"col": 42,"name": "symbol"},{"file": 13,"line": 1699,"col": 63,"name": "target_address"},{"file": 13,"line": 2080,"col": 20,"name": "di"},{"file": 13,"line": 2313,"col": 17,"name": "ptr"},{"file": 13,"line": 2287,"col": 15,"name": "ptr"},{"file": 13,"line": 1014,"col": 27,"name": "elf_file"},{"file": 13,"line": 1014,"col": 47,"name": "name"},{"file": 13,"line": 1552,"col": 33,"name": "in_stream"},{"file": 13,"line": 1552,"col": 49,"name": "is_64"},{"file": 13,"line": 669,"col": 22,"name": "symbols"},{"file": 13,"line": 669,"col": 52,"name": "address"},{"file": 13,"line": 1500,"col": 13,"name": "di"},{"file": 13,"line": 1500,"col": 29,"name": "offset"},{"file": 13,"line": 2395,"col": 30,"name": "sig"},{"file": 13,"line": 2395,"col": 40,"name": "info"},{"file": 13,"line": 2395,"col": 67,"name": "ctx_ptr"},{"file": 13,"line": 687,"col": 29,"name": "di"},{"file": 13,"line": 687,"col": 45,"name": "out_stream"},{"file": 13,"line": 687,"col": 62,"name": "address"},{"file": 13,"line": 687,"col": 78,"name": "tty_color"},{"file": 13,"line": 1672,"col": 23,"name": "abbrev_table"},{"file": 13,"line": 1672,"col": 57,"name": "abbrev_code"},{"file": 13,"line": 1897,"col": 26,"name": "di"},{"file": 13,"line": 1897,"col": 42,"name": "compile_unit"},{"file": 13,"line": 1897,"col": 69,"name": "target_address"},{"file": 13,"line": 1582,"col": 18,"name": "allocator"},{"file": 13,"line": 1582,"col": 45,"name": "in_stream"},{"file": 13,"line": 1582,"col": 61,"name": "form_id"},{"file": 13,"line": 1582,"col": 75,"name": "is_64"},{"file": 70,"line": 122,"col": 20,"name": "self"},{"file": 70,"line": 122,"col": 41,"name": "m"},{"file": 70,"line": 35,"col": 26,"name": "buffer"},{"file": 70,"line": 135,"col": 15,"name": "self"},{"file": 70,"line": 97,"col": 15,"name": "self"},{"file": 70,"line": 57,"col": 22,"name": "allocator"},{"file": 70,"line": 57,"col": 45,"name": "format","comptime": true},{"file": 70,"line": 57,"col": 74,"name": "args","varArgs": true},{"file": 70,"line": 20,"col": 20,"name": "allocator"},{"file": 70,"line": 20,"col": 43,"name": "size"},{"file": 70,"line": 78,"col": 24,"name": "self"},{"file": 70,"line": 129,"col": 27,"name": "self"},{"file": 70,"line": 129,"col": 42,"name": "m"},{"file": 70,"line": 107,"col": 22,"name": "self"},{"file": 70,"line": 107,"col": 37,"name": "byte"},{"file": 70,"line": 42,"col": 26,"name": "allocator"},{"file": 70,"line": 42,"col": 49,"name": "slice"},{"file": 70,"line": 117,"col": 22,"name": "self"},{"file": 70,"line": 117,"col": 43,"name": "m"},{"file": 70,"line": 88,"col": 18,"name": "self"},{"file": 70,"line": 88,"col": 33,"name": "new_len"},{"file": 70,"line": 101,"col": 18,"name": "self"},{"file": 70,"line": 101,"col": 33,"name": "m"},{"file": 70,"line": 30,"col": 20,"name": "allocator"},{"file": 70,"line": 70,"col": 18,"name": "self"},{"file": 70,"line": 82,"col": 18,"name": "self"},{"file": 70,"line": 82,"col": 33,"name": "new_len"},{"file": 70,"line": 50,"col": 24,"name": "self"},{"file": 70,"line": 13,"col": 16,"name": "allocator"},{"file": 70,"line": 13,"col": 39,"name": "m"},{"file": 70,"line": 93,"col": 18,"name": "self"},{"file": 70,"line": 113,"col": 15,"name": "self"},{"file": 70,"line": 113,"col": 36,"name": "m"},{"file": 70,"line": 74,"col": 19,"name": "self"},{"file": 15,"line": 129,"col": 25,"name": "T","comptime": true},{"file": 15,"line": 129,"col": 43,"name": "expected"},{"file": 15,"line": 129,"col": 64,"name": "actual"},{"file": 10,"line": 693,"col": 16,"name": "buffer"},{"file": 10,"line": 700,"col": 15,"name": "out_stream"},{"file": 10,"line": 700,"col": 36,"name": "bytes"},{"file": 17,"line": 459,"col": 14,"name": "bytes"},{"file": 17,"line": 451,"col": 13,"name": "bytes"},{"file": 17,"line": 451,"col": 32,"name": "expected_err"},{"file": 17,"line": 307,"col": 19,"name": "codePoint"},{"file": 17,"line": 307,"col": 35,"name": "array"},{"file": 17,"line": 307,"col": 48,"name": "expectedErr"},{"file": 17,"line": 455,"col": 13,"name": "bytes"},{"file": 17,"line": 455,"col": 32,"name": "expected_codepoint"},{"file": 18,"line": 2730,"col": 20,"name": "allocator"},{"file": 18,"line": 2730,"col": 43,"name": "output_path"},{"file": 18,"line": 2730,"col": 68,"name": "filename_major_only"},{"file": 18,"line": 2730,"col": 101,"name": "filename_name_only"},{"file": 18,"line": 1411,"col": 17,"name": "name"},{"file": 21,"line": 161,"col": 15,"name": "c"},{"file": 21,"line": 260,"col": 28,"name": "container"},{"file": 21,"line": 260,"col": 51,"name": "start_index"},{"file": 21,"line": 260,"col": 71,"name": "substr"},{"file": 21,"line": 244,"col": 21,"name": "a"},{"file": 21,"line": 244,"col": 36,"name": "b"},{"file": 21,"line": 177,"col": 15,"name": "c"},{"file": 21,"line": 169,"col": 15,"name": "c"},{"file": 21,"line": 189,"col": 16,"name": "c"},{"file": 21,"line": 197,"col": 15,"name": "c"},{"file": 21,"line": 209,"col": 15,"name": "c"},{"file": 21,"line": 181,"col": 15,"name": "c"},{"file": 21,"line": 165,"col": 15,"name": "c"},{"file": 21,"line": 185,"col": 15,"name": "c"},{"file": 21,"line": 153,"col": 15,"name": "c"},{"file": 21,"line": 272,"col": 25,"name": "container"},{"file": 21,"line": 272,"col": 48,"name": "substr"},{"file": 21,"line": 229,"col": 24,"name": "allocator"},{"file": 21,"line": 229,"col": 55,"name": "ascii_string"},{"file": 21,"line": 193,"col": 15,"name": "c"},{"file": 21,"line": 148,"col": 15,"name": "c"},{"file": 21,"line": 173,"col": 15,"name": "c"},{"file": 21,"line": 201,"col": 15,"name": "c"},{"file": 21,"line": 157,"col": 15,"name": "c"},{"file": 21,"line": 144,"col": 11,"name": "c"},{"file": 21,"line": 144,"col": 18,"name": "t"},{"file": 71,"line": 97,"col": 23,"name": "self"},{"file": 71,"line": 97,"col": 44,"name": "name"},{"file": 71,"line": 104,"col": 17,"name": "self"},{"file": 71,"line": 118,"col": 16,"name": "self"},{"file": 71,"line": 112,"col": 24,"name": "self"},{"file": 71,"line": 137,"col": 21,"name": "self"},{"file": 71,"line": 164,"col": 16,"name": "allocator"},{"file": 71,"line": 164,"col": 43,"name": "argv"},{"file": 71,"line": 164,"col": 69,"name": "cwd"},{"file": 71,"line": 164,"col": 87,"name": "env_map"},{"file": 71,"line": 164,"col": 112,"name": "max_output_size"},{"file": 71,"line": 148,"col": 16,"name": "self"},{"file": 71,"line": 214,"col": 18,"name": "self"},{"file": 71,"line": 126,"col": 23,"name": "self"},{"file": 71,"line": 126,"col": 44,"name": "exit_code"},{"file": 71,"line": 71,"col": 16,"name": "argv"},{"file": 71,"line": 71,"col": 42,"name": "allocator"},{"file": 71,"line": 236,"col": 21,"name": "self"},{"file": 71,"line": 283,"col": 20,"name": "status"},{"file": 71,"line": 204,"col": 17,"name": "self"},{"file": 71,"line": 242,"col": 24,"name": "self"},{"file": 71,"line": 242,"col": 45,"name": "status"},{"file": 71,"line": 246,"col": 22,"name": "self"},{"file": 71,"line": 294,"col": 18,"name": "self"},{"file": 71,"line": 218,"col": 28,"name": "self"},{"file": 71,"line": 261,"col": 24,"name": "self"},{"file": 71,"line": 261,"col": 45,"name": "status"},{"file": 71,"line": 405,"col": 20,"name": "self"},{"file": 71,"line": 606,"col": 20,"name": "stdio"},{"file": 71,"line": 606,"col": 34,"name": "pipe_fd"},{"file": 71,"line": 606,"col": 48,"name": "std_fileno"},{"file": 71,"line": 606,"col": 65,"name": "dev_null_fd"},{"file": 71,"line": 194,"col": 19,"name": "self"},{"file": 22,"line": 546,"col": 20,"name": "K","comptime": true},{"file": 22,"line": 554,"col": 26,"name": "K","comptime": true},{"file": 22,"line": 554,"col": 44,"name": "strategy","comptime": true},{"file": 23,"line": 1574,"col": 20,"name": "byte"},{"file": 23,"line": 570,"col": 4,"name": "c"},{"file": 23,"line": 571,"col": 4,"name": "options"},{"file": 23,"line": 572,"col": 4,"name": "context"},{"file": 23,"line": 573,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 574,"col": 4,"name": "output"},{"file": 23,"line": 695,"col": 4,"name": "value"},{"file": 23,"line": 696,"col": 4,"name": "options"},{"file": 23,"line": 697,"col": 4,"name": "context"},{"file": 23,"line": 698,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 699,"col": 4,"name": "output"},{"file": 23,"line": 1548,"col": 12,"name": "buf"},{"file": 23,"line": 840,"col": 4,"name": "value"},{"file": 23,"line": 841,"col": 4,"name": "options"},{"file": 23,"line": 842,"col": 4,"name": "radix","comptime": true},{"file": 23,"line": 843,"col": 4,"name": "context"},{"file": 23,"line": 844,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 845,"col": 4,"name": "output"},{"file": 23,"line": 1116,"col": 18,"name": "allocator"},{"file": 23,"line": 1116,"col": 45,"name": "fmt","comptime": true},{"file": 23,"line": 1116,"col": 71,"name": "args","varArgs": true},{"file": 23,"line": 994,"col": 16,"name": "T","comptime": true},{"file": 23,"line": 994,"col": 34,"name": "buf"},{"file": 23,"line": 994,"col": 51,"name": "radix"},{"file": 23,"line": 977,"col": 20,"name": "out_buf"},{"file": 23,"line": 977,"col": 35,"name": "value"},{"file": 23,"line": 977,"col": 47,"name": "base"},{"file": 23,"line": 977,"col": 57,"name": "uppercase"},{"file": 23,"line": 977,"col": 74,"name": "options"},{"file": 23,"line": 1581,"col": 18,"name": "out"},{"file": 23,"line": 1581,"col": 29,"name": "input"},{"file": 23,"line": 580,"col": 4,"name": "buf"},{"file": 23,"line": 581,"col": 4,"name": "options"},{"file": 23,"line": 582,"col": 4,"name": "context"},{"file": 23,"line": 583,"col": 4,"name": "Errors","comptime": true},{"file": 23,"line": 584,"col": 4,"name": "output"},{"file": 23,"line": 1024,"col": 21,"name": "T","comptime": true},{"file": 23,"line": 1024,"col": 39,"name": "buf"},{"file": 23,"line": 1024,"col": 56,"name": "radix"},{"file": 23,"line": 1125,"col": 13,"name": "size"},{"file": 23,"line": 1125,"col": 27,"name": "bytes"},{"file": 23,"line": 25,"col": 11,"name": "used_pos_args","comptime": true},{"file": 23,"line": 25,"col": 41,"name": "maybe_pos_arg","comptime": true},{"file": 23,"line": 25,"col": 80,"name": "next_arg","comptime": true},{"file": 23,"line": 36,"col": 15,"name": "fmt","comptime": true},{"file": 23,"line": 1535,"col": 11,"name": "expected"},{"file": 23,"line": 1535,"col": 33,"name": "template","comptime": true},{"file": 23,"line": 1535,"col": 64,"name": "args","varArgs": true},{"file": 23,"line": 1147,"col": 22,"name": "buf"},{"file": 23,"line": 1147,"col": 33,"name": "value"},{"file": 23,"line": 1147,"col": 45,"name": "base"},{"file": 23,"line": 1147,"col": 55,"name": "uppercase"},{"file": 23,"line": 1147,"col": 72,"name": "options"},{"file": 23,"line": 989,"col": 21,"name": "context"},{"file": 23,"line": 989,"col": 45,"name": "bytes"},{"file": 24,"line": 339,"col": 30,"name": "source"},{"file": 24,"line": 339,"col": 50,"name": "pad_char"},{"file": 24,"line": 435,"col": 13,"name": "encoded"},{"file": 24,"line": 435,"col": 34,"name": "expected_err"},{"file": 24,"line": 450,"col": 27,"name": "encoded"},{"file": 24,"line": 427,"col": 25,"name": "expected_decoded"},{"file": 24,"line": 427,"col": 55,"name": "encoded"},{"file": 24,"line": 391,"col": 15,"name": "expected_decoded"},{"file": 24,"line": 391,"col": 45,"name": "expected_encoded"},{"file": 26,"line": 971,"col": 16,"name": "s"},{"file": 26,"line": 911,"col": 13,"name": "p"},{"file": 26,"line": 911,"col": 30,"name": "id"},{"file": 73,"line": 42,"col": 15,"name": "self"},{"file": 73,"line": 42,"col": 30,"name": "key"},{"file": 73,"line": 42,"col": 47,"name": "value"},{"file": 73,"line": 18,"col": 18,"name": "self"},{"file": 73,"line": 32,"col": 19,"name": "self"},{"file": 73,"line": 32,"col": 34,"name": "key"},{"file": 73,"line": 32,"col": 45,"name": "value"},{"file": 73,"line": 61,"col": 18,"name": "self"},{"file": 73,"line": 61,"col": 33,"name": "key"},{"file": 73,"line": 71,"col": 20,"name": "self"},{"file": 73,"line": 13,"col": 16,"name": "allocator"},{"file": 73,"line": 67,"col": 17,"name": "self"},{"file": 73,"line": 56,"col": 15,"name": "self"},{"file": 73,"line": 56,"col": 29,"name": "key"},{"file": 73,"line": 79,"col": 12,"name": "self"},{"file": 73,"line": 79,"col": 26,"name": "value"},{"file": 73,"line": 75,"col": 12,"name": "self"},{"file": 73,"line": 75,"col": 26,"name": "value"},{"file": 31,"line": 111,"col": 12,"name": "T","comptime": true},{"file": 31,"line": 111,"col": 30,"name": "items"},{"file": 31,"line": 111,"col": 42,"name": "lessThan"},{"file": 31,"line": 1195,"col": 11,"name": "T","comptime": true},{"file": 31,"line": 1195,"col": 29,"name": "items"},{"file": 31,"line": 1195,"col": 41,"name": "lessThan"},{"file": 31,"line": 1206,"col": 11,"name": "T","comptime": true},{"file": 31,"line": 1206,"col": 29,"name": "items"},{"file": 31,"line": 1206,"col": 41,"name": "lessThan"},{"file": 31,"line": 981,"col": 12,"name": "T","comptime": true},{"file": 31,"line": 971,"col": 11,"name": "T","comptime": true},{"file": 31,"line": 8,"col": 21,"name": "T","comptime": true},{"file": 31,"line": 8,"col": 39,"name": "items"},{"file": 31,"line": 8,"col": 51,"name": "lessThan"},{"file": 31,"line": 841,"col": 19,"name": "T","comptime": true},{"file": 31,"line": 841,"col": 37,"name": "items"},{"file": 31,"line": 841,"col": 49,"name": "value"},{"file": 31,"line": 841,"col": 59,"name": "range"},{"file": 31,"line": 841,"col": 73,"name": "lessThan"},{"file": 31,"line": 841,"col": 99,"name": "unique"},{"file": 31,"line": 1174,"col": 12,"name": "rng"},{"file": 31,"line": 905,"col": 13,"name": "T","comptime": true},{"file": 31,"line": 905,"col": 31,"name": "from"},{"file": 31,"line": 905,"col": 42,"name": "A"},{"file": 31,"line": 905,"col": 52,"name": "B"},{"file": 31,"line": 905,"col": 62,"name": "lessThan"},{"file": 31,"line": 905,"col": 88,"name": "into"},{"file": 31,"line": 735,"col": 16,"name": "T","comptime": true},{"file": 31,"line": 735,"col": 34,"name": "items"},{"file": 31,"line": 735,"col": 46,"name": "A_arg"},{"file": 31,"line": 735,"col": 60,"name": "B_arg"},{"file": 31,"line": 735,"col": 74,"name": "lessThan"},{"file": 31,"line": 887,"col": 14,"name": "T","comptime": true},{"file": 31,"line": 887,"col": 32,"name": "items"},{"file": 31,"line": 887,"col": 44,"name": "value"},{"file": 31,"line": 887,"col": 54,"name": "range"},{"file": 31,"line": 887,"col": 68,"name": "lessThan"},{"file": 31,"line": 813,"col": 20,"name": "T","comptime": true},{"file": 31,"line": 813,"col": 38,"name": "items"},{"file": 31,"line": 813,"col": 50,"name": "value"},{"file": 31,"line": 813,"col": 60,"name": "range"},{"file": 31,"line": 813,"col": 74,"name": "lessThan"},{"file": 31,"line": 813,"col": 100,"name": "unique"},{"file": 31,"line": 963,"col": 8,"name": "T","comptime": true},{"file": 31,"line": 963,"col": 26,"name": "items"},{"file": 31,"line": 963,"col": 38,"name": "lessThan"},{"file": 31,"line": 963,"col": 74,"name": "order"},{"file": 31,"line": 963,"col": 89,"name": "x"},{"file": 31,"line": 963,"col": 99,"name": "y"},{"file": 31,"line": 935,"col": 17,"name": "T","comptime": true},{"file": 31,"line": 935,"col": 35,"name": "items"},{"file": 31,"line": 935,"col": 47,"name": "A"},{"file": 31,"line": 935,"col": 57,"name": "B"},{"file": 31,"line": 935,"col": 67,"name": "lessThan"},{"file": 31,"line": 935,"col": 93,"name": "cache"},{"file": 31,"line": 827,"col": 21,"name": "T","comptime": true},{"file": 31,"line": 827,"col": 39,"name": "items"},{"file": 31,"line": 827,"col": 51,"name": "value"},{"file": 31,"line": 827,"col": 61,"name": "range"},{"file": 31,"line": 827,"col": 75,"name": "lessThan"},{"file": 31,"line": 827,"col": 101,"name": "unique"},{"file": 31,"line": 855,"col": 20,"name": "T","comptime": true},{"file": 31,"line": 855,"col": 38,"name": "items"},{"file": 31,"line": 855,"col": 50,"name": "value"},{"file": 31,"line": 855,"col": 60,"name": "range"},{"file": 31,"line": 855,"col": 74,"name": "lessThan"},{"file": 31,"line": 855,"col": 100,"name": "unique"},{"file": 31,"line": 869,"col": 15,"name": "T","comptime": true},{"file": 31,"line": 869,"col": 33,"name": "items"},{"file": 31,"line": 869,"col": 45,"name": "value"},{"file": 31,"line": 869,"col": 55,"name": "range"},{"file": 31,"line": 869,"col": 69,"name": "lessThan"},{"file": 31,"line": 804,"col": 13,"name": "T","comptime": true},{"file": 31,"line": 804,"col": 31,"name": "items"},{"file": 31,"line": 804,"col": 43,"name": "start1"},{"file": 31,"line": 804,"col": 58,"name": "start2"},{"file": 31,"line": 804,"col": 73,"name": "block_size"},{"file": 31,"line": 1043,"col": 14,"name": "a"},{"file": 31,"line": 1043,"col": 29,"name": "b"},{"file": 31,"line": 777,"col": 17,"name": "T","comptime": true},{"file": 31,"line": 777,"col": 35,"name": "items"},{"file": 31,"line": 777,"col": 47,"name": "A"},{"file": 31,"line": 777,"col": 57,"name": "B"},{"file": 31,"line": 777,"col": 67,"name": "lessThan"},{"file": 31,"line": 777,"col": 93,"name": "buffer"},{"file": 32,"line": 82,"col": 27,"name": "dirfd"},{"file": 32,"line": 82,"col": 40,"name": "path"},{"file": 32,"line": 82,"col": 59,"name": "flags"},{"file": 32,"line": 79,"col": 25,"name": "addr"},{"file": 32,"line": 79,"col": 57,"name": "len"},{"file": 32,"line": 125,"col": 32,"name": "alignment"},{"file": 32,"line": 125,"col": 50,"name": "size"},{"file": 32,"line": 94,"col": 22,"name": "fd"},{"file": 32,"line": 117,"col": 29,"name": "sockfd"},{"file": 32,"line": 117,"col": 43,"name": "level"},{"file": 32,"line": 117,"col": 57,"name": "optname"},{"file": 32,"line": 117,"col": 73,"name": "optval"},{"file": 32,"line": 117,"col": 90,"name": "optlen"},{"file": 32,"line": 81,"col": 25,"name": "path"},{"file": 32,"line": 108,"col": 34,"name": "name"},{"file": 32,"line": 108,"col": 53,"name": "mibp"},{"file": 32,"line": 108,"col": 68,"name": "sizep"},{"file": 32,"line": 54,"col": 25,"name": "ptr"},{"file": 32,"line": 54,"col": 43,"name": "size_of_type"},{"file": 32,"line": 54,"col": 64,"name": "item_count"},{"file": 32,"line": 54,"col": 83,"name": "stream"},{"file": 32,"line": 80,"col": 27,"name": "addr"},{"file": 32,"line": 80,"col": 59,"name": "len"},{"file": 32,"line": 80,"col": 71,"name": "prot"},{"file": 32,"line": 96,"col": 27,"name": "path","noalias": true},{"file": 32,"line": 96,"col": 54,"name": "buf","noalias": true},{"file": 32,"line": 96,"col": 74,"name": "bufsize"},{"file": 32,"line": 112,"col": 25,"name": "domain"},{"file": 32,"line": 112,"col": 41,"name": "sock_type"},{"file": 32,"line": 112,"col": 60,"name": "protocol"},{"file": 32,"line": 119,"col": 32,"name": "fd"},{"file": 32,"line": 119,"col": 42,"name": "buf_ptr"},{"file": 32,"line": 119,"col": 58,"name": "nbytes"},{"file": 32,"line": 119,"col": 73,"name": "basep"},{"file": 32,"line": 55,"col": 24,"name": "ptr"},{"file": 32,"line": 55,"col": 36,"name": "size_of_type"},{"file": 32,"line": 55,"col": 57,"name": "item_count"},{"file": 32,"line": 55,"col": 76,"name": "stream"},{"file": 32,"line": 59,"col": 23,"name": "code"},{"file": 32,"line": 65,"col": 24,"name": "fd"},{"file": 32,"line": 65,"col": 34,"name": "offset"},{"file": 32,"line": 65,"col": 49,"name": "whence"},{"file": 32,"line": 129,"col": 33,"name": "memptr"},{"file": 32,"line": 129,"col": 51,"name": "alignment"},{"file": 32,"line": 129,"col": 69,"name": "size"},{"file": 32,"line": 88,"col": 24,"name": "fds"},{"file": 32,"line": 88,"col": 39,"name": "flags"},{"file": 32,"line": 135,"col": 36,"name": "attr"},{"file": 32,"line": 75,"col": 23,"name": "path","noalias": true},{"file": 32,"line": 75,"col": 50,"name": "buf","noalias": true},{"file": 32,"line": 110,"col": 30,"name": "name"},{"file": 32,"line": 110,"col": 43,"name": "len"},{"file": 32,"line": 113,"col": 25,"name": "sockfd"},{"file": 32,"line": 113,"col": 39,"name": "backlog"},{"file": 32,"line": 57,"col": 25,"name": "format"},{"file": 32,"line": 57,"col": 46,"varArgs": true},{"file": 32,"line": 78,"col": 23,"name": "addr"},{"file": 32,"line": 78,"col": 56,"name": "len"},{"file": 32,"line": 78,"col": 68,"name": "prot"},{"file": 32,"line": 78,"col": 82,"name": "flags"},{"file": 32,"line": 78,"col": 97,"name": "fd"},{"file": 32,"line": 78,"col": 107,"name": "offset"},{"file": 32,"line": 101,"col": 28,"name": "rqtp"},{"file": 32,"line": 101,"col": 51,"name": "rmtp"},{"file": 32,"line": 98,"col": 30,"name": "how"},{"file": 32,"line": 98,"col": 42,"name": "set","noalias": true},{"file": 32,"line": 98,"col": 72,"name": "oset","noalias": true},{"file": 32,"line": 134,"col": 33,"name": "newthread","noalias": true},{"file": 32,"line": 134,"col": 64,"name": "attr","noalias": true},{"file": 32,"line": 134,"col": 102,"name": "start_routine"},{"file": 32,"line": 134,"col": 148,"name": "arg","noalias": true},{"file": 32,"line": 70,"col": 24,"name": "fd"},{"file": 32,"line": 70,"col": 35,"name": "iov"},{"file": 32,"line": 70,"col": 56,"name": "iovcnt"},{"file": 32,"line": 66,"col": 23,"name": "path"},{"file": 32,"line": 66,"col": 42,"name": "oflag"},{"file": 32,"line": 66,"col": 57,"varArgs": true},{"file": 32,"line": 64,"col": 35,"name": "fd"},{"file": 32,"line": 64,"col": 45,"name": "buf"},{"file": 32,"line": 83,"col": 25,"name": "buf"},{"file": 32,"line": 83,"col": 37,"name": "size"},{"file": 32,"line": 121,"col": 25,"name": "uid"},{"file": 32,"line": 99,"col": 31,"name": "tv","noalias": true},{"file": 32,"line": 99,"col": 54,"name": "tz","noalias": true},{"file": 32,"line": 106,"col": 25,"name": "name"},{"file": 32,"line": 106,"col": 47,"name": "namelen"},{"file": 32,"line": 106,"col": 64,"name": "oldp"},{"file": 32,"line": 106,"col": 80,"name": "oldlenp"},{"file": 32,"line": 106,"col": 98,"name": "newp"},{"file": 32,"line": 106,"col": 114,"name": "newlen"},{"file": 32,"line": 128,"col": 23},{"file": 32,"line": 63,"col": 24,"name": "fd"},{"file": 32,"line": 63,"col": 34,"name": "buf"},{"file": 32,"line": 104,"col": 24,"name": "path"},{"file": 32,"line": 67,"col": 25,"name": "fd"},{"file": 32,"line": 67,"col": 36,"name": "path"},{"file": 32,"line": 67,"col": 55,"name": "oflag"},{"file": 32,"line": 67,"col": 70,"varArgs": true},{"file": 32,"line": 60,"col": 25,"name": "fd"},{"file": 32,"line": 15,"col": 16,"name": "rc"},{"file": 32,"line": 86,"col": 25,"name": "path"},{"file": 32,"line": 86,"col": 44,"name": "mode"},{"file": 32,"line": 53,"col": 25,"name": "stream"},{"file": 32,"line": 115,"col": 26,"name": "sockfd"},{"file": 32,"line": 115,"col": 40,"name": "sock_addr"},{"file": 32,"line": 115,"col": 68,"name": "addrlen"},{"file": 32,"line": 100,"col": 28,"name": "sig"},{"file": 32,"line": 100,"col": 40,"name": "act","noalias": true},{"file": 32,"line": 100,"col": 71,"name": "oact","noalias": true},{"file": 32,"line": 139,"col": 31,"name": "thread"},{"file": 32,"line": 139,"col": 50,"name": "arg_return"},{"file": 32,"line": 73,"col": 25,"name": "fd"},{"file": 32,"line": 73,"col": 36,"name": "iov"},{"file": 32,"line": 73,"col": 63,"name": "iovcnt"},{"file": 32,"line": 97,"col": 27,"name": "file_name","noalias": true},{"file": 32,"line": 97,"col": 59,"name": "resolved_name","noalias": true},{"file": 32,"line": 68,"col": 24,"name": "sig"},{"file": 32,"line": 61,"col": 24,"name": "fd"},{"file": 32,"line": 132,"col": 27,"name": "fd"},{"file": 32,"line": 132,"col": 37,"name": "times"},{"file": 32,"line": 84,"col": 26,"name": "pid"},{"file": 32,"line": 84,"col": 38,"name": "stat_loc"},{"file": 32,"line": 84,"col": 57,"name": "options"},{"file": 32,"line": 111,"col": 23,"name": "socket"},{"file": 32,"line": 111,"col": 37,"name": "address"},{"file": 32,"line": 111,"col": 64,"name": "address_len"},{"file": 32,"line": 71,"col": 24,"name": "fd"},{"file": 32,"line": 71,"col": 34,"name": "buf"},{"file": 32,"line": 71,"col": 46,"name": "nbyte"},{"file": 32,"line": 71,"col": 60,"name": "offset"},{"file": 32,"line": 127,"col": 26},{"file": 32,"line": 127,"col": 36},{"file": 32,"line": 126,"col": 25},{"file": 32,"line": 77,"col": 25,"name": "fd"},{"file": 32,"line": 77,"col": 35,"name": "buf"},{"file": 32,"line": 77,"col": 53,"name": "nbyte"},{"file": 32,"line": 77,"col": 67,"name": "offset"},{"file": 32,"line": 90,"col": 26,"name": "existing"},{"file": 32,"line": 90,"col": 49,"name": "new"},{"file": 32,"line": 131,"col": 28,"name": "dirfd"},{"file": 32,"line": 131,"col": 41,"name": "pathname"},{"file": 32,"line": 131,"col": 64,"name": "times"},{"file": 32,"line": 131,"col": 85,"name": "flags"},{"file": 32,"line": 105,"col": 25,"name": "name"},{"file": 32,"line": 76,"col": 24,"name": "fd"},{"file": 32,"line": 76,"col": 34,"name": "buf"},{"file": 32,"line": 76,"col": 52,"name": "nbyte"},{"file": 32,"line": 120,"col": 25,"name": "ruid"},{"file": 32,"line": 120,"col": 39,"name": "euid"},{"file": 32,"line": 122,"col": 32,"name": "clk_id"},{"file": 32,"line": 122,"col": 47,"name": "tp"},{"file": 32,"line": 92,"col": 24,"name": "path"},{"file": 32,"line": 95,"col": 23,"name": "old_fd"},{"file": 32,"line": 95,"col": 37,"name": "new_fd"},{"file": 32,"line": 136,"col": 40,"name": "attr"},{"file": 32,"line": 136,"col": 63,"name": "stackaddr"},{"file": 32,"line": 136,"col": 83,"name": "stacksize"},{"file": 32,"line": 137,"col": 39,"name": "attr"},{"file": 32,"line": 143,"col": 4,"name": "kq"},{"file": 32,"line": 144,"col": 4,"name": "changelist"},{"file": 32,"line": 145,"col": 4,"name": "nchanges"},{"file": 32,"line": 146,"col": 4,"name": "eventlist"},{"file": 32,"line": 147,"col": 4,"name": "nevents"},{"file": 32,"line": 148,"col": 4,"name": "timeout"},{"file": 32,"line": 118,"col": 23,"name": "pid"},{"file": 32,"line": 118,"col": 35,"name": "sig"},{"file": 32,"line": 72,"col": 25,"name": "fd"},{"file": 32,"line": 72,"col": 36,"name": "iov"},{"file": 32,"line": 72,"col": 57,"name": "iovcnt"},{"file": 32,"line": 72,"col": 73,"name": "offset"},{"file": 32,"line": 102,"col": 27,"name": "ruid"},{"file": 32,"line": 102,"col": 41,"name": "euid"},{"file": 32,"line": 93,"col": 25,"name": "path"},{"file": 32,"line": 93,"col": 44,"name": "argv"},{"file": 32,"line": 93,"col": 73,"name": "envp"},{"file": 32,"line": 116,"col": 26,"name": "sockfd"},{"file": 32,"line": 116,"col": 40,"name": "addr"},{"file": 32,"line": 116,"col": 57,"name": "addrlen"},{"file": 32,"line": 116,"col": 78,"name": "flags"},{"file": 32,"line": 74,"col": 26,"name": "fd"},{"file": 32,"line": 74,"col": 37,"name": "iov"},{"file": 32,"line": 74,"col": 64,"name": "iovcnt"},{"file": 32,"line": 74,"col": 80,"name": "offset"},{"file": 32,"line": 30,"col": 20,"name": "glibc_version"},{"file": 32,"line": 103,"col": 27,"name": "rgid"},{"file": 32,"line": 103,"col": 41,"name": "egid"},{"file": 32,"line": 69,"col": 23,"name": "fd"},{"file": 32,"line": 69,"col": 33,"name": "buf"},{"file": 32,"line": 69,"col": 45,"name": "nbyte"},{"file": 32,"line": 52,"col": 24,"name": "filename"},{"file": 32,"line": 52,"col": 47,"name": "modes"},{"file": 32,"line": 91,"col": 25,"name": "old"},{"file": 32,"line": 91,"col": 43,"name": "new"},{"file": 32,"line": 123,"col": 31,"name": "clk_id"},{"file": 32,"line": 123,"col": 46,"name": "tp"},{"file": 32,"line": 89,"col": 24,"name": "path"},{"file": 32,"line": 89,"col": 43,"name": "mode"},{"file": 32,"line": 114,"col": 30,"name": "sockfd"},{"file": 32,"line": 114,"col": 44,"name": "addr","noalias": true},{"file": 32,"line": 114,"col": 69,"name": "addrlen","noalias": true},{"file": 32,"line": 62,"col": 36,"name": "fd"},{"file": 32,"line": 107,"col": 31,"name": "name"},{"file": 32,"line": 107,"col": 50,"name": "oldp"},{"file": 32,"line": 107,"col": 66,"name": "oldlenp"},{"file": 32,"line": 107,"col": 84,"name": "newp"},{"file": 32,"line": 107,"col": 100,"name": "newlen"},{"file": 32,"line": 87,"col": 23,"name": "fds"},{"file": 33,"line": 11,"col": 11,"name": "a"},{"file": 33,"line": 11,"col": 27,"name": "b"},{"file": 33,"line": 35,"col": 19,"name": "allocator"},{"file": 33,"line": 35,"col": 46,"name": "slice"},{"file": 34,"line": 412,"col": 14,"name": "node"},{"file": 34,"line": 412,"col": 27,"name": "tree"},{"file": 34,"line": 498,"col": 15,"name": "l"},{"file": 34,"line": 498,"col": 25,"name": "r"},{"file": 34,"line": 494,"col": 17,"name": "node"},{"file": 34,"line": 438,"col": 15,"name": "node"},{"file": 34,"line": 438,"col": 28,"name": "tree"},{"file": 34,"line": 464,"col": 12,"name": "key"},{"file": 34,"line": 464,"col": 24,"name": "tree"},{"file": 34,"line": 464,"col": 37,"name": "pparent"},{"file": 34,"line": 464,"col": 55,"name": "is_left"},{"file": 35,"line": 1072,"col": 12,"name": "s"},{"file": 35,"line": 1091,"col": 17,"name": "r"},{"file": 35,"line": 1091,"col": 29,"name": "start"},{"file": 35,"line": 1091,"col": 40,"name": "end"},{"file": 35,"line": 1091,"col": 49,"name": "biased"},{"file": 35,"line": 1087,"col": 13,"name": "r"},{"file": 35,"line": 1087,"col": 25,"name": "start"},{"file": 35,"line": 1087,"col": 36,"name": "end"},{"file": 36,"line": 393,"col": 11,"name": "a"},{"file": 36,"line": 393,"col": 19,"name": "b"},{"file": 36,"line": 74,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 161,"col": 20,"name": "T","comptime": true},{"file": 36,"line": 547,"col": 18,"name": "T","comptime": true},{"file": 36,"line": 547,"col": 36,"name": "name","comptime": true},{"file": 36,"line": 278,"col": 17,"name": "T","comptime": true},{"file": 36,"line": 278,"col": 35,"name": "field_name","comptime": true},{"file": 36,"line": 341,"col": 17,"name": "u"},{"file": 36,"line": 197,"col": 23,"name": "T","comptime": true},{"file": 36,"line": 197,"col": 41,"name": "decl_name","comptime": true},{"file": 36,"line": 318,"col": 15,"name": "T","comptime": true},{"file": 36,"line": 118,"col": 23,"name": "T","comptime": true},{"file": 36,"line": 12,"col": 15,"name": "v"},{"file": 36,"line": 534,"col": 17,"name": "Tag","comptime": true},{"file": 36,"line": 534,"col": 37,"name": "tag_int"},{"file": 36,"line": 366,"col": 22,"name": "U","comptime": true},{"file": 36,"line": 366,"col": 40,"name": "tag"},{"file": 36,"line": 55,"col": 20,"name": "T","comptime": true},{"file": 36,"line": 55,"col": 38,"name": "str"},{"file": 36,"line": 233,"col": 14,"name": "T","comptime": true},{"file": 37,"line": 218,"col": 25,"name": "path"},{"file": 37,"line": 203,"col": 20,"name": "buf"},{"file": 37,"line": 203,"col": 37,"name": "expected_err"},{"file": 38,"line": 289,"col": 16,"name": "allocator"},{"file": 38,"line": 289,"col": 39,"name": "full_path"},{"file": 38,"line": 1136,"col": 16,"name": "pathname"},{"file": 38,"line": 1136,"col": 38,"name": "buffer"},{"file": 38,"line": 333,"col": 18,"name": "dir_path"},{"file": 38,"line": 1112,"col": 16,"name": "allocator"},{"file": 38,"line": 1112,"col": 39,"name": "dir_path"},{"file": 38,"line": 1181,"col": 19,"name": "out_buffer"},{"file": 38,"line": 87,"col": 22,"name": "source_path"},{"file": 38,"line": 87,"col": 47,"name": "dest_path"},{"file": 38,"line": 87,"col": 70,"name": "mode"},{"file": 38,"line": 323,"col": 17,"name": "dir_path"},{"file": 38,"line": 156,"col": 16,"name": "source_path"},{"file": 38,"line": 156,"col": 41,"name": "dest_path"},{"file": 38,"line": 179,"col": 20,"name": "source_path"},{"file": 38,"line": 179,"col": 45,"name": "dest_path"},{"file": 38,"line": 179,"col": 68,"name": "mode"},{"file": 38,"line": 1247,"col": 21,"name": "allocator"},{"file": 38,"line": 1247,"col": 44,"name": "pathname"},{"file": 38,"line": 342,"col": 18,"name": "full_path"},{"file": 38,"line": 270,"col": 15,"name": "dir_path"},{"file": 38,"line": 1222,"col": 27,"name": "allocator"},{"file": 38,"line": 280,"col": 16,"name": "dir_path"},{"file": 38,"line": 77,"col": 18,"name": "source_path"},{"file": 38,"line": 77,"col": 43,"name": "dest_path"},{"file": 38,"line": 1229,"col": 22,"name": "out_buffer"},{"file": 38,"line": 328,"col": 18,"name": "dir_path"},{"file": 38,"line": 275,"col": 16,"name": "dir_path"},{"file": 38,"line": 43,"col": 21,"name": "allocator"},{"file": 38,"line": 43,"col": 44,"name": "existing_path"},{"file": 38,"line": 43,"col": 71,"name": "new_path"},{"file": 38,"line": 1141,"col": 17,"name": "pathname_c"},{"file": 38,"line": 1141,"col": 42,"name": "buffer"},{"file": 39,"line": 639,"col": 21,"name": "size","comptime": true},{"file": 39,"line": 639,"col": 43,"name": "fallback_allocator"},{"file": 39,"line": 651,"col": 30,"name": "size","comptime": true},{"file": 39,"line": 867,"col": 24,"name": "allocator"},{"file": 39,"line": 867,"col": 51,"name": "alignment","comptime": true},{"file": 39,"line": 920,"col": 30,"name": "allocator"},{"file": 39,"line": 490,"col": 39},{"file": 39,"line": 839,"col": 17,"name": "allocator"},{"file": 39,"line": 27,"col": 11,"name": "self"},{"file": 39,"line": 27,"col": 29,"name": "old_mem"},{"file": 39,"line": 27,"col": 44,"name": "old_align"},{"file": 39,"line": 27,"col": 60,"name": "new_size"},{"file": 39,"line": 27,"col": 77,"name": "new_align"},{"file": 39,"line": 20,"col": 12,"name": "self"},{"file": 39,"line": 20,"col": 30,"name": "old_mem"},{"file": 39,"line": 20,"col": 45,"name": "old_align"},{"file": 39,"line": 20,"col": 61,"name": "new_size"},{"file": 39,"line": 20,"col": 78,"name": "new_align"},{"file": 39,"line": 891,"col": 31,"name": "allocator"},{"file": 39,"line": 491,"col": 39},{"file": 39,"line": 491,"col": 44},{"file": 40,"line": 10,"col": 13,"name": "nanoseconds"},{"file": 41,"line": 5,"col": 19,"name": "Int","comptime": true},{"file": 41,"line": 5,"col": 39,"name": "endian","comptime": true},{"file": 42,"line": 196,"col": 21,"name": "pool"},{"file": 42,"line": 196,"col": 34,"name": "addrA"},{"file": 42,"line": 196,"col": 48,"name": "mem"},{"file": 42,"line": 201,"col": 21,"name": "pool"},{"file": 42,"line": 213,"col": 23,"name": "id"},{"file": 42,"line": 157,"col": 21,"name": "addr"},{"file": 42,"line": 157,"col": 34,"name": "rzB"},{"file": 42,"line": 153,"col": 26,"name": "oldmem"},{"file": 42,"line": 153,"col": 40,"name": "newsize"},{"file": 42,"line": 153,"col": 56,"name": "rzB"},{"file": 42,"line": 77,"col": 16,"name": "base"},{"file": 42,"line": 181,"col": 19,"name": "pool"},{"file": 42,"line": 181,"col": 32,"name": "addr"},{"file": 42,"line": 166,"col": 21,"name": "pool"},{"file": 42,"line": 166,"col": 34,"name": "rzB"},{"file": 42,"line": 166,"col": 46,"name": "is_zeroed"},{"file": 42,"line": 166,"col": 63,"name": "flags"},{"file": 42,"line": 137,"col": 20,"name": "func"},{"file": 42,"line": 137,"col": 65,"name": "a1"},{"file": 42,"line": 137,"col": 76,"name": "a2"},{"file": 42,"line": 137,"col": 87,"name": "a3"},{"file": 42,"line": 261,"col": 22,"name": "command"},{"file": 42,"line": 176,"col": 20,"name": "pool"},{"file": 42,"line": 176,"col": 33,"name": "mem"},{"file": 42,"line": 107,"col": 20,"name": "qzz"},{"file": 42,"line": 186,"col": 19,"name": "pool"},{"file": 42,"line": 186,"col": 32,"name": "mem"},{"file": 42,"line": 133,"col": 20,"name": "func"},{"file": 42,"line": 133,"col": 58,"name": "a1"},{"file": 42,"line": 133,"col": 69,"name": "a2"},{"file": 42,"line": 235,"col": 21,"name": "addr"},{"file": 42,"line": 235,"col": 38,"name": "buf64"},{"file": 42,"line": 129,"col": 20,"name": "func"},{"file": 42,"line": 129,"col": 51,"name": "a1"},{"file": 42,"line": 103,"col": 27,"name": "qzz"},{"file": 42,"line": 149,"col": 23,"name": "mem"},{"file": 42,"line": 149,"col": 34,"name": "rzB"},{"file": 42,"line": 149,"col": 46,"name": "is_zeroed"},{"file": 42,"line": 208,"col": 21,"name": "stack"},{"file": 42,"line": 191,"col": 19,"name": "poolA"},{"file": 42,"line": 191,"col": 33,"name": "poolB"},{"file": 42,"line": 171,"col": 22,"name": "pool"},{"file": 42,"line": 80,"col": 14,"name": "base"},{"file": 42,"line": 80,"col": 27,"name": "code"},{"file": 42,"line": 125,"col": 20,"name": "func"},{"file": 42,"line": 220,"col": 19,"name": "id"},{"file": 42,"line": 220,"col": 30,"name": "newstack"},{"file": 42,"line": 3,"col": 23,"name": "default"},{"file": 42,"line": 3,"col": 39,"name": "request"},{"file": 42,"line": 3,"col": 55,"name": "a1"},{"file": 42,"line": 3,"col": 66,"name": "a2"},{"file": 42,"line": 3,"col": 77,"name": "a3"},{"file": 42,"line": 3,"col": 88,"name": "a4"},{"file": 42,"line": 3,"col": 99,"name": "a5"},{"file": 42,"line": 84,"col": 23,"name": "default"},{"file": 42,"line": 84,"col": 39,"name": "request"},{"file": 42,"line": 84,"col": 63,"name": "a1"},{"file": 42,"line": 84,"col": 74,"name": "a2"},{"file": 42,"line": 84,"col": 85,"name": "a3"},{"file": 42,"line": 84,"col": 96,"name": "a4"},{"file": 42,"line": 84,"col": 107,"name": "a5"},{"file": 42,"line": 88,"col": 23,"name": "request"},{"file": 42,"line": 88,"col": 47,"name": "a1"},{"file": 42,"line": 88,"col": 58,"name": "a2"},{"file": 42,"line": 88,"col": 69,"name": "a3"},{"file": 42,"line": 88,"col": 80,"name": "a4"},{"file": 42,"line": 88,"col": 91,"name": "a5"},{"file": 76,"line": 21,"col": 19,"name": "self"},{"file": 44,"line": 37,"col": 17,"name": "allocator"},{"file": 44,"line": 454,"col": 16,"name": "allocator"},{"file": 44,"line": 454,"col": 43,"name": "args_alloc"},{"file": 44,"line": 515,"col": 24,"name": "name"},{"file": 44,"line": 389,"col": 17,"name": "allocator"},{"file": 44,"line": 18,"col": 14,"name": "out_buffer"},{"file": 44,"line": 506,"col": 19,"name": "name"},{"file": 44,"line": 491,"col": 22,"name": "input_cmd_line"},{"file": 44,"line": 491,"col": 51,"name": "expected_args"},{"file": 46,"line": 45,"col": 30,"name": "node"},{"file": 46,"line": 34,"col": 31,"name": "node"},{"file": 46,"line": 34,"col": 44,"name": "new_node"},{"file": 46,"line": 23,"col": 24,"name": "data"},{"file": 80,"line": 43,"col": 24,"name": "ptr"},{"file": 80,"line": 52,"col": 26,"name": "numa_node"},{"file": 11,"line": 87,"col": 19,"name": "self"},{"file": 11,"line": 87,"col": 37,"name": "ptr"},{"file": 51,"line": 138,"col": 19,"name": "path_w"},{"file": 51,"line": 176,"col": 23,"name": "path"},{"file": 51,"line": 736,"col": 15,"name": "path"},{"file": 51,"line": 984,"col": 16,"name": "allocator"},{"file": 51,"line": 984,"col": 39,"name": "from"},{"file": 51,"line": 984,"col": 57,"name": "to"},{"file": 51,"line": 590,"col": 20,"name": "allocator"},{"file": 51,"line": 590,"col": 43,"name": "paths"},{"file": 51,"line": 744,"col": 22,"name": "path"},{"file": 51,"line": 84,"col": 17,"name": "allocator"},{"file": 51,"line": 84,"col": 40,"name": "paths"},{"file": 51,"line": 778,"col": 20,"name": "path"},{"file": 51,"line": 992,"col": 23,"name": "allocator"},{"file": 51,"line": 992,"col": 46,"name": "from"},{"file": 51,"line": 992,"col": 64,"name": "to"},{"file": 51,"line": 78,"col": 19,"name": "allocator"},{"file": 51,"line": 78,"col": 42,"name": "paths"},{"file": 51,"line": 328,"col": 22,"name": "path"},{"file": 51,"line": 336,"col": 29,"name": "path"},{"file": 51,"line": 23,"col": 13,"name": "byte"},{"file": 51,"line": 1065,"col": 21,"name": "allocator"},{"file": 51,"line": 1065,"col": 44,"name": "from"},{"file": 51,"line": 1065,"col": 62,"name": "to"},{"file": 51,"line": 876,"col": 21,"name": "path"},{"file": 51,"line": 33,"col": 11,"name": "allocator"},{"file": 51,"line": 33,"col": 34,"name": "separator"},{"file": 51,"line": 33,"col": 49,"name": "paths"},{"file": 51,"line": 213,"col": 23,"name": "path"},{"file": 51,"line": 213,"col": 41,"name": "expected_result"},{"file": 51,"line": 730,"col": 20,"name": "paths"},{"file": 51,"line": 976,"col": 23,"name": "input"},{"file": 51,"line": 976,"col": 42,"name": "expected_output"},{"file": 51,"line": 860,"col": 22,"name": "input"},{"file": 51,"line": 860,"col": 41,"name": "expected_output"},{"file": 51,"line": 209,"col": 25,"name": "path"},{"file": 51,"line": 209,"col": 43,"name": "expected_result"},{"file": 51,"line": 968,"col": 16,"name": "input"},{"file": 51,"line": 968,"col": 35,"name": "expected_output"},{"file": 51,"line": 95,"col": 17,"name": "paths"},{"file": 51,"line": 95,"col": 44,"name": "expected"},{"file": 51,"line": 852,"col": 20,"name": "input"},{"file": 51,"line": 852,"col": 39,"name": "expected_output"},{"file": 51,"line": 340,"col": 26,"name": "ns1"},{"file": 51,"line": 340,"col": 43,"name": "ns2"},{"file": 51,"line": 1159,"col": 23,"name": "from"},{"file": 51,"line": 1159,"col": 41,"name": "to"},{"file": 51,"line": 1159,"col": 57,"name": "expected_output"},{"file": 51,"line": 88,"col": 19,"name": "paths"},{"file": 51,"line": 88,"col": 46,"name": "expected"},{"file": 51,"line": 726,"col": 22,"name": "paths"},{"file": 51,"line": 1154,"col": 21,"name": "from"},{"file": 51,"line": 1154,"col": 39,"name": "to"},{"file": 51,"line": 1154,"col": 55,"name": "expected_output"},{"file": 51,"line": 972,"col": 21,"name": "input"},{"file": 51,"line": 972,"col": 40,"name": "expected_output"},{"file": 35,"line": 82,"col": 24,"name": "r"},{"file": 35,"line": 82,"col": 36,"name": "T","comptime": true},{"file": 35,"line": 82,"col": 54,"name": "less_than"},{"file": 35,"line": 161,"col": 28,"name": "r"},{"file": 35,"line": 161,"col": 40,"name": "T","comptime": true},{"file": 35,"line": 161,"col": 58,"name": "at_least"},{"file": 35,"line": 161,"col": 71,"name": "less_than"},{"file": 35,"line": 196,"col": 26,"name": "r"},{"file": 35,"line": 196,"col": 38,"name": "T","comptime": true},{"file": 35,"line": 196,"col": 56,"name": "at_least"},{"file": 35,"line": 196,"col": 69,"name": "at_most"},{"file": 35,"line": 222,"col": 17,"name": "r"},{"file": 35,"line": 222,"col": 29,"name": "T","comptime": true},{"file": 35,"line": 255,"col": 20,"name": "r"},{"file": 35,"line": 255,"col": 32,"name": "T","comptime": true},{"file": 35,"line": 265,"col": 19,"name": "r"},{"file": 35,"line": 265,"col": 31,"name": "T","comptime": true},{"file": 35,"line": 265,"col": 49,"name": "buf"},{"file": 35,"line": 243,"col": 21,"name": "r"},{"file": 35,"line": 243,"col": 33,"name": "T","comptime": true},{"file": 35,"line": 217,"col": 17,"name": "r"},{"file": 35,"line": 217,"col": 29,"name": "T","comptime": true},{"file": 35,"line": 217,"col": 47,"name": "start"},{"file": 35,"line": 217,"col": 57,"name": "end"},{"file": 35,"line": 132,"col": 22,"name": "r"},{"file": 35,"line": 132,"col": 34,"name": "T","comptime": true},{"file": 35,"line": 132,"col": 52,"name": "at_most"},{"file": 35,"line": 178,"col": 32,"name": "r"},{"file": 35,"line": 178,"col": 44,"name": "T","comptime": true},{"file": 35,"line": 178,"col": 62,"name": "at_least"},{"file": 35,"line": 178,"col": 75,"name": "at_most"},{"file": 35,"line": 212,"col": 18,"name": "r"},{"file": 35,"line": 212,"col": 30,"name": "T","comptime": true},{"file": 35,"line": 40,"col": 19,"name": "r"},{"file": 55,"line": 38,"col": 26,"name": "handle"},{"file": 55,"line": 42,"col": 25,"name": "self"},{"file": 58,"line": 663,"col": 4,"name": "CompletionPort"},{"file": 58,"line": 664,"col": 4,"name": "lpCompletionPortEntries"},{"file": 58,"line": 665,"col": 4,"name": "ulCount"},{"file": 58,"line": 666,"col": 4,"name": "ulNumEntriesRemoved"},{"file": 58,"line": 667,"col": 4,"name": "dwMilliseconds"},{"file": 58,"line": 668,"col": 4,"name": "fAlertable"},{"file": 58,"line": 85,"col": 26,"name": "handle"},{"file": 58,"line": 89,"col": 25,"name": "self"},{"file": 40,"line": 166,"col": 17,"name": "self"},{"file": 40,"line": 171,"col": 15,"name": "self"},{"file": 62,"line": 819,"col": 19,"name": "hns"},{"file": 62,"line": 214,"col": 4,"name": "file_handle"},{"file": 62,"line": 215,"col": 4,"name": "existing_completion_port"},{"file": 62,"line": 216,"col": 4,"name": "completion_key"},{"file": 62,"line": 217,"col": 4,"name": "concurrent_thread_count"},{"file": 62,"line": 183,"col": 21,"name": "dir_path"},{"file": 62,"line": 183,"col": 43,"name": "find_file_data"},{"file": 62,"line": 760,"col": 19,"name": "hHeap"},{"file": 62,"line": 127,"col": 28,"name": "h"},{"file": 62,"line": 127,"col": 39,"name": "mask"},{"file": 62,"line": 127,"col": 52,"name": "flags"},{"file": 62,"line": 163,"col": 27,"name": "handle"},{"file": 62,"line": 163,"col": 43,"name": "milliseconds"},{"file": 62,"line": 545,"col": 4,"name": "hFile"},{"file": 62,"line": 546,"col": 4,"name": "buf_ptr"},{"file": 62,"line": 547,"col": 4,"name": "buf_len"},{"file": 62,"line": 548,"col": 4,"name": "flags"},{"file": 62,"line": 412,"col": 18,"name": "old_path"},{"file": 62,"line": 412,"col": 40,"name": "new_path"},{"file": 62,"line": 412,"col": 62,"name": "flags"},{"file": 62,"line": 372,"col": 4,"name": "sym_link_path"},{"file": 62,"line": 373,"col": 4,"name": "target_path"},{"file": 62,"line": 374,"col": 4,"name": "flags"},{"file": 62,"line": 418,"col": 19,"name": "old_path"},{"file": 62,"line": 418,"col": 43,"name": "new_path"},{"file": 62,"line": 418,"col": 67,"name": "flags"},{"file": 62,"line": 201,"col": 20,"name": "handle"},{"file": 62,"line": 201,"col": 36,"name": "find_file_data"},{"file": 62,"line": 829,"col": 29,"name": "ft"},{"file": 62,"line": 453,"col": 23,"name": "dir_path"},{"file": 62,"line": 117,"col": 18,"name": "rd"},{"file": 62,"line": 117,"col": 31,"name": "wr"},{"file": 62,"line": 117,"col": 44,"name": "sattr"},{"file": 62,"line": 458,"col": 24,"name": "dir_path_w"},{"file": 62,"line": 587,"col": 26,"name": "lpFileName"},{"file": 62,"line": 824,"col": 17,"name": "ns"},{"file": 62,"line": 730,"col": 19,"name": "hModule"},{"file": 62,"line": 652,"col": 31,"name": "penv"},{"file": 62,"line": 432,"col": 23,"name": "pathname"},{"file": 62,"line": 432,"col": 45,"name": "attrs"},{"file": 62,"line": 614,"col": 24,"name": "hProcess"},{"file": 62,"line": 614,"col": 42,"name": "uExitCode"},{"file": 62,"line": 231,"col": 4,"name": "completion_port"},{"file": 62,"line": 232,"col": 4,"name": "bytes_transferred_count"},{"file": 62,"line": 233,"col": 4,"name": "completion_key"},{"file": 62,"line": 234,"col": 4,"name": "lpOverlapped"},{"file": 62,"line": 140,"col": 20,"name": "output"},{"file": 62,"line": 582,"col": 25,"name": "filename"},{"file": 62,"line": 719,"col": 20,"name": "lpLibFileName"},{"file": 62,"line": 282,"col": 17,"name": "hFindFile"},{"file": 62,"line": 437,"col": 24,"name": "pathname"},{"file": 62,"line": 437,"col": 48,"name": "attrs"},{"file": 62,"line": 843,"col": 27,"name": "s"},{"file": 62,"line": 523,"col": 36,"name": "handle"},{"file": 62,"line": 362,"col": 4,"name": "sym_link_path"},{"file": 62,"line": 363,"col": 4,"name": "target_path"},{"file": 62,"line": 364,"col": 4,"name": "flags"},{"file": 62,"line": 835,"col": 29,"name": "ns"},{"file": 62,"line": 756,"col": 16,"name": "hHeap"},{"file": 62,"line": 756,"col": 31,"name": "dwFlags"},{"file": 62,"line": 756,"col": 47,"name": "lpMem"},{"file": 62,"line": 391,"col": 18,"name": "filename"},{"file": 62,"line": 251,"col": 4,"name": "completion_port"},{"file": 62,"line": 252,"col": 4,"name": "bytes_transferred_count"},{"file": 62,"line": 253,"col": 4,"name": "lpCompletionKey"},{"file": 62,"line": 254,"col": 4,"name": "lpOverlapped"},{"file": 62,"line": 255,"col": 4,"name": "dwMilliseconds"},{"file": 62,"line": 899,"col": 24,"name": "status"},{"file": 62,"line": 396,"col": 19,"name": "filename"},{"file": 62,"line": 782,"col": 4,"name": "hFile"},{"file": 62,"line": 783,"col": 4,"name": "lpCreationTime"},{"file": 62,"line": 784,"col": 4,"name": "lpLastAccessTime"},{"file": 62,"line": 785,"col": 4,"name": "lpLastWriteTime"},{"file": 62,"line": 767,"col": 4,"name": "hFile"},{"file": 62,"line": 512,"col": 28,"name": "handle"},{"file": 62,"line": 512,"col": 44,"name": "offset"},{"file": 62,"line": 75,"col": 4,"name": "file_path"},{"file": 62,"line": 76,"col": 4,"name": "desired_access"},{"file": 62,"line": 77,"col": 4,"name": "share_mode"},{"file": 62,"line": 78,"col": 4,"name": "lpSecurityAttributes"},{"file": 62,"line": 79,"col": 4,"name": "creation_disposition"},{"file": 62,"line": 80,"col": 4,"name": "flags_and_attrs"},{"file": 62,"line": 81,"col": 4,"name": "hTemplateFile"},{"file": 62,"line": 680,"col": 4,"name": "lpApplicationName"},{"file": 62,"line": 681,"col": 4,"name": "lpCommandLine"},{"file": 62,"line": 682,"col": 4,"name": "lpProcessAttributes"},{"file": 62,"line": 683,"col": 4,"name": "lpThreadAttributes"},{"file": 62,"line": 684,"col": 4,"name": "bInheritHandles"},{"file": 62,"line": 685,"col": 4,"name": "dwCreationFlags"},{"file": 62,"line": 686,"col": 4,"name": "lpEnvironment"},{"file": 62,"line": 687,"col": 4,"name": "lpCurrentDirectory"},{"file": 62,"line": 688,"col": 4,"name": "lpStartupInfo"},{"file": 62,"line": 689,"col": 4,"name": "lpProcessInformation"},{"file": 63,"line": 58,"col": 13,"name": "name","comptime": true},{"file": 63,"line": 155,"col": 16,"name": "T","comptime": true},{"file": 63,"line": 338,"col": 19,"name": "T","comptime": true},{"file": 63,"line": 22,"col": 18,"name": "traits","comptime": true},{"file": 63,"line": 300,"col": 16,"name": "T","comptime": true},{"file": 63,"line": 197,"col": 21,"name": "T","comptime": true},{"file": 63,"line": 244,"col": 21,"name": "T","comptime": true},{"file": 63,"line": 212,"col": 19,"name": "T","comptime": true},{"file": 63,"line": 277,"col": 19,"name": "T","comptime": true},{"file": 63,"line": 134,"col": 15,"name": "id","comptime": true},{"file": 63,"line": 176,"col": 16,"name": "T","comptime": true},{"file": 63,"line": 82,"col": 16,"name": "name","comptime": true},{"file": 63,"line": 11,"col": 21,"name": "T","comptime": true},{"file": 64,"line": 62,"col": 24,"name": "phdrs"},{"file": 64,"line": 232,"col": 12,"name": "def_arg"},{"file": 64,"line": 232,"col": 34,"name": "vsym_arg"},{"file": 64,"line": 232,"col": 49,"name": "vername"},{"file": 64,"line": 232,"col": 70,"name": "strings"},{"file": 64,"line": 53,"col": 21,"name": "phdrs"},{"file": 69,"line": 480,"col": 16,"name": "dirfd"},{"file": 69,"line": 480,"col": 28,"name": "path"},{"file": 69,"line": 480,"col": 47,"name": "flags"},{"file": 69,"line": 225,"col": 14,"name": "address"},{"file": 69,"line": 225,"col": 36,"name": "length"},{"file": 69,"line": 427,"col": 14,"name": "flags"},{"file": 69,"line": 427,"col": 26,"name": "child_stack_ptr"},{"file": 69,"line": 436,"col": 14,"name": "fd"},{"file": 69,"line": 436,"col": 23,"name": "offset"},{"file": 69,"line": 436,"col": 36,"name": "result"},{"file": 69,"line": 436,"col": 51,"name": "whence"},{"file": 69,"line": 1072,"col": 22,"name": "fd"},{"file": 69,"line": 1072,"col": 31,"name": "to_submit"},{"file": 69,"line": 1072,"col": 47,"name": "min_complete"},{"file": 69,"line": 1072,"col": 66,"name": "flags"},{"file": 69,"line": 1072,"col": 78,"name": "sig"},{"file": 69,"line": 819,"col": 14,"name": "fd"},{"file": 69,"line": 819,"col": 23,"name": "addr","noalias": true},{"file": 69,"line": 819,"col": 48,"name": "len","noalias": true},{"file": 88,"line": 10,"col": 16,"name": "number"},{"file": 88,"line": 10,"col": 31,"name": "arg1"},{"file": 69,"line": 108,"col": 18,"name": "uaddr"},{"file": 69,"line": 108,"col": 37,"name": "futex_op"},{"file": 69,"line": 108,"col": 52,"name": "val"},{"file": 69,"line": 108,"col": 62,"name": "timeout"},{"file": 69,"line": 138,"col": 21,"name": "flags"},{"file": 69,"line": 525,"col": 21,"name": "clk_id"},{"file": 69,"line": 525,"col": 34,"name": "tp"},{"file": 69,"line": 946,"col": 21,"name": "flags"},{"file": 69,"line": 739,"col": 18,"name": "fd"},{"file": 69,"line": 739,"col": 27,"name": "level"},{"file": 69,"line": 739,"col": 39,"name": "optname"},{"file": 69,"line": 739,"col": 53,"name": "optval","noalias": true},{"file": 69,"line": 739,"col": 76,"name": "optlen","noalias": true},{"file": 69,"line": 862,"col": 13,"name": "dirfd"},{"file": 69,"line": 862,"col": 25,"name": "path"},{"file": 69,"line": 862,"col": 44,"name": "flags"},{"file": 69,"line": 862,"col": 56,"name": "mask"},{"file": 69,"line": 862,"col": 67,"name": "statx_buf"},{"file": 69,"line": 891,"col": 16,"name": "path"},{"file": 69,"line": 891,"col": 35,"name": "name"},{"file": 69,"line": 891,"col": 54,"name": "value"},{"file": 69,"line": 891,"col": 68,"name": "size"},{"file": 69,"line": 926,"col": 20,"name": "path"},{"file": 69,"line": 926,"col": 39,"name": "name"},{"file": 69,"line": 653,"col": 17,"name": "size"},{"file": 69,"line": 653,"col": 30,"name": "list"},{"file": 69,"line": 799,"col": 16,"name": "fd"},{"file": 69,"line": 799,"col": 25,"name": "how"},{"file": 69,"line": 471,"col": 14,"name": "path"},{"file": 69,"line": 120,"col": 16,"name": "fd"},{"file": 69,"line": 120,"col": 25,"name": "dirp"},{"file": 69,"line": 120,"col": 38,"name": "len"},{"file": 69,"line": 174,"col": 15,"name": "dirfd"},{"file": 69,"line": 174,"col": 27,"name": "path"},{"file": 69,"line": 174,"col": 46,"name": "mode"},{"file": 69,"line": 221,"col": 16,"name": "address"},{"file": 69,"line": 221,"col": 38,"name": "length"},{"file": 69,"line": 221,"col": 53,"name": "protection"},{"file": 69,"line": 151,"col": 16,"name": "path","noalias": true},{"file": 69,"line": 151,"col": 43,"name": "buf_ptr","noalias": true},{"file": 69,"line": 151,"col": 67,"name": "buf_len"},{"file": 69,"line": 613,"col": 17,"name": "ruid"},{"file": 69,"line": 613,"col": 29,"name": "euid"},{"file": 69,"line": 613,"col": 41,"name": "suid"},{"file": 69,"line": 731,"col": 14,"name": "domain"},{"file": 69,"line": 731,"col": 27,"name": "socket_type"},{"file": 69,"line": 731,"col": 45,"name": "protocol"},{"file": 69,"line": 73,"col": 14,"name": "path"},{"file": 88,"line": 52,"col": 16,"name": "number"},{"file": 88,"line": 52,"col": 31,"name": "arg1"},{"file": 88,"line": 52,"col": 44,"name": "arg2"},{"file": 88,"line": 52,"col": 57,"name": "arg3"},{"file": 88,"line": 52,"col": 70,"name": "arg4"},{"file": 88,"line": 52,"col": 83,"name": "arg5"},{"file": 69,"line": 306,"col": 17,"name": "existing"},{"file": 69,"line": 306,"col": 40,"name": "newfd"},{"file": 69,"line": 306,"col": 52,"name": "newpath"},{"file": 69,"line": 129,"col": 18,"name": "fd"},{"file": 69,"line": 129,"col": 27,"name": "dirp"},{"file": 69,"line": 129,"col": 40,"name": "len"},{"file": 69,"line": 452,"col": 12,"name": "status"},{"file": 69,"line": 146,"col": 24,"name": "fd"},{"file": 69,"line": 146,"col": 33,"name": "wd"},{"file": 69,"line": 448,"col": 13,"name": "fd"},{"file": 69,"line": 448,"col": 22,"name": "offset"},{"file": 69,"line": 448,"col": 35,"name": "whence"},{"file": 69,"line": 999,"col": 14,"name": "hdrp"},{"file": 69,"line": 999,"col": 40,"name": "datap"},{"file": 69,"line": 339,"col": 13,"name": "fd"},{"file": 69,"line": 339,"col": 26,"name": "flags"},{"file": 69,"line": 645,"col": 17,"name": "size"},{"file": 69,"line": 645,"col": 30,"name": "list"},{"file": 69,"line": 836,"col": 12,"name": "pathname"},{"file": 69,"line": 836,"col": 35,"name": "statbuf"},{"file": 69,"line": 462,"col": 17,"name": "buf"},{"file": 69,"line": 462,"col": 29,"name": "count"},{"file": 69,"line": 462,"col": 43,"name": "flags"},{"file": 69,"line": 921,"col": 19,"name": "path"},{"file": 69,"line": 921,"col": 38,"name": "name"},{"file": 88,"line": 2,"col": 16,"name": "number"},{"file": 69,"line": 629,"col": 17,"name": "ruid"},{"file": 69,"line": 629,"col": 28,"name": "euid"},{"file": 69,"line": 629,"col": 39,"name": "suid"},{"file": 69,"line": 896,"col": 17,"name": "path"},{"file": 69,"line": 896,"col": 36,"name": "name"},{"file": 69,"line": 896,"col": 55,"name": "value"},{"file": 69,"line": 896,"col": 69,"name": "size"},{"file": 69,"line": 916,"col": 17,"name": "fd"},{"file": 69,"line": 916,"col": 28,"name": "name"},{"file": 69,"line": 916,"col": 47,"name": "value"},{"file": 69,"line": 916,"col": 67,"name": "size"},{"file": 69,"line": 916,"col": 80,"name": "flags"},{"file": 69,"line": 701,"col": 23,"name": "set"},{"file": 69,"line": 807,"col": 14,"name": "fd"},{"file": 69,"line": 807,"col": 23,"name": "backlog"},{"file": 69,"line": 983,"col": 23,"name": "fd"},{"file": 69,"line": 983,"col": 32,"name": "curr_value"},{"file": 69,"line": 193,"col": 12,"name": "address"},{"file": 69,"line": 193,"col": 29,"name": "length"},{"file": 69,"line": 193,"col": 44,"name": "prot"},{"file": 69,"line": 193,"col": 57,"name": "flags"},{"file": 69,"line": 193,"col": 69,"name": "fd"},{"file": 69,"line": 193,"col": 78,"name": "offset"},{"file": 69,"line": 537,"col": 17,"name": "req"},{"file": 69,"line": 537,"col": 39,"name": "rem"},{"file": 69,"line": 533,"col": 20,"name": "tv"},{"file": 69,"line": 533,"col": 40,"name": "tz"},{"file": 69,"line": 179,"col": 13,"name": "special"},{"file": 69,"line": 179,"col": 35,"name": "dir"},{"file": 69,"line": 179,"col": 53,"name": "fstype"},{"file": 69,"line": 179,"col": 74,"name": "flags"},{"file": 69,"line": 179,"col": 86,"name": "data"},{"file": 69,"line": 669,"col": 19,"name": "flags"},{"file": 69,"line": 669,"col": 31,"name": "set","noalias": true},{"file": 69,"line": 669,"col": 61,"name": "oldset","noalias": true},{"file": 69,"line": 112,"col": 18,"name": "uaddr"},{"file": 69,"line": 112,"col": 37,"name": "futex_op"},{"file": 69,"line": 112,"col": 52,"name": "val"},{"file": 69,"line": 906,"col": 16,"name": "path"},{"file": 69,"line": 906,"col": 35,"name": "name"},{"file": 69,"line": 906,"col": 54,"name": "value"},{"file": 69,"line": 906,"col": 74,"name": "size"},{"file": 69,"line": 906,"col": 87,"name": "flags"},{"file": 69,"line": 815,"col": 18,"name": "domain"},{"file": 69,"line": 815,"col": 31,"name": "socket_type"},{"file": 69,"line": 815,"col": 49,"name": "protocol"},{"file": 69,"line": 815,"col": 64,"name": "fd"},{"file": 69,"line": 396,"col": 12,"name": "path"},{"file": 69,"line": 396,"col": 31,"name": "flags"},{"file": 69,"line": 396,"col": 43,"name": "perm"},{"file": 69,"line": 256,"col": 13,"name": "fd"},{"file": 69,"line": 256,"col": 22,"name": "iov"},{"file": 69,"line": 256,"col": 43,"name": "count"},{"file": 69,"line": 854,"col": 15,"name": "dirfd"},{"file": 69,"line": 854,"col": 27,"name": "path"},{"file": 69,"line": 854,"col": 46,"name": "stat_buf"},{"file": 69,"line": 854,"col": 63,"name": "flags"},{"file": 69,"line": 541,"col": 14,"name": "uid"},{"file": 69,"line": 116,"col": 14,"name": "buf"},{"file": 69,"line": 116,"col": 26,"name": "size"},{"file": 69,"line": 529,"col": 20,"name": "tv"},{"file": 69,"line": 529,"col": 34,"name": "tz"},{"file": 69,"line": 901,"col": 17,"name": "fd"},{"file": 69,"line": 901,"col": 28,"name": "name"},{"file": 69,"line": 901,"col": 47,"name": "value"},{"file": 69,"line": 901,"col": 61,"name": "size"},{"file": 69,"line": 950,"col": 17,"name": "epoll_fd"},{"file": 69,"line": 950,"col": 32,"name": "op"},{"file": 69,"line": 950,"col": 41,"name": "fd"},{"file": 69,"line": 950,"col": 50,"name": "ev"},{"file": 69,"line": 827,"col": 13,"name": "fd"},{"file": 69,"line": 827,"col": 22,"name": "stat_buf"},{"file": 69,"line": 1003,"col": 19,"name": "ss"},{"file": 69,"line": 1003,"col": 34,"name": "old_ss"},{"file": 69,"line": 288,"col": 13,"name": "path"},{"file": 69,"line": 416,"col": 14,"name": "dirfd"},{"file": 69,"line": 416,"col": 26,"name": "path"},{"file": 69,"line": 416,"col": 45,"name": "flags"},{"file": 69,"line": 416,"col": 57,"name": "mode"},{"file": 69,"line": 362,"col": 16,"name": "oldfd"},{"file": 69,"line": 362,"col": 28,"name": "oldpath"},{"file": 69,"line": 362,"col": 50,"name": "newfd"},{"file": 69,"line": 362,"col": 62,"name": "newpath"},{"file": 69,"line": 42,"col": 16,"name": "r"},{"file": 69,"line": 791,"col": 15,"name": "fd"},{"file": 69,"line": 791,"col": 24,"name": "msg"},{"file": 69,"line": 791,"col": 38,"name": "flags"},{"file": 88,"line": 40,"col": 16,"name": "number"},{"file": 88,"line": 40,"col": 31,"name": "arg1"},{"file": 88,"line": 40,"col": 44,"name": "arg2"},{"file": 88,"line": 40,"col": 57,"name": "arg3"},{"file": 88,"line": 40,"col": 70,"name": "arg4"},{"file": 69,"line": 316,"col": 14,"name": "path"},{"file": 69,"line": 316,"col": 33,"name": "mode"},{"file": 69,"line": 882,"col": 18,"name": "path"},{"file": 69,"line": 882,"col": 37,"name": "list"},{"file": 69,"line": 882,"col": 50,"name": "size"},{"file": 69,"line": 325,"col": 17,"name": "dirfd"},{"file": 69,"line": 325,"col": 29,"name": "path"},{"file": 69,"line": 325,"col": 48,"name": "mode"},{"file": 69,"line": 325,"col": 59,"name": "flags"},{"file": 69,"line": 995,"col": 14,"name": "hdrp"},{"file": 69,"line": 995,"col": 40,"name": "datap"},{"file": 69,"line": 787,"col": 15,"name": "fd"},{"file": 69,"line": 787,"col": 24,"name": "addr"},{"file": 69,"line": 787,"col": 45,"name": "len"},{"file": 69,"line": 931,"col": 20,"name": "fd"},{"file": 69,"line": 931,"col": 31,"name": "name"},{"file": 69,"line": 142,"col": 25,"name": "fd"},{"file": 69,"line": 142,"col": 34,"name": "pathname"},{"file": 69,"line": 142,"col": 57,"name": "mask"},{"file": 69,"line": 184,"col": 14,"name": "special"},{"file": 69,"line": 1014,"col": 23,"name": "T","comptime": true},{"file": 69,"line": 1014,"col": 41,"name": "callback"},{"file": 69,"line": 1014,"col": 112,"name": "data"},{"file": 88,"line": 29,"col": 16,"name": "number"},{"file": 88,"line": 29,"col": 31,"name": "arg1"},{"file": 88,"line": 29,"col": 44,"name": "arg2"},{"file": 88,"line": 29,"col": 57,"name": "arg3"},{"file": 69,"line": 63,"col": 12,"name": "old"},{"file": 69,"line": 63,"col": 22,"name": "new"},{"file": 69,"line": 63,"col": 32,"name": "flags"},{"file": 69,"line": 673,"col": 17,"name": "sig"},{"file": 69,"line": 673,"col": 26,"name": "act","noalias": true},{"file": 69,"line": 673,"col": 57,"name": "oact","noalias": true},{"file": 69,"line": 877,"col": 17,"name": "path"},{"file": 69,"line": 877,"col": 36,"name": "list"},{"file": 69,"line": 877,"col": 49,"name": "size"},{"file": 69,"line": 422,"col": 14,"name": "flags"},{"file": 69,"line": 422,"col": 28,"name": "child_stack_ptr"},{"file": 69,"line": 422,"col": 52,"name": "parent_tid"},{"file": 69,"line": 422,"col": 70,"name": "child_tid"},{"file": 69,"line": 422,"col": 87,"name": "newtls"},{"file": 69,"line": 260,"col": 14,"name": "fd"},{"file": 69,"line": 260,"col": 23,"name": "iov"},{"file": 69,"line": 260,"col": 50,"name": "count"},{"file": 69,"line": 457,"col": 18,"name": "status"},{"file": 69,"line": 431,"col": 13,"name": "fd"},{"file": 69,"line": 99,"col": 16,"name": "fd"},{"file": 69,"line": 99,"col": 25,"name": "times"},{"file": 69,"line": 484,"col": 15,"name": "pid"},{"file": 69,"line": 484,"col": 25,"name": "status"},{"file": 69,"line": 484,"col": 39,"name": "flags"},{"file": 69,"line": 803,"col": 12,"name": "fd"},{"file": 69,"line": 803,"col": 21,"name": "addr"},{"file": 69,"line": 803,"col": 44,"name": "len"},{"file": 69,"line": 1068,"col": 22,"name": "entries"},{"file": 69,"line": 1068,"col": 36,"name": "p"},{"file": 69,"line": 311,"col": 13,"name": "fd"},{"file": 69,"line": 311,"col": 22,"name": "buf"},{"file": 69,"line": 311,"col": 34,"name": "count"},{"file": 69,"line": 311,"col": 48,"name": "offset"},{"file": 69,"line": 747,"col": 16,"name": "fd"},{"file": 69,"line": 747,"col": 25,"name": "msgvec"},{"file": 69,"line": 747,"col": 51,"name": "vlen"},{"file": 69,"line": 747,"col": 62,"name": "flags"},{"file": 69,"line": 795,"col": 16,"name": "fd"},{"file": 69,"line": 795,"col": 25,"name": "buf","noalias": true},{"file": 69,"line": 795,"col": 45,"name": "len"},{"file": 69,"line": 795,"col": 57,"name": "flags"},{"file": 69,"line": 795,"col": 69,"name": "addr","noalias": true},{"file": 69,"line": 795,"col": 95,"name": "alen","noalias": true},{"file": 69,"line": 974,"col": 22,"name": "clockid"},{"file": 69,"line": 974,"col": 36,"name": "flags"},{"file": 69,"line": 970,"col": 15,"name": "count"},{"file": 69,"line": 970,"col": 27,"name": "flags"},{"file": 69,"line": 31,"col": 17,"name": "index"},{"file": 69,"line": 347,"col": 14,"name": "fd"},{"file": 69,"line": 347,"col": 23,"name": "buf"},{"file": 69,"line": 347,"col": 41,"name": "count"},{"file": 69,"line": 347,"col": 55,"name": "offset"},{"file": 69,"line": 297,"col": 15,"name": "existing"},{"file": 69,"line": 297,"col": 38,"name": "new"},{"file": 69,"line": 104,"col": 17,"name": "dirfd"},{"file": 69,"line": 104,"col": 29,"name": "path"},{"file": 69,"line": 104,"col": 49,"name": "times"},{"file": 69,"line": 104,"col": 76,"name": "flags"},{"file": 69,"line": 244,"col": 15,"name": "fd"},{"file": 69,"line": 244,"col": 24,"name": "iov"},{"file": 69,"line": 244,"col": 45,"name": "count"},{"file": 69,"line": 244,"col": 59,"name": "offset"},{"file": 69,"line": 244,"col": 72,"name": "flags"},{"file": 69,"line": 954,"col": 18,"name": "epoll_fd"},{"file": 69,"line": 954,"col": 33,"name": "events"},{"file": 69,"line": 954,"col": 57,"name": "maxevents"},{"file": 69,"line": 954,"col": 73,"name": "timeout"},{"file": 69,"line": 343,"col": 13,"name": "fd"},{"file": 69,"line": 343,"col": 22,"name": "buf"},{"file": 69,"line": 343,"col": 40,"name": "count"},{"file": 69,"line": 411,"col": 14,"name": "path"},{"file": 69,"line": 411,"col": 33,"name": "perm"},{"file": 69,"line": 549,"col": 14,"name": "gid"},{"file": 69,"line": 493,"col": 21,"name": "clk_id"},{"file": 69,"line": 493,"col": 34,"name": "tp"},{"file": 69,"line": 68,"col": 13,"name": "path"},{"file": 69,"line": 713,"col": 17,"name": "set"},{"file": 69,"line": 713,"col": 33,"name": "sig"},{"file": 88,"line": 19,"col": 16,"name": "number"},{"file": 88,"line": 19,"col": 31,"name": "arg1"},{"file": 88,"line": 19,"col": 44,"name": "arg2"},{"file": 69,"line": 47,"col": 12,"name": "old"},{"file": 69,"line": 47,"col": 22,"name": "new"},{"file": 69,"line": 621,"col": 17,"name": "rgid"},{"file": 69,"line": 621,"col": 29,"name": "egid"},{"file": 69,"line": 621,"col": 41,"name": "sgid"},{"file": 88,"line": 88,"col": 20,"name": "func"},{"file": 88,"line": 88,"col": 53,"name": "stack"},{"file": 88,"line": 88,"col": 67,"name": "flags"},{"file": 88,"line": 88,"col": 81,"name": "arg"},{"file": 88,"line": 88,"col": 93,"name": "ptid"},{"file": 88,"line": 88,"col": 105,"name": "tls"},{"file": 88,"line": 88,"col": 117,"name": "ctid"},{"file": 69,"line": 160,"col": 18,"name": "dirfd"},{"file": 69,"line": 160,"col": 30,"name": "path","noalias": true},{"file": 69,"line": 160,"col": 57,"name": "buf_ptr","noalias": true},{"file": 69,"line": 160,"col": 81,"name": "buf_len"},{"file": 69,"line": 637,"col": 17,"name": "rgid"},{"file": 69,"line": 637,"col": 28,"name": "egid"},{"file": 69,"line": 637,"col": 39,"name": "sgid"},{"file": 69,"line": 991,"col": 15,"name": "flags"},{"file": 69,"line": 1007,"col": 13,"name": "uts"},{"file": 69,"line": 466,"col": 12,"name": "pid"},{"file": 69,"line": 466,"col": 22,"name": "sig"},{"file": 69,"line": 233,"col": 14,"name": "fd"},{"file": 69,"line": 233,"col": 23,"name": "iov"},{"file": 69,"line": 233,"col": 44,"name": "count"},{"file": 69,"line": 233,"col": 58,"name": "offset"},{"file": 69,"line": 557,"col": 16,"name": "ruid"},{"file": 69,"line": 557,"col": 27,"name": "euid"},{"file": 69,"line": 78,"col": 14,"name": "path"},{"file": 69,"line": 78,"col": 33,"name": "argv"},{"file": 69,"line": 78,"col": 62,"name": "envp"},{"file": 69,"line": 935,"col": 25,"name": "pid"},{"file": 69,"line": 935,"col": 35,"name": "size"},{"file": 69,"line": 935,"col": 48,"name": "set"},{"file": 69,"line": 823,"col": 15,"name": "fd"},{"file": 69,"line": 823,"col": 24,"name": "addr","noalias": true},{"file": 69,"line": 823,"col": 49,"name": "len","noalias": true},{"file": 69,"line": 823,"col": 74,"name": "flags"},{"file": 69,"line": 705,"col": 23,"name": "set"},{"file": 69,"line": 264,"col": 15,"name": "fd"},{"file": 69,"line": 264,"col": 24,"name": "iov"},{"file": 69,"line": 264,"col": 51,"name": "count"},{"file": 69,"line": 264,"col": 65,"name": "offset"},{"file": 69,"line": 911,"col": 17,"name": "path"},{"file": 69,"line": 911,"col": 36,"name": "name"},{"file": 69,"line": 911,"col": 55,"name": "value"},{"file": 69,"line": 911,"col": 75,"name": "size"},{"file": 69,"line": 911,"col": 88,"name": "flags"},{"file": 69,"line": 718,"col": 19,"name": "set"},{"file": 69,"line": 718,"col": 41,"name": "sig"},{"file": 69,"line": 727,"col": 19,"name": "fd"},{"file": 69,"line": 727,"col": 28,"name": "addr","noalias": true},{"file": 69,"line": 727,"col": 53,"name": "len","noalias": true},{"file": 69,"line": 743,"col": 15,"name": "fd"},{"file": 69,"line": 743,"col": 24,"name": "msg"},{"file": 69,"line": 743,"col": 44,"name": "flags"},{"file": 69,"line": 275,"col": 16,"name": "fd"},{"file": 69,"line": 275,"col": 25,"name": "iov"},{"file": 69,"line": 275,"col": 52,"name": "count"},{"file": 69,"line": 275,"col": 66,"name": "offset"},{"file": 69,"line": 275,"col": 79,"name": "flags"},{"file": 69,"line": 709,"col": 22,"name": "set"},{"file": 69,"line": 384,"col": 17,"name": "oldfd"},{"file": 69,"line": 384,"col": 29,"name": "oldpath"},{"file": 69,"line": 384,"col": 51,"name": "newfd"},{"file": 69,"line": 384,"col": 63,"name": "newpath"},{"file": 69,"line": 384,"col": 85,"name": "flags"},{"file": 69,"line": 886,"col": 18,"name": "fd"},{"file": 69,"line": 886,"col": 29,"name": "list"},{"file": 69,"line": 886,"col": 42,"name": "size"},{"file": 69,"line": 605,"col": 15,"name": "euid"},{"file": 69,"line": 845,"col": 13,"name": "pathname"},{"file": 69,"line": 845,"col": 36,"name": "statbuf"},{"file": 69,"line": 565,"col": 16,"name": "rgid"},{"file": 69,"line": 565,"col": 27,"name": "egid"},{"file": 88,"line": 66,"col": 4,"name": "number"},{"file": 88,"line": 67,"col": 4,"name": "arg1"},{"file": 88,"line": 68,"col": 4,"name": "arg2"},{"file": 88,"line": 69,"col": 4,"name": "arg3"},{"file": 88,"line": 70,"col": 4,"name": "arg4"},{"file": 88,"line": 71,"col": 4,"name": "arg5"},{"file": 88,"line": 72,"col": 4,"name": "arg6"},{"file": 69,"line": 229,"col": 12,"name": "fd"},{"file": 69,"line": 229,"col": 21,"name": "buf"},{"file": 69,"line": 229,"col": 33,"name": "count"},{"file": 69,"line": 735,"col": 18,"name": "fd"},{"file": 69,"line": 735,"col": 27,"name": "level"},{"file": 69,"line": 735,"col": 39,"name": "optname"},{"file": 69,"line": 735,"col": 53,"name": "optval"},{"file": 69,"line": 735,"col": 74,"name": "optlen"},{"file": 69,"line": 352,"col": 14,"name": "old"},{"file": 69,"line": 352,"col": 32,"name": "new"},{"file": 69,"line": 521,"col": 20,"name": "clk_id"},{"file": 69,"line": 521,"col": 33,"name": "tp"},{"file": 69,"line": 165,"col": 13,"name": "path"},{"file": 69,"line": 165,"col": 32,"name": "mode"},{"file": 69,"line": 723,"col": 19,"name": "fd"},{"file": 69,"line": 723,"col": 28,"name": "addr","noalias": true},{"file": 69,"line": 723,"col": 53,"name": "len","noalias": true},{"file": 69,"line": 189,"col": 15,"name": "special"},{"file": 69,"line": 189,"col": 37,"name": "flags"},{"file": 69,"line": 609,"col": 15,"name": "egid"},{"file": 69,"line": 958,"col": 19,"name": "epoll_fd"},{"file": 69,"line": 958,"col": 34,"name": "events"},{"file": 69,"line": 958,"col": 58,"name": "maxevents"},{"file": 69,"line": 958,"col": 74,"name": "timeout"},{"file": 69,"line": 958,"col": 88,"name": "sigmask"},{"file": 69,"line": 811,"col": 14,"name": "fd"},{"file": 69,"line": 811,"col": 23,"name": "buf"},{"file": 69,"line": 811,"col": 41,"name": "len"},{"file": 69,"line": 811,"col": 53,"name": "flags"},{"file": 69,"line": 811,"col": 65,"name": "addr"},{"file": 69,"line": 811,"col": 89,"name": "alen"},{"file": 69,"line": 1076,"col": 25,"name": "fd"},{"file": 69,"line": 1076,"col": 34,"name": "opcode"},{"file": 69,"line": 1076,"col": 47,"name": "arg"},{"file": 69,"line": 1076,"col": 68,"name": "nr_args"},{"file": 69,"line": 329,"col": 12,"name": "fd"},{"file": 69,"line": 987,"col": 23,"name": "fd"},{"file": 69,"line": 987,"col": 32,"name": "flags"},{"file": 69,"line": 987,"col": 44,"name": "new_value"},{"file": 69,"line": 987,"col": 74,"name": "old_value"},{"file": 69,"line": 508,"col": 34,"name": "clk"},{"file": 69,"line": 508,"col": 44,"name": "ts"},{"file": 13,"line": 1210,"col": 23,"name": "lhs"},{"file": 13,"line": 1210,"col": 41,"name": "rhs"},{"file": 13,"line": 1206,"col": 15,"name": "self"},{"file": 71,"line": 736,"col": 29,"name": "allocator"},{"file": 71,"line": 736,"col": 56,"name": "env_map"},{"file": 71,"line": 701,"col": 22,"name": "rd"},{"file": 71,"line": 701,"col": 44,"name": "wr"},{"file": 71,"line": 701,"col": 66,"name": "sattr"},{"file": 71,"line": 718,"col": 22,"name": "fd"},{"file": 71,"line": 718,"col": 31,"name": "err"},{"file": 71,"line": 691,"col": 21,"name": "rd"},{"file": 71,"line": 691,"col": 43,"name": "wr"},{"file": 71,"line": 691,"col": 65,"name": "sattr"},{"file": 71,"line": 616,"col": 24,"name": "app_name"},{"file": 71,"line": 616,"col": 42,"name": "cmd_line"},{"file": 71,"line": 616,"col": 60,"name": "envp_ptr"},{"file": 71,"line": 616,"col": 79,"name": "cwd_ptr"},{"file": 71,"line": 616,"col": 97,"name": "lpStartupInfo"},{"file": 71,"line": 616,"col": 135,"name": "lpProcessInformation"},{"file": 71,"line": 686,"col": 22,"name": "rd"},{"file": 71,"line": 686,"col": 43,"name": "wr"},{"file": 71,"line": 711,"col": 15,"name": "pipe"},{"file": 71,"line": 730,"col": 13,"name": "fd"},{"file": 71,"line": 725,"col": 14,"name": "fd"},{"file": 71,"line": 725,"col": 23,"name": "value"},{"file": 71,"line": 650,"col": 28,"name": "allocator"},{"file": 71,"line": 650,"col": 55,"name": "argv"},{"file": 74,"line": 55,"col": 17,"name": "hasher"},{"file": 74,"line": 55,"col": 30,"name": "key"},{"file": 74,"line": 55,"col": 40,"name": "strat","comptime": true},{"file": 74,"line": 23,"col": 19,"name": "hasher"},{"file": 74,"line": 23,"col": 32,"name": "key"},{"file": 74,"line": 23,"col": 42,"name": "strat","comptime": true},{"file": 74,"line": 200,"col": 16,"name": "key"},{"file": 74,"line": 186,"col": 12,"name": "key"},{"file": 74,"line": 207,"col": 25,"name": "key"},{"file": 74,"line": 193,"col": 19,"name": "key"},{"file": 78,"line": 469,"col": 7,"name": "rma"},{"file": 78,"line": 469,"col": 18,"name": "x"},{"file": 78,"line": 469,"col": 26,"name": "y"},{"file": 78,"line": 501,"col": 13,"name": "r"},{"file": 78,"line": 501,"col": 22,"name": "xa"},{"file": 78,"line": 501,"col": 31,"name": "ya"},{"file": 78,"line": 643,"col": 18,"name": "a"},{"file": 78,"line": 643,"col": 26,"name": "T","comptime": true},{"file": 78,"line": 489,"col": 32,"name": "A"},{"file": 78,"line": 489,"col": 53,"name": "storage"},{"file": 81,"line": 89,"col": 16,"name": "handle"},{"file": 81,"line": 89,"col": 32,"name": "timeout_ms"},{"file": 82,"line": 662,"col": 17,"name": "fd"},{"file": 82,"line": 662,"col": 33,"name": "backlog"},{"file": 82,"line": 602,"col": 17,"name": "fd"},{"file": 82,"line": 602,"col": 33,"name": "socket_flags"},{"file": 82,"line": 602,"col": 65,"name": "address"},{"file": 82,"line": 640,"col": 18,"name": "fd"},{"file": 82,"line": 640,"col": 34,"name": "message_header"},{"file": 82,"line": 640,"col": 59,"name": "flags"},{"file": 82,"line": 651,"col": 15,"name": "fd"},{"file": 82,"line": 651,"col": 31,"name": "address"},{"file": 82,"line": 629,"col": 18,"name": "fd"},{"file": 82,"line": 629,"col": 34,"name": "message_header"},{"file": 82,"line": 629,"col": 65,"name": "flags"},{"file": 82,"line": 618,"col": 18,"name": "fd"},{"file": 82,"line": 618,"col": 34,"name": "address"},{"file": 82,"line": 576,"col": 14,"name": "fd"},{"file": 82,"line": 576,"col": 30,"name": "level"},{"file": 82,"line": 576,"col": 44,"name": "optname"},{"file": 82,"line": 576,"col": 60,"name": "optval"},{"file": 82,"line": 576,"col": 75,"name": "optlen"},{"file": 82,"line": 565,"col": 23,"name": "domain"},{"file": 82,"line": 565,"col": 36,"name": "sock_type"},{"file": 82,"line": 565,"col": 52,"name": "protocol"},{"file": 82,"line": 589,"col": 14,"name": "fd"},{"file": 82,"line": 589,"col": 30,"name": "level"},{"file": 82,"line": 589,"col": 44,"name": "optname"},{"file": 82,"line": 589,"col": 60,"name": "optval"},{"file": 82,"line": 589,"col": 75,"name": "optlen"},{"file": 82,"line": 559,"col": 16,"name": "value"},{"file": 86,"line": 23,"col": 40,"name": "Handle"},{"file": 86,"line": 11,"col": 4,"name": "FileHandle"},{"file": 86,"line": 12,"col": 4,"name": "DesiredAccess"},{"file": 86,"line": 13,"col": 4,"name": "ObjectAttributes"},{"file": 86,"line": 14,"col": 4,"name": "IoStatusBlock"},{"file": 86,"line": 15,"col": 4,"name": "AllocationSize"},{"file": 86,"line": 16,"col": 4,"name": "FileAttributes"},{"file": 86,"line": 17,"col": 4,"name": "ShareAccess"},{"file": 86,"line": 18,"col": 4,"name": "CreateDisposition"},{"file": 86,"line": 19,"col": 4,"name": "CreateOptions"},{"file": 86,"line": 20,"col": 4,"name": "EaBuffer"},{"file": 86,"line": 21,"col": 4,"name": "EaLength"},{"file": 86,"line": 30,"col": 53,"name": "UnicodeString"},{"file": 86,"line": 2,"col": 57,"name": "FramesToSkip"},{"file": 86,"line": 2,"col": 78,"name": "FramesToCapture"},{"file": 86,"line": 2,"col": 102,"name": "BackTrace"},{"file": 86,"line": 2,"col": 123,"name": "BackTraceHash"},{"file": 86,"line": 25,"col": 4,"name": "DosPathName"},{"file": 86,"line": 26,"col": 4,"name": "NtPathName"},{"file": 86,"line": 27,"col": 4,"name": "NtFileNamePart"},{"file": 86,"line": 28,"col": 4,"name": "DirectoryInfo"},{"file": 86,"line": 33,"col": 4,"name": "FileHandle"},{"file": 86,"line": 34,"col": 4,"name": "Event"},{"file": 86,"line": 35,"col": 4,"name": "ApcRoutine"},{"file": 86,"line": 36,"col": 4,"name": "ApcContext"},{"file": 86,"line": 37,"col": 4,"name": "IoStatusBlock"},{"file": 86,"line": 38,"col": 4,"name": "FileInformation"},{"file": 86,"line": 39,"col": 4,"name": "Length"},{"file": 86,"line": 40,"col": 4,"name": "FileInformationClass"},{"file": 86,"line": 41,"col": 4,"name": "ReturnSingleEntry"},{"file": 86,"line": 42,"col": 4,"name": "FileName"},{"file": 86,"line": 43,"col": 4,"name": "RestartScan"},{"file": 86,"line": 4,"col": 4,"name": "FileHandle"},{"file": 86,"line": 5,"col": 4,"name": "IoStatusBlock"},{"file": 86,"line": 6,"col": 4,"name": "FileInformation"},{"file": 86,"line": 7,"col": 4,"name": "Length"},{"file": 86,"line": 8,"col": 4,"name": "FileInformationClass"},{"file": 87,"line": 43,"col": 58,"name": "FileHandle"},{"file": 87,"line": 43,"col": 78,"name": "ExistingCompletionPort"},{"file": 87,"line": 43,"col": 111,"name": "CompletionKey"},{"file": 87,"line": 43,"col": 137,"name": "NumberOfConcurrentThreads"},{"file": 87,"line": 195,"col": 4,"name": "in_hFile"},{"file": 87,"line": 196,"col": 4,"name": "in_lpBuffer"},{"file": 87,"line": 197,"col": 4,"name": "in_nNumberOfBytesToWrite"},{"file": 87,"line": 198,"col": 4,"name": "out_lpNumberOfBytesWritten"},{"file": 87,"line": 199,"col": 4,"name": "in_out_lpOverlapped"},{"file": 87,"line": 116,"col": 47,"name": "hHeap"},{"file": 87,"line": 7,"col": 47,"name": "hObject"},{"file": 87,"line": 131,"col": 47,"name": "lpAddress"},{"file": 87,"line": 131,"col": 67,"name": "dwSize"},{"file": 87,"line": 131,"col": 83,"name": "dwFreeType"},{"file": 87,"line": 211,"col": 56,"name": "lpCriticalSection"},{"file": 87,"line": 76,"col": 54,"name": "hProcess"},{"file": 87,"line": 76,"col": 72,"name": "lpExitCode"},{"file": 87,"line": 182,"col": 56,"name": "hObject"},{"file": 87,"line": 182,"col": 73,"name": "dwMask"},{"file": 87,"line": 182,"col": 88,"name": "dwFlags"},{"file": 87,"line": 192,"col": 55,"name": "hHandle"},{"file": 87,"line": 192,"col": 72,"name": "dwMilliseconds"},{"file": 87,"line": 184,"col": 41,"name": "dwMilliseconds"},{"file": 87,"line": 63,"col": 50,"name": "in_hConsoleHandle"},{"file": 87,"line": 63,"col": 77,"name": "out_lpMode"},{"file": 87,"line": 53,"col": 50,"name": "lpFileName"},{"file": 87,"line": 53,"col": 76,"name": "lpFindFileData"},{"file": 87,"line": 101,"col": 4,"name": "hFile"},{"file": 87,"line": 102,"col": 4,"name": "lpszFilePath"},{"file": 87,"line": 103,"col": 4,"name": "cchFilePath"},{"file": 87,"line": 104,"col": 4,"name": "dwFlags"},{"file": 87,"line": 65,"col": 62,"name": "hConsoleOutput"},{"file": 87,"line": 65,"col": 86,"name": "lpConsoleScreenBufferInfo"},{"file": 87,"line": 130,"col": 48,"name": "lpAddress"},{"file": 87,"line": 130,"col": 68,"name": "dwSize"},{"file": 87,"line": 130,"col": 84,"name": "flAllocationType"},{"file": 87,"line": 130,"col": 109,"name": "flProtect"},{"file": 87,"line": 210,"col": 61,"name": "lpCriticalSection"},{"file": 87,"line": 2,"col": 63,"name": "First"},{"file": 87,"line": 2,"col": 79,"name": "Handler"},{"file": 87,"line": 41,"col": 55,"name": "lpSymlinkFileName"},{"file": 87,"line": 41,"col": 88,"name": "lpTargetFileName"},{"file": 87,"line": 41,"col": 120,"name": "dwFlags"},{"file": 87,"line": 134,"col": 4,"name": "lpExistingFileName"},{"file": 87,"line": 135,"col": 4,"name": "lpNewFileName"},{"file": 87,"line": 136,"col": 4,"name": "dwFlags"},{"file": 87,"line": 112,"col": 49,"name": "lpSystemInfo"},{"file": 87,"line": 51,"col": 47,"name": "exit_code"},{"file": 87,"line": 157,"col": 4,"name": "in_hFile"},{"file": 87,"line": 158,"col": 4,"name": "out_lpBuffer"},{"file": 87,"line": 159,"col": 4,"name": "in_nNumberOfBytesToRead"},{"file": 87,"line": 160,"col": 4,"name": "out_lpNumberOfBytesRead"},{"file": 87,"line": 161,"col": 4,"name": "in_out_lpOverlapped"},{"file": 87,"line": 3,"col": 66,"name": "Handle"},{"file": 87,"line": 67,"col": 56,"name": "nBufferLength"},{"file": 87,"line": 67,"col": 78,"name": "lpBuffer"},{"file": 87,"line": 22,"col": 4,"name": "hReadPipe"},{"file": 87,"line": 23,"col": 4,"name": "hWritePipe"},{"file": 87,"line": 24,"col": 4,"name": "lpPipeAttributes"},{"file": 87,"line": 25,"col": 4,"name": "nSize"},{"file": 87,"line": 124,"col": 45,"name": "hHeap"},{"file": 87,"line": 124,"col": 60,"name": "dwFlags"},{"file": 87,"line": 124,"col": 76,"name": "dwBytes"},{"file": 87,"line": 202,"col": 47,"name": "hFile"},{"file": 87,"line": 202,"col": 62,"name": "lpBuffer"},{"file": 87,"line": 202,"col": 85,"name": "nNumberOfBytesToWrite"},{"file": 87,"line": 202,"col": 115,"name": "lpOverlapped"},{"file": 87,"line": 202,"col": 143,"name": "lpCompletionRoutine"},{"file": 87,"line": 115,"col": 46,"name": "flOptions"},{"file": 87,"line": 115,"col": 64,"name": "dwInitialSize"},{"file": 87,"line": 115,"col": 87,"name": "dwMaximumSize"},{"file": 87,"line": 164,"col": 52,"name": "lpPathName"},{"file": 87,"line": 80,"col": 54,"name": "lpFileName"},{"file": 87,"line": 215,"col": 55,"name": "InitOnce"},{"file": 87,"line": 215,"col": 77,"name": "InitFn"},{"file": 87,"line": 215,"col": 99,"name": "Parameter"},{"file": 87,"line": 215,"col": 120,"name": "Context"},{"file": 87,"line": 57,"col": 50,"name": "dwFlags"},{"file": 87,"line": 57,"col": 66,"name": "lpSource"},{"file": 87,"line": 57,"col": 85,"name": "dwMessageId"},{"file": 87,"line": 57,"col": 105,"name": "dwLanguageId"},{"file": 87,"line": 57,"col": 126,"name": "lpBuffer"},{"file": 87,"line": 57,"col": 144,"name": "nSize"},{"file": 87,"line": 57,"col": 158,"name": "Arguments"},{"file": 87,"line": 128,"col": 48,"name": "hHeap"},{"file": 87,"line": 128,"col": 63,"name": "dwFlags"},{"file": 87,"line": 128,"col": 79,"name": "lpMem"},{"file": 87,"line": 84,"col": 52,"name": "lpModuleName"},{"file": 87,"line": 208,"col": 47,"name": "hModule"},{"file": 87,"line": 59,"col": 59,"name": "penv"},{"file": 87,"line": 143,"col": 61,"name": "lpFrequency"},{"file": 87,"line": 82,"col": 54,"name": "hModule"},{"file": 87,"line": 82,"col": 73,"name": "lpFilename"},{"file": 87,"line": 82,"col": 93,"name": "nSize"},{"file": 87,"line": 107,"col": 55,"name": "hFile"},{"file": 87,"line": 107,"col": 70,"name": "lpOverlapped"},{"file": 87,"line": 107,"col": 97,"name": "lpNumberOfBytesTransferred"},{"file": 87,"line": 107,"col": 133,"name": "bWait"},{"file": 87,"line": 119,"col": 47,"name": "hHeap"},{"file": 87,"line": 119,"col": 62,"name": "dwFlags"},{"file": 87,"line": 45,"col": 48,"name": "lpThreadAttributes"},{"file": 87,"line": 45,"col": 92,"name": "dwStackSize"},{"file": 87,"line": 45,"col": 113,"name": "lpStartAddress"},{"file": 87,"line": 45,"col": 153,"name": "lpParameter"},{"file": 87,"line": 45,"col": 175,"name": "dwCreationFlags"},{"file": 87,"line": 45,"col": 199,"name": "lpThreadId"},{"file": 87,"line": 55,"col": 49,"name": "hFindFile"},{"file": 87,"line": 55,"col": 68,"name": "lpFindFileData"},{"file": 87,"line": 120,"col": 47,"name": "hHeap"},{"file": 87,"line": 120,"col": 62,"name": "dwFlags"},{"file": 87,"line": 120,"col": 78,"name": "lpSummary"},{"file": 87,"line": 186,"col": 52,"name": "hProcess"},{"file": 87,"line": 186,"col": 70,"name": "uExitCode"},{"file": 87,"line": 117,"col": 47,"name": "hHeap"},{"file": 87,"line": 117,"col": 62,"name": "dwFlags"},{"file": 87,"line": 117,"col": 78,"name": "lpMem"},{"file": 87,"line": 117,"col": 94,"name": "dwBytes"},{"file": 87,"line": 141,"col": 59,"name": "lpPerformanceCount"},{"file": 87,"line": 139,"col": 62,"name": "CompletionPort"},{"file": 87,"line": 139,"col": 86,"name": "dwNumberOfBytesTransferred"},{"file": 87,"line": 139,"col": 121,"name": "dwCompletionKey"},{"file": 87,"line": 139,"col": 149,"name": "lpOverlapped"},{"file": 87,"line": 204,"col": 48,"name": "lpLibFileName"},{"file": 87,"line": 146,"col": 4,"name": "hDirectory"},{"file": 87,"line": 147,"col": 4,"name": "lpBuffer"},{"file": 87,"line": 148,"col": 4,"name": "nBufferLength"},{"file": 87,"line": 149,"col": 4,"name": "bWatchSubtree"},{"file": 87,"line": 150,"col": 4,"name": "dwNotifyFilter"},{"file": 87,"line": 151,"col": 4,"name": "lpBytesReturned"},{"file": 87,"line": 152,"col": 4,"name": "lpOverlapped"},{"file": 87,"line": 153,"col": 4,"name": "lpCompletionRoutine"},{"file": 87,"line": 5,"col": 46,"name": "hFile"},{"file": 87,"line": 5,"col": 61,"name": "lpOverlapped"},{"file": 87,"line": 54,"col": 45,"name": "hFindFile"},{"file": 87,"line": 9,"col": 52,"name": "lpPathName"},{"file": 87,"line": 9,"col": 78,"name": "lpSecurityAttributes"},{"file": 87,"line": 94,"col": 4,"name": "in_hFile"},{"file": 87,"line": 95,"col": 4,"name": "in_FileInformationClass"},{"file": 87,"line": 96,"col": 4,"name": "out_lpFileInformation"},{"file": 87,"line": 97,"col": 4,"name": "in_dwBufferSize"},{"file": 87,"line": 166,"col": 59,"name": "hConsoleOutput"},{"file": 87,"line": 166,"col": 83,"name": "wAttributes"},{"file": 87,"line": 190,"col": 43,"name": "dwTlsIndex"},{"file": 87,"line": 206,"col": 50,"name": "hModule"},{"file": 87,"line": 206,"col": 68,"name": "lpProcName"},{"file": 87,"line": 118,"col": 44,"name": "hHeap"},{"file": 87,"line": 118,"col": 59,"name": "dwFlags"},{"file": 87,"line": 118,"col": 75,"name": "lpMem"},{"file": 87,"line": 126,"col": 44,"name": "hHeap"},{"file": 87,"line": 126,"col": 59,"name": "dwFlags"},{"file": 87,"line": 126,"col": 75,"name": "lpMem"},{"file": 87,"line": 212,"col": 56,"name": "lpCriticalSection"},{"file": 87,"line": 169,"col": 4,"name": "in_fFile"},{"file": 87,"line": 170,"col": 4,"name": "in_liDistanceToMove"},{"file": 87,"line": 171,"col": 4,"name": "out_opt_ldNewFilePointer"},{"file": 87,"line": 172,"col": 4,"name": "in_dwMoveMethod"},{"file": 87,"line": 213,"col": 57,"name": "lpCriticalSection"},{"file": 87,"line": 110,"col": 61,"name": "CompletionPort"},{"file": 87,"line": 110,"col": 85,"name": "lpNumberOfBytesTransferred"},{"file": 87,"line": 110,"col": 122,"name": "lpCompletionKey"},{"file": 87,"line": 110,"col": 151,"name": "lpOverlapped"},{"file": 87,"line": 110,"col": 180,"name": "dwMilliseconds"},{"file": 87,"line": 122,"col": 48,"name": "in_nStdHandle"},{"file": 87,"line": 113,"col": 59},{"file": 87,"line": 47,"col": 47,"name": "lpFileName"},{"file": 87,"line": 74,"col": 59,"name": "lpName"},{"file": 87,"line": 74,"col": 75,"name": "lpBuffer"},{"file": 87,"line": 74,"col": 93,"name": "nSize"},{"file": 87,"line": 176,"col": 4,"name": "hFile"},{"file": 87,"line": 177,"col": 4,"name": "lpCreationTime"},{"file": 87,"line": 178,"col": 4,"name": "lpLastAccessTime"},{"file": 87,"line": 179,"col": 4,"name": "lpLastWriteTime"},{"file": 87,"line": 12,"col": 4,"name": "lpFileName"},{"file": 87,"line": 13,"col": 4,"name": "dwDesiredAccess"},{"file": 87,"line": 14,"col": 4,"name": "dwShareMode"},{"file": 87,"line": 15,"col": 4,"name": "lpSecurityAttributes"},{"file": 87,"line": 16,"col": 4,"name": "dwCreationDisposition"},{"file": 87,"line": 17,"col": 4,"name": "dwFlagsAndAttributes"},{"file": 87,"line": 18,"col": 4,"name": "hTemplateFile"},{"file": 87,"line": 78,"col": 49,"name": "hFile"},{"file": 87,"line": 78,"col": 64,"name": "lpFileSize"},{"file": 87,"line": 89,"col": 4,"name": "hFile"},{"file": 87,"line": 90,"col": 4,"name": "lpFileInformation"},{"file": 87,"line": 49,"col": 51,"name": "hSourceProcessHandle"},{"file": 87,"line": 49,"col": 81,"name": "hSourceHandle"},{"file": 87,"line": 49,"col": 104,"name": "hTargetProcessHandle"},{"file": 87,"line": 49,"col": 134,"name": "lpTargetHandle"},{"file": 87,"line": 49,"col": 159,"name": "dwDesiredAccess"},{"file": 87,"line": 49,"col": 183,"name": "bInheritHandle"},{"file": 87,"line": 49,"col": 205,"name": "dwOptions"},{"file": 87,"line": 29,"col": 4,"name": "lpApplicationName"},{"file": 87,"line": 30,"col": 4,"name": "lpCommandLine"},{"file": 87,"line": 31,"col": 4,"name": "lpProcessAttributes"},{"file": 87,"line": 32,"col": 4,"name": "lpThreadAttributes"},{"file": 87,"line": 33,"col": 4,"name": "bInheritHandles"},{"file": 87,"line": 34,"col": 4,"name": "dwCreationFlags"},{"file": 87,"line": 35,"col": 4,"name": "lpEnvironment"},{"file": 87,"line": 36,"col": 4,"name": "lpCurrentDirectory"},{"file": 87,"line": 37,"col": 4,"name": "lpStartupInfo"},{"file": 87,"line": 38,"col": 4,"name": "lpProcessInformation"},{"file": 82,"line": 264,"col": 21,"name": "self"},{"file": 82,"line": 264,"col": 36,"name": "option"},{"file": 82,"line": 237,"col": 22,"name": "handle"},{"file": 82,"line": 237,"col": 42,"name": "flags"},{"file": 82,"line": 233,"col": 17,"name": "self"},{"file": 82,"line": 406,"col": 18,"name": "self"},{"file": 82,"line": 406,"col": 34,"name": "backlog"},{"file": 82,"line": 448,"col": 18,"name": "self"},{"file": 82,"line": 448,"col": 34,"name": "flags"},{"file": 82,"line": 448,"col": 59,"name": "incoming"},{"file": 82,"line": 448,"col": 92,"name": "token"},{"file": 82,"line": 472,"col": 19,"name": "self"},{"file": 82,"line": 472,"col": 35,"name": "address"},{"file": 82,"line": 472,"col": 59,"name": "buffers"},{"file": 82,"line": 472,"col": 78,"name": "token"},{"file": 82,"line": 395,"col": 16,"name": "self"},{"file": 82,"line": 395,"col": 32,"name": "address"},{"file": 82,"line": 199,"col": 15,"name": "flags"},{"file": 82,"line": 480,"col": 19,"name": "self"},{"file": 82,"line": 480,"col": 35,"name": "address"},{"file": 82,"line": 480,"col": 65,"name": "buffers"},{"file": 82,"line": 480,"col": 90,"name": "token"},{"file": 82,"line": 241,"col": 21,"name": "self"},{"file": 82,"line": 415,"col": 19,"name": "self"},{"file": 82,"line": 415,"col": 35,"name": "address"},{"file": 82,"line": 415,"col": 64,"name": "token"},{"file": 82,"line": 245,"col": 24,"name": "self"},{"file": 82,"line": 245,"col": 46,"name": "event_flags","comptime": true},{"file": 82,"line": 254,"col": 21,"name": "self"},{"file": 82,"line": 254,"col": 37,"name": "option"},{"file": 82,"line": 433,"col": 23,"name": "errno_value"},{"file": 82,"line": 488,"col": 16,"name": "handle"},{"file": 82,"line": 488,"col": 36,"name": "address"},{"file": 82,"line": 488,"col": 50,"name": "buffers"},{"file": 82,"line": 488,"col": 64,"name": "Transfer","comptime": true}],"files": ["C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zap.zig","C:\\Users\\kbutcher\\AppData\\Local\\zig\\stage1\\builtin\\Xz6CWUB0ve5oNChcTrlrsnVnbYi3KtqKGXjUiGyXkbNj1QuUE4OrxxI9mUu67PjH\\builtin.zig","C:\\Dev\\bin\\lib\\zig\\std\\std.zig","C:\\Dev\\bin\\lib\\zig\\std\\special\\test_runner.zig","C:\\Dev\\bin\\lib\\zig\\std\\math.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zync\\src\\atomic.zig","C:\\Dev\\bin\\lib\\zig\\std\\io\\in_stream.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zuma\\src\\backend\\windows.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zync\\src\\utils.zig","C:\\Dev\\bin\\lib\\zig\\std\\array_list.zig","C:\\Dev\\bin\\lib\\zig\\std\\io.zig","C:\\Dev\\bin\\lib\\zig\\std\\mem.zig","C:\\Dev\\bin\\lib\\zig\\std\\os.zig","C:\\Dev\\bin\\lib\\zig\\std\\debug.zig","C:\\Dev\\bin\\lib\\zig\\std\\dwarf.zig","C:\\Dev\\bin\\lib\\zig\\std\\testing.zig","C:\\Dev\\bin\\lib\\zig\\std\\event.zig","C:\\Dev\\bin\\lib\\zig\\std\\unicode.zig","C:\\Dev\\bin\\lib\\zig\\std\\build.zig","C:\\Dev\\bin\\lib\\zig\\std\\http.zig","C:\\Dev\\bin\\lib\\zig\\std\\elf.zig","C:\\Dev\\bin\\lib\\zig\\std\\ascii.zig","C:\\Dev\\bin\\lib\\zig\\std\\hash_map.zig","C:\\Dev\\bin\\lib\\zig\\std\\fmt.zig","C:\\Dev\\bin\\lib\\zig\\std\\base64.zig","C:\\Dev\\bin\\lib\\zig\\std\\atomic.zig","C:\\Dev\\bin\\lib\\zig\\std\\json.zig","C:\\Dev\\bin\\lib\\zig\\std\\pdb.zig","C:\\Dev\\bin\\lib\\zig\\std\\coff.zig","C:\\Dev\\bin\\lib\\zig\\std\\crypto.zig","C:\\Dev\\bin\\lib\\zig\\std\\hash.zig","C:\\Dev\\bin\\lib\\zig\\std\\sort.zig","C:\\Dev\\bin\\lib\\zig\\std\\c.zig","C:\\Dev\\bin\\lib\\zig\\std\\cstr.zig","C:\\Dev\\bin\\lib\\zig\\std\\rb.zig","C:\\Dev\\bin\\lib\\zig\\std\\rand.zig","C:\\Dev\\bin\\lib\\zig\\std\\meta.zig","C:\\Dev\\bin\\lib\\zig\\std\\net.zig","C:\\Dev\\bin\\lib\\zig\\std\\fs.zig","C:\\Dev\\bin\\lib\\zig\\std\\heap.zig","C:\\Dev\\bin\\lib\\zig\\std\\time.zig","C:\\Dev\\bin\\lib\\zig\\std\\packed_int_array.zig","C:\\Dev\\bin\\lib\\zig\\std\\valgrind.zig","C:\\Dev\\bin\\lib\\zig\\std\\zig.zig","C:\\Dev\\bin\\lib\\zig\\std\\process.zig","C:\\Dev\\bin\\lib\\zig\\std\\macho.zig","C:\\Dev\\bin\\lib\\zig\\std\\linked_list.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zync\\src\\lock.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\complex.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\big.zig","C:\\Dev\\bin\\lib\\zig\\std\\fs\\file.zig","C:\\Dev\\bin\\lib\\zig\\std\\fs\\path.zig","C:\\Dev\\bin\\lib\\zig\\std\\statically_initialized_mutex.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zuma\\src\\affinity.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zio\\src\\io.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zio\\src\\event.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zio\\src\\socket.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zio\\src\\address.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zio\\src\\backend\\windows.zig","C:\\Dev\\bin\\lib\\zig\\std\\hash\\wyhash.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\windows\\bits.zig","C:\\Dev\\bin\\lib\\zig\\std\\progress.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\windows.zig","C:\\Dev\\bin\\lib\\zig\\std\\meta\\trait.zig","C:\\Dev\\bin\\lib\\zig\\std\\dynamic_library.zig","C:\\Dev\\bin\\lib\\zig\\std\\thread.zig","C:\\Dev\\bin\\lib\\zig\\std\\buf_set.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\bits\\windows.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\bits.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\linux.zig","C:\\Dev\\bin\\lib\\zig\\std\\buffer.zig","C:\\Dev\\bin\\lib\\zig\\std\\child_process.zig","C:\\Dev\\bin\\lib\\zig\\std\\fmt\\errol.zig","C:\\Dev\\bin\\lib\\zig\\std\\buf_map.zig","C:\\Dev\\bin\\lib\\zig\\std\\hash\\auto_hash.zig","C:\\Dev\\bin\\lib\\zig\\std\\c\\windows.zig","C:\\Dev\\bin\\lib\\zig\\std\\spinlock.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zync\\src\\futex.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\big\\rational.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\big\\int.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zuma\\src\\memory.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zuma\\src\\thread.zig","C:\\Users\\kbutcher\\Desktop\\gtest\\zap\\zio\\src\\backend\\posix.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\windows\\lang.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\windows\\sublang.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\windows\\error.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\windows\\ntdll.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\windows\\kernel32.zig","C:\\Dev\\bin\\lib\\zig\\std\\os\\linux\\x86_64.zig","C:\\Dev\\bin\\lib\\zig\\std\\special\\panic.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\fabs.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\signbit.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\isnan.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\isinf.zig","C:\\Dev\\bin\\lib\\zig\\std\\fmt\\errol\\enum3.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\frexp.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\floor.zig","C:\\Dev\\bin\\lib\\zig\\std\\special\\start.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\modf.zig","C:\\Dev\\bin\\lib\\zig\\std\\fmt\\errol\\lookup.zig","C:\\Dev\\bin\\lib\\zig\\std\\segmented_list.zig","C:\\Dev\\bin\\lib\\zig\\std\\lazy_init.zig","C:\\Dev\\bin\\lib\\zig\\std\\priority_queue.zig","C:\\Dev\\bin\\lib\\zig\\std\\bloom_filter.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\ceil.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\cosh.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\hypot.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\cbrt.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\round.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\sinh.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\asinh.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\sin.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\acosh.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\inf.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\atanh.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\tan.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\ilogb.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\cos.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\asin.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\atan.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\nan.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\pow.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\log2.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\scalbn.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\expm1.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\acos.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\exp.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\log10.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\log.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\isfinite.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\isnormal.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\copysign.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\fma.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\sqrt.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\tanh.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\trunc.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\exp2.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\log1p.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\powi.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\atan2.zig","C:\\Dev\\bin\\lib\\zig\\std\\math\\ln.zig"]};